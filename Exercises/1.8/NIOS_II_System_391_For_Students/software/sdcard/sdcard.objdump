
sdcard.elf:     file format elf32-littlenios2
sdcard.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000a3fc memsz 0x0000a3fc flags r-x
    LOAD off    0x0000b41c vaddr 0x0100a41c paddr 0x0100bee8 align 2**12
         filesz 0x00001acc memsz 0x00001acc flags rw-
    LOAD off    0x0000d9b4 vaddr 0x0100d9b4 paddr 0x0100d9b4 align 2**12
         filesz 0x00000000 memsz 0x0000087c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000a104  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000160  0100a2bc  0100a2bc  0000b2bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001acc  0100a41c  0100bee8  0000b41c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000087c  0100d9b4  0100d9b4  0000d9b4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000cee8  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000938  00000000  00000000  0000cf10  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001573  00000000  00000000  0000d848  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0001d124  00000000  00000000  0000edbb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005394  00000000  00000000  0002bedf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000eb31  00000000  00000000  00031273  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000015e0  00000000  00000000  0003fda4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000188a  00000000  00000000  00041384  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000046ca  00000000  00000000  00042c0e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  000472d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002f8  00000000  00000000  00047308  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0004a626  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0004a629  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0004a635  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0004a636  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0004a637  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0004a642  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0004a64d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0004a658  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000043  00000000  00000000  0004a663  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00086cce  00000000  00000000  0004a6a6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
0100a2bc l    d  .rodata	00000000 .rodata
0100a41c l    d  .rwdata	00000000 .rwdata
0100d9b4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
01000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
0100a41c l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01001c58 l     F .text	00000058 std
01001d64 l     F .text	00000008 __fp_lock
01001d6c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
01002d2c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01002d8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01002e8c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01002fac l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100308c l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
010031e8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
01003414 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0100bed8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
010036b0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100adcc l     O .rwdata	00001060 jtag_uart_0
0100be2c l     O .rwdata	0000002c character_lcd_0
0100be58 l     O .rwdata	0000002c rs232_0
0100be84 l     O .rwdata	0000002c Altera_UP_SD_Card_Avalon_Interface_0
010037cc l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 Altera_UP_SD_Card_Avalon_Interface.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01007e20 l     F .text	0000022c altera_avalon_jtag_uart_irq
0100804c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
010086c8 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
010092d8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
010094c4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
010097c0 l     F .text	000000dc alt_file_locked
01009a24 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0100a0a4 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0100a258 l     F .text	00000040 alt_sim_halt
0100d9d8 g     O .bss	00000004 aux_status_register
01002ad0 g     F .text	00000070 _isatty_r
01003248 g     F .text	0000006c alt_main
01000320 g     F .text	000000a0 _puts_r
0100dfa0 g     O .bss	00000100 alt_irq
01002b40 g     F .text	00000078 _lseek_r
0100bee8 g       *ABS*	00000000 __flash_rwdata_start
01008840 g     F .text	00000034 alt_up_character_lcd_send_cmd
01003bb4 g     F .text	000001b0 Check_for_Master_Boot_Record
0100e230 g       *ABS*	00000000 __alt_heap_start
01007a54 g     F .text	000001cc alt_up_sd_card_fclose
0100270c g     F .text	00000068 __sseek
01001cc0 g     F .text	000000a4 __sinit
01001dc0 g     F .text	00000068 __sfmoreglue
010032d4 g     F .text	00000020 __malloc_unlock
01008f28 g     F .text	00000090 alt_up_rs232_read_fd
0100d9fc g     O .bss	00000004 current_sector_modified
010011a8 g     F .text	000000e0 memmove
01001db0 g     F .text	00000010 _cleanup
0100661c g     F .text	000000c8 alt_up_sd_card_is_Present
010038cc g     F .text	00000050 Save_Modified_Sector
00000000  w      *UND*	00000000 __errno
010087c4 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000001c __reset
0100d9f4 g     O .bss	00000004 fat_partition_size_in_512_byte_sectors
01000020 g       *ABS*	00000000 __flash_exceptions_start
01002a5c g     F .text	00000074 _fstat_r
0100d9c0 g     O .bss	00000004 errno
0100d9c8 g     O .bss	00000004 alt_argv
01013eb0 g       *ABS*	00000000 _gp
01006bdc g     F .text	000003a8 alt_up_sd_card_fopen
01006758 g     F .text	000000d4 alt_up_sd_card_find_first
0100d9e8 g     O .bss	00000004 command_argument_register
0100ac4c g     O .rwdata	00000180 alt_fd_list
01005e4c g     F .text	0000012c find_first_empty_record_in_root_directory
01009400 g     F .text	00000094 alt_find_dev
01001108 g     F .text	000000a0 memcpy
010089d8 g     F .text	0000004c alt_up_character_lcd_write_fd
01001da4 g     F .text	0000000c _cleanup_r
01009588 g     F .text	00000078 alt_io_redirect
0100a2bc g       *ABS*	00000000 __DTOR_END__
01008eb4 g     F .text	00000074 alt_up_rs232_read_data
010003c0 g     F .text	00000014 puts
01005a5c g     F .text	000001a4 find_first_empty_cluster
01006558 g     F .text	000000c4 alt_up_sd_card_open_dev
01008264 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01002eec g     F .text	000000c0 isatty
01009e20 g     F .text	00000090 alt_icache_flush
0100d9b4 g     O .bss	00000004 __malloc_top_pad
01000448 g     F .text	0000049c __sfvwrite_r
01004d38 g     F .text	000000c0 get_dir_divider_location
0100187c g     F .text	00000070 _sbrk_r
010049d8 g     F .text	000000d0 filename_to_upper_case
01006f84 g     F .text	00000090 alt_up_sd_card_set_attributes
01003d64 g     F .text	00000284 Read_File_Record_At_Offset
01002bb8 g     F .text	00000078 _read_r
0100bed0 g     O .rwdata	00000004 alt_max_fd
01008e1c g     F .text	00000050 alt_up_rs232_check_parity
010055f8 g     F .text	00000464 find_file_in_directory
01002938 g     F .text	00000110 _fclose_r
01001c24 g     F .text	00000034 fflush
0100d9b8 g     O .bss	00000004 __malloc_max_sbrked_mem
01009600 g     F .text	000001c0 alt_irq_register
010066e4 g     F .text	00000074 alt_up_sd_card_is_FAT16
010030f8 g     F .text	000000f0 lseek
0100beb4 g     O .rwdata	00000004 _global_impure_ptr
010050e4 g     F .text	00000514 get_home_directory_cluster_for_file
01001288 g     F .text	000005f4 _realloc_r
0100e230 g       *ABS*	00000000 __bss_end
01009b1c g     F .text	0000010c alt_tick
0100da00 g     O .bss	00000004 current_sector_index
01001d8c g     F .text	00000018 __fp_lock_all
01009a84 g     F .text	00000098 alt_alarm_stop
01003ad0 g     F .text	000000e4 mark_cluster
0100da04 g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000cc alt_irq_handler
0100ac24 g     O .rwdata	00000028 alt_dev_null
01005f78 g     F .text	000001b8 convert_filename_to_name_extension
01008cc0 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
010091e0 g     F .text	00000044 alt_dcache_flush_all
0100d9d4 g     O .bss	00000004 is_sd_card_formated_as_FAT16
01005c00 g     F .text	0000024c find_first_empty_record_in_a_subdirectory
0100bee8 g       *ABS*	00000000 __ram_rwdata_end
0100bec8 g     O .rwdata	00000008 alt_dev_list
01003590 g     F .text	00000120 write
0100d9f8 g     O .bss	00000004 device_pointer
0100a41c g       *ABS*	00000000 __ram_rodata_end
01002db8 g     F .text	000000d4 fstat
01008fb8 g     F .text	00000094 alt_up_rs232_write_fd
0100e230 g       *ABS*	00000000 end
01007d68 g     F .text	000000b8 altera_avalon_jtag_uart_init
0100a2b8 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
0100873c g     F .text	00000088 alt_avalon_timer_sc_init
01008488 g     F .text	00000240 altera_avalon_jtag_uart_write
01001cb0 g     F .text	00000004 __sfp_lock_acquire
01001024 g     F .text	000000e4 memchr
010088e8 g     F .text	00000078 alt_up_character_lcd_write
01002044 g     F .text	00000314 _free_r
0100a0a8 g     F .text	000001b0 __call_exitprocs
0100bebc g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000004c _start
0100da08 g     O .bss	00000004 _alt_tick_rate
0100da0c g     O .bss	00000004 _alt_nticks
010032f4 g     F .text	00000120 read
01003744 g     F .text	00000088 alt_sys_init
01008b4c g     F .text	000000b0 alt_up_character_lcd_shift_display
01009f70 g     F .text	00000134 __register_exitproc
01008ddc g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
01008bfc g     F .text	00000090 alt_up_character_lcd_erase_pos
010080fc g     F .text	00000074 altera_avalon_jtag_uart_close
0100a41c g       *ABS*	00000000 __ram_rwdata_start
0100a2bc g       *ABS*	00000000 __ram_rodata_start
0100da10 g     O .bss	00000028 __malloc_current_mallinfo
0100d9d0 g     O .bss	00000004 initialized
01007c20 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
01009d68 g     F .text	000000b8 alt_get_fd
0100da38 g     O .bss	00000014 search_data
010028c8 g     F .text	00000070 _close_r
01009efc g     F .text	00000074 memcmp
01007cd0 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
0100e230 g       *ABS*	00000000 __alt_stack_base
01007d18 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
010018ec g     F .text	0000013c __swsetup_r
01001e28 g     F .text	000000f0 __sfp
0100da4c g     O .bss	00000054 boot_sector_data
0100a81c g     O .rwdata	00000408 __malloc_av_
01001cbc g     F .text	00000004 __sinit_lock_release
010027f0 g     F .text	00000060 __sread
01008d48 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
01009c48 g     F .text	00000120 alt_find_file
01009224 g     F .text	000000b4 alt_dev_llist_insert
010032b4 g     F .text	00000020 __malloc_lock
010034d4 g     F .text	000000bc sbrk
01001a28 g     F .text	000001fc _fflush_r
0100d9b4 g       *ABS*	00000000 __bss_start
0100266c g     F .text	00000098 memset
01000204 g     F .text	0000011c main
0100d9cc g     O .bss	00000004 alt_envp
0100d9bc g     O .bss	00000004 __malloc_max_total_mem
01007c78 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01007014 g     F .text	0000008c alt_up_sd_card_get_attributes
01003804 g     F .text	000000c8 Write_Sector_Data
01007434 g     F .text	00000620 alt_up_sd_card_write
01008a9c g     F .text	000000b0 alt_up_character_lcd_shift_cursor
01002704 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01002a48 g     F .text	00000014 fclose
0100e0a0 g     O .bss	00000190 _atexit0
010008e4 g     F .text	00000740 _malloc_r
0100bed4 g     O .rwdata	00000004 alt_errno
01002420 g     F .text	000000b8 _fwalk
010088a8 g     F .text	00000040 alt_up_character_lcd_open_dev
01001f18 g     F .text	0000012c _malloc_trim_r
0100a2bc g       *ABS*	00000000 __CTOR_END__
0100d9dc g     O .bss	00000004 status_register
01008874 g     F .text	00000034 alt_up_character_lcd_init
0100d9e4 g     O .bss	00000004 command_register
0100a2bc g       *ABS*	00000000 __flash_rodata_start
0100a2bc g       *ABS*	00000000 __DTOR_LIST__
0100904c g     F .text	00000040 alt_up_rs232_open_dev
01003710 g     F .text	00000034 alt_irq_init
01003474 g     F .text	00000060 alt_release_fd
01003a18 g     F .text	000000b8 get_cluster_flag
01008c8c g     F .text	00000034 alt_up_character_lcd_cursor_off
01003fe8 g     F .text	000002b8 Write_File_Record_At_Offset
01009eb0 g     F .text	00000014 atexit
01002850 g     F .text	00000078 _write_r
010042a0 g     F .text	00000640 Check_for_DOS_FAT
01006130 g     F .text	000002d4 create_file
0100beb0 g     O .rwdata	00000004 _impure_ptr
0100d9e0 g     O .bss	00000004 CSD_register_w0
0100d9c4 g     O .bss	00000004 alt_argc
0100939c g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01001d74 g     F .text	00000018 __fp_unlock_all
0100bec0 g     O .rwdata	00000008 alt_fs_list
01004aa8 g     F .text	00000290 check_file_name_for_FAT16_compliance
0100d9ec g     O .bss	00000004 buffer_memory
01008cf4 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
01008e6c g     F .text	00000048 alt_up_rs232_write_data
01000020 g       *ABS*	00000000 __ram_exceptions_start
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0100d9f0 g     O .bss	00000004 fat_partition_offset_in_512_byte_sectors
0100bee8 g       *ABS*	00000000 _edata
0100e230 g       *ABS*	00000000 _end
0100daa0 g     O .bss	00000500 active_files
010001b8 g       *ABS*	00000000 __ram_exceptions_end
01006404 g     F .text	00000154 copy_file_record_name_to_string
01008170 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
010048e0 g     F .text	000000f8 Look_for_FAT16
01002774 g     F .text	0000007c __swrite
0100beb8 g     O .rwdata	00000004 __malloc_trim_threshold
01009c28 g     F .text	00000020 altera_nios2_qsys_irq_init
01009ec4 g     F .text	00000038 exit
0100682c g     F .text	000003b0 alt_up_sd_card_find_next
01002358 g     F .text	000000c8 _fwalk_reent
0100391c g     F .text	000000fc Read_Sector_Data
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01001cb4 g     F .text	00000004 __sfp_lock_release
01008960 g     F .text	00000078 alt_up_character_lcd_string
0100a298 g     F .text	00000020 _exit
0100908c g     F .text	00000154 alt_alarm_start
010070a0 g     F .text	00000394 alt_up_sd_card_read
010024d8 g     F .text	00000194 __smakebuf_r
010003d4 g     F .text	00000074 strlen
0100989c g     F .text	00000188 open
01009494 g     F .text	00000030 alt_icache_flush_all
01008a24 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0100bedc g     O .rwdata	00000004 alt_priority_mask
0100bee0 g     O .rwdata	00000008 alt_alarm_list
01009338 g     F .text	00000064 _do_ctors
01008da0 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
01002c30 g     F .text	000000fc close
0100300c g     F .text	00000080 alt_load
01004df8 g     F .text	000002ec match_file_record_to_name_ext
00000000  w      *UND*	00000000 free
01001cb8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

01000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 1000000:	00900014 	movui	r2,16384
#endif

0:
    initi r2
 1000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 1000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 100000c:	00bffd16 	blt	zero,r2,1000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000010:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000014:	08406e14 	ori	at,at,440
    jmp r1
 1000018:	0800683a 	jmp	at
 100001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18f7e804 	addi	r3,r3,-8288
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18f7e804 	addi	r3,r3,-8288
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 10001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 10001bc:	10000033 	initd	0(r2)
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 10001c0:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 10001c4:	00bffd16 	blt	zero,r2,10001bc <_start+0x4>
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001c8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001cc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001d0:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001d4:	d68fac14 	ori	gp,gp,16048
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001d8:	00804034 	movhi	r2,256
    ori r2, r2, %lo(__bss_start)
 10001dc:	10b66d14 	ori	r2,r2,55732

    movhi r3, %hi(__bss_end)
 10001e0:	00c04034 	movhi	r3,256
    ori r3, r3, %lo(__bss_end)
 10001e4:	18f88c14 	ori	r3,r3,57904

    beq r2, r3, 1f
 10001e8:	10c00326 	beq	r2,r3,10001f8 <_start+0x40>

0:
    stw zero, (r2)
 10001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001f4:	10fffd36 	bltu	r2,r3,10001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001f8:	100300c0 	call	100300c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001fc:	10032480 	call	1003248 <alt_main>

01000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 1000200:	003fff06 	br	1000200 <alt_after_alt_main>

01000204 <main>:
#include <stdio.h>
#include <altera_up_sd_card_avalon_interface.h>

int main(void){
 1000204:	defffb04 	addi	sp,sp,-20
 1000208:	dfc00415 	stw	ra,16(sp)
 100020c:	df000315 	stw	fp,12(sp)
 1000210:	df000304 	addi	fp,sp,12
	alt_up_sd_card_dev *device_reference = NULL;
 1000214:	e03ffe15 	stw	zero,-8(fp)
	int connected = 0;
 1000218:	e03ffd15 	stw	zero,-12(fp)

	printf("Opening SDCard\n");
 100021c:	01004074 	movhi	r4,257
 1000220:	2128af04 	addi	r4,r4,-23876
 1000224:	10003c00 	call	10003c0 <puts>
	if((device_reference = alt_up_sd_card_open_dev("/dev/Altera_UP_SD_Card_Avalon_Interface_0")) == NULL)
 1000228:	01004074 	movhi	r4,257
 100022c:	2128b304 	addi	r4,r4,-23860
 1000230:	10065580 	call	1006558 <alt_up_sd_card_open_dev>
 1000234:	e0bffe15 	stw	r2,-8(fp)
 1000238:	e0bffe17 	ldw	r2,-8(fp)
 100023c:	1004c03a 	cmpne	r2,r2,zero
 1000240:	1000051e 	bne	r2,zero,1000258 <main+0x54>
	{
		printf("SDCard Open FAILED\n");
 1000244:	01004074 	movhi	r4,257
 1000248:	2128be04 	addi	r4,r4,-23816
 100024c:	10003c00 	call	10003c0 <puts>
		return 0 ;
 1000250:	e03fff15 	stw	zero,-4(fp)
 1000254:	00002c06 	br	1000308 <main+0x104>
	}
	else
		printf("SDCard Open PASSED\n");
 1000258:	01004074 	movhi	r4,257
 100025c:	2128c304 	addi	r4,r4,-23796
 1000260:	10003c00 	call	10003c0 <puts>


	if (device_reference != NULL ) {
 1000264:	e0bffe17 	ldw	r2,-8(fp)
 1000268:	1005003a 	cmpeq	r2,r2,zero
 100026c:	1000221e 	bne	r2,zero,10002f8 <main+0xf4>
 1000270:	00000006 	br	1000274 <main+0x70>
		while(1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())){
 1000274:	e0bffd17 	ldw	r2,-12(fp)
 1000278:	1004c03a 	cmpne	r2,r2,zero
 100027c:	1000131e 	bne	r2,zero,10002cc <main+0xc8>
 1000280:	100661c0 	call	100661c <alt_up_sd_card_is_Present>
 1000284:	1005003a 	cmpeq	r2,r2,zero
 1000288:	1000101e 	bne	r2,zero,10002cc <main+0xc8>
				printf("Card connected.\n");
 100028c:	01004074 	movhi	r4,257
 1000290:	2128c804 	addi	r4,r4,-23776
 1000294:	10003c00 	call	10003c0 <puts>
				if (alt_up_sd_card_is_FAT16()) {
 1000298:	10066e40 	call	10066e4 <alt_up_sd_card_is_FAT16>
 100029c:	1005003a 	cmpeq	r2,r2,zero
 10002a0:	1000041e 	bne	r2,zero,10002b4 <main+0xb0>
					printf("FAT16 file system detected.\n");
 10002a4:	01004074 	movhi	r4,257
 10002a8:	2128cc04 	addi	r4,r4,-23760
 10002ac:	10003c00 	call	10003c0 <puts>
 10002b0:	00000306 	br	10002c0 <main+0xbc>
				}
				else {
					printf("Unknown file system.\n");
 10002b4:	01004074 	movhi	r4,257
 10002b8:	2128d304 	addi	r4,r4,-23732
 10002bc:	10003c00 	call	10003c0 <puts>
				}
				connected = 1;
 10002c0:	00800044 	movi	r2,1
 10002c4:	e0bffd15 	stw	r2,-12(fp)
		printf("SDCard Open PASSED\n");


	if (device_reference != NULL ) {
		while(1) {
			if ((connected == 0) && (alt_up_sd_card_is_Present())){
 10002c8:	003fea06 	br	1000274 <main+0x70>
				}
				else {
					printf("Unknown file system.\n");
				}
				connected = 1;
			} else if((connected == 1) && (alt_up_sd_card_is_Present() == false)){
 10002cc:	e0bffd17 	ldw	r2,-12(fp)
 10002d0:	10800058 	cmpnei	r2,r2,1
 10002d4:	103fe71e 	bne	r2,zero,1000274 <main+0x70>
 10002d8:	100661c0 	call	100661c <alt_up_sd_card_is_Present>
 10002dc:	1004c03a 	cmpne	r2,r2,zero
 10002e0:	103fe41e 	bne	r2,zero,1000274 <main+0x70>
				printf("Card disconnected.\n");
 10002e4:	01004074 	movhi	r4,257
 10002e8:	2128d904 	addi	r4,r4,-23708
 10002ec:	10003c00 	call	10003c0 <puts>
				connected =0;
 10002f0:	e03ffd15 	stw	zero,-12(fp)
			}
		}
 10002f4:	003fdf06 	br	1000274 <main+0x70>
	}
	else
		printf("Can't open device\n");
 10002f8:	01004074 	movhi	r4,257
 10002fc:	2128de04 	addi	r4,r4,-23688
 1000300:	10003c00 	call	10003c0 <puts>

	return 0;
 1000304:	e03fff15 	stw	zero,-4(fp)
 1000308:	e0bfff17 	ldw	r2,-4(fp)
}
 100030c:	e037883a 	mov	sp,fp
 1000310:	dfc00117 	ldw	ra,4(sp)
 1000314:	df000017 	ldw	fp,0(sp)
 1000318:	dec00204 	addi	sp,sp,8
 100031c:	f800283a 	ret

01000320 <_puts_r>:
 1000320:	defff604 	addi	sp,sp,-40
 1000324:	dc400715 	stw	r17,28(sp)
 1000328:	2023883a 	mov	r17,r4
 100032c:	2809883a 	mov	r4,r5
 1000330:	dfc00915 	stw	ra,36(sp)
 1000334:	dcc00815 	stw	r19,32(sp)
 1000338:	2827883a 	mov	r19,r5
 100033c:	10003d40 	call	10003d4 <strlen>
 1000340:	89400217 	ldw	r5,8(r17)
 1000344:	00c04074 	movhi	r3,257
 1000348:	18e8e304 	addi	r3,r3,-23668
 100034c:	01c00044 	movi	r7,1
 1000350:	12000044 	addi	r8,r2,1
 1000354:	d8c00515 	stw	r3,20(sp)
 1000358:	d9c00615 	stw	r7,24(sp)
 100035c:	d8c00304 	addi	r3,sp,12
 1000360:	01c00084 	movi	r7,2
 1000364:	8809883a 	mov	r4,r17
 1000368:	d80d883a 	mov	r6,sp
 100036c:	d8c00015 	stw	r3,0(sp)
 1000370:	dcc00315 	stw	r19,12(sp)
 1000374:	da000215 	stw	r8,8(sp)
 1000378:	d9c00115 	stw	r7,4(sp)
 100037c:	d8800415 	stw	r2,16(sp)
 1000380:	10004480 	call	1000448 <__sfvwrite_r>
 1000384:	00ffffc4 	movi	r3,-1
 1000388:	10000626 	beq	r2,zero,10003a4 <_puts_r+0x84>
 100038c:	1805883a 	mov	r2,r3
 1000390:	dfc00917 	ldw	ra,36(sp)
 1000394:	dcc00817 	ldw	r19,32(sp)
 1000398:	dc400717 	ldw	r17,28(sp)
 100039c:	dec00a04 	addi	sp,sp,40
 10003a0:	f800283a 	ret
 10003a4:	00c00284 	movi	r3,10
 10003a8:	1805883a 	mov	r2,r3
 10003ac:	dfc00917 	ldw	ra,36(sp)
 10003b0:	dcc00817 	ldw	r19,32(sp)
 10003b4:	dc400717 	ldw	r17,28(sp)
 10003b8:	dec00a04 	addi	sp,sp,40
 10003bc:	f800283a 	ret

010003c0 <puts>:
 10003c0:	00804074 	movhi	r2,257
 10003c4:	10afac04 	addi	r2,r2,-16720
 10003c8:	200b883a 	mov	r5,r4
 10003cc:	11000017 	ldw	r4,0(r2)
 10003d0:	10003201 	jmpi	1000320 <_puts_r>

010003d4 <strlen>:
 10003d4:	208000cc 	andi	r2,r4,3
 10003d8:	2011883a 	mov	r8,r4
 10003dc:	1000161e 	bne	r2,zero,1000438 <strlen+0x64>
 10003e0:	20c00017 	ldw	r3,0(r4)
 10003e4:	017fbff4 	movhi	r5,65279
 10003e8:	297fbfc4 	addi	r5,r5,-257
 10003ec:	01e02074 	movhi	r7,32897
 10003f0:	39e02004 	addi	r7,r7,-32640
 10003f4:	1945883a 	add	r2,r3,r5
 10003f8:	11c4703a 	and	r2,r2,r7
 10003fc:	00c6303a 	nor	r3,zero,r3
 1000400:	1886703a 	and	r3,r3,r2
 1000404:	18000c1e 	bne	r3,zero,1000438 <strlen+0x64>
 1000408:	280d883a 	mov	r6,r5
 100040c:	380b883a 	mov	r5,r7
 1000410:	21000104 	addi	r4,r4,4
 1000414:	20800017 	ldw	r2,0(r4)
 1000418:	1187883a 	add	r3,r2,r6
 100041c:	1946703a 	and	r3,r3,r5
 1000420:	0084303a 	nor	r2,zero,r2
 1000424:	10c4703a 	and	r2,r2,r3
 1000428:	103ff926 	beq	r2,zero,1000410 <strlen+0x3c>
 100042c:	20800007 	ldb	r2,0(r4)
 1000430:	10000326 	beq	r2,zero,1000440 <strlen+0x6c>
 1000434:	21000044 	addi	r4,r4,1
 1000438:	20800007 	ldb	r2,0(r4)
 100043c:	103ffd1e 	bne	r2,zero,1000434 <strlen+0x60>
 1000440:	2205c83a 	sub	r2,r4,r8
 1000444:	f800283a 	ret

01000448 <__sfvwrite_r>:
 1000448:	30800217 	ldw	r2,8(r6)
 100044c:	defff504 	addi	sp,sp,-44
 1000450:	df000915 	stw	fp,36(sp)
 1000454:	dd800715 	stw	r22,28(sp)
 1000458:	dc800315 	stw	r18,12(sp)
 100045c:	dfc00a15 	stw	ra,40(sp)
 1000460:	ddc00815 	stw	r23,32(sp)
 1000464:	dd400615 	stw	r21,24(sp)
 1000468:	dd000515 	stw	r20,20(sp)
 100046c:	dcc00415 	stw	r19,16(sp)
 1000470:	dc400215 	stw	r17,8(sp)
 1000474:	dc000115 	stw	r16,4(sp)
 1000478:	302d883a 	mov	r22,r6
 100047c:	2039883a 	mov	fp,r4
 1000480:	2825883a 	mov	r18,r5
 1000484:	10001c26 	beq	r2,zero,10004f8 <__sfvwrite_r+0xb0>
 1000488:	29c0030b 	ldhu	r7,12(r5)
 100048c:	3880020c 	andi	r2,r7,8
 1000490:	10002726 	beq	r2,zero,1000530 <__sfvwrite_r+0xe8>
 1000494:	28800417 	ldw	r2,16(r5)
 1000498:	10002526 	beq	r2,zero,1000530 <__sfvwrite_r+0xe8>
 100049c:	3880008c 	andi	r2,r7,2
 10004a0:	b5400017 	ldw	r21,0(r22)
 10004a4:	10002826 	beq	r2,zero,1000548 <__sfvwrite_r+0x100>
 10004a8:	0021883a 	mov	r16,zero
 10004ac:	0023883a 	mov	r17,zero
 10004b0:	880d883a 	mov	r6,r17
 10004b4:	e009883a 	mov	r4,fp
 10004b8:	00810004 	movi	r2,1024
 10004bc:	80006e26 	beq	r16,zero,1000678 <__sfvwrite_r+0x230>
 10004c0:	800f883a 	mov	r7,r16
 10004c4:	91400717 	ldw	r5,28(r18)
 10004c8:	1400012e 	bgeu	r2,r16,10004d0 <__sfvwrite_r+0x88>
 10004cc:	100f883a 	mov	r7,r2
 10004d0:	90c00917 	ldw	r3,36(r18)
 10004d4:	183ee83a 	callr	r3
 10004d8:	1007883a 	mov	r3,r2
 10004dc:	80a1c83a 	sub	r16,r16,r2
 10004e0:	88a3883a 	add	r17,r17,r2
 10004e4:	00806d0e 	bge	zero,r2,100069c <__sfvwrite_r+0x254>
 10004e8:	b0800217 	ldw	r2,8(r22)
 10004ec:	10c5c83a 	sub	r2,r2,r3
 10004f0:	b0800215 	stw	r2,8(r22)
 10004f4:	103fee1e 	bne	r2,zero,10004b0 <__sfvwrite_r+0x68>
 10004f8:	0009883a 	mov	r4,zero
 10004fc:	2005883a 	mov	r2,r4
 1000500:	dfc00a17 	ldw	ra,40(sp)
 1000504:	df000917 	ldw	fp,36(sp)
 1000508:	ddc00817 	ldw	r23,32(sp)
 100050c:	dd800717 	ldw	r22,28(sp)
 1000510:	dd400617 	ldw	r21,24(sp)
 1000514:	dd000517 	ldw	r20,20(sp)
 1000518:	dcc00417 	ldw	r19,16(sp)
 100051c:	dc800317 	ldw	r18,12(sp)
 1000520:	dc400217 	ldw	r17,8(sp)
 1000524:	dc000117 	ldw	r16,4(sp)
 1000528:	dec00b04 	addi	sp,sp,44
 100052c:	f800283a 	ret
 1000530:	10018ec0 	call	10018ec <__swsetup_r>
 1000534:	1000e41e 	bne	r2,zero,10008c8 <__sfvwrite_r+0x480>
 1000538:	91c0030b 	ldhu	r7,12(r18)
 100053c:	b5400017 	ldw	r21,0(r22)
 1000540:	3880008c 	andi	r2,r7,2
 1000544:	103fd81e 	bne	r2,zero,10004a8 <__sfvwrite_r+0x60>
 1000548:	3880004c 	andi	r2,r7,1
 100054c:	1005003a 	cmpeq	r2,r2,zero
 1000550:	10005726 	beq	r2,zero,10006b0 <__sfvwrite_r+0x268>
 1000554:	0029883a 	mov	r20,zero
 1000558:	002f883a 	mov	r23,zero
 100055c:	a0004226 	beq	r20,zero,1000668 <__sfvwrite_r+0x220>
 1000560:	3880800c 	andi	r2,r7,512
 1000564:	94000217 	ldw	r16,8(r18)
 1000568:	10008b26 	beq	r2,zero,1000798 <__sfvwrite_r+0x350>
 100056c:	800d883a 	mov	r6,r16
 1000570:	a400a536 	bltu	r20,r16,1000808 <__sfvwrite_r+0x3c0>
 1000574:	3881200c 	andi	r2,r7,1152
 1000578:	10002726 	beq	r2,zero,1000618 <__sfvwrite_r+0x1d0>
 100057c:	90800517 	ldw	r2,20(r18)
 1000580:	92000417 	ldw	r8,16(r18)
 1000584:	91400017 	ldw	r5,0(r18)
 1000588:	1087883a 	add	r3,r2,r2
 100058c:	1887883a 	add	r3,r3,r2
 1000590:	1808d7fa 	srli	r4,r3,31
 1000594:	2a21c83a 	sub	r16,r5,r8
 1000598:	80800044 	addi	r2,r16,1
 100059c:	20c9883a 	add	r4,r4,r3
 10005a0:	2027d07a 	srai	r19,r4,1
 10005a4:	a085883a 	add	r2,r20,r2
 10005a8:	980d883a 	mov	r6,r19
 10005ac:	9880022e 	bgeu	r19,r2,10005b8 <__sfvwrite_r+0x170>
 10005b0:	1027883a 	mov	r19,r2
 10005b4:	100d883a 	mov	r6,r2
 10005b8:	3881000c 	andi	r2,r7,1024
 10005bc:	1000b826 	beq	r2,zero,10008a0 <__sfvwrite_r+0x458>
 10005c0:	300b883a 	mov	r5,r6
 10005c4:	e009883a 	mov	r4,fp
 10005c8:	10008e40 	call	10008e4 <_malloc_r>
 10005cc:	10003126 	beq	r2,zero,1000694 <__sfvwrite_r+0x24c>
 10005d0:	91400417 	ldw	r5,16(r18)
 10005d4:	1009883a 	mov	r4,r2
 10005d8:	800d883a 	mov	r6,r16
 10005dc:	1023883a 	mov	r17,r2
 10005e0:	10011080 	call	1001108 <memcpy>
 10005e4:	90c0030b 	ldhu	r3,12(r18)
 10005e8:	00beffc4 	movi	r2,-1025
 10005ec:	1886703a 	and	r3,r3,r2
 10005f0:	18c02014 	ori	r3,r3,128
 10005f4:	90c0030d 	sth	r3,12(r18)
 10005f8:	9c07c83a 	sub	r3,r19,r16
 10005fc:	8c05883a 	add	r2,r17,r16
 1000600:	a00d883a 	mov	r6,r20
 1000604:	a021883a 	mov	r16,r20
 1000608:	90800015 	stw	r2,0(r18)
 100060c:	90c00215 	stw	r3,8(r18)
 1000610:	94400415 	stw	r17,16(r18)
 1000614:	94c00515 	stw	r19,20(r18)
 1000618:	91000017 	ldw	r4,0(r18)
 100061c:	b80b883a 	mov	r5,r23
 1000620:	a023883a 	mov	r17,r20
 1000624:	10011a80 	call	10011a8 <memmove>
 1000628:	90c00217 	ldw	r3,8(r18)
 100062c:	90800017 	ldw	r2,0(r18)
 1000630:	a027883a 	mov	r19,r20
 1000634:	1c07c83a 	sub	r3,r3,r16
 1000638:	1405883a 	add	r2,r2,r16
 100063c:	90c00215 	stw	r3,8(r18)
 1000640:	a021883a 	mov	r16,r20
 1000644:	90800015 	stw	r2,0(r18)
 1000648:	b0800217 	ldw	r2,8(r22)
 100064c:	1405c83a 	sub	r2,r2,r16
 1000650:	b0800215 	stw	r2,8(r22)
 1000654:	103fa826 	beq	r2,zero,10004f8 <__sfvwrite_r+0xb0>
 1000658:	a469c83a 	sub	r20,r20,r17
 100065c:	91c0030b 	ldhu	r7,12(r18)
 1000660:	bcef883a 	add	r23,r23,r19
 1000664:	a03fbe1e 	bne	r20,zero,1000560 <__sfvwrite_r+0x118>
 1000668:	adc00017 	ldw	r23,0(r21)
 100066c:	ad000117 	ldw	r20,4(r21)
 1000670:	ad400204 	addi	r21,r21,8
 1000674:	003fb906 	br	100055c <__sfvwrite_r+0x114>
 1000678:	ac400017 	ldw	r17,0(r21)
 100067c:	ac000117 	ldw	r16,4(r21)
 1000680:	ad400204 	addi	r21,r21,8
 1000684:	003f8a06 	br	10004b0 <__sfvwrite_r+0x68>
 1000688:	91400417 	ldw	r5,16(r18)
 100068c:	e009883a 	mov	r4,fp
 1000690:	10020440 	call	1002044 <_free_r>
 1000694:	00800304 	movi	r2,12
 1000698:	e0800015 	stw	r2,0(fp)
 100069c:	9080030b 	ldhu	r2,12(r18)
 10006a0:	013fffc4 	movi	r4,-1
 10006a4:	10801014 	ori	r2,r2,64
 10006a8:	9080030d 	sth	r2,12(r18)
 10006ac:	003f9306 	br	10004fc <__sfvwrite_r+0xb4>
 10006b0:	0027883a 	mov	r19,zero
 10006b4:	002f883a 	mov	r23,zero
 10006b8:	d8000015 	stw	zero,0(sp)
 10006bc:	0029883a 	mov	r20,zero
 10006c0:	98001e26 	beq	r19,zero,100073c <__sfvwrite_r+0x2f4>
 10006c4:	d8c00017 	ldw	r3,0(sp)
 10006c8:	1804c03a 	cmpne	r2,r3,zero
 10006cc:	10005e26 	beq	r2,zero,1000848 <__sfvwrite_r+0x400>
 10006d0:	9821883a 	mov	r16,r19
 10006d4:	a4c0012e 	bgeu	r20,r19,10006dc <__sfvwrite_r+0x294>
 10006d8:	a021883a 	mov	r16,r20
 10006dc:	91000017 	ldw	r4,0(r18)
 10006e0:	90800417 	ldw	r2,16(r18)
 10006e4:	91800217 	ldw	r6,8(r18)
 10006e8:	91c00517 	ldw	r7,20(r18)
 10006ec:	1100022e 	bgeu	r2,r4,10006f8 <__sfvwrite_r+0x2b0>
 10006f0:	31e3883a 	add	r17,r6,r7
 10006f4:	8c001616 	blt	r17,r16,1000750 <__sfvwrite_r+0x308>
 10006f8:	81c03816 	blt	r16,r7,10007dc <__sfvwrite_r+0x394>
 10006fc:	90c00917 	ldw	r3,36(r18)
 1000700:	91400717 	ldw	r5,28(r18)
 1000704:	e009883a 	mov	r4,fp
 1000708:	b80d883a 	mov	r6,r23
 100070c:	183ee83a 	callr	r3
 1000710:	1023883a 	mov	r17,r2
 1000714:	00bfe10e 	bge	zero,r2,100069c <__sfvwrite_r+0x254>
 1000718:	a469c83a 	sub	r20,r20,r17
 100071c:	a0001826 	beq	r20,zero,1000780 <__sfvwrite_r+0x338>
 1000720:	b0800217 	ldw	r2,8(r22)
 1000724:	1445c83a 	sub	r2,r2,r17
 1000728:	b0800215 	stw	r2,8(r22)
 100072c:	103f7226 	beq	r2,zero,10004f8 <__sfvwrite_r+0xb0>
 1000730:	9c67c83a 	sub	r19,r19,r17
 1000734:	bc6f883a 	add	r23,r23,r17
 1000738:	983fe21e 	bne	r19,zero,10006c4 <__sfvwrite_r+0x27c>
 100073c:	adc00017 	ldw	r23,0(r21)
 1000740:	acc00117 	ldw	r19,4(r21)
 1000744:	ad400204 	addi	r21,r21,8
 1000748:	d8000015 	stw	zero,0(sp)
 100074c:	003fdc06 	br	10006c0 <__sfvwrite_r+0x278>
 1000750:	b80b883a 	mov	r5,r23
 1000754:	880d883a 	mov	r6,r17
 1000758:	10011a80 	call	10011a8 <memmove>
 100075c:	90c00017 	ldw	r3,0(r18)
 1000760:	e009883a 	mov	r4,fp
 1000764:	900b883a 	mov	r5,r18
 1000768:	1c47883a 	add	r3,r3,r17
 100076c:	90c00015 	stw	r3,0(r18)
 1000770:	1001a280 	call	1001a28 <_fflush_r>
 1000774:	103fc91e 	bne	r2,zero,100069c <__sfvwrite_r+0x254>
 1000778:	a469c83a 	sub	r20,r20,r17
 100077c:	a03fe81e 	bne	r20,zero,1000720 <__sfvwrite_r+0x2d8>
 1000780:	e009883a 	mov	r4,fp
 1000784:	900b883a 	mov	r5,r18
 1000788:	1001a280 	call	1001a28 <_fflush_r>
 100078c:	103fc31e 	bne	r2,zero,100069c <__sfvwrite_r+0x254>
 1000790:	d8000015 	stw	zero,0(sp)
 1000794:	003fe206 	br	1000720 <__sfvwrite_r+0x2d8>
 1000798:	91000017 	ldw	r4,0(r18)
 100079c:	90800417 	ldw	r2,16(r18)
 10007a0:	1100022e 	bgeu	r2,r4,10007ac <__sfvwrite_r+0x364>
 10007a4:	8023883a 	mov	r17,r16
 10007a8:	85003136 	bltu	r16,r20,1000870 <__sfvwrite_r+0x428>
 10007ac:	91c00517 	ldw	r7,20(r18)
 10007b0:	a1c01836 	bltu	r20,r7,1000814 <__sfvwrite_r+0x3cc>
 10007b4:	90c00917 	ldw	r3,36(r18)
 10007b8:	91400717 	ldw	r5,28(r18)
 10007bc:	e009883a 	mov	r4,fp
 10007c0:	b80d883a 	mov	r6,r23
 10007c4:	183ee83a 	callr	r3
 10007c8:	1021883a 	mov	r16,r2
 10007cc:	00bfb30e 	bge	zero,r2,100069c <__sfvwrite_r+0x254>
 10007d0:	1023883a 	mov	r17,r2
 10007d4:	1027883a 	mov	r19,r2
 10007d8:	003f9b06 	br	1000648 <__sfvwrite_r+0x200>
 10007dc:	b80b883a 	mov	r5,r23
 10007e0:	800d883a 	mov	r6,r16
 10007e4:	10011a80 	call	10011a8 <memmove>
 10007e8:	90c00217 	ldw	r3,8(r18)
 10007ec:	90800017 	ldw	r2,0(r18)
 10007f0:	8023883a 	mov	r17,r16
 10007f4:	1c07c83a 	sub	r3,r3,r16
 10007f8:	1405883a 	add	r2,r2,r16
 10007fc:	90c00215 	stw	r3,8(r18)
 1000800:	90800015 	stw	r2,0(r18)
 1000804:	003fc406 	br	1000718 <__sfvwrite_r+0x2d0>
 1000808:	a00d883a 	mov	r6,r20
 100080c:	a021883a 	mov	r16,r20
 1000810:	003f8106 	br	1000618 <__sfvwrite_r+0x1d0>
 1000814:	b80b883a 	mov	r5,r23
 1000818:	a00d883a 	mov	r6,r20
 100081c:	10011a80 	call	10011a8 <memmove>
 1000820:	90c00217 	ldw	r3,8(r18)
 1000824:	90800017 	ldw	r2,0(r18)
 1000828:	a021883a 	mov	r16,r20
 100082c:	1d07c83a 	sub	r3,r3,r20
 1000830:	1505883a 	add	r2,r2,r20
 1000834:	a023883a 	mov	r17,r20
 1000838:	a027883a 	mov	r19,r20
 100083c:	90c00215 	stw	r3,8(r18)
 1000840:	90800015 	stw	r2,0(r18)
 1000844:	003f8006 	br	1000648 <__sfvwrite_r+0x200>
 1000848:	b809883a 	mov	r4,r23
 100084c:	01400284 	movi	r5,10
 1000850:	980d883a 	mov	r6,r19
 1000854:	10010240 	call	1001024 <memchr>
 1000858:	10001726 	beq	r2,zero,10008b8 <__sfvwrite_r+0x470>
 100085c:	15c5c83a 	sub	r2,r2,r23
 1000860:	15000044 	addi	r20,r2,1
 1000864:	00800044 	movi	r2,1
 1000868:	d8800015 	stw	r2,0(sp)
 100086c:	003f9806 	br	10006d0 <__sfvwrite_r+0x288>
 1000870:	b80b883a 	mov	r5,r23
 1000874:	800d883a 	mov	r6,r16
 1000878:	10011a80 	call	10011a8 <memmove>
 100087c:	90c00017 	ldw	r3,0(r18)
 1000880:	e009883a 	mov	r4,fp
 1000884:	900b883a 	mov	r5,r18
 1000888:	1c07883a 	add	r3,r3,r16
 100088c:	90c00015 	stw	r3,0(r18)
 1000890:	8027883a 	mov	r19,r16
 1000894:	1001a280 	call	1001a28 <_fflush_r>
 1000898:	103f6b26 	beq	r2,zero,1000648 <__sfvwrite_r+0x200>
 100089c:	003f7f06 	br	100069c <__sfvwrite_r+0x254>
 10008a0:	400b883a 	mov	r5,r8
 10008a4:	e009883a 	mov	r4,fp
 10008a8:	10012880 	call	1001288 <_realloc_r>
 10008ac:	103f7626 	beq	r2,zero,1000688 <__sfvwrite_r+0x240>
 10008b0:	1023883a 	mov	r17,r2
 10008b4:	003f5006 	br	10005f8 <__sfvwrite_r+0x1b0>
 10008b8:	00c00044 	movi	r3,1
 10008bc:	9d000044 	addi	r20,r19,1
 10008c0:	d8c00015 	stw	r3,0(sp)
 10008c4:	003f8206 	br	10006d0 <__sfvwrite_r+0x288>
 10008c8:	9080030b 	ldhu	r2,12(r18)
 10008cc:	00c00244 	movi	r3,9
 10008d0:	013fffc4 	movi	r4,-1
 10008d4:	10801014 	ori	r2,r2,64
 10008d8:	9080030d 	sth	r2,12(r18)
 10008dc:	e0c00015 	stw	r3,0(fp)
 10008e0:	003f0606 	br	10004fc <__sfvwrite_r+0xb4>

010008e4 <_malloc_r>:
 10008e4:	defff604 	addi	sp,sp,-40
 10008e8:	28c002c4 	addi	r3,r5,11
 10008ec:	00800584 	movi	r2,22
 10008f0:	dc800215 	stw	r18,8(sp)
 10008f4:	dfc00915 	stw	ra,36(sp)
 10008f8:	df000815 	stw	fp,32(sp)
 10008fc:	ddc00715 	stw	r23,28(sp)
 1000900:	dd800615 	stw	r22,24(sp)
 1000904:	dd400515 	stw	r21,20(sp)
 1000908:	dd000415 	stw	r20,16(sp)
 100090c:	dcc00315 	stw	r19,12(sp)
 1000910:	dc400115 	stw	r17,4(sp)
 1000914:	dc000015 	stw	r16,0(sp)
 1000918:	2025883a 	mov	r18,r4
 100091c:	10c01236 	bltu	r2,r3,1000968 <_malloc_r+0x84>
 1000920:	04400404 	movi	r17,16
 1000924:	8940142e 	bgeu	r17,r5,1000978 <_malloc_r+0x94>
 1000928:	00800304 	movi	r2,12
 100092c:	0007883a 	mov	r3,zero
 1000930:	90800015 	stw	r2,0(r18)
 1000934:	1805883a 	mov	r2,r3
 1000938:	dfc00917 	ldw	ra,36(sp)
 100093c:	df000817 	ldw	fp,32(sp)
 1000940:	ddc00717 	ldw	r23,28(sp)
 1000944:	dd800617 	ldw	r22,24(sp)
 1000948:	dd400517 	ldw	r21,20(sp)
 100094c:	dd000417 	ldw	r20,16(sp)
 1000950:	dcc00317 	ldw	r19,12(sp)
 1000954:	dc800217 	ldw	r18,8(sp)
 1000958:	dc400117 	ldw	r17,4(sp)
 100095c:	dc000017 	ldw	r16,0(sp)
 1000960:	dec00a04 	addi	sp,sp,40
 1000964:	f800283a 	ret
 1000968:	00bffe04 	movi	r2,-8
 100096c:	18a2703a 	and	r17,r3,r2
 1000970:	883fed16 	blt	r17,zero,1000928 <_malloc_r+0x44>
 1000974:	897fec36 	bltu	r17,r5,1000928 <_malloc_r+0x44>
 1000978:	9009883a 	mov	r4,r18
 100097c:	10032b40 	call	10032b4 <__malloc_lock>
 1000980:	00807dc4 	movi	r2,503
 1000984:	14402b2e 	bgeu	r2,r17,1000a34 <_malloc_r+0x150>
 1000988:	8806d27a 	srli	r3,r17,9
 100098c:	18003f1e 	bne	r3,zero,1000a8c <_malloc_r+0x1a8>
 1000990:	880cd0fa 	srli	r6,r17,3
 1000994:	300490fa 	slli	r2,r6,3
 1000998:	02c04074 	movhi	r11,257
 100099c:	5aea0704 	addi	r11,r11,-22500
 10009a0:	12cb883a 	add	r5,r2,r11
 10009a4:	2c000317 	ldw	r16,12(r5)
 10009a8:	580f883a 	mov	r7,r11
 10009ac:	2c00041e 	bne	r5,r16,10009c0 <_malloc_r+0xdc>
 10009b0:	00000a06 	br	10009dc <_malloc_r+0xf8>
 10009b4:	1800860e 	bge	r3,zero,1000bd0 <_malloc_r+0x2ec>
 10009b8:	84000317 	ldw	r16,12(r16)
 10009bc:	2c000726 	beq	r5,r16,10009dc <_malloc_r+0xf8>
 10009c0:	80800117 	ldw	r2,4(r16)
 10009c4:	00ffff04 	movi	r3,-4
 10009c8:	10c8703a 	and	r4,r2,r3
 10009cc:	2447c83a 	sub	r3,r4,r17
 10009d0:	008003c4 	movi	r2,15
 10009d4:	10fff70e 	bge	r2,r3,10009b4 <_malloc_r+0xd0>
 10009d8:	31bfffc4 	addi	r6,r6,-1
 10009dc:	32400044 	addi	r9,r6,1
 10009e0:	02804074 	movhi	r10,257
 10009e4:	52aa0904 	addi	r10,r10,-22492
 10009e8:	54000217 	ldw	r16,8(r10)
 10009ec:	8280a026 	beq	r16,r10,1000c70 <_malloc_r+0x38c>
 10009f0:	80800117 	ldw	r2,4(r16)
 10009f4:	00ffff04 	movi	r3,-4
 10009f8:	10ca703a 	and	r5,r2,r3
 10009fc:	2c4dc83a 	sub	r6,r5,r17
 1000a00:	008003c4 	movi	r2,15
 1000a04:	11808316 	blt	r2,r6,1000c14 <_malloc_r+0x330>
 1000a08:	52800315 	stw	r10,12(r10)
 1000a0c:	52800215 	stw	r10,8(r10)
 1000a10:	30002916 	blt	r6,zero,1000ab8 <_malloc_r+0x1d4>
 1000a14:	8147883a 	add	r3,r16,r5
 1000a18:	18800117 	ldw	r2,4(r3)
 1000a1c:	9009883a 	mov	r4,r18
 1000a20:	10800054 	ori	r2,r2,1
 1000a24:	18800115 	stw	r2,4(r3)
 1000a28:	10032d40 	call	10032d4 <__malloc_unlock>
 1000a2c:	80c00204 	addi	r3,r16,8
 1000a30:	003fc006 	br	1000934 <_malloc_r+0x50>
 1000a34:	02c04074 	movhi	r11,257
 1000a38:	5aea0704 	addi	r11,r11,-22500
 1000a3c:	8ac5883a 	add	r2,r17,r11
 1000a40:	14000317 	ldw	r16,12(r2)
 1000a44:	580f883a 	mov	r7,r11
 1000a48:	8806d0fa 	srli	r3,r17,3
 1000a4c:	14006c26 	beq	r2,r16,1000c00 <_malloc_r+0x31c>
 1000a50:	80c00117 	ldw	r3,4(r16)
 1000a54:	00bfff04 	movi	r2,-4
 1000a58:	81800317 	ldw	r6,12(r16)
 1000a5c:	1886703a 	and	r3,r3,r2
 1000a60:	80c7883a 	add	r3,r16,r3
 1000a64:	18800117 	ldw	r2,4(r3)
 1000a68:	81400217 	ldw	r5,8(r16)
 1000a6c:	9009883a 	mov	r4,r18
 1000a70:	10800054 	ori	r2,r2,1
 1000a74:	18800115 	stw	r2,4(r3)
 1000a78:	31400215 	stw	r5,8(r6)
 1000a7c:	29800315 	stw	r6,12(r5)
 1000a80:	10032d40 	call	10032d4 <__malloc_unlock>
 1000a84:	80c00204 	addi	r3,r16,8
 1000a88:	003faa06 	br	1000934 <_malloc_r+0x50>
 1000a8c:	00800104 	movi	r2,4
 1000a90:	10c0052e 	bgeu	r2,r3,1000aa8 <_malloc_r+0x1c4>
 1000a94:	00800504 	movi	r2,20
 1000a98:	10c07836 	bltu	r2,r3,1000c7c <_malloc_r+0x398>
 1000a9c:	198016c4 	addi	r6,r3,91
 1000aa0:	300490fa 	slli	r2,r6,3
 1000aa4:	003fbc06 	br	1000998 <_malloc_r+0xb4>
 1000aa8:	8804d1ba 	srli	r2,r17,6
 1000aac:	11800e04 	addi	r6,r2,56
 1000ab0:	300490fa 	slli	r2,r6,3
 1000ab4:	003fb806 	br	1000998 <_malloc_r+0xb4>
 1000ab8:	00807fc4 	movi	r2,511
 1000abc:	1140bb36 	bltu	r2,r5,1000dac <_malloc_r+0x4c8>
 1000ac0:	2806d0fa 	srli	r3,r5,3
 1000ac4:	573ffe04 	addi	fp,r10,-8
 1000ac8:	00800044 	movi	r2,1
 1000acc:	180890fa 	slli	r4,r3,3
 1000ad0:	1807d0ba 	srai	r3,r3,2
 1000ad4:	e1c00117 	ldw	r7,4(fp)
 1000ad8:	5909883a 	add	r4,r11,r4
 1000adc:	21400217 	ldw	r5,8(r4)
 1000ae0:	10c4983a 	sll	r2,r2,r3
 1000ae4:	81000315 	stw	r4,12(r16)
 1000ae8:	81400215 	stw	r5,8(r16)
 1000aec:	388eb03a 	or	r7,r7,r2
 1000af0:	2c000315 	stw	r16,12(r5)
 1000af4:	24000215 	stw	r16,8(r4)
 1000af8:	e1c00115 	stw	r7,4(fp)
 1000afc:	4807883a 	mov	r3,r9
 1000b00:	4800cd16 	blt	r9,zero,1000e38 <_malloc_r+0x554>
 1000b04:	1807d0ba 	srai	r3,r3,2
 1000b08:	00800044 	movi	r2,1
 1000b0c:	10c8983a 	sll	r4,r2,r3
 1000b10:	39004436 	bltu	r7,r4,1000c24 <_malloc_r+0x340>
 1000b14:	21c4703a 	and	r2,r4,r7
 1000b18:	10000a1e 	bne	r2,zero,1000b44 <_malloc_r+0x260>
 1000b1c:	2109883a 	add	r4,r4,r4
 1000b20:	00bfff04 	movi	r2,-4
 1000b24:	4884703a 	and	r2,r9,r2
 1000b28:	3906703a 	and	r3,r7,r4
 1000b2c:	12400104 	addi	r9,r2,4
 1000b30:	1800041e 	bne	r3,zero,1000b44 <_malloc_r+0x260>
 1000b34:	2109883a 	add	r4,r4,r4
 1000b38:	3904703a 	and	r2,r7,r4
 1000b3c:	4a400104 	addi	r9,r9,4
 1000b40:	103ffc26 	beq	r2,zero,1000b34 <_malloc_r+0x250>
 1000b44:	480490fa 	slli	r2,r9,3
 1000b48:	4819883a 	mov	r12,r9
 1000b4c:	023fff04 	movi	r8,-4
 1000b50:	589b883a 	add	r13,r11,r2
 1000b54:	6807883a 	mov	r3,r13
 1000b58:	014003c4 	movi	r5,15
 1000b5c:	1c000317 	ldw	r16,12(r3)
 1000b60:	1c00041e 	bne	r3,r16,1000b74 <_malloc_r+0x290>
 1000b64:	0000a706 	br	1000e04 <_malloc_r+0x520>
 1000b68:	3000ab0e 	bge	r6,zero,1000e18 <_malloc_r+0x534>
 1000b6c:	84000317 	ldw	r16,12(r16)
 1000b70:	1c00a426 	beq	r3,r16,1000e04 <_malloc_r+0x520>
 1000b74:	80800117 	ldw	r2,4(r16)
 1000b78:	1204703a 	and	r2,r2,r8
 1000b7c:	144dc83a 	sub	r6,r2,r17
 1000b80:	29bff90e 	bge	r5,r6,1000b68 <_malloc_r+0x284>
 1000b84:	81000317 	ldw	r4,12(r16)
 1000b88:	80c00217 	ldw	r3,8(r16)
 1000b8c:	89400054 	ori	r5,r17,1
 1000b90:	8445883a 	add	r2,r16,r17
 1000b94:	20c00215 	stw	r3,8(r4)
 1000b98:	19000315 	stw	r4,12(r3)
 1000b9c:	81400115 	stw	r5,4(r16)
 1000ba0:	1187883a 	add	r3,r2,r6
 1000ba4:	31000054 	ori	r4,r6,1
 1000ba8:	50800315 	stw	r2,12(r10)
 1000bac:	50800215 	stw	r2,8(r10)
 1000bb0:	19800015 	stw	r6,0(r3)
 1000bb4:	11000115 	stw	r4,4(r2)
 1000bb8:	12800215 	stw	r10,8(r2)
 1000bbc:	12800315 	stw	r10,12(r2)
 1000bc0:	9009883a 	mov	r4,r18
 1000bc4:	10032d40 	call	10032d4 <__malloc_unlock>
 1000bc8:	80c00204 	addi	r3,r16,8
 1000bcc:	003f5906 	br	1000934 <_malloc_r+0x50>
 1000bd0:	8109883a 	add	r4,r16,r4
 1000bd4:	20800117 	ldw	r2,4(r4)
 1000bd8:	80c00217 	ldw	r3,8(r16)
 1000bdc:	81400317 	ldw	r5,12(r16)
 1000be0:	10800054 	ori	r2,r2,1
 1000be4:	20800115 	stw	r2,4(r4)
 1000be8:	28c00215 	stw	r3,8(r5)
 1000bec:	19400315 	stw	r5,12(r3)
 1000bf0:	9009883a 	mov	r4,r18
 1000bf4:	10032d40 	call	10032d4 <__malloc_unlock>
 1000bf8:	80c00204 	addi	r3,r16,8
 1000bfc:	003f4d06 	br	1000934 <_malloc_r+0x50>
 1000c00:	80800204 	addi	r2,r16,8
 1000c04:	14000317 	ldw	r16,12(r2)
 1000c08:	143f911e 	bne	r2,r16,1000a50 <_malloc_r+0x16c>
 1000c0c:	1a400084 	addi	r9,r3,2
 1000c10:	003f7306 	br	10009e0 <_malloc_r+0xfc>
 1000c14:	88c00054 	ori	r3,r17,1
 1000c18:	8445883a 	add	r2,r16,r17
 1000c1c:	80c00115 	stw	r3,4(r16)
 1000c20:	003fdf06 	br	1000ba0 <_malloc_r+0x2bc>
 1000c24:	e4000217 	ldw	r16,8(fp)
 1000c28:	00bfff04 	movi	r2,-4
 1000c2c:	80c00117 	ldw	r3,4(r16)
 1000c30:	802d883a 	mov	r22,r16
 1000c34:	18aa703a 	and	r21,r3,r2
 1000c38:	ac401636 	bltu	r21,r17,1000c94 <_malloc_r+0x3b0>
 1000c3c:	ac49c83a 	sub	r4,r21,r17
 1000c40:	008003c4 	movi	r2,15
 1000c44:	1100130e 	bge	r2,r4,1000c94 <_malloc_r+0x3b0>
 1000c48:	88800054 	ori	r2,r17,1
 1000c4c:	8447883a 	add	r3,r16,r17
 1000c50:	80800115 	stw	r2,4(r16)
 1000c54:	20800054 	ori	r2,r4,1
 1000c58:	18800115 	stw	r2,4(r3)
 1000c5c:	e0c00215 	stw	r3,8(fp)
 1000c60:	9009883a 	mov	r4,r18
 1000c64:	10032d40 	call	10032d4 <__malloc_unlock>
 1000c68:	80c00204 	addi	r3,r16,8
 1000c6c:	003f3106 	br	1000934 <_malloc_r+0x50>
 1000c70:	39c00117 	ldw	r7,4(r7)
 1000c74:	573ffe04 	addi	fp,r10,-8
 1000c78:	003fa006 	br	1000afc <_malloc_r+0x218>
 1000c7c:	00801504 	movi	r2,84
 1000c80:	10c06736 	bltu	r2,r3,1000e20 <_malloc_r+0x53c>
 1000c84:	8804d33a 	srli	r2,r17,12
 1000c88:	11801b84 	addi	r6,r2,110
 1000c8c:	300490fa 	slli	r2,r6,3
 1000c90:	003f4106 	br	1000998 <_malloc_r+0xb4>
 1000c94:	d0a6c117 	ldw	r2,-25852(gp)
 1000c98:	d0e00317 	ldw	r3,-32756(gp)
 1000c9c:	053fffc4 	movi	r20,-1
 1000ca0:	10800404 	addi	r2,r2,16
 1000ca4:	88a7883a 	add	r19,r17,r2
 1000ca8:	1d000326 	beq	r3,r20,1000cb8 <_malloc_r+0x3d4>
 1000cac:	98c3ffc4 	addi	r3,r19,4095
 1000cb0:	00bc0004 	movi	r2,-4096
 1000cb4:	18a6703a 	and	r19,r3,r2
 1000cb8:	9009883a 	mov	r4,r18
 1000cbc:	980b883a 	mov	r5,r19
 1000cc0:	100187c0 	call	100187c <_sbrk_r>
 1000cc4:	1009883a 	mov	r4,r2
 1000cc8:	15000426 	beq	r2,r20,1000cdc <_malloc_r+0x3f8>
 1000ccc:	854b883a 	add	r5,r16,r21
 1000cd0:	1029883a 	mov	r20,r2
 1000cd4:	11405a2e 	bgeu	r2,r5,1000e40 <_malloc_r+0x55c>
 1000cd8:	87000c26 	beq	r16,fp,1000d0c <_malloc_r+0x428>
 1000cdc:	e4000217 	ldw	r16,8(fp)
 1000ce0:	80c00117 	ldw	r3,4(r16)
 1000ce4:	00bfff04 	movi	r2,-4
 1000ce8:	1884703a 	and	r2,r3,r2
 1000cec:	14400336 	bltu	r2,r17,1000cfc <_malloc_r+0x418>
 1000cf0:	1449c83a 	sub	r4,r2,r17
 1000cf4:	008003c4 	movi	r2,15
 1000cf8:	113fd316 	blt	r2,r4,1000c48 <_malloc_r+0x364>
 1000cfc:	9009883a 	mov	r4,r18
 1000d00:	10032d40 	call	10032d4 <__malloc_unlock>
 1000d04:	0007883a 	mov	r3,zero
 1000d08:	003f0a06 	br	1000934 <_malloc_r+0x50>
 1000d0c:	05c04074 	movhi	r23,257
 1000d10:	bdf68404 	addi	r23,r23,-9712
 1000d14:	b8800017 	ldw	r2,0(r23)
 1000d18:	988d883a 	add	r6,r19,r2
 1000d1c:	b9800015 	stw	r6,0(r23)
 1000d20:	d0e00317 	ldw	r3,-32756(gp)
 1000d24:	00bfffc4 	movi	r2,-1
 1000d28:	18808e26 	beq	r3,r2,1000f64 <_malloc_r+0x680>
 1000d2c:	2145c83a 	sub	r2,r4,r5
 1000d30:	3085883a 	add	r2,r6,r2
 1000d34:	b8800015 	stw	r2,0(r23)
 1000d38:	20c001cc 	andi	r3,r4,7
 1000d3c:	18005f1e 	bne	r3,zero,1000ebc <_malloc_r+0x5d8>
 1000d40:	000b883a 	mov	r5,zero
 1000d44:	a4c5883a 	add	r2,r20,r19
 1000d48:	1083ffcc 	andi	r2,r2,4095
 1000d4c:	00c40004 	movi	r3,4096
 1000d50:	1887c83a 	sub	r3,r3,r2
 1000d54:	28e7883a 	add	r19,r5,r3
 1000d58:	9009883a 	mov	r4,r18
 1000d5c:	980b883a 	mov	r5,r19
 1000d60:	100187c0 	call	100187c <_sbrk_r>
 1000d64:	1007883a 	mov	r3,r2
 1000d68:	00bfffc4 	movi	r2,-1
 1000d6c:	18807a26 	beq	r3,r2,1000f58 <_malloc_r+0x674>
 1000d70:	1d05c83a 	sub	r2,r3,r20
 1000d74:	9885883a 	add	r2,r19,r2
 1000d78:	10c00054 	ori	r3,r2,1
 1000d7c:	b8800017 	ldw	r2,0(r23)
 1000d80:	a021883a 	mov	r16,r20
 1000d84:	a0c00115 	stw	r3,4(r20)
 1000d88:	9885883a 	add	r2,r19,r2
 1000d8c:	b8800015 	stw	r2,0(r23)
 1000d90:	e5000215 	stw	r20,8(fp)
 1000d94:	b7003626 	beq	r22,fp,1000e70 <_malloc_r+0x58c>
 1000d98:	018003c4 	movi	r6,15
 1000d9c:	35404b36 	bltu	r6,r21,1000ecc <_malloc_r+0x5e8>
 1000da0:	00800044 	movi	r2,1
 1000da4:	a0800115 	stw	r2,4(r20)
 1000da8:	003fcd06 	br	1000ce0 <_malloc_r+0x3fc>
 1000dac:	2808d27a 	srli	r4,r5,9
 1000db0:	2000371e 	bne	r4,zero,1000e90 <_malloc_r+0x5ac>
 1000db4:	2808d0fa 	srli	r4,r5,3
 1000db8:	200690fa 	slli	r3,r4,3
 1000dbc:	1ad1883a 	add	r8,r3,r11
 1000dc0:	41800217 	ldw	r6,8(r8)
 1000dc4:	41805b26 	beq	r8,r6,1000f34 <_malloc_r+0x650>
 1000dc8:	30800117 	ldw	r2,4(r6)
 1000dcc:	00ffff04 	movi	r3,-4
 1000dd0:	10c4703a 	and	r2,r2,r3
 1000dd4:	2880022e 	bgeu	r5,r2,1000de0 <_malloc_r+0x4fc>
 1000dd8:	31800217 	ldw	r6,8(r6)
 1000ddc:	41bffa1e 	bne	r8,r6,1000dc8 <_malloc_r+0x4e4>
 1000de0:	32000317 	ldw	r8,12(r6)
 1000de4:	39c00117 	ldw	r7,4(r7)
 1000de8:	82000315 	stw	r8,12(r16)
 1000dec:	81800215 	stw	r6,8(r16)
 1000df0:	07004074 	movhi	fp,257
 1000df4:	e72a0704 	addi	fp,fp,-22500
 1000df8:	34000315 	stw	r16,12(r6)
 1000dfc:	44000215 	stw	r16,8(r8)
 1000e00:	003f3e06 	br	1000afc <_malloc_r+0x218>
 1000e04:	63000044 	addi	r12,r12,1
 1000e08:	608000cc 	andi	r2,r12,3
 1000e0c:	10005d26 	beq	r2,zero,1000f84 <_malloc_r+0x6a0>
 1000e10:	18c00204 	addi	r3,r3,8
 1000e14:	003f5106 	br	1000b5c <_malloc_r+0x278>
 1000e18:	8089883a 	add	r4,r16,r2
 1000e1c:	003f6d06 	br	1000bd4 <_malloc_r+0x2f0>
 1000e20:	00805504 	movi	r2,340
 1000e24:	10c02036 	bltu	r2,r3,1000ea8 <_malloc_r+0x5c4>
 1000e28:	8804d3fa 	srli	r2,r17,15
 1000e2c:	11801dc4 	addi	r6,r2,119
 1000e30:	300490fa 	slli	r2,r6,3
 1000e34:	003ed806 	br	1000998 <_malloc_r+0xb4>
 1000e38:	48c000c4 	addi	r3,r9,3
 1000e3c:	003f3106 	br	1000b04 <_malloc_r+0x220>
 1000e40:	05c04074 	movhi	r23,257
 1000e44:	bdf68404 	addi	r23,r23,-9712
 1000e48:	b8800017 	ldw	r2,0(r23)
 1000e4c:	988d883a 	add	r6,r19,r2
 1000e50:	b9800015 	stw	r6,0(r23)
 1000e54:	293fb21e 	bne	r5,r4,1000d20 <_malloc_r+0x43c>
 1000e58:	2083ffcc 	andi	r2,r4,4095
 1000e5c:	103fb01e 	bne	r2,zero,1000d20 <_malloc_r+0x43c>
 1000e60:	e4000217 	ldw	r16,8(fp)
 1000e64:	9d45883a 	add	r2,r19,r21
 1000e68:	10800054 	ori	r2,r2,1
 1000e6c:	80800115 	stw	r2,4(r16)
 1000e70:	b8c00017 	ldw	r3,0(r23)
 1000e74:	d0a6c217 	ldw	r2,-25848(gp)
 1000e78:	10c0012e 	bgeu	r2,r3,1000e80 <_malloc_r+0x59c>
 1000e7c:	d0e6c215 	stw	r3,-25848(gp)
 1000e80:	d0a6c317 	ldw	r2,-25844(gp)
 1000e84:	10ff962e 	bgeu	r2,r3,1000ce0 <_malloc_r+0x3fc>
 1000e88:	d0e6c315 	stw	r3,-25844(gp)
 1000e8c:	003f9406 	br	1000ce0 <_malloc_r+0x3fc>
 1000e90:	00800104 	movi	r2,4
 1000e94:	11001e36 	bltu	r2,r4,1000f10 <_malloc_r+0x62c>
 1000e98:	2804d1ba 	srli	r2,r5,6
 1000e9c:	11000e04 	addi	r4,r2,56
 1000ea0:	200690fa 	slli	r3,r4,3
 1000ea4:	003fc506 	br	1000dbc <_malloc_r+0x4d8>
 1000ea8:	00815504 	movi	r2,1364
 1000eac:	10c01d2e 	bgeu	r2,r3,1000f24 <_malloc_r+0x640>
 1000eb0:	01801f84 	movi	r6,126
 1000eb4:	0080fc04 	movi	r2,1008
 1000eb8:	003eb706 	br	1000998 <_malloc_r+0xb4>
 1000ebc:	00800204 	movi	r2,8
 1000ec0:	10cbc83a 	sub	r5,r2,r3
 1000ec4:	2169883a 	add	r20,r4,r5
 1000ec8:	003f9e06 	br	1000d44 <_malloc_r+0x460>
 1000ecc:	00bffe04 	movi	r2,-8
 1000ed0:	a93ffd04 	addi	r4,r21,-12
 1000ed4:	2088703a 	and	r4,r4,r2
 1000ed8:	b10b883a 	add	r5,r22,r4
 1000edc:	00c00144 	movi	r3,5
 1000ee0:	28c00215 	stw	r3,8(r5)
 1000ee4:	28c00115 	stw	r3,4(r5)
 1000ee8:	b0800117 	ldw	r2,4(r22)
 1000eec:	1080004c 	andi	r2,r2,1
 1000ef0:	2084b03a 	or	r2,r4,r2
 1000ef4:	b0800115 	stw	r2,4(r22)
 1000ef8:	313fdd2e 	bgeu	r6,r4,1000e70 <_malloc_r+0x58c>
 1000efc:	b1400204 	addi	r5,r22,8
 1000f00:	9009883a 	mov	r4,r18
 1000f04:	10020440 	call	1002044 <_free_r>
 1000f08:	e4000217 	ldw	r16,8(fp)
 1000f0c:	003fd806 	br	1000e70 <_malloc_r+0x58c>
 1000f10:	00800504 	movi	r2,20
 1000f14:	11001536 	bltu	r2,r4,1000f6c <_malloc_r+0x688>
 1000f18:	210016c4 	addi	r4,r4,91
 1000f1c:	200690fa 	slli	r3,r4,3
 1000f20:	003fa606 	br	1000dbc <_malloc_r+0x4d8>
 1000f24:	8804d4ba 	srli	r2,r17,18
 1000f28:	11801f04 	addi	r6,r2,124
 1000f2c:	300490fa 	slli	r2,r6,3
 1000f30:	003e9906 	br	1000998 <_malloc_r+0xb4>
 1000f34:	2009d0ba 	srai	r4,r4,2
 1000f38:	01404074 	movhi	r5,257
 1000f3c:	296a0704 	addi	r5,r5,-22500
 1000f40:	00c00044 	movi	r3,1
 1000f44:	28800117 	ldw	r2,4(r5)
 1000f48:	1906983a 	sll	r3,r3,r4
 1000f4c:	10c4b03a 	or	r2,r2,r3
 1000f50:	28800115 	stw	r2,4(r5)
 1000f54:	003fa306 	br	1000de4 <_malloc_r+0x500>
 1000f58:	0027883a 	mov	r19,zero
 1000f5c:	00c00044 	movi	r3,1
 1000f60:	003f8606 	br	1000d7c <_malloc_r+0x498>
 1000f64:	d1200315 	stw	r4,-32756(gp)
 1000f68:	003f7306 	br	1000d38 <_malloc_r+0x454>
 1000f6c:	00801504 	movi	r2,84
 1000f70:	11001936 	bltu	r2,r4,1000fd8 <_malloc_r+0x6f4>
 1000f74:	2804d33a 	srli	r2,r5,12
 1000f78:	11001b84 	addi	r4,r2,110
 1000f7c:	200690fa 	slli	r3,r4,3
 1000f80:	003f8e06 	br	1000dbc <_malloc_r+0x4d8>
 1000f84:	480b883a 	mov	r5,r9
 1000f88:	6807883a 	mov	r3,r13
 1000f8c:	288000cc 	andi	r2,r5,3
 1000f90:	18fffe04 	addi	r3,r3,-8
 1000f94:	297fffc4 	addi	r5,r5,-1
 1000f98:	10001526 	beq	r2,zero,1000ff0 <_malloc_r+0x70c>
 1000f9c:	18800217 	ldw	r2,8(r3)
 1000fa0:	10fffa26 	beq	r2,r3,1000f8c <_malloc_r+0x6a8>
 1000fa4:	2109883a 	add	r4,r4,r4
 1000fa8:	393f1e36 	bltu	r7,r4,1000c24 <_malloc_r+0x340>
 1000fac:	203f1d26 	beq	r4,zero,1000c24 <_malloc_r+0x340>
 1000fb0:	21c4703a 	and	r2,r4,r7
 1000fb4:	10000226 	beq	r2,zero,1000fc0 <_malloc_r+0x6dc>
 1000fb8:	6013883a 	mov	r9,r12
 1000fbc:	003ee106 	br	1000b44 <_malloc_r+0x260>
 1000fc0:	2109883a 	add	r4,r4,r4
 1000fc4:	3904703a 	and	r2,r7,r4
 1000fc8:	63000104 	addi	r12,r12,4
 1000fcc:	103ffc26 	beq	r2,zero,1000fc0 <_malloc_r+0x6dc>
 1000fd0:	6013883a 	mov	r9,r12
 1000fd4:	003edb06 	br	1000b44 <_malloc_r+0x260>
 1000fd8:	00805504 	movi	r2,340
 1000fdc:	11000836 	bltu	r2,r4,1001000 <_malloc_r+0x71c>
 1000fe0:	2804d3fa 	srli	r2,r5,15
 1000fe4:	11001dc4 	addi	r4,r2,119
 1000fe8:	200690fa 	slli	r3,r4,3
 1000fec:	003f7306 	br	1000dbc <_malloc_r+0x4d8>
 1000ff0:	0104303a 	nor	r2,zero,r4
 1000ff4:	388e703a 	and	r7,r7,r2
 1000ff8:	e1c00115 	stw	r7,4(fp)
 1000ffc:	003fe906 	br	1000fa4 <_malloc_r+0x6c0>
 1001000:	00815504 	movi	r2,1364
 1001004:	1100032e 	bgeu	r2,r4,1001014 <_malloc_r+0x730>
 1001008:	01001f84 	movi	r4,126
 100100c:	00c0fc04 	movi	r3,1008
 1001010:	003f6a06 	br	1000dbc <_malloc_r+0x4d8>
 1001014:	2804d4ba 	srli	r2,r5,18
 1001018:	11001f04 	addi	r4,r2,124
 100101c:	200690fa 	slli	r3,r4,3
 1001020:	003f6606 	br	1000dbc <_malloc_r+0x4d8>

01001024 <memchr>:
 1001024:	008000c4 	movi	r2,3
 1001028:	29403fcc 	andi	r5,r5,255
 100102c:	2007883a 	mov	r3,r4
 1001030:	1180022e 	bgeu	r2,r6,100103c <memchr+0x18>
 1001034:	2084703a 	and	r2,r4,r2
 1001038:	10000b26 	beq	r2,zero,1001068 <memchr+0x44>
 100103c:	313fffc4 	addi	r4,r6,-1
 1001040:	3000051e 	bne	r6,zero,1001058 <memchr+0x34>
 1001044:	00002c06 	br	10010f8 <memchr+0xd4>
 1001048:	213fffc4 	addi	r4,r4,-1
 100104c:	00bfffc4 	movi	r2,-1
 1001050:	18c00044 	addi	r3,r3,1
 1001054:	20802826 	beq	r4,r2,10010f8 <memchr+0xd4>
 1001058:	18800003 	ldbu	r2,0(r3)
 100105c:	28bffa1e 	bne	r5,r2,1001048 <memchr+0x24>
 1001060:	1805883a 	mov	r2,r3
 1001064:	f800283a 	ret
 1001068:	0011883a 	mov	r8,zero
 100106c:	0007883a 	mov	r3,zero
 1001070:	01c00104 	movi	r7,4
 1001074:	4004923a 	slli	r2,r8,8
 1001078:	18c00044 	addi	r3,r3,1
 100107c:	1151883a 	add	r8,r2,r5
 1001080:	19fffc1e 	bne	r3,r7,1001074 <memchr+0x50>
 1001084:	02bfbff4 	movhi	r10,65279
 1001088:	52bfbfc4 	addi	r10,r10,-257
 100108c:	02602074 	movhi	r9,32897
 1001090:	4a602004 	addi	r9,r9,-32640
 1001094:	02c000c4 	movi	r11,3
 1001098:	20800017 	ldw	r2,0(r4)
 100109c:	31bfff04 	addi	r6,r6,-4
 10010a0:	200f883a 	mov	r7,r4
 10010a4:	1204f03a 	xor	r2,r2,r8
 10010a8:	1287883a 	add	r3,r2,r10
 10010ac:	1a46703a 	and	r3,r3,r9
 10010b0:	0084303a 	nor	r2,zero,r2
 10010b4:	10c4703a 	and	r2,r2,r3
 10010b8:	10000b26 	beq	r2,zero,10010e8 <memchr+0xc4>
 10010bc:	20800003 	ldbu	r2,0(r4)
 10010c0:	28800f26 	beq	r5,r2,1001100 <memchr+0xdc>
 10010c4:	20800043 	ldbu	r2,1(r4)
 10010c8:	21c00044 	addi	r7,r4,1
 10010cc:	28800c26 	beq	r5,r2,1001100 <memchr+0xdc>
 10010d0:	20800083 	ldbu	r2,2(r4)
 10010d4:	21c00084 	addi	r7,r4,2
 10010d8:	28800926 	beq	r5,r2,1001100 <memchr+0xdc>
 10010dc:	208000c3 	ldbu	r2,3(r4)
 10010e0:	21c000c4 	addi	r7,r4,3
 10010e4:	28800626 	beq	r5,r2,1001100 <memchr+0xdc>
 10010e8:	21000104 	addi	r4,r4,4
 10010ec:	59bfea36 	bltu	r11,r6,1001098 <memchr+0x74>
 10010f0:	2007883a 	mov	r3,r4
 10010f4:	003fd106 	br	100103c <memchr+0x18>
 10010f8:	0005883a 	mov	r2,zero
 10010fc:	f800283a 	ret
 1001100:	3805883a 	mov	r2,r7
 1001104:	f800283a 	ret

01001108 <memcpy>:
 1001108:	01c003c4 	movi	r7,15
 100110c:	2007883a 	mov	r3,r4
 1001110:	3980032e 	bgeu	r7,r6,1001120 <memcpy+0x18>
 1001114:	2904b03a 	or	r2,r5,r4
 1001118:	108000cc 	andi	r2,r2,3
 100111c:	10000926 	beq	r2,zero,1001144 <memcpy+0x3c>
 1001120:	30000626 	beq	r6,zero,100113c <memcpy+0x34>
 1001124:	30cd883a 	add	r6,r6,r3
 1001128:	28800003 	ldbu	r2,0(r5)
 100112c:	29400044 	addi	r5,r5,1
 1001130:	18800005 	stb	r2,0(r3)
 1001134:	18c00044 	addi	r3,r3,1
 1001138:	30fffb1e 	bne	r6,r3,1001128 <memcpy+0x20>
 100113c:	2005883a 	mov	r2,r4
 1001140:	f800283a 	ret
 1001144:	3811883a 	mov	r8,r7
 1001148:	200f883a 	mov	r7,r4
 100114c:	28c00017 	ldw	r3,0(r5)
 1001150:	31bffc04 	addi	r6,r6,-16
 1001154:	38c00015 	stw	r3,0(r7)
 1001158:	28800117 	ldw	r2,4(r5)
 100115c:	38800115 	stw	r2,4(r7)
 1001160:	28c00217 	ldw	r3,8(r5)
 1001164:	38c00215 	stw	r3,8(r7)
 1001168:	28800317 	ldw	r2,12(r5)
 100116c:	29400404 	addi	r5,r5,16
 1001170:	38800315 	stw	r2,12(r7)
 1001174:	39c00404 	addi	r7,r7,16
 1001178:	41bff436 	bltu	r8,r6,100114c <memcpy+0x44>
 100117c:	008000c4 	movi	r2,3
 1001180:	1180072e 	bgeu	r2,r6,10011a0 <memcpy+0x98>
 1001184:	1007883a 	mov	r3,r2
 1001188:	28800017 	ldw	r2,0(r5)
 100118c:	31bfff04 	addi	r6,r6,-4
 1001190:	29400104 	addi	r5,r5,4
 1001194:	38800015 	stw	r2,0(r7)
 1001198:	39c00104 	addi	r7,r7,4
 100119c:	19bffa36 	bltu	r3,r6,1001188 <memcpy+0x80>
 10011a0:	3807883a 	mov	r3,r7
 10011a4:	003fde06 	br	1001120 <memcpy+0x18>

010011a8 <memmove>:
 10011a8:	2807883a 	mov	r3,r5
 10011ac:	2011883a 	mov	r8,r4
 10011b0:	29000c2e 	bgeu	r5,r4,10011e4 <memmove+0x3c>
 10011b4:	298f883a 	add	r7,r5,r6
 10011b8:	21c00a2e 	bgeu	r4,r7,10011e4 <memmove+0x3c>
 10011bc:	30000726 	beq	r6,zero,10011dc <memmove+0x34>
 10011c0:	2187883a 	add	r3,r4,r6
 10011c4:	198dc83a 	sub	r6,r3,r6
 10011c8:	39ffffc4 	addi	r7,r7,-1
 10011cc:	38800003 	ldbu	r2,0(r7)
 10011d0:	18ffffc4 	addi	r3,r3,-1
 10011d4:	18800005 	stb	r2,0(r3)
 10011d8:	19bffb1e 	bne	r3,r6,10011c8 <memmove+0x20>
 10011dc:	2005883a 	mov	r2,r4
 10011e0:	f800283a 	ret
 10011e4:	01c003c4 	movi	r7,15
 10011e8:	39800a36 	bltu	r7,r6,1001214 <memmove+0x6c>
 10011ec:	303ffb26 	beq	r6,zero,10011dc <memmove+0x34>
 10011f0:	400f883a 	mov	r7,r8
 10011f4:	320d883a 	add	r6,r6,r8
 10011f8:	28800003 	ldbu	r2,0(r5)
 10011fc:	29400044 	addi	r5,r5,1
 1001200:	38800005 	stb	r2,0(r7)
 1001204:	39c00044 	addi	r7,r7,1
 1001208:	39bffb1e 	bne	r7,r6,10011f8 <memmove+0x50>
 100120c:	2005883a 	mov	r2,r4
 1001210:	f800283a 	ret
 1001214:	1904b03a 	or	r2,r3,r4
 1001218:	108000cc 	andi	r2,r2,3
 100121c:	103ff31e 	bne	r2,zero,10011ec <memmove+0x44>
 1001220:	3811883a 	mov	r8,r7
 1001224:	180b883a 	mov	r5,r3
 1001228:	200f883a 	mov	r7,r4
 100122c:	28c00017 	ldw	r3,0(r5)
 1001230:	31bffc04 	addi	r6,r6,-16
 1001234:	38c00015 	stw	r3,0(r7)
 1001238:	28800117 	ldw	r2,4(r5)
 100123c:	38800115 	stw	r2,4(r7)
 1001240:	28c00217 	ldw	r3,8(r5)
 1001244:	38c00215 	stw	r3,8(r7)
 1001248:	28800317 	ldw	r2,12(r5)
 100124c:	29400404 	addi	r5,r5,16
 1001250:	38800315 	stw	r2,12(r7)
 1001254:	39c00404 	addi	r7,r7,16
 1001258:	41bff436 	bltu	r8,r6,100122c <memmove+0x84>
 100125c:	008000c4 	movi	r2,3
 1001260:	1180072e 	bgeu	r2,r6,1001280 <memmove+0xd8>
 1001264:	1007883a 	mov	r3,r2
 1001268:	28800017 	ldw	r2,0(r5)
 100126c:	31bfff04 	addi	r6,r6,-4
 1001270:	29400104 	addi	r5,r5,4
 1001274:	38800015 	stw	r2,0(r7)
 1001278:	39c00104 	addi	r7,r7,4
 100127c:	19bffa36 	bltu	r3,r6,1001268 <memmove+0xc0>
 1001280:	3811883a 	mov	r8,r7
 1001284:	003fd906 	br	10011ec <memmove+0x44>

01001288 <_realloc_r>:
 1001288:	defff404 	addi	sp,sp,-48
 100128c:	dd800815 	stw	r22,32(sp)
 1001290:	dc800415 	stw	r18,16(sp)
 1001294:	dc400315 	stw	r17,12(sp)
 1001298:	dfc00b15 	stw	ra,44(sp)
 100129c:	df000a15 	stw	fp,40(sp)
 10012a0:	ddc00915 	stw	r23,36(sp)
 10012a4:	dd400715 	stw	r21,28(sp)
 10012a8:	dd000615 	stw	r20,24(sp)
 10012ac:	dcc00515 	stw	r19,20(sp)
 10012b0:	dc000215 	stw	r16,8(sp)
 10012b4:	2825883a 	mov	r18,r5
 10012b8:	3023883a 	mov	r17,r6
 10012bc:	202d883a 	mov	r22,r4
 10012c0:	2800c926 	beq	r5,zero,10015e8 <_realloc_r+0x360>
 10012c4:	10032b40 	call	10032b4 <__malloc_lock>
 10012c8:	943ffe04 	addi	r16,r18,-8
 10012cc:	88c002c4 	addi	r3,r17,11
 10012d0:	00800584 	movi	r2,22
 10012d4:	82000117 	ldw	r8,4(r16)
 10012d8:	10c01b2e 	bgeu	r2,r3,1001348 <_realloc_r+0xc0>
 10012dc:	00bffe04 	movi	r2,-8
 10012e0:	188e703a 	and	r7,r3,r2
 10012e4:	3839883a 	mov	fp,r7
 10012e8:	38001a16 	blt	r7,zero,1001354 <_realloc_r+0xcc>
 10012ec:	e4401936 	bltu	fp,r17,1001354 <_realloc_r+0xcc>
 10012f0:	013fff04 	movi	r4,-4
 10012f4:	4126703a 	and	r19,r8,r4
 10012f8:	99c02616 	blt	r19,r7,1001394 <_realloc_r+0x10c>
 10012fc:	802b883a 	mov	r21,r16
 1001300:	9829883a 	mov	r20,r19
 1001304:	84000204 	addi	r16,r16,8
 1001308:	a80f883a 	mov	r7,r21
 100130c:	a70dc83a 	sub	r6,r20,fp
 1001310:	008003c4 	movi	r2,15
 1001314:	1180c136 	bltu	r2,r6,100161c <_realloc_r+0x394>
 1001318:	38800117 	ldw	r2,4(r7)
 100131c:	a549883a 	add	r4,r20,r21
 1001320:	1080004c 	andi	r2,r2,1
 1001324:	a084b03a 	or	r2,r20,r2
 1001328:	38800115 	stw	r2,4(r7)
 100132c:	20c00117 	ldw	r3,4(r4)
 1001330:	18c00054 	ori	r3,r3,1
 1001334:	20c00115 	stw	r3,4(r4)
 1001338:	b009883a 	mov	r4,r22
 100133c:	10032d40 	call	10032d4 <__malloc_unlock>
 1001340:	8023883a 	mov	r17,r16
 1001344:	00000606 	br	1001360 <_realloc_r+0xd8>
 1001348:	01c00404 	movi	r7,16
 100134c:	3839883a 	mov	fp,r7
 1001350:	e47fe72e 	bgeu	fp,r17,10012f0 <_realloc_r+0x68>
 1001354:	00800304 	movi	r2,12
 1001358:	0023883a 	mov	r17,zero
 100135c:	b0800015 	stw	r2,0(r22)
 1001360:	8805883a 	mov	r2,r17
 1001364:	dfc00b17 	ldw	ra,44(sp)
 1001368:	df000a17 	ldw	fp,40(sp)
 100136c:	ddc00917 	ldw	r23,36(sp)
 1001370:	dd800817 	ldw	r22,32(sp)
 1001374:	dd400717 	ldw	r21,28(sp)
 1001378:	dd000617 	ldw	r20,24(sp)
 100137c:	dcc00517 	ldw	r19,20(sp)
 1001380:	dc800417 	ldw	r18,16(sp)
 1001384:	dc400317 	ldw	r17,12(sp)
 1001388:	dc000217 	ldw	r16,8(sp)
 100138c:	dec00c04 	addi	sp,sp,48
 1001390:	f800283a 	ret
 1001394:	00804074 	movhi	r2,257
 1001398:	10aa0704 	addi	r2,r2,-22500
 100139c:	12400217 	ldw	r9,8(r2)
 10013a0:	84cd883a 	add	r6,r16,r19
 10013a4:	802b883a 	mov	r21,r16
 10013a8:	3240b926 	beq	r6,r9,1001690 <_realloc_r+0x408>
 10013ac:	31400117 	ldw	r5,4(r6)
 10013b0:	00bfff84 	movi	r2,-2
 10013b4:	2884703a 	and	r2,r5,r2
 10013b8:	1185883a 	add	r2,r2,r6
 10013bc:	10c00117 	ldw	r3,4(r2)
 10013c0:	18c0004c 	andi	r3,r3,1
 10013c4:	1807003a 	cmpeq	r3,r3,zero
 10013c8:	1800a326 	beq	r3,zero,1001658 <_realloc_r+0x3d0>
 10013cc:	2908703a 	and	r4,r5,r4
 10013d0:	9929883a 	add	r20,r19,r4
 10013d4:	a1c0a30e 	bge	r20,r7,1001664 <_realloc_r+0x3dc>
 10013d8:	4080004c 	andi	r2,r8,1
 10013dc:	1000551e 	bne	r2,zero,1001534 <_realloc_r+0x2ac>
 10013e0:	80800017 	ldw	r2,0(r16)
 10013e4:	80afc83a 	sub	r23,r16,r2
 10013e8:	b8c00117 	ldw	r3,4(r23)
 10013ec:	00bfff04 	movi	r2,-4
 10013f0:	1884703a 	and	r2,r3,r2
 10013f4:	30002e26 	beq	r6,zero,10014b0 <_realloc_r+0x228>
 10013f8:	3240b926 	beq	r6,r9,10016e0 <_realloc_r+0x458>
 10013fc:	98a9883a 	add	r20,r19,r2
 1001400:	2509883a 	add	r4,r4,r20
 1001404:	d9000015 	stw	r4,0(sp)
 1001408:	21c02a16 	blt	r4,r7,10014b4 <_realloc_r+0x22c>
 100140c:	30800317 	ldw	r2,12(r6)
 1001410:	30c00217 	ldw	r3,8(r6)
 1001414:	01400904 	movi	r5,36
 1001418:	99bfff04 	addi	r6,r19,-4
 100141c:	18800315 	stw	r2,12(r3)
 1001420:	10c00215 	stw	r3,8(r2)
 1001424:	b9000317 	ldw	r4,12(r23)
 1001428:	b8800217 	ldw	r2,8(r23)
 100142c:	b82b883a 	mov	r21,r23
 1001430:	bc000204 	addi	r16,r23,8
 1001434:	20800215 	stw	r2,8(r4)
 1001438:	11000315 	stw	r4,12(r2)
 100143c:	2980e436 	bltu	r5,r6,10017d0 <_realloc_r+0x548>
 1001440:	008004c4 	movi	r2,19
 1001444:	9009883a 	mov	r4,r18
 1001448:	8011883a 	mov	r8,r16
 100144c:	11800f2e 	bgeu	r2,r6,100148c <_realloc_r+0x204>
 1001450:	90800017 	ldw	r2,0(r18)
 1001454:	ba000404 	addi	r8,r23,16
 1001458:	91000204 	addi	r4,r18,8
 100145c:	b8800215 	stw	r2,8(r23)
 1001460:	90c00117 	ldw	r3,4(r18)
 1001464:	008006c4 	movi	r2,27
 1001468:	b8c00315 	stw	r3,12(r23)
 100146c:	1180072e 	bgeu	r2,r6,100148c <_realloc_r+0x204>
 1001470:	90c00217 	ldw	r3,8(r18)
 1001474:	ba000604 	addi	r8,r23,24
 1001478:	91000404 	addi	r4,r18,16
 100147c:	b8c00415 	stw	r3,16(r23)
 1001480:	90800317 	ldw	r2,12(r18)
 1001484:	b8800515 	stw	r2,20(r23)
 1001488:	3140e726 	beq	r6,r5,1001828 <_realloc_r+0x5a0>
 100148c:	20800017 	ldw	r2,0(r4)
 1001490:	dd000017 	ldw	r20,0(sp)
 1001494:	b80f883a 	mov	r7,r23
 1001498:	40800015 	stw	r2,0(r8)
 100149c:	20c00117 	ldw	r3,4(r4)
 10014a0:	40c00115 	stw	r3,4(r8)
 10014a4:	20800217 	ldw	r2,8(r4)
 10014a8:	40800215 	stw	r2,8(r8)
 10014ac:	003f9706 	br	100130c <_realloc_r+0x84>
 10014b0:	98a9883a 	add	r20,r19,r2
 10014b4:	a1c01f16 	blt	r20,r7,1001534 <_realloc_r+0x2ac>
 10014b8:	b8c00317 	ldw	r3,12(r23)
 10014bc:	b8800217 	ldw	r2,8(r23)
 10014c0:	99bfff04 	addi	r6,r19,-4
 10014c4:	01400904 	movi	r5,36
 10014c8:	b82b883a 	mov	r21,r23
 10014cc:	18800215 	stw	r2,8(r3)
 10014d0:	10c00315 	stw	r3,12(r2)
 10014d4:	bc000204 	addi	r16,r23,8
 10014d8:	2980c336 	bltu	r5,r6,10017e8 <_realloc_r+0x560>
 10014dc:	008004c4 	movi	r2,19
 10014e0:	9009883a 	mov	r4,r18
 10014e4:	8011883a 	mov	r8,r16
 10014e8:	11800f2e 	bgeu	r2,r6,1001528 <_realloc_r+0x2a0>
 10014ec:	90800017 	ldw	r2,0(r18)
 10014f0:	ba000404 	addi	r8,r23,16
 10014f4:	91000204 	addi	r4,r18,8
 10014f8:	b8800215 	stw	r2,8(r23)
 10014fc:	90c00117 	ldw	r3,4(r18)
 1001500:	008006c4 	movi	r2,27
 1001504:	b8c00315 	stw	r3,12(r23)
 1001508:	1180072e 	bgeu	r2,r6,1001528 <_realloc_r+0x2a0>
 100150c:	90c00217 	ldw	r3,8(r18)
 1001510:	ba000604 	addi	r8,r23,24
 1001514:	91000404 	addi	r4,r18,16
 1001518:	b8c00415 	stw	r3,16(r23)
 100151c:	90800317 	ldw	r2,12(r18)
 1001520:	b8800515 	stw	r2,20(r23)
 1001524:	3140c726 	beq	r6,r5,1001844 <_realloc_r+0x5bc>
 1001528:	20800017 	ldw	r2,0(r4)
 100152c:	b80f883a 	mov	r7,r23
 1001530:	003fd906 	br	1001498 <_realloc_r+0x210>
 1001534:	880b883a 	mov	r5,r17
 1001538:	b009883a 	mov	r4,r22
 100153c:	10008e40 	call	10008e4 <_malloc_r>
 1001540:	1023883a 	mov	r17,r2
 1001544:	10002526 	beq	r2,zero,10015dc <_realloc_r+0x354>
 1001548:	80800117 	ldw	r2,4(r16)
 100154c:	00ffff84 	movi	r3,-2
 1001550:	893ffe04 	addi	r4,r17,-8
 1001554:	10c4703a 	and	r2,r2,r3
 1001558:	8085883a 	add	r2,r16,r2
 100155c:	20809526 	beq	r4,r2,10017b4 <_realloc_r+0x52c>
 1001560:	99bfff04 	addi	r6,r19,-4
 1001564:	01c00904 	movi	r7,36
 1001568:	39804536 	bltu	r7,r6,1001680 <_realloc_r+0x3f8>
 100156c:	008004c4 	movi	r2,19
 1001570:	9009883a 	mov	r4,r18
 1001574:	880b883a 	mov	r5,r17
 1001578:	11800f2e 	bgeu	r2,r6,10015b8 <_realloc_r+0x330>
 100157c:	90800017 	ldw	r2,0(r18)
 1001580:	89400204 	addi	r5,r17,8
 1001584:	91000204 	addi	r4,r18,8
 1001588:	88800015 	stw	r2,0(r17)
 100158c:	90c00117 	ldw	r3,4(r18)
 1001590:	008006c4 	movi	r2,27
 1001594:	88c00115 	stw	r3,4(r17)
 1001598:	1180072e 	bgeu	r2,r6,10015b8 <_realloc_r+0x330>
 100159c:	90c00217 	ldw	r3,8(r18)
 10015a0:	89400404 	addi	r5,r17,16
 10015a4:	91000404 	addi	r4,r18,16
 10015a8:	88c00215 	stw	r3,8(r17)
 10015ac:	90800317 	ldw	r2,12(r18)
 10015b0:	88800315 	stw	r2,12(r17)
 10015b4:	31c09126 	beq	r6,r7,10017fc <_realloc_r+0x574>
 10015b8:	20800017 	ldw	r2,0(r4)
 10015bc:	28800015 	stw	r2,0(r5)
 10015c0:	20c00117 	ldw	r3,4(r4)
 10015c4:	28c00115 	stw	r3,4(r5)
 10015c8:	20800217 	ldw	r2,8(r4)
 10015cc:	28800215 	stw	r2,8(r5)
 10015d0:	900b883a 	mov	r5,r18
 10015d4:	b009883a 	mov	r4,r22
 10015d8:	10020440 	call	1002044 <_free_r>
 10015dc:	b009883a 	mov	r4,r22
 10015e0:	10032d40 	call	10032d4 <__malloc_unlock>
 10015e4:	003f5e06 	br	1001360 <_realloc_r+0xd8>
 10015e8:	300b883a 	mov	r5,r6
 10015ec:	dfc00b17 	ldw	ra,44(sp)
 10015f0:	df000a17 	ldw	fp,40(sp)
 10015f4:	ddc00917 	ldw	r23,36(sp)
 10015f8:	dd800817 	ldw	r22,32(sp)
 10015fc:	dd400717 	ldw	r21,28(sp)
 1001600:	dd000617 	ldw	r20,24(sp)
 1001604:	dcc00517 	ldw	r19,20(sp)
 1001608:	dc800417 	ldw	r18,16(sp)
 100160c:	dc400317 	ldw	r17,12(sp)
 1001610:	dc000217 	ldw	r16,8(sp)
 1001614:	dec00c04 	addi	sp,sp,48
 1001618:	10008e41 	jmpi	10008e4 <_malloc_r>
 100161c:	38800117 	ldw	r2,4(r7)
 1001620:	e54b883a 	add	r5,fp,r21
 1001624:	31000054 	ori	r4,r6,1
 1001628:	1080004c 	andi	r2,r2,1
 100162c:	1704b03a 	or	r2,r2,fp
 1001630:	38800115 	stw	r2,4(r7)
 1001634:	29000115 	stw	r4,4(r5)
 1001638:	2987883a 	add	r3,r5,r6
 100163c:	18800117 	ldw	r2,4(r3)
 1001640:	29400204 	addi	r5,r5,8
 1001644:	b009883a 	mov	r4,r22
 1001648:	10800054 	ori	r2,r2,1
 100164c:	18800115 	stw	r2,4(r3)
 1001650:	10020440 	call	1002044 <_free_r>
 1001654:	003f3806 	br	1001338 <_realloc_r+0xb0>
 1001658:	000d883a 	mov	r6,zero
 100165c:	0009883a 	mov	r4,zero
 1001660:	003f5d06 	br	10013d8 <_realloc_r+0x150>
 1001664:	30c00217 	ldw	r3,8(r6)
 1001668:	30800317 	ldw	r2,12(r6)
 100166c:	800f883a 	mov	r7,r16
 1001670:	84000204 	addi	r16,r16,8
 1001674:	10c00215 	stw	r3,8(r2)
 1001678:	18800315 	stw	r2,12(r3)
 100167c:	003f2306 	br	100130c <_realloc_r+0x84>
 1001680:	8809883a 	mov	r4,r17
 1001684:	900b883a 	mov	r5,r18
 1001688:	10011a80 	call	10011a8 <memmove>
 100168c:	003fd006 	br	10015d0 <_realloc_r+0x348>
 1001690:	30800117 	ldw	r2,4(r6)
 1001694:	e0c00404 	addi	r3,fp,16
 1001698:	1108703a 	and	r4,r2,r4
 100169c:	9905883a 	add	r2,r19,r4
 10016a0:	10ff4d16 	blt	r2,r3,10013d8 <_realloc_r+0x150>
 10016a4:	1705c83a 	sub	r2,r2,fp
 10016a8:	870b883a 	add	r5,r16,fp
 10016ac:	10800054 	ori	r2,r2,1
 10016b0:	28800115 	stw	r2,4(r5)
 10016b4:	80c00117 	ldw	r3,4(r16)
 10016b8:	00804074 	movhi	r2,257
 10016bc:	10aa0704 	addi	r2,r2,-22500
 10016c0:	b009883a 	mov	r4,r22
 10016c4:	18c0004c 	andi	r3,r3,1
 10016c8:	e0c6b03a 	or	r3,fp,r3
 10016cc:	11400215 	stw	r5,8(r2)
 10016d0:	80c00115 	stw	r3,4(r16)
 10016d4:	10032d40 	call	10032d4 <__malloc_unlock>
 10016d8:	84400204 	addi	r17,r16,8
 10016dc:	003f2006 	br	1001360 <_realloc_r+0xd8>
 10016e0:	98a9883a 	add	r20,r19,r2
 10016e4:	2509883a 	add	r4,r4,r20
 10016e8:	e0800404 	addi	r2,fp,16
 10016ec:	d9000115 	stw	r4,4(sp)
 10016f0:	20bf7016 	blt	r4,r2,10014b4 <_realloc_r+0x22c>
 10016f4:	b8c00317 	ldw	r3,12(r23)
 10016f8:	b8800217 	ldw	r2,8(r23)
 10016fc:	99bfff04 	addi	r6,r19,-4
 1001700:	01400904 	movi	r5,36
 1001704:	18800215 	stw	r2,8(r3)
 1001708:	10c00315 	stw	r3,12(r2)
 100170c:	bc400204 	addi	r17,r23,8
 1001710:	29804136 	bltu	r5,r6,1001818 <_realloc_r+0x590>
 1001714:	008004c4 	movi	r2,19
 1001718:	9009883a 	mov	r4,r18
 100171c:	880f883a 	mov	r7,r17
 1001720:	11800f2e 	bgeu	r2,r6,1001760 <_realloc_r+0x4d8>
 1001724:	90800017 	ldw	r2,0(r18)
 1001728:	b9c00404 	addi	r7,r23,16
 100172c:	91000204 	addi	r4,r18,8
 1001730:	b8800215 	stw	r2,8(r23)
 1001734:	90c00117 	ldw	r3,4(r18)
 1001738:	008006c4 	movi	r2,27
 100173c:	b8c00315 	stw	r3,12(r23)
 1001740:	1180072e 	bgeu	r2,r6,1001760 <_realloc_r+0x4d8>
 1001744:	90c00217 	ldw	r3,8(r18)
 1001748:	b9c00604 	addi	r7,r23,24
 100174c:	91000404 	addi	r4,r18,16
 1001750:	b8c00415 	stw	r3,16(r23)
 1001754:	90800317 	ldw	r2,12(r18)
 1001758:	b8800515 	stw	r2,20(r23)
 100175c:	31404026 	beq	r6,r5,1001860 <_realloc_r+0x5d8>
 1001760:	20800017 	ldw	r2,0(r4)
 1001764:	38800015 	stw	r2,0(r7)
 1001768:	20c00117 	ldw	r3,4(r4)
 100176c:	38c00115 	stw	r3,4(r7)
 1001770:	20800217 	ldw	r2,8(r4)
 1001774:	38800215 	stw	r2,8(r7)
 1001778:	d8c00117 	ldw	r3,4(sp)
 100177c:	bf0b883a 	add	r5,r23,fp
 1001780:	b009883a 	mov	r4,r22
 1001784:	1f05c83a 	sub	r2,r3,fp
 1001788:	10800054 	ori	r2,r2,1
 100178c:	28800115 	stw	r2,4(r5)
 1001790:	b8c00117 	ldw	r3,4(r23)
 1001794:	00804074 	movhi	r2,257
 1001798:	10aa0704 	addi	r2,r2,-22500
 100179c:	11400215 	stw	r5,8(r2)
 10017a0:	18c0004c 	andi	r3,r3,1
 10017a4:	e0c6b03a 	or	r3,fp,r3
 10017a8:	b8c00115 	stw	r3,4(r23)
 10017ac:	10032d40 	call	10032d4 <__malloc_unlock>
 10017b0:	003eeb06 	br	1001360 <_realloc_r+0xd8>
 10017b4:	20800117 	ldw	r2,4(r4)
 10017b8:	00ffff04 	movi	r3,-4
 10017bc:	800f883a 	mov	r7,r16
 10017c0:	10c4703a 	and	r2,r2,r3
 10017c4:	98a9883a 	add	r20,r19,r2
 10017c8:	84000204 	addi	r16,r16,8
 10017cc:	003ecf06 	br	100130c <_realloc_r+0x84>
 10017d0:	900b883a 	mov	r5,r18
 10017d4:	8009883a 	mov	r4,r16
 10017d8:	10011a80 	call	10011a8 <memmove>
 10017dc:	dd000017 	ldw	r20,0(sp)
 10017e0:	b80f883a 	mov	r7,r23
 10017e4:	003ec906 	br	100130c <_realloc_r+0x84>
 10017e8:	900b883a 	mov	r5,r18
 10017ec:	8009883a 	mov	r4,r16
 10017f0:	10011a80 	call	10011a8 <memmove>
 10017f4:	b80f883a 	mov	r7,r23
 10017f8:	003ec406 	br	100130c <_realloc_r+0x84>
 10017fc:	90c00417 	ldw	r3,16(r18)
 1001800:	89400604 	addi	r5,r17,24
 1001804:	91000604 	addi	r4,r18,24
 1001808:	88c00415 	stw	r3,16(r17)
 100180c:	90800517 	ldw	r2,20(r18)
 1001810:	88800515 	stw	r2,20(r17)
 1001814:	003f6806 	br	10015b8 <_realloc_r+0x330>
 1001818:	900b883a 	mov	r5,r18
 100181c:	8809883a 	mov	r4,r17
 1001820:	10011a80 	call	10011a8 <memmove>
 1001824:	003fd406 	br	1001778 <_realloc_r+0x4f0>
 1001828:	90c00417 	ldw	r3,16(r18)
 100182c:	91000604 	addi	r4,r18,24
 1001830:	ba000804 	addi	r8,r23,32
 1001834:	b8c00615 	stw	r3,24(r23)
 1001838:	90800517 	ldw	r2,20(r18)
 100183c:	b8800715 	stw	r2,28(r23)
 1001840:	003f1206 	br	100148c <_realloc_r+0x204>
 1001844:	90c00417 	ldw	r3,16(r18)
 1001848:	91000604 	addi	r4,r18,24
 100184c:	ba000804 	addi	r8,r23,32
 1001850:	b8c00615 	stw	r3,24(r23)
 1001854:	90800517 	ldw	r2,20(r18)
 1001858:	b8800715 	stw	r2,28(r23)
 100185c:	003f3206 	br	1001528 <_realloc_r+0x2a0>
 1001860:	90c00417 	ldw	r3,16(r18)
 1001864:	91000604 	addi	r4,r18,24
 1001868:	b9c00804 	addi	r7,r23,32
 100186c:	b8c00615 	stw	r3,24(r23)
 1001870:	90800517 	ldw	r2,20(r18)
 1001874:	b8800715 	stw	r2,28(r23)
 1001878:	003fb906 	br	1001760 <_realloc_r+0x4d8>

0100187c <_sbrk_r>:
 100187c:	defffd04 	addi	sp,sp,-12
 1001880:	dc000015 	stw	r16,0(sp)
 1001884:	04004074 	movhi	r16,257
 1001888:	84367004 	addi	r16,r16,-9792
 100188c:	dc400115 	stw	r17,4(sp)
 1001890:	80000015 	stw	zero,0(r16)
 1001894:	2023883a 	mov	r17,r4
 1001898:	2809883a 	mov	r4,r5
 100189c:	dfc00215 	stw	ra,8(sp)
 10018a0:	10034d40 	call	10034d4 <sbrk>
 10018a4:	1007883a 	mov	r3,r2
 10018a8:	00bfffc4 	movi	r2,-1
 10018ac:	18800626 	beq	r3,r2,10018c8 <_sbrk_r+0x4c>
 10018b0:	1805883a 	mov	r2,r3
 10018b4:	dfc00217 	ldw	ra,8(sp)
 10018b8:	dc400117 	ldw	r17,4(sp)
 10018bc:	dc000017 	ldw	r16,0(sp)
 10018c0:	dec00304 	addi	sp,sp,12
 10018c4:	f800283a 	ret
 10018c8:	80800017 	ldw	r2,0(r16)
 10018cc:	103ff826 	beq	r2,zero,10018b0 <_sbrk_r+0x34>
 10018d0:	88800015 	stw	r2,0(r17)
 10018d4:	1805883a 	mov	r2,r3
 10018d8:	dfc00217 	ldw	ra,8(sp)
 10018dc:	dc400117 	ldw	r17,4(sp)
 10018e0:	dc000017 	ldw	r16,0(sp)
 10018e4:	dec00304 	addi	sp,sp,12
 10018e8:	f800283a 	ret

010018ec <__swsetup_r>:
 10018ec:	00804074 	movhi	r2,257
 10018f0:	10afac04 	addi	r2,r2,-16720
 10018f4:	10c00017 	ldw	r3,0(r2)
 10018f8:	defffd04 	addi	sp,sp,-12
 10018fc:	dc400115 	stw	r17,4(sp)
 1001900:	dc000015 	stw	r16,0(sp)
 1001904:	dfc00215 	stw	ra,8(sp)
 1001908:	2023883a 	mov	r17,r4
 100190c:	2821883a 	mov	r16,r5
 1001910:	18000226 	beq	r3,zero,100191c <__swsetup_r+0x30>
 1001914:	18800e17 	ldw	r2,56(r3)
 1001918:	10001f26 	beq	r2,zero,1001998 <__swsetup_r+0xac>
 100191c:	8100030b 	ldhu	r4,12(r16)
 1001920:	2080020c 	andi	r2,r4,8
 1001924:	10002826 	beq	r2,zero,10019c8 <__swsetup_r+0xdc>
 1001928:	81400417 	ldw	r5,16(r16)
 100192c:	28001d26 	beq	r5,zero,10019a4 <__swsetup_r+0xb8>
 1001930:	2080004c 	andi	r2,r4,1
 1001934:	1005003a 	cmpeq	r2,r2,zero
 1001938:	10000b26 	beq	r2,zero,1001968 <__swsetup_r+0x7c>
 100193c:	2080008c 	andi	r2,r4,2
 1001940:	10001226 	beq	r2,zero,100198c <__swsetup_r+0xa0>
 1001944:	0005883a 	mov	r2,zero
 1001948:	80800215 	stw	r2,8(r16)
 100194c:	28000b26 	beq	r5,zero,100197c <__swsetup_r+0x90>
 1001950:	0005883a 	mov	r2,zero
 1001954:	dfc00217 	ldw	ra,8(sp)
 1001958:	dc400117 	ldw	r17,4(sp)
 100195c:	dc000017 	ldw	r16,0(sp)
 1001960:	dec00304 	addi	sp,sp,12
 1001964:	f800283a 	ret
 1001968:	80800517 	ldw	r2,20(r16)
 100196c:	80000215 	stw	zero,8(r16)
 1001970:	0085c83a 	sub	r2,zero,r2
 1001974:	80800615 	stw	r2,24(r16)
 1001978:	283ff51e 	bne	r5,zero,1001950 <__swsetup_r+0x64>
 100197c:	2080200c 	andi	r2,r4,128
 1001980:	103ff326 	beq	r2,zero,1001950 <__swsetup_r+0x64>
 1001984:	00bfffc4 	movi	r2,-1
 1001988:	003ff206 	br	1001954 <__swsetup_r+0x68>
 100198c:	80800517 	ldw	r2,20(r16)
 1001990:	80800215 	stw	r2,8(r16)
 1001994:	003fed06 	br	100194c <__swsetup_r+0x60>
 1001998:	1809883a 	mov	r4,r3
 100199c:	1001cc00 	call	1001cc0 <__sinit>
 10019a0:	003fde06 	br	100191c <__swsetup_r+0x30>
 10019a4:	20c0a00c 	andi	r3,r4,640
 10019a8:	00808004 	movi	r2,512
 10019ac:	18bfe026 	beq	r3,r2,1001930 <__swsetup_r+0x44>
 10019b0:	8809883a 	mov	r4,r17
 10019b4:	800b883a 	mov	r5,r16
 10019b8:	10024d80 	call	10024d8 <__smakebuf_r>
 10019bc:	8100030b 	ldhu	r4,12(r16)
 10019c0:	81400417 	ldw	r5,16(r16)
 10019c4:	003fda06 	br	1001930 <__swsetup_r+0x44>
 10019c8:	2080040c 	andi	r2,r4,16
 10019cc:	103fed26 	beq	r2,zero,1001984 <__swsetup_r+0x98>
 10019d0:	2080010c 	andi	r2,r4,4
 10019d4:	10001226 	beq	r2,zero,1001a20 <__swsetup_r+0x134>
 10019d8:	81400c17 	ldw	r5,48(r16)
 10019dc:	28000526 	beq	r5,zero,10019f4 <__swsetup_r+0x108>
 10019e0:	80801004 	addi	r2,r16,64
 10019e4:	28800226 	beq	r5,r2,10019f0 <__swsetup_r+0x104>
 10019e8:	8809883a 	mov	r4,r17
 10019ec:	10020440 	call	1002044 <_free_r>
 10019f0:	80000c15 	stw	zero,48(r16)
 10019f4:	8080030b 	ldhu	r2,12(r16)
 10019f8:	81400417 	ldw	r5,16(r16)
 10019fc:	80000115 	stw	zero,4(r16)
 1001a00:	10bff6cc 	andi	r2,r2,65499
 1001a04:	8080030d 	sth	r2,12(r16)
 1001a08:	81400015 	stw	r5,0(r16)
 1001a0c:	8080030b 	ldhu	r2,12(r16)
 1001a10:	10800214 	ori	r2,r2,8
 1001a14:	113fffcc 	andi	r4,r2,65535
 1001a18:	8080030d 	sth	r2,12(r16)
 1001a1c:	003fc306 	br	100192c <__swsetup_r+0x40>
 1001a20:	81400417 	ldw	r5,16(r16)
 1001a24:	003ff906 	br	1001a0c <__swsetup_r+0x120>

01001a28 <_fflush_r>:
 1001a28:	defffb04 	addi	sp,sp,-20
 1001a2c:	dcc00315 	stw	r19,12(sp)
 1001a30:	dc800215 	stw	r18,8(sp)
 1001a34:	dfc00415 	stw	ra,16(sp)
 1001a38:	dc400115 	stw	r17,4(sp)
 1001a3c:	dc000015 	stw	r16,0(sp)
 1001a40:	2027883a 	mov	r19,r4
 1001a44:	2825883a 	mov	r18,r5
 1001a48:	20000226 	beq	r4,zero,1001a54 <_fflush_r+0x2c>
 1001a4c:	20800e17 	ldw	r2,56(r4)
 1001a50:	10005626 	beq	r2,zero,1001bac <_fflush_r+0x184>
 1001a54:	9100030b 	ldhu	r4,12(r18)
 1001a58:	20ffffcc 	andi	r3,r4,65535
 1001a5c:	18e0001c 	xori	r3,r3,32768
 1001a60:	18e00004 	addi	r3,r3,-32768
 1001a64:	1880020c 	andi	r2,r3,8
 1001a68:	1000261e 	bne	r2,zero,1001b04 <_fflush_r+0xdc>
 1001a6c:	90c00117 	ldw	r3,4(r18)
 1001a70:	20820014 	ori	r2,r4,2048
 1001a74:	9080030d 	sth	r2,12(r18)
 1001a78:	1009883a 	mov	r4,r2
 1001a7c:	00c0400e 	bge	zero,r3,1001b80 <_fflush_r+0x158>
 1001a80:	92000a17 	ldw	r8,40(r18)
 1001a84:	40004026 	beq	r8,zero,1001b88 <_fflush_r+0x160>
 1001a88:	2084000c 	andi	r2,r4,4096
 1001a8c:	10005326 	beq	r2,zero,1001bdc <_fflush_r+0x1b4>
 1001a90:	94001417 	ldw	r16,80(r18)
 1001a94:	9080030b 	ldhu	r2,12(r18)
 1001a98:	1080010c 	andi	r2,r2,4
 1001a9c:	1000481e 	bne	r2,zero,1001bc0 <_fflush_r+0x198>
 1001aa0:	91400717 	ldw	r5,28(r18)
 1001aa4:	9809883a 	mov	r4,r19
 1001aa8:	800d883a 	mov	r6,r16
 1001aac:	000f883a 	mov	r7,zero
 1001ab0:	403ee83a 	callr	r8
 1001ab4:	8080261e 	bne	r16,r2,1001b50 <_fflush_r+0x128>
 1001ab8:	9080030b 	ldhu	r2,12(r18)
 1001abc:	91000417 	ldw	r4,16(r18)
 1001ac0:	90000115 	stw	zero,4(r18)
 1001ac4:	10bdffcc 	andi	r2,r2,63487
 1001ac8:	10ffffcc 	andi	r3,r2,65535
 1001acc:	18c4000c 	andi	r3,r3,4096
 1001ad0:	9080030d 	sth	r2,12(r18)
 1001ad4:	91000015 	stw	r4,0(r18)
 1001ad8:	18002b26 	beq	r3,zero,1001b88 <_fflush_r+0x160>
 1001adc:	0007883a 	mov	r3,zero
 1001ae0:	1805883a 	mov	r2,r3
 1001ae4:	94001415 	stw	r16,80(r18)
 1001ae8:	dfc00417 	ldw	ra,16(sp)
 1001aec:	dcc00317 	ldw	r19,12(sp)
 1001af0:	dc800217 	ldw	r18,8(sp)
 1001af4:	dc400117 	ldw	r17,4(sp)
 1001af8:	dc000017 	ldw	r16,0(sp)
 1001afc:	dec00504 	addi	sp,sp,20
 1001b00:	f800283a 	ret
 1001b04:	94400417 	ldw	r17,16(r18)
 1001b08:	88001f26 	beq	r17,zero,1001b88 <_fflush_r+0x160>
 1001b0c:	90800017 	ldw	r2,0(r18)
 1001b10:	18c000cc 	andi	r3,r3,3
 1001b14:	94400015 	stw	r17,0(r18)
 1001b18:	1461c83a 	sub	r16,r2,r17
 1001b1c:	18002526 	beq	r3,zero,1001bb4 <_fflush_r+0x18c>
 1001b20:	0005883a 	mov	r2,zero
 1001b24:	90800215 	stw	r2,8(r18)
 1001b28:	0400170e 	bge	zero,r16,1001b88 <_fflush_r+0x160>
 1001b2c:	90c00917 	ldw	r3,36(r18)
 1001b30:	91400717 	ldw	r5,28(r18)
 1001b34:	880d883a 	mov	r6,r17
 1001b38:	800f883a 	mov	r7,r16
 1001b3c:	9809883a 	mov	r4,r19
 1001b40:	183ee83a 	callr	r3
 1001b44:	88a3883a 	add	r17,r17,r2
 1001b48:	80a1c83a 	sub	r16,r16,r2
 1001b4c:	00bff616 	blt	zero,r2,1001b28 <_fflush_r+0x100>
 1001b50:	9080030b 	ldhu	r2,12(r18)
 1001b54:	00ffffc4 	movi	r3,-1
 1001b58:	10801014 	ori	r2,r2,64
 1001b5c:	9080030d 	sth	r2,12(r18)
 1001b60:	1805883a 	mov	r2,r3
 1001b64:	dfc00417 	ldw	ra,16(sp)
 1001b68:	dcc00317 	ldw	r19,12(sp)
 1001b6c:	dc800217 	ldw	r18,8(sp)
 1001b70:	dc400117 	ldw	r17,4(sp)
 1001b74:	dc000017 	ldw	r16,0(sp)
 1001b78:	dec00504 	addi	sp,sp,20
 1001b7c:	f800283a 	ret
 1001b80:	90800f17 	ldw	r2,60(r18)
 1001b84:	00bfbe16 	blt	zero,r2,1001a80 <_fflush_r+0x58>
 1001b88:	0007883a 	mov	r3,zero
 1001b8c:	1805883a 	mov	r2,r3
 1001b90:	dfc00417 	ldw	ra,16(sp)
 1001b94:	dcc00317 	ldw	r19,12(sp)
 1001b98:	dc800217 	ldw	r18,8(sp)
 1001b9c:	dc400117 	ldw	r17,4(sp)
 1001ba0:	dc000017 	ldw	r16,0(sp)
 1001ba4:	dec00504 	addi	sp,sp,20
 1001ba8:	f800283a 	ret
 1001bac:	1001cc00 	call	1001cc0 <__sinit>
 1001bb0:	003fa806 	br	1001a54 <_fflush_r+0x2c>
 1001bb4:	90800517 	ldw	r2,20(r18)
 1001bb8:	90800215 	stw	r2,8(r18)
 1001bbc:	003fda06 	br	1001b28 <_fflush_r+0x100>
 1001bc0:	90800117 	ldw	r2,4(r18)
 1001bc4:	90c00c17 	ldw	r3,48(r18)
 1001bc8:	80a1c83a 	sub	r16,r16,r2
 1001bcc:	183fb426 	beq	r3,zero,1001aa0 <_fflush_r+0x78>
 1001bd0:	90800f17 	ldw	r2,60(r18)
 1001bd4:	80a1c83a 	sub	r16,r16,r2
 1001bd8:	003fb106 	br	1001aa0 <_fflush_r+0x78>
 1001bdc:	91400717 	ldw	r5,28(r18)
 1001be0:	9809883a 	mov	r4,r19
 1001be4:	000d883a 	mov	r6,zero
 1001be8:	01c00044 	movi	r7,1
 1001bec:	403ee83a 	callr	r8
 1001bf0:	1021883a 	mov	r16,r2
 1001bf4:	00bfffc4 	movi	r2,-1
 1001bf8:	80800226 	beq	r16,r2,1001c04 <_fflush_r+0x1dc>
 1001bfc:	92000a17 	ldw	r8,40(r18)
 1001c00:	003fa406 	br	1001a94 <_fflush_r+0x6c>
 1001c04:	98c00017 	ldw	r3,0(r19)
 1001c08:	00800744 	movi	r2,29
 1001c0c:	18bfde26 	beq	r3,r2,1001b88 <_fflush_r+0x160>
 1001c10:	9080030b 	ldhu	r2,12(r18)
 1001c14:	8007883a 	mov	r3,r16
 1001c18:	10801014 	ori	r2,r2,64
 1001c1c:	9080030d 	sth	r2,12(r18)
 1001c20:	003fcf06 	br	1001b60 <_fflush_r+0x138>

01001c24 <fflush>:
 1001c24:	01404034 	movhi	r5,256
 1001c28:	29468a04 	addi	r5,r5,6696
 1001c2c:	2007883a 	mov	r3,r4
 1001c30:	20000526 	beq	r4,zero,1001c48 <fflush+0x24>
 1001c34:	00804074 	movhi	r2,257
 1001c38:	10afac04 	addi	r2,r2,-16720
 1001c3c:	11000017 	ldw	r4,0(r2)
 1001c40:	180b883a 	mov	r5,r3
 1001c44:	1001a281 	jmpi	1001a28 <_fflush_r>
 1001c48:	00804074 	movhi	r2,257
 1001c4c:	10afad04 	addi	r2,r2,-16716
 1001c50:	11000017 	ldw	r4,0(r2)
 1001c54:	10023581 	jmpi	1002358 <_fwalk_reent>

01001c58 <std>:
 1001c58:	00804034 	movhi	r2,256
 1001c5c:	1089c104 	addi	r2,r2,9988
 1001c60:	20800b15 	stw	r2,44(r4)
 1001c64:	00804034 	movhi	r2,256
 1001c68:	1089fc04 	addi	r2,r2,10224
 1001c6c:	20800815 	stw	r2,32(r4)
 1001c70:	00c04034 	movhi	r3,256
 1001c74:	18c9dd04 	addi	r3,r3,10100
 1001c78:	00804034 	movhi	r2,256
 1001c7c:	1089c304 	addi	r2,r2,9996
 1001c80:	2140030d 	sth	r5,12(r4)
 1001c84:	2180038d 	sth	r6,14(r4)
 1001c88:	20c00915 	stw	r3,36(r4)
 1001c8c:	20800a15 	stw	r2,40(r4)
 1001c90:	20000015 	stw	zero,0(r4)
 1001c94:	20000115 	stw	zero,4(r4)
 1001c98:	20000215 	stw	zero,8(r4)
 1001c9c:	20000415 	stw	zero,16(r4)
 1001ca0:	20000515 	stw	zero,20(r4)
 1001ca4:	20000615 	stw	zero,24(r4)
 1001ca8:	21000715 	stw	r4,28(r4)
 1001cac:	f800283a 	ret

01001cb0 <__sfp_lock_acquire>:
 1001cb0:	f800283a 	ret

01001cb4 <__sfp_lock_release>:
 1001cb4:	f800283a 	ret

01001cb8 <__sinit_lock_acquire>:
 1001cb8:	f800283a 	ret

01001cbc <__sinit_lock_release>:
 1001cbc:	f800283a 	ret

01001cc0 <__sinit>:
 1001cc0:	20800e17 	ldw	r2,56(r4)
 1001cc4:	defffd04 	addi	sp,sp,-12
 1001cc8:	dc400115 	stw	r17,4(sp)
 1001ccc:	dc000015 	stw	r16,0(sp)
 1001cd0:	dfc00215 	stw	ra,8(sp)
 1001cd4:	04400044 	movi	r17,1
 1001cd8:	01400104 	movi	r5,4
 1001cdc:	000d883a 	mov	r6,zero
 1001ce0:	2021883a 	mov	r16,r4
 1001ce4:	2200bb04 	addi	r8,r4,748
 1001ce8:	200f883a 	mov	r7,r4
 1001cec:	10000526 	beq	r2,zero,1001d04 <__sinit+0x44>
 1001cf0:	dfc00217 	ldw	ra,8(sp)
 1001cf4:	dc400117 	ldw	r17,4(sp)
 1001cf8:	dc000017 	ldw	r16,0(sp)
 1001cfc:	dec00304 	addi	sp,sp,12
 1001d00:	f800283a 	ret
 1001d04:	21000117 	ldw	r4,4(r4)
 1001d08:	00804034 	movhi	r2,256
 1001d0c:	10876904 	addi	r2,r2,7588
 1001d10:	00c000c4 	movi	r3,3
 1001d14:	80800f15 	stw	r2,60(r16)
 1001d18:	80c0b915 	stw	r3,740(r16)
 1001d1c:	8200ba15 	stw	r8,744(r16)
 1001d20:	84400e15 	stw	r17,56(r16)
 1001d24:	8000b815 	stw	zero,736(r16)
 1001d28:	1001c580 	call	1001c58 <std>
 1001d2c:	81000217 	ldw	r4,8(r16)
 1001d30:	880d883a 	mov	r6,r17
 1001d34:	800f883a 	mov	r7,r16
 1001d38:	01400284 	movi	r5,10
 1001d3c:	1001c580 	call	1001c58 <std>
 1001d40:	81000317 	ldw	r4,12(r16)
 1001d44:	800f883a 	mov	r7,r16
 1001d48:	01400484 	movi	r5,18
 1001d4c:	01800084 	movi	r6,2
 1001d50:	dfc00217 	ldw	ra,8(sp)
 1001d54:	dc400117 	ldw	r17,4(sp)
 1001d58:	dc000017 	ldw	r16,0(sp)
 1001d5c:	dec00304 	addi	sp,sp,12
 1001d60:	1001c581 	jmpi	1001c58 <std>

01001d64 <__fp_lock>:
 1001d64:	0005883a 	mov	r2,zero
 1001d68:	f800283a 	ret

01001d6c <__fp_unlock>:
 1001d6c:	0005883a 	mov	r2,zero
 1001d70:	f800283a 	ret

01001d74 <__fp_unlock_all>:
 1001d74:	00804074 	movhi	r2,257
 1001d78:	10afac04 	addi	r2,r2,-16720
 1001d7c:	11000017 	ldw	r4,0(r2)
 1001d80:	01404034 	movhi	r5,256
 1001d84:	29475b04 	addi	r5,r5,7532
 1001d88:	10024201 	jmpi	1002420 <_fwalk>

01001d8c <__fp_lock_all>:
 1001d8c:	00804074 	movhi	r2,257
 1001d90:	10afac04 	addi	r2,r2,-16720
 1001d94:	11000017 	ldw	r4,0(r2)
 1001d98:	01404034 	movhi	r5,256
 1001d9c:	29475904 	addi	r5,r5,7524
 1001da0:	10024201 	jmpi	1002420 <_fwalk>

01001da4 <_cleanup_r>:
 1001da4:	01404034 	movhi	r5,256
 1001da8:	294a9204 	addi	r5,r5,10824
 1001dac:	10024201 	jmpi	1002420 <_fwalk>

01001db0 <_cleanup>:
 1001db0:	00804074 	movhi	r2,257
 1001db4:	10afad04 	addi	r2,r2,-16716
 1001db8:	11000017 	ldw	r4,0(r2)
 1001dbc:	1001da41 	jmpi	1001da4 <_cleanup_r>

01001dc0 <__sfmoreglue>:
 1001dc0:	defffc04 	addi	sp,sp,-16
 1001dc4:	dc400115 	stw	r17,4(sp)
 1001dc8:	2c401724 	muli	r17,r5,92
 1001dcc:	dc800215 	stw	r18,8(sp)
 1001dd0:	2825883a 	mov	r18,r5
 1001dd4:	89400304 	addi	r5,r17,12
 1001dd8:	dc000015 	stw	r16,0(sp)
 1001ddc:	dfc00315 	stw	ra,12(sp)
 1001de0:	10008e40 	call	10008e4 <_malloc_r>
 1001de4:	0021883a 	mov	r16,zero
 1001de8:	880d883a 	mov	r6,r17
 1001dec:	000b883a 	mov	r5,zero
 1001df0:	10000626 	beq	r2,zero,1001e0c <__sfmoreglue+0x4c>
 1001df4:	11000304 	addi	r4,r2,12
 1001df8:	14800115 	stw	r18,4(r2)
 1001dfc:	10000015 	stw	zero,0(r2)
 1001e00:	11000215 	stw	r4,8(r2)
 1001e04:	1021883a 	mov	r16,r2
 1001e08:	100266c0 	call	100266c <memset>
 1001e0c:	8005883a 	mov	r2,r16
 1001e10:	dfc00317 	ldw	ra,12(sp)
 1001e14:	dc800217 	ldw	r18,8(sp)
 1001e18:	dc400117 	ldw	r17,4(sp)
 1001e1c:	dc000017 	ldw	r16,0(sp)
 1001e20:	dec00404 	addi	sp,sp,16
 1001e24:	f800283a 	ret

01001e28 <__sfp>:
 1001e28:	defffd04 	addi	sp,sp,-12
 1001e2c:	00804074 	movhi	r2,257
 1001e30:	10afad04 	addi	r2,r2,-16716
 1001e34:	dc000015 	stw	r16,0(sp)
 1001e38:	14000017 	ldw	r16,0(r2)
 1001e3c:	dc400115 	stw	r17,4(sp)
 1001e40:	dfc00215 	stw	ra,8(sp)
 1001e44:	80800e17 	ldw	r2,56(r16)
 1001e48:	2023883a 	mov	r17,r4
 1001e4c:	10002626 	beq	r2,zero,1001ee8 <__sfp+0xc0>
 1001e50:	8400b804 	addi	r16,r16,736
 1001e54:	80800117 	ldw	r2,4(r16)
 1001e58:	81000217 	ldw	r4,8(r16)
 1001e5c:	10ffffc4 	addi	r3,r2,-1
 1001e60:	18000916 	blt	r3,zero,1001e88 <__sfp+0x60>
 1001e64:	2080030f 	ldh	r2,12(r4)
 1001e68:	10000b26 	beq	r2,zero,1001e98 <__sfp+0x70>
 1001e6c:	017fffc4 	movi	r5,-1
 1001e70:	00000206 	br	1001e7c <__sfp+0x54>
 1001e74:	2080030f 	ldh	r2,12(r4)
 1001e78:	10000726 	beq	r2,zero,1001e98 <__sfp+0x70>
 1001e7c:	18ffffc4 	addi	r3,r3,-1
 1001e80:	21001704 	addi	r4,r4,92
 1001e84:	197ffb1e 	bne	r3,r5,1001e74 <__sfp+0x4c>
 1001e88:	80800017 	ldw	r2,0(r16)
 1001e8c:	10001926 	beq	r2,zero,1001ef4 <__sfp+0xcc>
 1001e90:	1021883a 	mov	r16,r2
 1001e94:	003fef06 	br	1001e54 <__sfp+0x2c>
 1001e98:	00bfffc4 	movi	r2,-1
 1001e9c:	00c00044 	movi	r3,1
 1001ea0:	2080038d 	sth	r2,14(r4)
 1001ea4:	20c0030d 	sth	r3,12(r4)
 1001ea8:	20000015 	stw	zero,0(r4)
 1001eac:	20000215 	stw	zero,8(r4)
 1001eb0:	20000115 	stw	zero,4(r4)
 1001eb4:	20000415 	stw	zero,16(r4)
 1001eb8:	20000515 	stw	zero,20(r4)
 1001ebc:	20000615 	stw	zero,24(r4)
 1001ec0:	20000c15 	stw	zero,48(r4)
 1001ec4:	20000d15 	stw	zero,52(r4)
 1001ec8:	20001115 	stw	zero,68(r4)
 1001ecc:	20001215 	stw	zero,72(r4)
 1001ed0:	2005883a 	mov	r2,r4
 1001ed4:	dfc00217 	ldw	ra,8(sp)
 1001ed8:	dc400117 	ldw	r17,4(sp)
 1001edc:	dc000017 	ldw	r16,0(sp)
 1001ee0:	dec00304 	addi	sp,sp,12
 1001ee4:	f800283a 	ret
 1001ee8:	8009883a 	mov	r4,r16
 1001eec:	1001cc00 	call	1001cc0 <__sinit>
 1001ef0:	003fd706 	br	1001e50 <__sfp+0x28>
 1001ef4:	8809883a 	mov	r4,r17
 1001ef8:	01400104 	movi	r5,4
 1001efc:	1001dc00 	call	1001dc0 <__sfmoreglue>
 1001f00:	80800015 	stw	r2,0(r16)
 1001f04:	103fe21e 	bne	r2,zero,1001e90 <__sfp+0x68>
 1001f08:	00800304 	movi	r2,12
 1001f0c:	0009883a 	mov	r4,zero
 1001f10:	88800015 	stw	r2,0(r17)
 1001f14:	003fee06 	br	1001ed0 <__sfp+0xa8>

01001f18 <_malloc_trim_r>:
 1001f18:	defffb04 	addi	sp,sp,-20
 1001f1c:	dcc00315 	stw	r19,12(sp)
 1001f20:	04c04074 	movhi	r19,257
 1001f24:	9cea0704 	addi	r19,r19,-22500
 1001f28:	dc800215 	stw	r18,8(sp)
 1001f2c:	dc400115 	stw	r17,4(sp)
 1001f30:	dc000015 	stw	r16,0(sp)
 1001f34:	2823883a 	mov	r17,r5
 1001f38:	2025883a 	mov	r18,r4
 1001f3c:	dfc00415 	stw	ra,16(sp)
 1001f40:	10032b40 	call	10032b4 <__malloc_lock>
 1001f44:	98800217 	ldw	r2,8(r19)
 1001f48:	9009883a 	mov	r4,r18
 1001f4c:	000b883a 	mov	r5,zero
 1001f50:	10c00117 	ldw	r3,4(r2)
 1001f54:	00bfff04 	movi	r2,-4
 1001f58:	18a0703a 	and	r16,r3,r2
 1001f5c:	8463c83a 	sub	r17,r16,r17
 1001f60:	8c43fbc4 	addi	r17,r17,4079
 1001f64:	8822d33a 	srli	r17,r17,12
 1001f68:	0083ffc4 	movi	r2,4095
 1001f6c:	8c7fffc4 	addi	r17,r17,-1
 1001f70:	8822933a 	slli	r17,r17,12
 1001f74:	1440060e 	bge	r2,r17,1001f90 <_malloc_trim_r+0x78>
 1001f78:	100187c0 	call	100187c <_sbrk_r>
 1001f7c:	98c00217 	ldw	r3,8(r19)
 1001f80:	9009883a 	mov	r4,r18
 1001f84:	044bc83a 	sub	r5,zero,r17
 1001f88:	80c7883a 	add	r3,r16,r3
 1001f8c:	10c00926 	beq	r2,r3,1001fb4 <_malloc_trim_r+0x9c>
 1001f90:	10032d40 	call	10032d4 <__malloc_unlock>
 1001f94:	0005883a 	mov	r2,zero
 1001f98:	dfc00417 	ldw	ra,16(sp)
 1001f9c:	dcc00317 	ldw	r19,12(sp)
 1001fa0:	dc800217 	ldw	r18,8(sp)
 1001fa4:	dc400117 	ldw	r17,4(sp)
 1001fa8:	dc000017 	ldw	r16,0(sp)
 1001fac:	dec00504 	addi	sp,sp,20
 1001fb0:	f800283a 	ret
 1001fb4:	9009883a 	mov	r4,r18
 1001fb8:	100187c0 	call	100187c <_sbrk_r>
 1001fbc:	844dc83a 	sub	r6,r16,r17
 1001fc0:	00ffffc4 	movi	r3,-1
 1001fc4:	9009883a 	mov	r4,r18
 1001fc8:	000b883a 	mov	r5,zero
 1001fcc:	01c04074 	movhi	r7,257
 1001fd0:	39f68404 	addi	r7,r7,-9712
 1001fd4:	31800054 	ori	r6,r6,1
 1001fd8:	10c00926 	beq	r2,r3,1002000 <_malloc_trim_r+0xe8>
 1001fdc:	38800017 	ldw	r2,0(r7)
 1001fe0:	98c00217 	ldw	r3,8(r19)
 1001fe4:	9009883a 	mov	r4,r18
 1001fe8:	1445c83a 	sub	r2,r2,r17
 1001fec:	38800015 	stw	r2,0(r7)
 1001ff0:	19800115 	stw	r6,4(r3)
 1001ff4:	10032d40 	call	10032d4 <__malloc_unlock>
 1001ff8:	00800044 	movi	r2,1
 1001ffc:	003fe606 	br	1001f98 <_malloc_trim_r+0x80>
 1002000:	100187c0 	call	100187c <_sbrk_r>
 1002004:	99800217 	ldw	r6,8(r19)
 1002008:	100f883a 	mov	r7,r2
 100200c:	9009883a 	mov	r4,r18
 1002010:	1187c83a 	sub	r3,r2,r6
 1002014:	008003c4 	movi	r2,15
 1002018:	19400054 	ori	r5,r3,1
 100201c:	10ffdc0e 	bge	r2,r3,1001f90 <_malloc_trim_r+0x78>
 1002020:	00804074 	movhi	r2,257
 1002024:	10afaf04 	addi	r2,r2,-16708
 1002028:	10c00017 	ldw	r3,0(r2)
 100202c:	00804074 	movhi	r2,257
 1002030:	10b68404 	addi	r2,r2,-9712
 1002034:	31400115 	stw	r5,4(r6)
 1002038:	38c7c83a 	sub	r3,r7,r3
 100203c:	10c00015 	stw	r3,0(r2)
 1002040:	003fd306 	br	1001f90 <_malloc_trim_r+0x78>

01002044 <_free_r>:
 1002044:	defffd04 	addi	sp,sp,-12
 1002048:	dc400115 	stw	r17,4(sp)
 100204c:	dc000015 	stw	r16,0(sp)
 1002050:	dfc00215 	stw	ra,8(sp)
 1002054:	2821883a 	mov	r16,r5
 1002058:	2023883a 	mov	r17,r4
 100205c:	28005a26 	beq	r5,zero,10021c8 <_free_r+0x184>
 1002060:	10032b40 	call	10032b4 <__malloc_lock>
 1002064:	823ffe04 	addi	r8,r16,-8
 1002068:	41400117 	ldw	r5,4(r8)
 100206c:	00bfff84 	movi	r2,-2
 1002070:	02804074 	movhi	r10,257
 1002074:	52aa0704 	addi	r10,r10,-22500
 1002078:	288e703a 	and	r7,r5,r2
 100207c:	41cd883a 	add	r6,r8,r7
 1002080:	30c00117 	ldw	r3,4(r6)
 1002084:	51000217 	ldw	r4,8(r10)
 1002088:	00bfff04 	movi	r2,-4
 100208c:	1892703a 	and	r9,r3,r2
 1002090:	5017883a 	mov	r11,r10
 1002094:	31006726 	beq	r6,r4,1002234 <_free_r+0x1f0>
 1002098:	2880004c 	andi	r2,r5,1
 100209c:	1005003a 	cmpeq	r2,r2,zero
 10020a0:	32400115 	stw	r9,4(r6)
 10020a4:	10001a1e 	bne	r2,zero,1002110 <_free_r+0xcc>
 10020a8:	000b883a 	mov	r5,zero
 10020ac:	3247883a 	add	r3,r6,r9
 10020b0:	18800117 	ldw	r2,4(r3)
 10020b4:	1080004c 	andi	r2,r2,1
 10020b8:	1000231e 	bne	r2,zero,1002148 <_free_r+0x104>
 10020bc:	280ac03a 	cmpne	r5,r5,zero
 10020c0:	3a4f883a 	add	r7,r7,r9
 10020c4:	2800451e 	bne	r5,zero,10021dc <_free_r+0x198>
 10020c8:	31000217 	ldw	r4,8(r6)
 10020cc:	00804074 	movhi	r2,257
 10020d0:	10aa0904 	addi	r2,r2,-22492
 10020d4:	20807b26 	beq	r4,r2,10022c4 <_free_r+0x280>
 10020d8:	30800317 	ldw	r2,12(r6)
 10020dc:	3a07883a 	add	r3,r7,r8
 10020e0:	19c00015 	stw	r7,0(r3)
 10020e4:	11000215 	stw	r4,8(r2)
 10020e8:	20800315 	stw	r2,12(r4)
 10020ec:	38800054 	ori	r2,r7,1
 10020f0:	40800115 	stw	r2,4(r8)
 10020f4:	28001a26 	beq	r5,zero,1002160 <_free_r+0x11c>
 10020f8:	8809883a 	mov	r4,r17
 10020fc:	dfc00217 	ldw	ra,8(sp)
 1002100:	dc400117 	ldw	r17,4(sp)
 1002104:	dc000017 	ldw	r16,0(sp)
 1002108:	dec00304 	addi	sp,sp,12
 100210c:	10032d41 	jmpi	10032d4 <__malloc_unlock>
 1002110:	80bffe17 	ldw	r2,-8(r16)
 1002114:	50c00204 	addi	r3,r10,8
 1002118:	4091c83a 	sub	r8,r8,r2
 100211c:	41000217 	ldw	r4,8(r8)
 1002120:	388f883a 	add	r7,r7,r2
 1002124:	20c06126 	beq	r4,r3,10022ac <_free_r+0x268>
 1002128:	40800317 	ldw	r2,12(r8)
 100212c:	3247883a 	add	r3,r6,r9
 1002130:	000b883a 	mov	r5,zero
 1002134:	11000215 	stw	r4,8(r2)
 1002138:	20800315 	stw	r2,12(r4)
 100213c:	18800117 	ldw	r2,4(r3)
 1002140:	1080004c 	andi	r2,r2,1
 1002144:	103fdd26 	beq	r2,zero,10020bc <_free_r+0x78>
 1002148:	38800054 	ori	r2,r7,1
 100214c:	3a07883a 	add	r3,r7,r8
 1002150:	280ac03a 	cmpne	r5,r5,zero
 1002154:	40800115 	stw	r2,4(r8)
 1002158:	19c00015 	stw	r7,0(r3)
 100215c:	283fe61e 	bne	r5,zero,10020f8 <_free_r+0xb4>
 1002160:	00807fc4 	movi	r2,511
 1002164:	11c01f2e 	bgeu	r2,r7,10021e4 <_free_r+0x1a0>
 1002168:	3806d27a 	srli	r3,r7,9
 100216c:	1800481e 	bne	r3,zero,1002290 <_free_r+0x24c>
 1002170:	3804d0fa 	srli	r2,r7,3
 1002174:	100690fa 	slli	r3,r2,3
 1002178:	1acd883a 	add	r6,r3,r11
 100217c:	31400217 	ldw	r5,8(r6)
 1002180:	31405926 	beq	r6,r5,10022e8 <_free_r+0x2a4>
 1002184:	28800117 	ldw	r2,4(r5)
 1002188:	00ffff04 	movi	r3,-4
 100218c:	10c4703a 	and	r2,r2,r3
 1002190:	3880022e 	bgeu	r7,r2,100219c <_free_r+0x158>
 1002194:	29400217 	ldw	r5,8(r5)
 1002198:	317ffa1e 	bne	r6,r5,1002184 <_free_r+0x140>
 100219c:	29800317 	ldw	r6,12(r5)
 10021a0:	41800315 	stw	r6,12(r8)
 10021a4:	41400215 	stw	r5,8(r8)
 10021a8:	8809883a 	mov	r4,r17
 10021ac:	2a000315 	stw	r8,12(r5)
 10021b0:	32000215 	stw	r8,8(r6)
 10021b4:	dfc00217 	ldw	ra,8(sp)
 10021b8:	dc400117 	ldw	r17,4(sp)
 10021bc:	dc000017 	ldw	r16,0(sp)
 10021c0:	dec00304 	addi	sp,sp,12
 10021c4:	10032d41 	jmpi	10032d4 <__malloc_unlock>
 10021c8:	dfc00217 	ldw	ra,8(sp)
 10021cc:	dc400117 	ldw	r17,4(sp)
 10021d0:	dc000017 	ldw	r16,0(sp)
 10021d4:	dec00304 	addi	sp,sp,12
 10021d8:	f800283a 	ret
 10021dc:	31000217 	ldw	r4,8(r6)
 10021e0:	003fbd06 	br	10020d8 <_free_r+0x94>
 10021e4:	3806d0fa 	srli	r3,r7,3
 10021e8:	00800044 	movi	r2,1
 10021ec:	51400117 	ldw	r5,4(r10)
 10021f0:	180890fa 	slli	r4,r3,3
 10021f4:	1807d0ba 	srai	r3,r3,2
 10021f8:	22c9883a 	add	r4,r4,r11
 10021fc:	21800217 	ldw	r6,8(r4)
 1002200:	10c4983a 	sll	r2,r2,r3
 1002204:	41000315 	stw	r4,12(r8)
 1002208:	41800215 	stw	r6,8(r8)
 100220c:	288ab03a 	or	r5,r5,r2
 1002210:	22000215 	stw	r8,8(r4)
 1002214:	8809883a 	mov	r4,r17
 1002218:	51400115 	stw	r5,4(r10)
 100221c:	32000315 	stw	r8,12(r6)
 1002220:	dfc00217 	ldw	ra,8(sp)
 1002224:	dc400117 	ldw	r17,4(sp)
 1002228:	dc000017 	ldw	r16,0(sp)
 100222c:	dec00304 	addi	sp,sp,12
 1002230:	10032d41 	jmpi	10032d4 <__malloc_unlock>
 1002234:	2880004c 	andi	r2,r5,1
 1002238:	3a4d883a 	add	r6,r7,r9
 100223c:	1000071e 	bne	r2,zero,100225c <_free_r+0x218>
 1002240:	80bffe17 	ldw	r2,-8(r16)
 1002244:	4091c83a 	sub	r8,r8,r2
 1002248:	41000317 	ldw	r4,12(r8)
 100224c:	40c00217 	ldw	r3,8(r8)
 1002250:	308d883a 	add	r6,r6,r2
 1002254:	20c00215 	stw	r3,8(r4)
 1002258:	19000315 	stw	r4,12(r3)
 100225c:	00804074 	movhi	r2,257
 1002260:	10afae04 	addi	r2,r2,-16712
 1002264:	11000017 	ldw	r4,0(r2)
 1002268:	30c00054 	ori	r3,r6,1
 100226c:	52000215 	stw	r8,8(r10)
 1002270:	40c00115 	stw	r3,4(r8)
 1002274:	313fa036 	bltu	r6,r4,10020f8 <_free_r+0xb4>
 1002278:	00804074 	movhi	r2,257
 100227c:	10b66d04 	addi	r2,r2,-9804
 1002280:	11400017 	ldw	r5,0(r2)
 1002284:	8809883a 	mov	r4,r17
 1002288:	1001f180 	call	1001f18 <_malloc_trim_r>
 100228c:	003f9a06 	br	10020f8 <_free_r+0xb4>
 1002290:	00800104 	movi	r2,4
 1002294:	10c0072e 	bgeu	r2,r3,10022b4 <_free_r+0x270>
 1002298:	00800504 	movi	r2,20
 100229c:	10c01936 	bltu	r2,r3,1002304 <_free_r+0x2c0>
 10022a0:	188016c4 	addi	r2,r3,91
 10022a4:	100690fa 	slli	r3,r2,3
 10022a8:	003fb306 	br	1002178 <_free_r+0x134>
 10022ac:	01400044 	movi	r5,1
 10022b0:	003f7e06 	br	10020ac <_free_r+0x68>
 10022b4:	3804d1ba 	srli	r2,r7,6
 10022b8:	10800e04 	addi	r2,r2,56
 10022bc:	100690fa 	slli	r3,r2,3
 10022c0:	003fad06 	br	1002178 <_free_r+0x134>
 10022c4:	22000315 	stw	r8,12(r4)
 10022c8:	22000215 	stw	r8,8(r4)
 10022cc:	3a05883a 	add	r2,r7,r8
 10022d0:	38c00054 	ori	r3,r7,1
 10022d4:	11c00015 	stw	r7,0(r2)
 10022d8:	41000215 	stw	r4,8(r8)
 10022dc:	40c00115 	stw	r3,4(r8)
 10022e0:	41000315 	stw	r4,12(r8)
 10022e4:	003f8406 	br	10020f8 <_free_r+0xb4>
 10022e8:	1005d0ba 	srai	r2,r2,2
 10022ec:	00c00044 	movi	r3,1
 10022f0:	51000117 	ldw	r4,4(r10)
 10022f4:	1886983a 	sll	r3,r3,r2
 10022f8:	20c8b03a 	or	r4,r4,r3
 10022fc:	51000115 	stw	r4,4(r10)
 1002300:	003fa706 	br	10021a0 <_free_r+0x15c>
 1002304:	00801504 	movi	r2,84
 1002308:	10c00436 	bltu	r2,r3,100231c <_free_r+0x2d8>
 100230c:	3804d33a 	srli	r2,r7,12
 1002310:	10801b84 	addi	r2,r2,110
 1002314:	100690fa 	slli	r3,r2,3
 1002318:	003f9706 	br	1002178 <_free_r+0x134>
 100231c:	00805504 	movi	r2,340
 1002320:	10c00436 	bltu	r2,r3,1002334 <_free_r+0x2f0>
 1002324:	3804d3fa 	srli	r2,r7,15
 1002328:	10801dc4 	addi	r2,r2,119
 100232c:	100690fa 	slli	r3,r2,3
 1002330:	003f9106 	br	1002178 <_free_r+0x134>
 1002334:	00815504 	movi	r2,1364
 1002338:	10c0032e 	bgeu	r2,r3,1002348 <_free_r+0x304>
 100233c:	00801f84 	movi	r2,126
 1002340:	00c0fc04 	movi	r3,1008
 1002344:	003f8c06 	br	1002178 <_free_r+0x134>
 1002348:	3804d4ba 	srli	r2,r7,18
 100234c:	10801f04 	addi	r2,r2,124
 1002350:	100690fa 	slli	r3,r2,3
 1002354:	003f8806 	br	1002178 <_free_r+0x134>

01002358 <_fwalk_reent>:
 1002358:	defff704 	addi	sp,sp,-36
 100235c:	dcc00315 	stw	r19,12(sp)
 1002360:	24c0b804 	addi	r19,r4,736
 1002364:	dd800615 	stw	r22,24(sp)
 1002368:	dd400515 	stw	r21,20(sp)
 100236c:	dfc00815 	stw	ra,32(sp)
 1002370:	ddc00715 	stw	r23,28(sp)
 1002374:	dd000415 	stw	r20,16(sp)
 1002378:	dc800215 	stw	r18,8(sp)
 100237c:	dc400115 	stw	r17,4(sp)
 1002380:	dc000015 	stw	r16,0(sp)
 1002384:	202b883a 	mov	r21,r4
 1002388:	282d883a 	mov	r22,r5
 100238c:	1001cb00 	call	1001cb0 <__sfp_lock_acquire>
 1002390:	98002126 	beq	r19,zero,1002418 <_fwalk_reent+0xc0>
 1002394:	002f883a 	mov	r23,zero
 1002398:	9c800117 	ldw	r18,4(r19)
 100239c:	9c000217 	ldw	r16,8(r19)
 10023a0:	90bfffc4 	addi	r2,r18,-1
 10023a4:	10000d16 	blt	r2,zero,10023dc <_fwalk_reent+0x84>
 10023a8:	0023883a 	mov	r17,zero
 10023ac:	053fffc4 	movi	r20,-1
 10023b0:	8080030f 	ldh	r2,12(r16)
 10023b4:	8c400044 	addi	r17,r17,1
 10023b8:	10000626 	beq	r2,zero,10023d4 <_fwalk_reent+0x7c>
 10023bc:	8080038f 	ldh	r2,14(r16)
 10023c0:	800b883a 	mov	r5,r16
 10023c4:	a809883a 	mov	r4,r21
 10023c8:	15000226 	beq	r2,r20,10023d4 <_fwalk_reent+0x7c>
 10023cc:	b03ee83a 	callr	r22
 10023d0:	b8aeb03a 	or	r23,r23,r2
 10023d4:	84001704 	addi	r16,r16,92
 10023d8:	947ff51e 	bne	r18,r17,10023b0 <_fwalk_reent+0x58>
 10023dc:	9cc00017 	ldw	r19,0(r19)
 10023e0:	983fed1e 	bne	r19,zero,1002398 <_fwalk_reent+0x40>
 10023e4:	1001cb40 	call	1001cb4 <__sfp_lock_release>
 10023e8:	b805883a 	mov	r2,r23
 10023ec:	dfc00817 	ldw	ra,32(sp)
 10023f0:	ddc00717 	ldw	r23,28(sp)
 10023f4:	dd800617 	ldw	r22,24(sp)
 10023f8:	dd400517 	ldw	r21,20(sp)
 10023fc:	dd000417 	ldw	r20,16(sp)
 1002400:	dcc00317 	ldw	r19,12(sp)
 1002404:	dc800217 	ldw	r18,8(sp)
 1002408:	dc400117 	ldw	r17,4(sp)
 100240c:	dc000017 	ldw	r16,0(sp)
 1002410:	dec00904 	addi	sp,sp,36
 1002414:	f800283a 	ret
 1002418:	002f883a 	mov	r23,zero
 100241c:	003ff106 	br	10023e4 <_fwalk_reent+0x8c>

01002420 <_fwalk>:
 1002420:	defff804 	addi	sp,sp,-32
 1002424:	dcc00315 	stw	r19,12(sp)
 1002428:	24c0b804 	addi	r19,r4,736
 100242c:	dd400515 	stw	r21,20(sp)
 1002430:	dfc00715 	stw	ra,28(sp)
 1002434:	dd800615 	stw	r22,24(sp)
 1002438:	dd000415 	stw	r20,16(sp)
 100243c:	dc800215 	stw	r18,8(sp)
 1002440:	dc400115 	stw	r17,4(sp)
 1002444:	dc000015 	stw	r16,0(sp)
 1002448:	282b883a 	mov	r21,r5
 100244c:	1001cb00 	call	1001cb0 <__sfp_lock_acquire>
 1002450:	98001f26 	beq	r19,zero,10024d0 <_fwalk+0xb0>
 1002454:	002d883a 	mov	r22,zero
 1002458:	9c800117 	ldw	r18,4(r19)
 100245c:	9c000217 	ldw	r16,8(r19)
 1002460:	90bfffc4 	addi	r2,r18,-1
 1002464:	10000c16 	blt	r2,zero,1002498 <_fwalk+0x78>
 1002468:	0023883a 	mov	r17,zero
 100246c:	053fffc4 	movi	r20,-1
 1002470:	8080030f 	ldh	r2,12(r16)
 1002474:	8c400044 	addi	r17,r17,1
 1002478:	10000526 	beq	r2,zero,1002490 <_fwalk+0x70>
 100247c:	8080038f 	ldh	r2,14(r16)
 1002480:	8009883a 	mov	r4,r16
 1002484:	15000226 	beq	r2,r20,1002490 <_fwalk+0x70>
 1002488:	a83ee83a 	callr	r21
 100248c:	b0acb03a 	or	r22,r22,r2
 1002490:	84001704 	addi	r16,r16,92
 1002494:	947ff61e 	bne	r18,r17,1002470 <_fwalk+0x50>
 1002498:	9cc00017 	ldw	r19,0(r19)
 100249c:	983fee1e 	bne	r19,zero,1002458 <_fwalk+0x38>
 10024a0:	1001cb40 	call	1001cb4 <__sfp_lock_release>
 10024a4:	b005883a 	mov	r2,r22
 10024a8:	dfc00717 	ldw	ra,28(sp)
 10024ac:	dd800617 	ldw	r22,24(sp)
 10024b0:	dd400517 	ldw	r21,20(sp)
 10024b4:	dd000417 	ldw	r20,16(sp)
 10024b8:	dcc00317 	ldw	r19,12(sp)
 10024bc:	dc800217 	ldw	r18,8(sp)
 10024c0:	dc400117 	ldw	r17,4(sp)
 10024c4:	dc000017 	ldw	r16,0(sp)
 10024c8:	dec00804 	addi	sp,sp,32
 10024cc:	f800283a 	ret
 10024d0:	002d883a 	mov	r22,zero
 10024d4:	003ff206 	br	10024a0 <_fwalk+0x80>

010024d8 <__smakebuf_r>:
 10024d8:	2880030b 	ldhu	r2,12(r5)
 10024dc:	deffed04 	addi	sp,sp,-76
 10024e0:	dc401015 	stw	r17,64(sp)
 10024e4:	1080008c 	andi	r2,r2,2
 10024e8:	dc000f15 	stw	r16,60(sp)
 10024ec:	dfc01215 	stw	ra,72(sp)
 10024f0:	dc801115 	stw	r18,68(sp)
 10024f4:	2821883a 	mov	r16,r5
 10024f8:	2023883a 	mov	r17,r4
 10024fc:	10000b26 	beq	r2,zero,100252c <__smakebuf_r+0x54>
 1002500:	28c010c4 	addi	r3,r5,67
 1002504:	00800044 	movi	r2,1
 1002508:	28800515 	stw	r2,20(r5)
 100250c:	28c00415 	stw	r3,16(r5)
 1002510:	28c00015 	stw	r3,0(r5)
 1002514:	dfc01217 	ldw	ra,72(sp)
 1002518:	dc801117 	ldw	r18,68(sp)
 100251c:	dc401017 	ldw	r17,64(sp)
 1002520:	dc000f17 	ldw	r16,60(sp)
 1002524:	dec01304 	addi	sp,sp,76
 1002528:	f800283a 	ret
 100252c:	2940038f 	ldh	r5,14(r5)
 1002530:	28002116 	blt	r5,zero,10025b8 <__smakebuf_r+0xe0>
 1002534:	d80d883a 	mov	r6,sp
 1002538:	1002a5c0 	call	1002a5c <_fstat_r>
 100253c:	10001e16 	blt	r2,zero,10025b8 <__smakebuf_r+0xe0>
 1002540:	d8800117 	ldw	r2,4(sp)
 1002544:	00e00014 	movui	r3,32768
 1002548:	113c000c 	andi	r4,r2,61440
 100254c:	20c03126 	beq	r4,r3,1002614 <__smakebuf_r+0x13c>
 1002550:	8080030b 	ldhu	r2,12(r16)
 1002554:	00c80004 	movi	r3,8192
 1002558:	10820014 	ori	r2,r2,2048
 100255c:	8080030d 	sth	r2,12(r16)
 1002560:	20c01e26 	beq	r4,r3,10025dc <__smakebuf_r+0x104>
 1002564:	04810004 	movi	r18,1024
 1002568:	8809883a 	mov	r4,r17
 100256c:	900b883a 	mov	r5,r18
 1002570:	10008e40 	call	10008e4 <_malloc_r>
 1002574:	1009883a 	mov	r4,r2
 1002578:	10003126 	beq	r2,zero,1002640 <__smakebuf_r+0x168>
 100257c:	80c0030b 	ldhu	r3,12(r16)
 1002580:	00804034 	movhi	r2,256
 1002584:	10876904 	addi	r2,r2,7588
 1002588:	88800f15 	stw	r2,60(r17)
 100258c:	18c02014 	ori	r3,r3,128
 1002590:	84800515 	stw	r18,20(r16)
 1002594:	80c0030d 	sth	r3,12(r16)
 1002598:	81000415 	stw	r4,16(r16)
 100259c:	81000015 	stw	r4,0(r16)
 10025a0:	dfc01217 	ldw	ra,72(sp)
 10025a4:	dc801117 	ldw	r18,68(sp)
 10025a8:	dc401017 	ldw	r17,64(sp)
 10025ac:	dc000f17 	ldw	r16,60(sp)
 10025b0:	dec01304 	addi	sp,sp,76
 10025b4:	f800283a 	ret
 10025b8:	80c0030b 	ldhu	r3,12(r16)
 10025bc:	1880200c 	andi	r2,r3,128
 10025c0:	10000426 	beq	r2,zero,10025d4 <__smakebuf_r+0xfc>
 10025c4:	04801004 	movi	r18,64
 10025c8:	18820014 	ori	r2,r3,2048
 10025cc:	8080030d 	sth	r2,12(r16)
 10025d0:	003fe506 	br	1002568 <__smakebuf_r+0x90>
 10025d4:	04810004 	movi	r18,1024
 10025d8:	003ffb06 	br	10025c8 <__smakebuf_r+0xf0>
 10025dc:	8140038f 	ldh	r5,14(r16)
 10025e0:	8809883a 	mov	r4,r17
 10025e4:	1002ad00 	call	1002ad0 <_isatty_r>
 10025e8:	103fde26 	beq	r2,zero,1002564 <__smakebuf_r+0x8c>
 10025ec:	8080030b 	ldhu	r2,12(r16)
 10025f0:	80c010c4 	addi	r3,r16,67
 10025f4:	04810004 	movi	r18,1024
 10025f8:	10800054 	ori	r2,r2,1
 10025fc:	8080030d 	sth	r2,12(r16)
 1002600:	00800044 	movi	r2,1
 1002604:	80c00415 	stw	r3,16(r16)
 1002608:	80800515 	stw	r2,20(r16)
 100260c:	80c00015 	stw	r3,0(r16)
 1002610:	003fd506 	br	1002568 <__smakebuf_r+0x90>
 1002614:	80c00a17 	ldw	r3,40(r16)
 1002618:	00804034 	movhi	r2,256
 100261c:	1089c304 	addi	r2,r2,9996
 1002620:	18bfcb1e 	bne	r3,r2,1002550 <__smakebuf_r+0x78>
 1002624:	8080030b 	ldhu	r2,12(r16)
 1002628:	00c10004 	movi	r3,1024
 100262c:	1825883a 	mov	r18,r3
 1002630:	10c4b03a 	or	r2,r2,r3
 1002634:	8080030d 	sth	r2,12(r16)
 1002638:	80c01315 	stw	r3,76(r16)
 100263c:	003fca06 	br	1002568 <__smakebuf_r+0x90>
 1002640:	8100030b 	ldhu	r4,12(r16)
 1002644:	2080800c 	andi	r2,r4,512
 1002648:	103fb21e 	bne	r2,zero,1002514 <__smakebuf_r+0x3c>
 100264c:	80c010c4 	addi	r3,r16,67
 1002650:	21000094 	ori	r4,r4,2
 1002654:	00800044 	movi	r2,1
 1002658:	80800515 	stw	r2,20(r16)
 100265c:	8100030d 	sth	r4,12(r16)
 1002660:	80c00415 	stw	r3,16(r16)
 1002664:	80c00015 	stw	r3,0(r16)
 1002668:	003faa06 	br	1002514 <__smakebuf_r+0x3c>

0100266c <memset>:
 100266c:	008000c4 	movi	r2,3
 1002670:	29403fcc 	andi	r5,r5,255
 1002674:	2007883a 	mov	r3,r4
 1002678:	1180022e 	bgeu	r2,r6,1002684 <memset+0x18>
 100267c:	2084703a 	and	r2,r4,r2
 1002680:	10000826 	beq	r2,zero,10026a4 <memset+0x38>
 1002684:	30000526 	beq	r6,zero,100269c <memset+0x30>
 1002688:	2805883a 	mov	r2,r5
 100268c:	30cd883a 	add	r6,r6,r3
 1002690:	18800005 	stb	r2,0(r3)
 1002694:	18c00044 	addi	r3,r3,1
 1002698:	19bffd1e 	bne	r3,r6,1002690 <memset+0x24>
 100269c:	2005883a 	mov	r2,r4
 10026a0:	f800283a 	ret
 10026a4:	2804923a 	slli	r2,r5,8
 10026a8:	020003c4 	movi	r8,15
 10026ac:	200f883a 	mov	r7,r4
 10026b0:	2884b03a 	or	r2,r5,r2
 10026b4:	1006943a 	slli	r3,r2,16
 10026b8:	10c6b03a 	or	r3,r2,r3
 10026bc:	41800a2e 	bgeu	r8,r6,10026e8 <memset+0x7c>
 10026c0:	4005883a 	mov	r2,r8
 10026c4:	31bffc04 	addi	r6,r6,-16
 10026c8:	38c00015 	stw	r3,0(r7)
 10026cc:	38c00115 	stw	r3,4(r7)
 10026d0:	38c00215 	stw	r3,8(r7)
 10026d4:	38c00315 	stw	r3,12(r7)
 10026d8:	39c00404 	addi	r7,r7,16
 10026dc:	11bff936 	bltu	r2,r6,10026c4 <memset+0x58>
 10026e0:	008000c4 	movi	r2,3
 10026e4:	1180052e 	bgeu	r2,r6,10026fc <memset+0x90>
 10026e8:	31bfff04 	addi	r6,r6,-4
 10026ec:	008000c4 	movi	r2,3
 10026f0:	38c00015 	stw	r3,0(r7)
 10026f4:	39c00104 	addi	r7,r7,4
 10026f8:	11bffb36 	bltu	r2,r6,10026e8 <memset+0x7c>
 10026fc:	3807883a 	mov	r3,r7
 1002700:	003fe006 	br	1002684 <memset+0x18>

01002704 <__sclose>:
 1002704:	2940038f 	ldh	r5,14(r5)
 1002708:	10028c81 	jmpi	10028c8 <_close_r>

0100270c <__sseek>:
 100270c:	defffe04 	addi	sp,sp,-8
 1002710:	dc000015 	stw	r16,0(sp)
 1002714:	2821883a 	mov	r16,r5
 1002718:	2940038f 	ldh	r5,14(r5)
 100271c:	dfc00115 	stw	ra,4(sp)
 1002720:	1002b400 	call	1002b40 <_lseek_r>
 1002724:	1007883a 	mov	r3,r2
 1002728:	00bfffc4 	movi	r2,-1
 100272c:	18800926 	beq	r3,r2,1002754 <__sseek+0x48>
 1002730:	8080030b 	ldhu	r2,12(r16)
 1002734:	80c01415 	stw	r3,80(r16)
 1002738:	10840014 	ori	r2,r2,4096
 100273c:	8080030d 	sth	r2,12(r16)
 1002740:	1805883a 	mov	r2,r3
 1002744:	dfc00117 	ldw	ra,4(sp)
 1002748:	dc000017 	ldw	r16,0(sp)
 100274c:	dec00204 	addi	sp,sp,8
 1002750:	f800283a 	ret
 1002754:	8080030b 	ldhu	r2,12(r16)
 1002758:	10bbffcc 	andi	r2,r2,61439
 100275c:	8080030d 	sth	r2,12(r16)
 1002760:	1805883a 	mov	r2,r3
 1002764:	dfc00117 	ldw	ra,4(sp)
 1002768:	dc000017 	ldw	r16,0(sp)
 100276c:	dec00204 	addi	sp,sp,8
 1002770:	f800283a 	ret

01002774 <__swrite>:
 1002774:	2880030b 	ldhu	r2,12(r5)
 1002778:	defffb04 	addi	sp,sp,-20
 100277c:	dcc00315 	stw	r19,12(sp)
 1002780:	1080400c 	andi	r2,r2,256
 1002784:	dc800215 	stw	r18,8(sp)
 1002788:	dc400115 	stw	r17,4(sp)
 100278c:	dc000015 	stw	r16,0(sp)
 1002790:	3027883a 	mov	r19,r6
 1002794:	3825883a 	mov	r18,r7
 1002798:	dfc00415 	stw	ra,16(sp)
 100279c:	2821883a 	mov	r16,r5
 10027a0:	000d883a 	mov	r6,zero
 10027a4:	01c00084 	movi	r7,2
 10027a8:	2023883a 	mov	r17,r4
 10027ac:	10000226 	beq	r2,zero,10027b8 <__swrite+0x44>
 10027b0:	2940038f 	ldh	r5,14(r5)
 10027b4:	1002b400 	call	1002b40 <_lseek_r>
 10027b8:	8080030b 	ldhu	r2,12(r16)
 10027bc:	8140038f 	ldh	r5,14(r16)
 10027c0:	8809883a 	mov	r4,r17
 10027c4:	10bbffcc 	andi	r2,r2,61439
 10027c8:	980d883a 	mov	r6,r19
 10027cc:	900f883a 	mov	r7,r18
 10027d0:	8080030d 	sth	r2,12(r16)
 10027d4:	dfc00417 	ldw	ra,16(sp)
 10027d8:	dcc00317 	ldw	r19,12(sp)
 10027dc:	dc800217 	ldw	r18,8(sp)
 10027e0:	dc400117 	ldw	r17,4(sp)
 10027e4:	dc000017 	ldw	r16,0(sp)
 10027e8:	dec00504 	addi	sp,sp,20
 10027ec:	10028501 	jmpi	1002850 <_write_r>

010027f0 <__sread>:
 10027f0:	defffe04 	addi	sp,sp,-8
 10027f4:	dc000015 	stw	r16,0(sp)
 10027f8:	2821883a 	mov	r16,r5
 10027fc:	2940038f 	ldh	r5,14(r5)
 1002800:	dfc00115 	stw	ra,4(sp)
 1002804:	1002bb80 	call	1002bb8 <_read_r>
 1002808:	1007883a 	mov	r3,r2
 100280c:	10000816 	blt	r2,zero,1002830 <__sread+0x40>
 1002810:	80801417 	ldw	r2,80(r16)
 1002814:	10c5883a 	add	r2,r2,r3
 1002818:	80801415 	stw	r2,80(r16)
 100281c:	1805883a 	mov	r2,r3
 1002820:	dfc00117 	ldw	ra,4(sp)
 1002824:	dc000017 	ldw	r16,0(sp)
 1002828:	dec00204 	addi	sp,sp,8
 100282c:	f800283a 	ret
 1002830:	8080030b 	ldhu	r2,12(r16)
 1002834:	10bbffcc 	andi	r2,r2,61439
 1002838:	8080030d 	sth	r2,12(r16)
 100283c:	1805883a 	mov	r2,r3
 1002840:	dfc00117 	ldw	ra,4(sp)
 1002844:	dc000017 	ldw	r16,0(sp)
 1002848:	dec00204 	addi	sp,sp,8
 100284c:	f800283a 	ret

01002850 <_write_r>:
 1002850:	defffd04 	addi	sp,sp,-12
 1002854:	dc000015 	stw	r16,0(sp)
 1002858:	04004074 	movhi	r16,257
 100285c:	84367004 	addi	r16,r16,-9792
 1002860:	dc400115 	stw	r17,4(sp)
 1002864:	80000015 	stw	zero,0(r16)
 1002868:	2023883a 	mov	r17,r4
 100286c:	2809883a 	mov	r4,r5
 1002870:	300b883a 	mov	r5,r6
 1002874:	380d883a 	mov	r6,r7
 1002878:	dfc00215 	stw	ra,8(sp)
 100287c:	10035900 	call	1003590 <write>
 1002880:	1007883a 	mov	r3,r2
 1002884:	00bfffc4 	movi	r2,-1
 1002888:	18800626 	beq	r3,r2,10028a4 <_write_r+0x54>
 100288c:	1805883a 	mov	r2,r3
 1002890:	dfc00217 	ldw	ra,8(sp)
 1002894:	dc400117 	ldw	r17,4(sp)
 1002898:	dc000017 	ldw	r16,0(sp)
 100289c:	dec00304 	addi	sp,sp,12
 10028a0:	f800283a 	ret
 10028a4:	80800017 	ldw	r2,0(r16)
 10028a8:	103ff826 	beq	r2,zero,100288c <_write_r+0x3c>
 10028ac:	88800015 	stw	r2,0(r17)
 10028b0:	1805883a 	mov	r2,r3
 10028b4:	dfc00217 	ldw	ra,8(sp)
 10028b8:	dc400117 	ldw	r17,4(sp)
 10028bc:	dc000017 	ldw	r16,0(sp)
 10028c0:	dec00304 	addi	sp,sp,12
 10028c4:	f800283a 	ret

010028c8 <_close_r>:
 10028c8:	defffd04 	addi	sp,sp,-12
 10028cc:	dc000015 	stw	r16,0(sp)
 10028d0:	04004074 	movhi	r16,257
 10028d4:	84367004 	addi	r16,r16,-9792
 10028d8:	dc400115 	stw	r17,4(sp)
 10028dc:	80000015 	stw	zero,0(r16)
 10028e0:	2023883a 	mov	r17,r4
 10028e4:	2809883a 	mov	r4,r5
 10028e8:	dfc00215 	stw	ra,8(sp)
 10028ec:	1002c300 	call	1002c30 <close>
 10028f0:	1007883a 	mov	r3,r2
 10028f4:	00bfffc4 	movi	r2,-1
 10028f8:	18800626 	beq	r3,r2,1002914 <_close_r+0x4c>
 10028fc:	1805883a 	mov	r2,r3
 1002900:	dfc00217 	ldw	ra,8(sp)
 1002904:	dc400117 	ldw	r17,4(sp)
 1002908:	dc000017 	ldw	r16,0(sp)
 100290c:	dec00304 	addi	sp,sp,12
 1002910:	f800283a 	ret
 1002914:	80800017 	ldw	r2,0(r16)
 1002918:	103ff826 	beq	r2,zero,10028fc <_close_r+0x34>
 100291c:	88800015 	stw	r2,0(r17)
 1002920:	1805883a 	mov	r2,r3
 1002924:	dfc00217 	ldw	ra,8(sp)
 1002928:	dc400117 	ldw	r17,4(sp)
 100292c:	dc000017 	ldw	r16,0(sp)
 1002930:	dec00304 	addi	sp,sp,12
 1002934:	f800283a 	ret

01002938 <_fclose_r>:
 1002938:	defffc04 	addi	sp,sp,-16
 100293c:	dc400115 	stw	r17,4(sp)
 1002940:	dc000015 	stw	r16,0(sp)
 1002944:	dfc00315 	stw	ra,12(sp)
 1002948:	dc800215 	stw	r18,8(sp)
 100294c:	2821883a 	mov	r16,r5
 1002950:	2023883a 	mov	r17,r4
 1002954:	28002926 	beq	r5,zero,10029fc <_fclose_r+0xc4>
 1002958:	1001cb00 	call	1001cb0 <__sfp_lock_acquire>
 100295c:	88000226 	beq	r17,zero,1002968 <_fclose_r+0x30>
 1002960:	88800e17 	ldw	r2,56(r17)
 1002964:	10002d26 	beq	r2,zero,1002a1c <_fclose_r+0xe4>
 1002968:	8080030f 	ldh	r2,12(r16)
 100296c:	10002226 	beq	r2,zero,10029f8 <_fclose_r+0xc0>
 1002970:	8809883a 	mov	r4,r17
 1002974:	800b883a 	mov	r5,r16
 1002978:	1001a280 	call	1001a28 <_fflush_r>
 100297c:	1025883a 	mov	r18,r2
 1002980:	80800b17 	ldw	r2,44(r16)
 1002984:	10000426 	beq	r2,zero,1002998 <_fclose_r+0x60>
 1002988:	81400717 	ldw	r5,28(r16)
 100298c:	8809883a 	mov	r4,r17
 1002990:	103ee83a 	callr	r2
 1002994:	10002a16 	blt	r2,zero,1002a40 <_fclose_r+0x108>
 1002998:	8080030b 	ldhu	r2,12(r16)
 100299c:	1080200c 	andi	r2,r2,128
 10029a0:	1000231e 	bne	r2,zero,1002a30 <_fclose_r+0xf8>
 10029a4:	81400c17 	ldw	r5,48(r16)
 10029a8:	28000526 	beq	r5,zero,10029c0 <_fclose_r+0x88>
 10029ac:	80801004 	addi	r2,r16,64
 10029b0:	28800226 	beq	r5,r2,10029bc <_fclose_r+0x84>
 10029b4:	8809883a 	mov	r4,r17
 10029b8:	10020440 	call	1002044 <_free_r>
 10029bc:	80000c15 	stw	zero,48(r16)
 10029c0:	81401117 	ldw	r5,68(r16)
 10029c4:	28000326 	beq	r5,zero,10029d4 <_fclose_r+0x9c>
 10029c8:	8809883a 	mov	r4,r17
 10029cc:	10020440 	call	1002044 <_free_r>
 10029d0:	80001115 	stw	zero,68(r16)
 10029d4:	8000030d 	sth	zero,12(r16)
 10029d8:	1001cb40 	call	1001cb4 <__sfp_lock_release>
 10029dc:	9005883a 	mov	r2,r18
 10029e0:	dfc00317 	ldw	ra,12(sp)
 10029e4:	dc800217 	ldw	r18,8(sp)
 10029e8:	dc400117 	ldw	r17,4(sp)
 10029ec:	dc000017 	ldw	r16,0(sp)
 10029f0:	dec00404 	addi	sp,sp,16
 10029f4:	f800283a 	ret
 10029f8:	1001cb40 	call	1001cb4 <__sfp_lock_release>
 10029fc:	0025883a 	mov	r18,zero
 1002a00:	9005883a 	mov	r2,r18
 1002a04:	dfc00317 	ldw	ra,12(sp)
 1002a08:	dc800217 	ldw	r18,8(sp)
 1002a0c:	dc400117 	ldw	r17,4(sp)
 1002a10:	dc000017 	ldw	r16,0(sp)
 1002a14:	dec00404 	addi	sp,sp,16
 1002a18:	f800283a 	ret
 1002a1c:	8809883a 	mov	r4,r17
 1002a20:	1001cc00 	call	1001cc0 <__sinit>
 1002a24:	8080030f 	ldh	r2,12(r16)
 1002a28:	103fd11e 	bne	r2,zero,1002970 <_fclose_r+0x38>
 1002a2c:	003ff206 	br	10029f8 <_fclose_r+0xc0>
 1002a30:	81400417 	ldw	r5,16(r16)
 1002a34:	8809883a 	mov	r4,r17
 1002a38:	10020440 	call	1002044 <_free_r>
 1002a3c:	003fd906 	br	10029a4 <_fclose_r+0x6c>
 1002a40:	04bfffc4 	movi	r18,-1
 1002a44:	003fd406 	br	1002998 <_fclose_r+0x60>

01002a48 <fclose>:
 1002a48:	00804074 	movhi	r2,257
 1002a4c:	10afac04 	addi	r2,r2,-16720
 1002a50:	200b883a 	mov	r5,r4
 1002a54:	11000017 	ldw	r4,0(r2)
 1002a58:	10029381 	jmpi	1002938 <_fclose_r>

01002a5c <_fstat_r>:
 1002a5c:	defffd04 	addi	sp,sp,-12
 1002a60:	dc000015 	stw	r16,0(sp)
 1002a64:	04004074 	movhi	r16,257
 1002a68:	84367004 	addi	r16,r16,-9792
 1002a6c:	dc400115 	stw	r17,4(sp)
 1002a70:	80000015 	stw	zero,0(r16)
 1002a74:	2023883a 	mov	r17,r4
 1002a78:	2809883a 	mov	r4,r5
 1002a7c:	300b883a 	mov	r5,r6
 1002a80:	dfc00215 	stw	ra,8(sp)
 1002a84:	1002db80 	call	1002db8 <fstat>
 1002a88:	1007883a 	mov	r3,r2
 1002a8c:	00bfffc4 	movi	r2,-1
 1002a90:	18800626 	beq	r3,r2,1002aac <_fstat_r+0x50>
 1002a94:	1805883a 	mov	r2,r3
 1002a98:	dfc00217 	ldw	ra,8(sp)
 1002a9c:	dc400117 	ldw	r17,4(sp)
 1002aa0:	dc000017 	ldw	r16,0(sp)
 1002aa4:	dec00304 	addi	sp,sp,12
 1002aa8:	f800283a 	ret
 1002aac:	80800017 	ldw	r2,0(r16)
 1002ab0:	103ff826 	beq	r2,zero,1002a94 <_fstat_r+0x38>
 1002ab4:	88800015 	stw	r2,0(r17)
 1002ab8:	1805883a 	mov	r2,r3
 1002abc:	dfc00217 	ldw	ra,8(sp)
 1002ac0:	dc400117 	ldw	r17,4(sp)
 1002ac4:	dc000017 	ldw	r16,0(sp)
 1002ac8:	dec00304 	addi	sp,sp,12
 1002acc:	f800283a 	ret

01002ad0 <_isatty_r>:
 1002ad0:	defffd04 	addi	sp,sp,-12
 1002ad4:	dc000015 	stw	r16,0(sp)
 1002ad8:	04004074 	movhi	r16,257
 1002adc:	84367004 	addi	r16,r16,-9792
 1002ae0:	dc400115 	stw	r17,4(sp)
 1002ae4:	80000015 	stw	zero,0(r16)
 1002ae8:	2023883a 	mov	r17,r4
 1002aec:	2809883a 	mov	r4,r5
 1002af0:	dfc00215 	stw	ra,8(sp)
 1002af4:	1002eec0 	call	1002eec <isatty>
 1002af8:	1007883a 	mov	r3,r2
 1002afc:	00bfffc4 	movi	r2,-1
 1002b00:	18800626 	beq	r3,r2,1002b1c <_isatty_r+0x4c>
 1002b04:	1805883a 	mov	r2,r3
 1002b08:	dfc00217 	ldw	ra,8(sp)
 1002b0c:	dc400117 	ldw	r17,4(sp)
 1002b10:	dc000017 	ldw	r16,0(sp)
 1002b14:	dec00304 	addi	sp,sp,12
 1002b18:	f800283a 	ret
 1002b1c:	80800017 	ldw	r2,0(r16)
 1002b20:	103ff826 	beq	r2,zero,1002b04 <_isatty_r+0x34>
 1002b24:	88800015 	stw	r2,0(r17)
 1002b28:	1805883a 	mov	r2,r3
 1002b2c:	dfc00217 	ldw	ra,8(sp)
 1002b30:	dc400117 	ldw	r17,4(sp)
 1002b34:	dc000017 	ldw	r16,0(sp)
 1002b38:	dec00304 	addi	sp,sp,12
 1002b3c:	f800283a 	ret

01002b40 <_lseek_r>:
 1002b40:	defffd04 	addi	sp,sp,-12
 1002b44:	dc000015 	stw	r16,0(sp)
 1002b48:	04004074 	movhi	r16,257
 1002b4c:	84367004 	addi	r16,r16,-9792
 1002b50:	dc400115 	stw	r17,4(sp)
 1002b54:	80000015 	stw	zero,0(r16)
 1002b58:	2023883a 	mov	r17,r4
 1002b5c:	2809883a 	mov	r4,r5
 1002b60:	300b883a 	mov	r5,r6
 1002b64:	380d883a 	mov	r6,r7
 1002b68:	dfc00215 	stw	ra,8(sp)
 1002b6c:	10030f80 	call	10030f8 <lseek>
 1002b70:	1007883a 	mov	r3,r2
 1002b74:	00bfffc4 	movi	r2,-1
 1002b78:	18800626 	beq	r3,r2,1002b94 <_lseek_r+0x54>
 1002b7c:	1805883a 	mov	r2,r3
 1002b80:	dfc00217 	ldw	ra,8(sp)
 1002b84:	dc400117 	ldw	r17,4(sp)
 1002b88:	dc000017 	ldw	r16,0(sp)
 1002b8c:	dec00304 	addi	sp,sp,12
 1002b90:	f800283a 	ret
 1002b94:	80800017 	ldw	r2,0(r16)
 1002b98:	103ff826 	beq	r2,zero,1002b7c <_lseek_r+0x3c>
 1002b9c:	88800015 	stw	r2,0(r17)
 1002ba0:	1805883a 	mov	r2,r3
 1002ba4:	dfc00217 	ldw	ra,8(sp)
 1002ba8:	dc400117 	ldw	r17,4(sp)
 1002bac:	dc000017 	ldw	r16,0(sp)
 1002bb0:	dec00304 	addi	sp,sp,12
 1002bb4:	f800283a 	ret

01002bb8 <_read_r>:
 1002bb8:	defffd04 	addi	sp,sp,-12
 1002bbc:	dc000015 	stw	r16,0(sp)
 1002bc0:	04004074 	movhi	r16,257
 1002bc4:	84367004 	addi	r16,r16,-9792
 1002bc8:	dc400115 	stw	r17,4(sp)
 1002bcc:	80000015 	stw	zero,0(r16)
 1002bd0:	2023883a 	mov	r17,r4
 1002bd4:	2809883a 	mov	r4,r5
 1002bd8:	300b883a 	mov	r5,r6
 1002bdc:	380d883a 	mov	r6,r7
 1002be0:	dfc00215 	stw	ra,8(sp)
 1002be4:	10032f40 	call	10032f4 <read>
 1002be8:	1007883a 	mov	r3,r2
 1002bec:	00bfffc4 	movi	r2,-1
 1002bf0:	18800626 	beq	r3,r2,1002c0c <_read_r+0x54>
 1002bf4:	1805883a 	mov	r2,r3
 1002bf8:	dfc00217 	ldw	ra,8(sp)
 1002bfc:	dc400117 	ldw	r17,4(sp)
 1002c00:	dc000017 	ldw	r16,0(sp)
 1002c04:	dec00304 	addi	sp,sp,12
 1002c08:	f800283a 	ret
 1002c0c:	80800017 	ldw	r2,0(r16)
 1002c10:	103ff826 	beq	r2,zero,1002bf4 <_read_r+0x3c>
 1002c14:	88800015 	stw	r2,0(r17)
 1002c18:	1805883a 	mov	r2,r3
 1002c1c:	dfc00217 	ldw	ra,8(sp)
 1002c20:	dc400117 	ldw	r17,4(sp)
 1002c24:	dc000017 	ldw	r16,0(sp)
 1002c28:	dec00304 	addi	sp,sp,12
 1002c2c:	f800283a 	ret

01002c30 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1002c30:	defff804 	addi	sp,sp,-32
 1002c34:	dfc00715 	stw	ra,28(sp)
 1002c38:	df000615 	stw	fp,24(sp)
 1002c3c:	df000604 	addi	fp,sp,24
 1002c40:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1002c44:	e0bffc17 	ldw	r2,-16(fp)
 1002c48:	1004803a 	cmplt	r2,r2,zero
 1002c4c:	1000081e 	bne	r2,zero,1002c70 <close+0x40>
 1002c50:	e0bffc17 	ldw	r2,-16(fp)
 1002c54:	10800324 	muli	r2,r2,12
 1002c58:	1007883a 	mov	r3,r2
 1002c5c:	00804074 	movhi	r2,257
 1002c60:	10ab1304 	addi	r2,r2,-21428
 1002c64:	1887883a 	add	r3,r3,r2
 1002c68:	e0ffff15 	stw	r3,-4(fp)
 1002c6c:	00000106 	br	1002c74 <close+0x44>
 1002c70:	e03fff15 	stw	zero,-4(fp)
 1002c74:	e0bfff17 	ldw	r2,-4(fp)
 1002c78:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1002c7c:	e0bffb17 	ldw	r2,-20(fp)
 1002c80:	1005003a 	cmpeq	r2,r2,zero
 1002c84:	10001d1e 	bne	r2,zero,1002cfc <close+0xcc>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1002c88:	e0bffb17 	ldw	r2,-20(fp)
 1002c8c:	10800017 	ldw	r2,0(r2)
 1002c90:	10800417 	ldw	r2,16(r2)
 1002c94:	1005003a 	cmpeq	r2,r2,zero
 1002c98:	1000071e 	bne	r2,zero,1002cb8 <close+0x88>
 1002c9c:	e0bffb17 	ldw	r2,-20(fp)
 1002ca0:	10800017 	ldw	r2,0(r2)
 1002ca4:	10800417 	ldw	r2,16(r2)
 1002ca8:	e13ffb17 	ldw	r4,-20(fp)
 1002cac:	103ee83a 	callr	r2
 1002cb0:	e0bffe15 	stw	r2,-8(fp)
 1002cb4:	00000106 	br	1002cbc <close+0x8c>
 1002cb8:	e03ffe15 	stw	zero,-8(fp)
 1002cbc:	e0bffe17 	ldw	r2,-8(fp)
 1002cc0:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1002cc4:	e13ffc17 	ldw	r4,-16(fp)
 1002cc8:	10034740 	call	1003474 <alt_release_fd>
    if (rval < 0)
 1002ccc:	e0bffa17 	ldw	r2,-24(fp)
 1002cd0:	1004403a 	cmpge	r2,r2,zero
 1002cd4:	1000071e 	bne	r2,zero,1002cf4 <close+0xc4>
    {
      ALT_ERRNO = -rval;
 1002cd8:	1002d2c0 	call	1002d2c <alt_get_errno>
 1002cdc:	e0fffa17 	ldw	r3,-24(fp)
 1002ce0:	00c7c83a 	sub	r3,zero,r3
 1002ce4:	10c00015 	stw	r3,0(r2)
      return -1;
 1002ce8:	00bfffc4 	movi	r2,-1
 1002cec:	e0bffd15 	stw	r2,-12(fp)
 1002cf0:	00000806 	br	1002d14 <close+0xe4>
    }
    return 0;
 1002cf4:	e03ffd15 	stw	zero,-12(fp)
 1002cf8:	00000606 	br	1002d14 <close+0xe4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002cfc:	1002d2c0 	call	1002d2c <alt_get_errno>
 1002d00:	1007883a 	mov	r3,r2
 1002d04:	00801444 	movi	r2,81
 1002d08:	18800015 	stw	r2,0(r3)
    return -1;
 1002d0c:	00bfffc4 	movi	r2,-1
 1002d10:	e0bffd15 	stw	r2,-12(fp)
 1002d14:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1002d18:	e037883a 	mov	sp,fp
 1002d1c:	dfc00117 	ldw	ra,4(sp)
 1002d20:	df000017 	ldw	fp,0(sp)
 1002d24:	dec00204 	addi	sp,sp,8
 1002d28:	f800283a 	ret

01002d2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002d2c:	defffd04 	addi	sp,sp,-12
 1002d30:	dfc00215 	stw	ra,8(sp)
 1002d34:	df000115 	stw	fp,4(sp)
 1002d38:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002d3c:	00804074 	movhi	r2,257
 1002d40:	10afb504 	addi	r2,r2,-16684
 1002d44:	10800017 	ldw	r2,0(r2)
 1002d48:	1005003a 	cmpeq	r2,r2,zero
 1002d4c:	1000061e 	bne	r2,zero,1002d68 <alt_get_errno+0x3c>
 1002d50:	00804074 	movhi	r2,257
 1002d54:	10afb504 	addi	r2,r2,-16684
 1002d58:	10800017 	ldw	r2,0(r2)
 1002d5c:	103ee83a 	callr	r2
 1002d60:	e0bfff15 	stw	r2,-4(fp)
 1002d64:	00000306 	br	1002d74 <alt_get_errno+0x48>
 1002d68:	00804074 	movhi	r2,257
 1002d6c:	10b67004 	addi	r2,r2,-9792
 1002d70:	e0bfff15 	stw	r2,-4(fp)
 1002d74:	e0bfff17 	ldw	r2,-4(fp)
}
 1002d78:	e037883a 	mov	sp,fp
 1002d7c:	dfc00117 	ldw	ra,4(sp)
 1002d80:	df000017 	ldw	fp,0(sp)
 1002d84:	dec00204 	addi	sp,sp,8
 1002d88:	f800283a 	ret

01002d8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1002d8c:	defffc04 	addi	sp,sp,-16
 1002d90:	df000315 	stw	fp,12(sp)
 1002d94:	df000304 	addi	fp,sp,12
 1002d98:	e13ffd15 	stw	r4,-12(fp)
 1002d9c:	e17ffe15 	stw	r5,-8(fp)
 1002da0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1002da4:	e0bfff17 	ldw	r2,-4(fp)
}
 1002da8:	e037883a 	mov	sp,fp
 1002dac:	df000017 	ldw	fp,0(sp)
 1002db0:	dec00104 	addi	sp,sp,4
 1002db4:	f800283a 	ret

01002db8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1002db8:	defff904 	addi	sp,sp,-28
 1002dbc:	dfc00615 	stw	ra,24(sp)
 1002dc0:	df000515 	stw	fp,20(sp)
 1002dc4:	df000504 	addi	fp,sp,20
 1002dc8:	e13ffc15 	stw	r4,-16(fp)
 1002dcc:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002dd0:	e0bffc17 	ldw	r2,-16(fp)
 1002dd4:	1004803a 	cmplt	r2,r2,zero
 1002dd8:	1000081e 	bne	r2,zero,1002dfc <fstat+0x44>
 1002ddc:	e0bffc17 	ldw	r2,-16(fp)
 1002de0:	10800324 	muli	r2,r2,12
 1002de4:	1007883a 	mov	r3,r2
 1002de8:	00804074 	movhi	r2,257
 1002dec:	10ab1304 	addi	r2,r2,-21428
 1002df0:	1887883a 	add	r3,r3,r2
 1002df4:	e0ffff15 	stw	r3,-4(fp)
 1002df8:	00000106 	br	1002e00 <fstat+0x48>
 1002dfc:	e03fff15 	stw	zero,-4(fp)
 1002e00:	e0bfff17 	ldw	r2,-4(fp)
 1002e04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1002e08:	e0bffb17 	ldw	r2,-20(fp)
 1002e0c:	1005003a 	cmpeq	r2,r2,zero
 1002e10:	1000121e 	bne	r2,zero,1002e5c <fstat+0xa4>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1002e14:	e0bffb17 	ldw	r2,-20(fp)
 1002e18:	10800017 	ldw	r2,0(r2)
 1002e1c:	10800817 	ldw	r2,32(r2)
 1002e20:	1005003a 	cmpeq	r2,r2,zero
 1002e24:	1000081e 	bne	r2,zero,1002e48 <fstat+0x90>
    {
      return fd->dev->fstat(fd, st);
 1002e28:	e0bffb17 	ldw	r2,-20(fp)
 1002e2c:	10800017 	ldw	r2,0(r2)
 1002e30:	10800817 	ldw	r2,32(r2)
 1002e34:	e13ffb17 	ldw	r4,-20(fp)
 1002e38:	e17ffd17 	ldw	r5,-12(fp)
 1002e3c:	103ee83a 	callr	r2
 1002e40:	e0bffe15 	stw	r2,-8(fp)
 1002e44:	00000b06 	br	1002e74 <fstat+0xbc>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1002e48:	e0fffd17 	ldw	r3,-12(fp)
 1002e4c:	00880004 	movi	r2,8192
 1002e50:	18800115 	stw	r2,4(r3)
      return 0;
 1002e54:	e03ffe15 	stw	zero,-8(fp)
 1002e58:	00000606 	br	1002e74 <fstat+0xbc>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002e5c:	1002e8c0 	call	1002e8c <alt_get_errno>
 1002e60:	1007883a 	mov	r3,r2
 1002e64:	00801444 	movi	r2,81
 1002e68:	18800015 	stw	r2,0(r3)
    return -1;
 1002e6c:	00bfffc4 	movi	r2,-1
 1002e70:	e0bffe15 	stw	r2,-8(fp)
 1002e74:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1002e78:	e037883a 	mov	sp,fp
 1002e7c:	dfc00117 	ldw	ra,4(sp)
 1002e80:	df000017 	ldw	fp,0(sp)
 1002e84:	dec00204 	addi	sp,sp,8
 1002e88:	f800283a 	ret

01002e8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002e8c:	defffd04 	addi	sp,sp,-12
 1002e90:	dfc00215 	stw	ra,8(sp)
 1002e94:	df000115 	stw	fp,4(sp)
 1002e98:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002e9c:	00804074 	movhi	r2,257
 1002ea0:	10afb504 	addi	r2,r2,-16684
 1002ea4:	10800017 	ldw	r2,0(r2)
 1002ea8:	1005003a 	cmpeq	r2,r2,zero
 1002eac:	1000061e 	bne	r2,zero,1002ec8 <alt_get_errno+0x3c>
 1002eb0:	00804074 	movhi	r2,257
 1002eb4:	10afb504 	addi	r2,r2,-16684
 1002eb8:	10800017 	ldw	r2,0(r2)
 1002ebc:	103ee83a 	callr	r2
 1002ec0:	e0bfff15 	stw	r2,-4(fp)
 1002ec4:	00000306 	br	1002ed4 <alt_get_errno+0x48>
 1002ec8:	00804074 	movhi	r2,257
 1002ecc:	10b67004 	addi	r2,r2,-9792
 1002ed0:	e0bfff15 	stw	r2,-4(fp)
 1002ed4:	e0bfff17 	ldw	r2,-4(fp)
}
 1002ed8:	e037883a 	mov	sp,fp
 1002edc:	dfc00117 	ldw	ra,4(sp)
 1002ee0:	df000017 	ldw	fp,0(sp)
 1002ee4:	dec00204 	addi	sp,sp,8
 1002ee8:	f800283a 	ret

01002eec <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1002eec:	deffeb04 	addi	sp,sp,-84
 1002ef0:	dfc01415 	stw	ra,80(sp)
 1002ef4:	df001315 	stw	fp,76(sp)
 1002ef8:	df001304 	addi	fp,sp,76
 1002efc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1002f00:	e0bffd17 	ldw	r2,-12(fp)
 1002f04:	1004803a 	cmplt	r2,r2,zero
 1002f08:	1000081e 	bne	r2,zero,1002f2c <isatty+0x40>
 1002f0c:	e0bffd17 	ldw	r2,-12(fp)
 1002f10:	10800324 	muli	r2,r2,12
 1002f14:	1007883a 	mov	r3,r2
 1002f18:	00804074 	movhi	r2,257
 1002f1c:	10ab1304 	addi	r2,r2,-21428
 1002f20:	1887883a 	add	r3,r3,r2
 1002f24:	e0ffff15 	stw	r3,-4(fp)
 1002f28:	00000106 	br	1002f30 <isatty+0x44>
 1002f2c:	e03fff15 	stw	zero,-4(fp)
 1002f30:	e0bfff17 	ldw	r2,-4(fp)
 1002f34:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1002f38:	e0bfed17 	ldw	r2,-76(fp)
 1002f3c:	1005003a 	cmpeq	r2,r2,zero
 1002f40:	10000f1e 	bne	r2,zero,1002f80 <isatty+0x94>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1002f44:	e0bfed17 	ldw	r2,-76(fp)
 1002f48:	10800017 	ldw	r2,0(r2)
 1002f4c:	10800817 	ldw	r2,32(r2)
 1002f50:	1004c03a 	cmpne	r2,r2,zero
 1002f54:	1000031e 	bne	r2,zero,1002f64 <isatty+0x78>
    {
      return 1;
 1002f58:	00800044 	movi	r2,1
 1002f5c:	e0bffe15 	stw	r2,-8(fp)
 1002f60:	00000c06 	br	1002f94 <isatty+0xa8>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1002f64:	e17fee04 	addi	r5,fp,-72
 1002f68:	e13ffd17 	ldw	r4,-12(fp)
 1002f6c:	1002db80 	call	1002db8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1002f70:	e0bfef17 	ldw	r2,-68(fp)
 1002f74:	10880020 	cmpeqi	r2,r2,8192
 1002f78:	e0bffe15 	stw	r2,-8(fp)
 1002f7c:	00000506 	br	1002f94 <isatty+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1002f80:	1002fac0 	call	1002fac <alt_get_errno>
 1002f84:	1007883a 	mov	r3,r2
 1002f88:	00801444 	movi	r2,81
 1002f8c:	18800015 	stw	r2,0(r3)
    return 0;
 1002f90:	e03ffe15 	stw	zero,-8(fp)
 1002f94:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1002f98:	e037883a 	mov	sp,fp
 1002f9c:	dfc00117 	ldw	ra,4(sp)
 1002fa0:	df000017 	ldw	fp,0(sp)
 1002fa4:	dec00204 	addi	sp,sp,8
 1002fa8:	f800283a 	ret

01002fac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1002fac:	defffd04 	addi	sp,sp,-12
 1002fb0:	dfc00215 	stw	ra,8(sp)
 1002fb4:	df000115 	stw	fp,4(sp)
 1002fb8:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1002fbc:	00804074 	movhi	r2,257
 1002fc0:	10afb504 	addi	r2,r2,-16684
 1002fc4:	10800017 	ldw	r2,0(r2)
 1002fc8:	1005003a 	cmpeq	r2,r2,zero
 1002fcc:	1000061e 	bne	r2,zero,1002fe8 <alt_get_errno+0x3c>
 1002fd0:	00804074 	movhi	r2,257
 1002fd4:	10afb504 	addi	r2,r2,-16684
 1002fd8:	10800017 	ldw	r2,0(r2)
 1002fdc:	103ee83a 	callr	r2
 1002fe0:	e0bfff15 	stw	r2,-4(fp)
 1002fe4:	00000306 	br	1002ff4 <alt_get_errno+0x48>
 1002fe8:	00804074 	movhi	r2,257
 1002fec:	10b67004 	addi	r2,r2,-9792
 1002ff0:	e0bfff15 	stw	r2,-4(fp)
 1002ff4:	e0bfff17 	ldw	r2,-4(fp)
}
 1002ff8:	e037883a 	mov	sp,fp
 1002ffc:	dfc00117 	ldw	ra,4(sp)
 1003000:	df000017 	ldw	fp,0(sp)
 1003004:	dec00204 	addi	sp,sp,8
 1003008:	f800283a 	ret

0100300c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100300c:	defffe04 	addi	sp,sp,-8
 1003010:	dfc00115 	stw	ra,4(sp)
 1003014:	df000015 	stw	fp,0(sp)
 1003018:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100301c:	01004074 	movhi	r4,257
 1003020:	212fba04 	addi	r4,r4,-16664
 1003024:	01404074 	movhi	r5,257
 1003028:	29690704 	addi	r5,r5,-23524
 100302c:	01804074 	movhi	r6,257
 1003030:	31afba04 	addi	r6,r6,-16664
 1003034:	100308c0 	call	100308c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1003038:	01004034 	movhi	r4,256
 100303c:	21000804 	addi	r4,r4,32
 1003040:	01404034 	movhi	r5,256
 1003044:	29400804 	addi	r5,r5,32
 1003048:	01804034 	movhi	r6,256
 100304c:	31806e04 	addi	r6,r6,440
 1003050:	100308c0 	call	100308c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1003054:	01004074 	movhi	r4,257
 1003058:	2128af04 	addi	r4,r4,-23876
 100305c:	01404074 	movhi	r5,257
 1003060:	2968af04 	addi	r5,r5,-23876
 1003064:	01804074 	movhi	r6,257
 1003068:	31a90704 	addi	r6,r6,-23524
 100306c:	100308c0 	call	100308c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1003070:	10091e00 	call	10091e0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1003074:	10094940 	call	1009494 <alt_icache_flush_all>
}
 1003078:	e037883a 	mov	sp,fp
 100307c:	dfc00117 	ldw	ra,4(sp)
 1003080:	df000017 	ldw	fp,0(sp)
 1003084:	dec00204 	addi	sp,sp,8
 1003088:	f800283a 	ret

0100308c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100308c:	defffc04 	addi	sp,sp,-16
 1003090:	df000315 	stw	fp,12(sp)
 1003094:	df000304 	addi	fp,sp,12
 1003098:	e13ffd15 	stw	r4,-12(fp)
 100309c:	e17ffe15 	stw	r5,-8(fp)
 10030a0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 10030a4:	e0fffe17 	ldw	r3,-8(fp)
 10030a8:	e0bffd17 	ldw	r2,-12(fp)
 10030ac:	18800e26 	beq	r3,r2,10030e8 <alt_load_section+0x5c>
  {
    while( to != end )
 10030b0:	00000a06 	br	10030dc <alt_load_section+0x50>
    {
      *to++ = *from++;
 10030b4:	e0bffd17 	ldw	r2,-12(fp)
 10030b8:	10c00017 	ldw	r3,0(r2)
 10030bc:	e0bffe17 	ldw	r2,-8(fp)
 10030c0:	10c00015 	stw	r3,0(r2)
 10030c4:	e0bffe17 	ldw	r2,-8(fp)
 10030c8:	10800104 	addi	r2,r2,4
 10030cc:	e0bffe15 	stw	r2,-8(fp)
 10030d0:	e0bffd17 	ldw	r2,-12(fp)
 10030d4:	10800104 	addi	r2,r2,4
 10030d8:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 10030dc:	e0fffe17 	ldw	r3,-8(fp)
 10030e0:	e0bfff17 	ldw	r2,-4(fp)
 10030e4:	18bff31e 	bne	r3,r2,10030b4 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 10030e8:	e037883a 	mov	sp,fp
 10030ec:	df000017 	ldw	fp,0(sp)
 10030f0:	dec00104 	addi	sp,sp,4
 10030f4:	f800283a 	ret

010030f8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 10030f8:	defff804 	addi	sp,sp,-32
 10030fc:	dfc00715 	stw	ra,28(sp)
 1003100:	df000615 	stw	fp,24(sp)
 1003104:	df000604 	addi	fp,sp,24
 1003108:	e13ffc15 	stw	r4,-16(fp)
 100310c:	e17ffd15 	stw	r5,-12(fp)
 1003110:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1003114:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003118:	e0bffc17 	ldw	r2,-16(fp)
 100311c:	1004803a 	cmplt	r2,r2,zero
 1003120:	1000081e 	bne	r2,zero,1003144 <lseek+0x4c>
 1003124:	e0bffc17 	ldw	r2,-16(fp)
 1003128:	10800324 	muli	r2,r2,12
 100312c:	1007883a 	mov	r3,r2
 1003130:	00804074 	movhi	r2,257
 1003134:	10ab1304 	addi	r2,r2,-21428
 1003138:	1887883a 	add	r3,r3,r2
 100313c:	e0ffff15 	stw	r3,-4(fp)
 1003140:	00000106 	br	1003148 <lseek+0x50>
 1003144:	e03fff15 	stw	zero,-4(fp)
 1003148:	e0bfff17 	ldw	r2,-4(fp)
 100314c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1003150:	e0bffb17 	ldw	r2,-20(fp)
 1003154:	1005003a 	cmpeq	r2,r2,zero
 1003158:	1000111e 	bne	r2,zero,10031a0 <lseek+0xa8>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100315c:	e0bffb17 	ldw	r2,-20(fp)
 1003160:	10800017 	ldw	r2,0(r2)
 1003164:	10800717 	ldw	r2,28(r2)
 1003168:	1005003a 	cmpeq	r2,r2,zero
 100316c:	1000091e 	bne	r2,zero,1003194 <lseek+0x9c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1003170:	e0bffb17 	ldw	r2,-20(fp)
 1003174:	10800017 	ldw	r2,0(r2)
 1003178:	10800717 	ldw	r2,28(r2)
 100317c:	e13ffb17 	ldw	r4,-20(fp)
 1003180:	e17ffd17 	ldw	r5,-12(fp)
 1003184:	e1bffe17 	ldw	r6,-8(fp)
 1003188:	103ee83a 	callr	r2
 100318c:	e0bffa15 	stw	r2,-24(fp)
 1003190:	00000506 	br	10031a8 <lseek+0xb0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1003194:	00bfde84 	movi	r2,-134
 1003198:	e0bffa15 	stw	r2,-24(fp)
 100319c:	00000206 	br	10031a8 <lseek+0xb0>
    }
  }
  else  
  {
    rc = -EBADFD;
 10031a0:	00bfebc4 	movi	r2,-81
 10031a4:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 10031a8:	e0bffa17 	ldw	r2,-24(fp)
 10031ac:	1004403a 	cmpge	r2,r2,zero
 10031b0:	1000071e 	bne	r2,zero,10031d0 <lseek+0xd8>
  {
    ALT_ERRNO = -rc;
 10031b4:	10031e80 	call	10031e8 <alt_get_errno>
 10031b8:	1007883a 	mov	r3,r2
 10031bc:	e0bffa17 	ldw	r2,-24(fp)
 10031c0:	0085c83a 	sub	r2,zero,r2
 10031c4:	18800015 	stw	r2,0(r3)
    rc = -1;
 10031c8:	00bfffc4 	movi	r2,-1
 10031cc:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 10031d0:	e0bffa17 	ldw	r2,-24(fp)
}
 10031d4:	e037883a 	mov	sp,fp
 10031d8:	dfc00117 	ldw	ra,4(sp)
 10031dc:	df000017 	ldw	fp,0(sp)
 10031e0:	dec00204 	addi	sp,sp,8
 10031e4:	f800283a 	ret

010031e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10031e8:	defffd04 	addi	sp,sp,-12
 10031ec:	dfc00215 	stw	ra,8(sp)
 10031f0:	df000115 	stw	fp,4(sp)
 10031f4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10031f8:	00804074 	movhi	r2,257
 10031fc:	10afb504 	addi	r2,r2,-16684
 1003200:	10800017 	ldw	r2,0(r2)
 1003204:	1005003a 	cmpeq	r2,r2,zero
 1003208:	1000061e 	bne	r2,zero,1003224 <alt_get_errno+0x3c>
 100320c:	00804074 	movhi	r2,257
 1003210:	10afb504 	addi	r2,r2,-16684
 1003214:	10800017 	ldw	r2,0(r2)
 1003218:	103ee83a 	callr	r2
 100321c:	e0bfff15 	stw	r2,-4(fp)
 1003220:	00000306 	br	1003230 <alt_get_errno+0x48>
 1003224:	00804074 	movhi	r2,257
 1003228:	10b67004 	addi	r2,r2,-9792
 100322c:	e0bfff15 	stw	r2,-4(fp)
 1003230:	e0bfff17 	ldw	r2,-4(fp)
}
 1003234:	e037883a 	mov	sp,fp
 1003238:	dfc00117 	ldw	ra,4(sp)
 100323c:	df000017 	ldw	fp,0(sp)
 1003240:	dec00204 	addi	sp,sp,8
 1003244:	f800283a 	ret

01003248 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1003248:	defffd04 	addi	sp,sp,-12
 100324c:	dfc00215 	stw	ra,8(sp)
 1003250:	df000115 	stw	fp,4(sp)
 1003254:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1003258:	0009883a 	mov	r4,zero
 100325c:	10037100 	call	1003710 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1003260:	10037440 	call	1003744 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 1003264:	01004074 	movhi	r4,257
 1003268:	2128e804 	addi	r4,r4,-23648
 100326c:	01404074 	movhi	r5,257
 1003270:	2968e804 	addi	r5,r5,-23648
 1003274:	01804074 	movhi	r6,257
 1003278:	31a8e804 	addi	r6,r6,-23648
 100327c:	10095880 	call	1009588 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1003280:	10093380 	call	1009338 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 1003284:	01004074 	movhi	r4,257
 1003288:	2124e704 	addi	r4,r4,-27748
 100328c:	1009eb00 	call	1009eb0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1003290:	d126c517 	ldw	r4,-25836(gp)
 1003294:	d166c617 	ldw	r5,-25832(gp)
 1003298:	d1a6c717 	ldw	r6,-25828(gp)
 100329c:	10002040 	call	1000204 <main>
 10032a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 10032a4:	01000044 	movi	r4,1
 10032a8:	1002c300 	call	1002c30 <close>
  exit (result);
 10032ac:	e13fff17 	ldw	r4,-4(fp)
 10032b0:	1009ec40 	call	1009ec4 <exit>

010032b4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 10032b4:	defffe04 	addi	sp,sp,-8
 10032b8:	df000115 	stw	fp,4(sp)
 10032bc:	df000104 	addi	fp,sp,4
 10032c0:	e13fff15 	stw	r4,-4(fp)
}
 10032c4:	e037883a 	mov	sp,fp
 10032c8:	df000017 	ldw	fp,0(sp)
 10032cc:	dec00104 	addi	sp,sp,4
 10032d0:	f800283a 	ret

010032d4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 10032d4:	defffe04 	addi	sp,sp,-8
 10032d8:	df000115 	stw	fp,4(sp)
 10032dc:	df000104 	addi	fp,sp,4
 10032e0:	e13fff15 	stw	r4,-4(fp)
}
 10032e4:	e037883a 	mov	sp,fp
 10032e8:	df000017 	ldw	fp,0(sp)
 10032ec:	dec00104 	addi	sp,sp,4
 10032f0:	f800283a 	ret

010032f4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 10032f4:	defff704 	addi	sp,sp,-36
 10032f8:	dfc00815 	stw	ra,32(sp)
 10032fc:	df000715 	stw	fp,28(sp)
 1003300:	df000704 	addi	fp,sp,28
 1003304:	e13ffb15 	stw	r4,-20(fp)
 1003308:	e17ffc15 	stw	r5,-16(fp)
 100330c:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1003310:	e0bffb17 	ldw	r2,-20(fp)
 1003314:	1004803a 	cmplt	r2,r2,zero
 1003318:	1000081e 	bne	r2,zero,100333c <read+0x48>
 100331c:	e0bffb17 	ldw	r2,-20(fp)
 1003320:	10800324 	muli	r2,r2,12
 1003324:	1007883a 	mov	r3,r2
 1003328:	00804074 	movhi	r2,257
 100332c:	10ab1304 	addi	r2,r2,-21428
 1003330:	1887883a 	add	r3,r3,r2
 1003334:	e0ffff15 	stw	r3,-4(fp)
 1003338:	00000106 	br	1003340 <read+0x4c>
 100333c:	e03fff15 	stw	zero,-4(fp)
 1003340:	e0bfff17 	ldw	r2,-4(fp)
 1003344:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1003348:	e0bffa17 	ldw	r2,-24(fp)
 100334c:	1005003a 	cmpeq	r2,r2,zero
 1003350:	1000241e 	bne	r2,zero,10033e4 <read+0xf0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1003354:	e0bffa17 	ldw	r2,-24(fp)
 1003358:	10800217 	ldw	r2,8(r2)
 100335c:	108000cc 	andi	r2,r2,3
 1003360:	10800060 	cmpeqi	r2,r2,1
 1003364:	10001a1e 	bne	r2,zero,10033d0 <read+0xdc>
 1003368:	e0bffa17 	ldw	r2,-24(fp)
 100336c:	10800017 	ldw	r2,0(r2)
 1003370:	10800517 	ldw	r2,20(r2)
 1003374:	1005003a 	cmpeq	r2,r2,zero
 1003378:	1000151e 	bne	r2,zero,10033d0 <read+0xdc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100337c:	e0bffa17 	ldw	r2,-24(fp)
 1003380:	10800017 	ldw	r2,0(r2)
 1003384:	10800517 	ldw	r2,20(r2)
 1003388:	e17ffc17 	ldw	r5,-16(fp)
 100338c:	e1bffd17 	ldw	r6,-12(fp)
 1003390:	e13ffa17 	ldw	r4,-24(fp)
 1003394:	103ee83a 	callr	r2
 1003398:	e0bff915 	stw	r2,-28(fp)
 100339c:	e0bff917 	ldw	r2,-28(fp)
 10033a0:	1004403a 	cmpge	r2,r2,zero
 10033a4:	1000071e 	bne	r2,zero,10033c4 <read+0xd0>
        {
          ALT_ERRNO = -rval;
 10033a8:	10034140 	call	1003414 <alt_get_errno>
 10033ac:	e0fff917 	ldw	r3,-28(fp)
 10033b0:	00c7c83a 	sub	r3,zero,r3
 10033b4:	10c00015 	stw	r3,0(r2)
          return -1;
 10033b8:	00bfffc4 	movi	r2,-1
 10033bc:	e0bffe15 	stw	r2,-8(fp)
 10033c0:	00000e06 	br	10033fc <read+0x108>
        }
        return rval;
 10033c4:	e0bff917 	ldw	r2,-28(fp)
 10033c8:	e0bffe15 	stw	r2,-8(fp)
 10033cc:	00000b06 	br	10033fc <read+0x108>
      }
      else
      {
        ALT_ERRNO = EACCES;
 10033d0:	10034140 	call	1003414 <alt_get_errno>
 10033d4:	1007883a 	mov	r3,r2
 10033d8:	00800344 	movi	r2,13
 10033dc:	18800015 	stw	r2,0(r3)
 10033e0:	00000406 	br	10033f4 <read+0x100>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10033e4:	10034140 	call	1003414 <alt_get_errno>
 10033e8:	1007883a 	mov	r3,r2
 10033ec:	00801444 	movi	r2,81
 10033f0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10033f4:	00bfffc4 	movi	r2,-1
 10033f8:	e0bffe15 	stw	r2,-8(fp)
 10033fc:	e0bffe17 	ldw	r2,-8(fp)
}
 1003400:	e037883a 	mov	sp,fp
 1003404:	dfc00117 	ldw	ra,4(sp)
 1003408:	df000017 	ldw	fp,0(sp)
 100340c:	dec00204 	addi	sp,sp,8
 1003410:	f800283a 	ret

01003414 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1003414:	defffd04 	addi	sp,sp,-12
 1003418:	dfc00215 	stw	ra,8(sp)
 100341c:	df000115 	stw	fp,4(sp)
 1003420:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1003424:	00804074 	movhi	r2,257
 1003428:	10afb504 	addi	r2,r2,-16684
 100342c:	10800017 	ldw	r2,0(r2)
 1003430:	1005003a 	cmpeq	r2,r2,zero
 1003434:	1000061e 	bne	r2,zero,1003450 <alt_get_errno+0x3c>
 1003438:	00804074 	movhi	r2,257
 100343c:	10afb504 	addi	r2,r2,-16684
 1003440:	10800017 	ldw	r2,0(r2)
 1003444:	103ee83a 	callr	r2
 1003448:	e0bfff15 	stw	r2,-4(fp)
 100344c:	00000306 	br	100345c <alt_get_errno+0x48>
 1003450:	00804074 	movhi	r2,257
 1003454:	10b67004 	addi	r2,r2,-9792
 1003458:	e0bfff15 	stw	r2,-4(fp)
 100345c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003460:	e037883a 	mov	sp,fp
 1003464:	dfc00117 	ldw	ra,4(sp)
 1003468:	df000017 	ldw	fp,0(sp)
 100346c:	dec00204 	addi	sp,sp,8
 1003470:	f800283a 	ret

01003474 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1003474:	defffe04 	addi	sp,sp,-8
 1003478:	df000115 	stw	fp,4(sp)
 100347c:	df000104 	addi	fp,sp,4
 1003480:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 1003484:	e0bfff17 	ldw	r2,-4(fp)
 1003488:	108000d0 	cmplti	r2,r2,3
 100348c:	10000d1e 	bne	r2,zero,10034c4 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 1003490:	e0bfff17 	ldw	r2,-4(fp)
 1003494:	00c04074 	movhi	r3,257
 1003498:	18eb1304 	addi	r3,r3,-21428
 100349c:	10800324 	muli	r2,r2,12
 10034a0:	10c5883a 	add	r2,r2,r3
 10034a4:	10800204 	addi	r2,r2,8
 10034a8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 10034ac:	e0bfff17 	ldw	r2,-4(fp)
 10034b0:	00c04074 	movhi	r3,257
 10034b4:	18eb1304 	addi	r3,r3,-21428
 10034b8:	10800324 	muli	r2,r2,12
 10034bc:	10c5883a 	add	r2,r2,r3
 10034c0:	10000015 	stw	zero,0(r2)
  }
}
 10034c4:	e037883a 	mov	sp,fp
 10034c8:	df000017 	ldw	fp,0(sp)
 10034cc:	dec00104 	addi	sp,sp,4
 10034d0:	f800283a 	ret

010034d4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 10034d4:	defff804 	addi	sp,sp,-32
 10034d8:	df000715 	stw	fp,28(sp)
 10034dc:	df000704 	addi	fp,sp,28
 10034e0:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10034e4:	0005303a 	rdctl	r2,status
 10034e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10034ec:	e0fffb17 	ldw	r3,-20(fp)
 10034f0:	00bfff84 	movi	r2,-2
 10034f4:	1884703a 	and	r2,r3,r2
 10034f8:	1001703a 	wrctl	status,r2
  
  return context;
 10034fc:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 1003500:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 1003504:	d0a00a17 	ldw	r2,-32728(gp)
 1003508:	10c000c4 	addi	r3,r2,3
 100350c:	00bfff04 	movi	r2,-4
 1003510:	1884703a 	and	r2,r3,r2
 1003514:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 1003518:	d0e00a17 	ldw	r3,-32728(gp)
 100351c:	e0bffe17 	ldw	r2,-8(fp)
 1003520:	1887883a 	add	r3,r3,r2
 1003524:	00806034 	movhi	r2,384
 1003528:	10800004 	addi	r2,r2,0
 100352c:	10c0072e 	bgeu	r2,r3,100354c <sbrk+0x78>
 1003530:	e0bffd17 	ldw	r2,-12(fp)
 1003534:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1003538:	e0bffa17 	ldw	r2,-24(fp)
 100353c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1003540:	00bfffc4 	movi	r2,-1
 1003544:	e0bfff15 	stw	r2,-4(fp)
 1003548:	00000c06 	br	100357c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100354c:	d0a00a17 	ldw	r2,-32728(gp)
 1003550:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 1003554:	d0e00a17 	ldw	r3,-32728(gp)
 1003558:	e0bffe17 	ldw	r2,-8(fp)
 100355c:	1885883a 	add	r2,r3,r2
 1003560:	d0a00a15 	stw	r2,-32728(gp)
 1003564:	e0bffd17 	ldw	r2,-12(fp)
 1003568:	e0bff915 	stw	r2,-28(fp)
 100356c:	e0bff917 	ldw	r2,-28(fp)
 1003570:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 1003574:	e0bffc17 	ldw	r2,-16(fp)
 1003578:	e0bfff15 	stw	r2,-4(fp)
 100357c:	e0bfff17 	ldw	r2,-4(fp)
} 
 1003580:	e037883a 	mov	sp,fp
 1003584:	df000017 	ldw	fp,0(sp)
 1003588:	dec00104 	addi	sp,sp,4
 100358c:	f800283a 	ret

01003590 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1003590:	defff704 	addi	sp,sp,-36
 1003594:	dfc00815 	stw	ra,32(sp)
 1003598:	df000715 	stw	fp,28(sp)
 100359c:	df000704 	addi	fp,sp,28
 10035a0:	e13ffb15 	stw	r4,-20(fp)
 10035a4:	e17ffc15 	stw	r5,-16(fp)
 10035a8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10035ac:	e0bffb17 	ldw	r2,-20(fp)
 10035b0:	1004803a 	cmplt	r2,r2,zero
 10035b4:	1000081e 	bne	r2,zero,10035d8 <write+0x48>
 10035b8:	e0bffb17 	ldw	r2,-20(fp)
 10035bc:	10800324 	muli	r2,r2,12
 10035c0:	1007883a 	mov	r3,r2
 10035c4:	00804074 	movhi	r2,257
 10035c8:	10ab1304 	addi	r2,r2,-21428
 10035cc:	1887883a 	add	r3,r3,r2
 10035d0:	e0ffff15 	stw	r3,-4(fp)
 10035d4:	00000106 	br	10035dc <write+0x4c>
 10035d8:	e03fff15 	stw	zero,-4(fp)
 10035dc:	e0bfff17 	ldw	r2,-4(fp)
 10035e0:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10035e4:	e0bffa17 	ldw	r2,-24(fp)
 10035e8:	1005003a 	cmpeq	r2,r2,zero
 10035ec:	1000241e 	bne	r2,zero,1003680 <write+0xf0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 10035f0:	e0bffa17 	ldw	r2,-24(fp)
 10035f4:	10800217 	ldw	r2,8(r2)
 10035f8:	108000cc 	andi	r2,r2,3
 10035fc:	1005003a 	cmpeq	r2,r2,zero
 1003600:	10001a1e 	bne	r2,zero,100366c <write+0xdc>
 1003604:	e0bffa17 	ldw	r2,-24(fp)
 1003608:	10800017 	ldw	r2,0(r2)
 100360c:	10800617 	ldw	r2,24(r2)
 1003610:	1005003a 	cmpeq	r2,r2,zero
 1003614:	1000151e 	bne	r2,zero,100366c <write+0xdc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 1003618:	e0bffa17 	ldw	r2,-24(fp)
 100361c:	10800017 	ldw	r2,0(r2)
 1003620:	10800617 	ldw	r2,24(r2)
 1003624:	e17ffc17 	ldw	r5,-16(fp)
 1003628:	e1bffd17 	ldw	r6,-12(fp)
 100362c:	e13ffa17 	ldw	r4,-24(fp)
 1003630:	103ee83a 	callr	r2
 1003634:	e0bff915 	stw	r2,-28(fp)
 1003638:	e0bff917 	ldw	r2,-28(fp)
 100363c:	1004403a 	cmpge	r2,r2,zero
 1003640:	1000071e 	bne	r2,zero,1003660 <write+0xd0>
      {
        ALT_ERRNO = -rval;
 1003644:	10036b00 	call	10036b0 <alt_get_errno>
 1003648:	e0fff917 	ldw	r3,-28(fp)
 100364c:	00c7c83a 	sub	r3,zero,r3
 1003650:	10c00015 	stw	r3,0(r2)
        return -1;
 1003654:	00bfffc4 	movi	r2,-1
 1003658:	e0bffe15 	stw	r2,-8(fp)
 100365c:	00000e06 	br	1003698 <write+0x108>
      }
      return rval;
 1003660:	e0bff917 	ldw	r2,-28(fp)
 1003664:	e0bffe15 	stw	r2,-8(fp)
 1003668:	00000b06 	br	1003698 <write+0x108>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100366c:	10036b00 	call	10036b0 <alt_get_errno>
 1003670:	1007883a 	mov	r3,r2
 1003674:	00800344 	movi	r2,13
 1003678:	18800015 	stw	r2,0(r3)
 100367c:	00000406 	br	1003690 <write+0x100>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 1003680:	10036b00 	call	10036b0 <alt_get_errno>
 1003684:	1007883a 	mov	r3,r2
 1003688:	00801444 	movi	r2,81
 100368c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 1003690:	00bfffc4 	movi	r2,-1
 1003694:	e0bffe15 	stw	r2,-8(fp)
 1003698:	e0bffe17 	ldw	r2,-8(fp)
}
 100369c:	e037883a 	mov	sp,fp
 10036a0:	dfc00117 	ldw	ra,4(sp)
 10036a4:	df000017 	ldw	fp,0(sp)
 10036a8:	dec00204 	addi	sp,sp,8
 10036ac:	f800283a 	ret

010036b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10036b0:	defffd04 	addi	sp,sp,-12
 10036b4:	dfc00215 	stw	ra,8(sp)
 10036b8:	df000115 	stw	fp,4(sp)
 10036bc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10036c0:	00804074 	movhi	r2,257
 10036c4:	10afb504 	addi	r2,r2,-16684
 10036c8:	10800017 	ldw	r2,0(r2)
 10036cc:	1005003a 	cmpeq	r2,r2,zero
 10036d0:	1000061e 	bne	r2,zero,10036ec <alt_get_errno+0x3c>
 10036d4:	00804074 	movhi	r2,257
 10036d8:	10afb504 	addi	r2,r2,-16684
 10036dc:	10800017 	ldw	r2,0(r2)
 10036e0:	103ee83a 	callr	r2
 10036e4:	e0bfff15 	stw	r2,-4(fp)
 10036e8:	00000306 	br	10036f8 <alt_get_errno+0x48>
 10036ec:	00804074 	movhi	r2,257
 10036f0:	10b67004 	addi	r2,r2,-9792
 10036f4:	e0bfff15 	stw	r2,-4(fp)
 10036f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10036fc:	e037883a 	mov	sp,fp
 1003700:	dfc00117 	ldw	ra,4(sp)
 1003704:	df000017 	ldw	fp,0(sp)
 1003708:	dec00204 	addi	sp,sp,8
 100370c:	f800283a 	ret

01003710 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 1003710:	defffd04 	addi	sp,sp,-12
 1003714:	dfc00215 	stw	ra,8(sp)
 1003718:	df000115 	stw	fp,4(sp)
 100371c:	df000104 	addi	fp,sp,4
 1003720:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 1003724:	1009c280 	call	1009c28 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1003728:	00800044 	movi	r2,1
 100372c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 1003730:	e037883a 	mov	sp,fp
 1003734:	dfc00117 	ldw	ra,4(sp)
 1003738:	df000017 	ldw	fp,0(sp)
 100373c:	dec00204 	addi	sp,sp,8
 1003740:	f800283a 	ret

01003744 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1003744:	defffe04 	addi	sp,sp,-8
 1003748:	dfc00115 	stw	ra,4(sp)
 100374c:	df000015 	stw	fp,0(sp)
 1003750:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1003754:	01043804 	movi	r4,4320
 1003758:	000b883a 	mov	r5,zero
 100375c:	018000c4 	movi	r6,3
 1003760:	01c0fa04 	movi	r7,1000
 1003764:	100873c0 	call	100873c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1003768:	01004074 	movhi	r4,257
 100376c:	212b7d04 	addi	r4,r4,-21004
 1003770:	000b883a 	mov	r5,zero
 1003774:	000d883a 	mov	r6,zero
 1003778:	1007d680 	call	1007d68 <altera_avalon_jtag_uart_init>
 100377c:	01004074 	movhi	r4,257
 1003780:	212b7304 	addi	r4,r4,-21044
 1003784:	10037cc0 	call	10037cc <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 1003788:	01004074 	movhi	r4,257
 100378c:	212f8b04 	addi	r4,r4,-16852
 1003790:	10088740 	call	1008874 <alt_up_character_lcd_init>
 1003794:	01004074 	movhi	r4,257
 1003798:	212f8b04 	addi	r4,r4,-16852
 100379c:	10037cc0 	call	10037cc <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 10037a0:	01004074 	movhi	r4,257
 10037a4:	212f9604 	addi	r4,r4,-16808
 10037a8:	10037cc0 	call	10037cc <alt_dev_reg>
    ALTERA_UP_SD_CARD_AVALON_INTERFACE_INIT ( ALTERA_UP_SD_CARD_AVALON_INTERFACE_0, Altera_UP_SD_Card_Avalon_Interface_0);
 10037ac:	01004074 	movhi	r4,257
 10037b0:	212fa104 	addi	r4,r4,-16764
 10037b4:	10037cc0 	call	10037cc <alt_dev_reg>
}
 10037b8:	e037883a 	mov	sp,fp
 10037bc:	dfc00117 	ldw	ra,4(sp)
 10037c0:	df000017 	ldw	fp,0(sp)
 10037c4:	dec00204 	addi	sp,sp,8
 10037c8:	f800283a 	ret

010037cc <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 10037cc:	defffd04 	addi	sp,sp,-12
 10037d0:	dfc00215 	stw	ra,8(sp)
 10037d4:	df000115 	stw	fp,4(sp)
 10037d8:	df000104 	addi	fp,sp,4
 10037dc:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 10037e0:	e13fff17 	ldw	r4,-4(fp)
 10037e4:	01404074 	movhi	r5,257
 10037e8:	296fb204 	addi	r5,r5,-16696
 10037ec:	10092240 	call	1009224 <alt_dev_llist_insert>
}
 10037f0:	e037883a 	mov	sp,fp
 10037f4:	dfc00117 	ldw	ra,4(sp)
 10037f8:	df000017 	ldw	fp,0(sp)
 10037fc:	dec00204 	addi	sp,sp,8
 1003800:	f800283a 	ret

01003804 <Write_Sector_Data>:
///////////////////////////////////////////////////////////////////////////

        
bool Write_Sector_Data(int sector_index, int partition_offset)
// This function writes a sector at the specified address on the SD Card.
{
 1003804:	defffa04 	addi	sp,sp,-24
 1003808:	dfc00515 	stw	ra,20(sp)
 100380c:	df000415 	stw	fp,16(sp)
 1003810:	df000404 	addi	fp,sp,16
 1003814:	e13ffe15 	stw	r4,-8(fp)
 1003818:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 100381c:	e03ffd15 	stw	zero,-12(fp)
    
    if (alt_up_sd_card_is_Present())
 1003820:	100661c0 	call	100661c <alt_up_sd_card_is_Present>
 1003824:	1005003a 	cmpeq	r2,r2,zero
 1003828:	1000221e 	bne	r2,zero,10038b4 <Write_Sector_Data+0xb0>
    {
        short int reg_state = 0xff;
 100382c:	00803fc4 	movi	r2,255
 1003830:	e0bffc0d 	sth	r2,-16(fp)

		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
         * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 1003834:	d0a6ce17 	ldw	r2,-25800(gp)
 1003838:	1009883a 	mov	r4,r2
 100383c:	e0fffe17 	ldw	r3,-8(fp)
 1003840:	e0bfff17 	ldw	r2,-4(fp)
 1003844:	1885883a 	add	r2,r3,r2
 1003848:	1006927a 	slli	r3,r2,9
 100384c:	2005883a 	mov	r2,r4
 1003850:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_WRITE_BLOCK);
 1003854:	d0a6cd17 	ldw	r2,-25804(gp)
 1003858:	1007883a 	mov	r3,r2
 100385c:	00800604 	movi	r2,24
 1003860:	1880002d 	sthio	r2,0(r3)
        do {
            reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 1003864:	d0a6ca17 	ldw	r2,-25816(gp)
 1003868:	1080002b 	ldhuio	r2,0(r2)
 100386c:	e0bffc0d 	sth	r2,-16(fp)
        } while ((reg_state & 0x04)!=0);
 1003870:	e0bffc0b 	ldhu	r2,-16(fp)
 1003874:	10bfffcc 	andi	r2,r2,65535
 1003878:	1080010c 	andi	r2,r2,4
 100387c:	1004c03a 	cmpne	r2,r2,zero
 1003880:	103ff81e 	bne	r2,zero,1003864 <Write_Sector_Data+0x60>
        // Make sure the request did not time out.
        if ((reg_state & 0x10) == 0)
 1003884:	e0bffc0b 	ldhu	r2,-16(fp)
 1003888:	10bfffcc 	andi	r2,r2,65535
 100388c:	1080040c 	andi	r2,r2,16
 1003890:	1004c03a 	cmpne	r2,r2,zero
 1003894:	1000071e 	bne	r2,zero,10038b4 <Write_Sector_Data+0xb0>
        {
            result = true;
 1003898:	00800044 	movi	r2,1
 100389c:	e0bffd15 	stw	r2,-12(fp)
            current_sector_modified = false;
 10038a0:	d026d315 	stw	zero,-25780(gp)
            current_sector_index = sector_index+partition_offset;
 10038a4:	e0fffe17 	ldw	r3,-8(fp)
 10038a8:	e0bfff17 	ldw	r2,-4(fp)
 10038ac:	1885883a 	add	r2,r3,r2
 10038b0:	d0a6d415 	stw	r2,-25776(gp)
        }
    }
    return result;
 10038b4:	e0bffd17 	ldw	r2,-12(fp)
}
 10038b8:	e037883a 	mov	sp,fp
 10038bc:	dfc00117 	ldw	ra,4(sp)
 10038c0:	df000017 	ldw	fp,0(sp)
 10038c4:	dec00204 	addi	sp,sp,8
 10038c8:	f800283a 	ret

010038cc <Save_Modified_Sector>:


bool Save_Modified_Sector()
// If the sector has been modified, then save it to the SD Card.
{
 10038cc:	defffd04 	addi	sp,sp,-12
 10038d0:	dfc00215 	stw	ra,8(sp)
 10038d4:	df000115 	stw	fp,4(sp)
 10038d8:	df000104 	addi	fp,sp,4
    bool result = true;
 10038dc:	00800044 	movi	r2,1
 10038e0:	e0bfff15 	stw	r2,-4(fp)
    if (current_sector_modified)
 10038e4:	d0a6d317 	ldw	r2,-25780(gp)
 10038e8:	1005003a 	cmpeq	r2,r2,zero
 10038ec:	1000051e 	bne	r2,zero,1003904 <Save_Modified_Sector+0x38>
    {
        result = Write_Sector_Data(current_sector_index, 0);
 10038f0:	d0a6d417 	ldw	r2,-25776(gp)
 10038f4:	1009883a 	mov	r4,r2
 10038f8:	000b883a 	mov	r5,zero
 10038fc:	10038040 	call	1003804 <Write_Sector_Data>
 1003900:	e0bfff15 	stw	r2,-4(fp)
    }
    return result;
 1003904:	e0bfff17 	ldw	r2,-4(fp)
}
 1003908:	e037883a 	mov	sp,fp
 100390c:	dfc00117 	ldw	ra,4(sp)
 1003910:	df000017 	ldw	fp,0(sp)
 1003914:	dec00204 	addi	sp,sp,8
 1003918:	f800283a 	ret

0100391c <Read_Sector_Data>:


bool Read_Sector_Data(int sector_index, int partition_offset)
// This function reads a sector at the specified address on the SD Card.
{
 100391c:	defff904 	addi	sp,sp,-28
 1003920:	dfc00615 	stw	ra,24(sp)
 1003924:	df000515 	stw	fp,20(sp)
 1003928:	df000504 	addi	fp,sp,20
 100392c:	e13ffd15 	stw	r4,-12(fp)
 1003930:	e17ffe15 	stw	r5,-8(fp)
	bool result = false;
 1003934:	e03ffc15 	stw	zero,-16(fp)
    
	if (alt_up_sd_card_is_Present())
 1003938:	100661c0 	call	100661c <alt_up_sd_card_is_Present>
 100393c:	1005003a 	cmpeq	r2,r2,zero
 1003940:	10002d1e 	bne	r2,zero,10039f8 <Read_Sector_Data+0xdc>
	{
		short int reg_state = 0xff;
 1003944:	00803fc4 	movi	r2,255
 1003948:	e0bffb0d 	sth	r2,-20(fp)
        
        /* Write data to the SD card if the current buffer is out of date. */
        if (current_sector_modified)
 100394c:	d0a6d317 	ldw	r2,-25780(gp)
 1003950:	1005003a 	cmpeq	r2,r2,zero
 1003954:	1000081e 	bne	r2,zero,1003978 <Read_Sector_Data+0x5c>
        {
            if (Write_Sector_Data(current_sector_index, 0) == false)
 1003958:	d0a6d417 	ldw	r2,-25776(gp)
 100395c:	1009883a 	mov	r4,r2
 1003960:	000b883a 	mov	r5,zero
 1003964:	10038040 	call	1003804 <Write_Sector_Data>
 1003968:	1004c03a 	cmpne	r2,r2,zero
 100396c:	1000021e 	bne	r2,zero,1003978 <Read_Sector_Data+0x5c>
            {
                return false;
 1003970:	e03fff15 	stw	zero,-4(fp)
 1003974:	00002206 	br	1003a00 <Read_Sector_Data+0xe4>
            }
        }
		/* Multiply sector offset by sector size to get the address. Sector size is 512. Also,
		 * the SD card reads data in 512 byte chunks, so the address must be a multiple of 512. */
        IOWR_32DIRECT(command_argument_register, 0, (sector_index + partition_offset)*512);
 1003978:	d0a6ce17 	ldw	r2,-25800(gp)
 100397c:	1009883a 	mov	r4,r2
 1003980:	e0fffd17 	ldw	r3,-12(fp)
 1003984:	e0bffe17 	ldw	r2,-8(fp)
 1003988:	1885883a 	add	r2,r3,r2
 100398c:	1006927a 	slli	r3,r2,9
 1003990:	2005883a 	mov	r2,r4
 1003994:	10c00035 	stwio	r3,0(r2)
        IOWR_16DIRECT(command_register, 0, CMD_READ_BLOCK);
 1003998:	d0a6cd17 	ldw	r2,-25804(gp)
 100399c:	1007883a 	mov	r3,r2
 10039a0:	00800444 	movi	r2,17
 10039a4:	1880002d 	sthio	r2,0(r3)
		do {
			reg_state = (short int) IORD_16DIRECT(aux_status_register,0);
 10039a8:	d0a6ca17 	ldw	r2,-25816(gp)
 10039ac:	1080002b 	ldhuio	r2,0(r2)
 10039b0:	e0bffb0d 	sth	r2,-20(fp)
		} while ((reg_state & 0x04)!=0);
 10039b4:	e0bffb0b 	ldhu	r2,-20(fp)
 10039b8:	10bfffcc 	andi	r2,r2,65535
 10039bc:	1080010c 	andi	r2,r2,4
 10039c0:	1004c03a 	cmpne	r2,r2,zero
 10039c4:	103ff81e 	bne	r2,zero,10039a8 <Read_Sector_Data+0x8c>
		// Make sure the request did not time out.
		if ((reg_state & 0x10) == 0)
 10039c8:	e0bffb0b 	ldhu	r2,-20(fp)
 10039cc:	10bfffcc 	andi	r2,r2,65535
 10039d0:	1080040c 	andi	r2,r2,16
 10039d4:	1004c03a 	cmpne	r2,r2,zero
 10039d8:	1000071e 	bne	r2,zero,10039f8 <Read_Sector_Data+0xdc>
		{
			result = true;
 10039dc:	00800044 	movi	r2,1
 10039e0:	e0bffc15 	stw	r2,-16(fp)
            current_sector_modified = false;
 10039e4:	d026d315 	stw	zero,-25780(gp)
            current_sector_index = sector_index+partition_offset;
 10039e8:	e0fffd17 	ldw	r3,-12(fp)
 10039ec:	e0bffe17 	ldw	r2,-8(fp)
 10039f0:	1885883a 	add	r2,r3,r2
 10039f4:	d0a6d415 	stw	r2,-25776(gp)
		}
	}
	return result;
 10039f8:	e0bffc17 	ldw	r2,-16(fp)
 10039fc:	e0bfff15 	stw	r2,-4(fp)
 1003a00:	e0bfff17 	ldw	r2,-4(fp)
}
 1003a04:	e037883a 	mov	sp,fp
 1003a08:	dfc00117 	ldw	ra,4(sp)
 1003a0c:	df000017 	ldw	fp,0(sp)
 1003a10:	dec00204 	addi	sp,sp,8
 1003a14:	f800283a 	ret

01003a18 <get_cluster_flag>:


bool get_cluster_flag(unsigned int cluster_index, unsigned short int *flag)
// Read a cluster flag.
{
 1003a18:	defffa04 	addi	sp,sp,-24
 1003a1c:	dfc00515 	stw	ra,20(sp)
 1003a20:	df000415 	stw	fp,16(sp)
 1003a24:	df000404 	addi	fp,sp,16
 1003a28:	e13ffd15 	stw	r4,-12(fp)
 1003a2c:	e17ffe15 	stw	r5,-8(fp)
    unsigned int sector_index = (cluster_index / 256) + fat_partition_offset_in_512_byte_sectors;
 1003a30:	e0bffd17 	ldw	r2,-12(fp)
 1003a34:	1006d23a 	srli	r3,r2,8
 1003a38:	d0a6d017 	ldw	r2,-25792(gp)
 1003a3c:	1885883a 	add	r2,r3,r2
 1003a40:	e0bffc15 	stw	r2,-16(fp)
    
    sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 1003a44:	00804074 	movhi	r2,257
 1003a48:	10b69304 	addi	r2,r2,-9652
 1003a4c:	10c01117 	ldw	r3,68(r2)
 1003a50:	e0bffc17 	ldw	r2,-16(fp)
 1003a54:	10c5883a 	add	r2,r2,r3
 1003a58:	e0bffc15 	stw	r2,-16(fp)
     
    if (sector_index != current_sector_index)
 1003a5c:	d0e6d417 	ldw	r3,-25776(gp)
 1003a60:	e0bffc17 	ldw	r2,-16(fp)
 1003a64:	10c00726 	beq	r2,r3,1003a84 <get_cluster_flag+0x6c>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 1003a68:	e13ffc17 	ldw	r4,-16(fp)
 1003a6c:	000b883a 	mov	r5,zero
 1003a70:	100391c0 	call	100391c <Read_Sector_Data>
 1003a74:	1004c03a 	cmpne	r2,r2,zero
 1003a78:	1000021e 	bne	r2,zero,1003a84 <get_cluster_flag+0x6c>
        {
            return false;
 1003a7c:	e03fff15 	stw	zero,-4(fp)
 1003a80:	00000d06 	br	1003ab8 <get_cluster_flag+0xa0>
        }
    }
    *flag = (unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256));
 1003a84:	d0a6d217 	ldw	r2,-25784(gp)
 1003a88:	10800a17 	ldw	r2,40(r2)
 1003a8c:	1007883a 	mov	r3,r2
 1003a90:	e0bffd17 	ldw	r2,-12(fp)
 1003a94:	10803fcc 	andi	r2,r2,255
 1003a98:	1085883a 	add	r2,r2,r2
 1003a9c:	1885883a 	add	r2,r3,r2
 1003aa0:	1080002b 	ldhuio	r2,0(r2)
 1003aa4:	1007883a 	mov	r3,r2
 1003aa8:	e0bffe17 	ldw	r2,-8(fp)
 1003aac:	10c0000d 	sth	r3,0(r2)
    return true;
 1003ab0:	00800044 	movi	r2,1
 1003ab4:	e0bfff15 	stw	r2,-4(fp)
 1003ab8:	e0bfff17 	ldw	r2,-4(fp)
}
 1003abc:	e037883a 	mov	sp,fp
 1003ac0:	dfc00117 	ldw	ra,4(sp)
 1003ac4:	df000017 	ldw	fp,0(sp)
 1003ac8:	dec00204 	addi	sp,sp,8
 1003acc:	f800283a 	ret

01003ad0 <mark_cluster>:


bool mark_cluster(unsigned int cluster_index, short int flag, bool first_fat)
// Place a marker on the specified cluster in a given FAT.
{
 1003ad0:	defff904 	addi	sp,sp,-28
 1003ad4:	dfc00615 	stw	ra,24(sp)
 1003ad8:	df000515 	stw	fp,20(sp)
 1003adc:	df000504 	addi	fp,sp,20
 1003ae0:	e13ffc15 	stw	r4,-16(fp)
 1003ae4:	e1bffe15 	stw	r6,-8(fp)
 1003ae8:	e17ffd0d 	sth	r5,-12(fp)
    unsigned int sector_index = (cluster_index / 256) +  fat_partition_offset_in_512_byte_sectors;
 1003aec:	e0bffc17 	ldw	r2,-16(fp)
 1003af0:	1006d23a 	srli	r3,r2,8
 1003af4:	d0a6d017 	ldw	r2,-25792(gp)
 1003af8:	1885883a 	add	r2,r3,r2
 1003afc:	e0bffb15 	stw	r2,-20(fp)
    
    if (first_fat)
 1003b00:	e0bffe17 	ldw	r2,-8(fp)
 1003b04:	1005003a 	cmpeq	r2,r2,zero
 1003b08:	1000071e 	bne	r2,zero,1003b28 <mark_cluster+0x58>
    {
        sector_index  = sector_index + boot_sector_data.first_fat_sector_offset;
 1003b0c:	00804074 	movhi	r2,257
 1003b10:	10b69304 	addi	r2,r2,-9652
 1003b14:	10c01117 	ldw	r3,68(r2)
 1003b18:	e0bffb17 	ldw	r2,-20(fp)
 1003b1c:	10c5883a 	add	r2,r2,r3
 1003b20:	e0bffb15 	stw	r2,-20(fp)
 1003b24:	00000606 	br	1003b40 <mark_cluster+0x70>
    }
    else
    {
        sector_index  = sector_index + boot_sector_data.second_fat_sector_offset;
 1003b28:	00804074 	movhi	r2,257
 1003b2c:	10b69304 	addi	r2,r2,-9652
 1003b30:	10c01217 	ldw	r3,72(r2)
 1003b34:	e0bffb17 	ldw	r2,-20(fp)
 1003b38:	10c5883a 	add	r2,r2,r3
 1003b3c:	e0bffb15 	stw	r2,-20(fp)
    }
     
    if (sector_index != current_sector_index)
 1003b40:	d0e6d417 	ldw	r3,-25776(gp)
 1003b44:	e0bffb17 	ldw	r2,-20(fp)
 1003b48:	10c00726 	beq	r2,r3,1003b68 <mark_cluster+0x98>
    {
        if (Read_Sector_Data(sector_index, 0) == false)
 1003b4c:	e13ffb17 	ldw	r4,-20(fp)
 1003b50:	000b883a 	mov	r5,zero
 1003b54:	100391c0 	call	100391c <Read_Sector_Data>
 1003b58:	1004c03a 	cmpne	r2,r2,zero
 1003b5c:	1000021e 	bne	r2,zero,1003b68 <mark_cluster+0x98>
        {
            return false;
 1003b60:	e03fff15 	stw	zero,-4(fp)
 1003b64:	00000d06 	br	1003b9c <mark_cluster+0xcc>
        }
    }
    IOWR_16DIRECT(device_pointer->base, 2*(cluster_index % 256), flag);
 1003b68:	d0a6d217 	ldw	r2,-25784(gp)
 1003b6c:	10800a17 	ldw	r2,40(r2)
 1003b70:	1007883a 	mov	r3,r2
 1003b74:	e0bffc17 	ldw	r2,-16(fp)
 1003b78:	10803fcc 	andi	r2,r2,255
 1003b7c:	1085883a 	add	r2,r2,r2
 1003b80:	1885883a 	add	r2,r3,r2
 1003b84:	e0fffd0f 	ldh	r3,-12(fp)
 1003b88:	10c0002d 	sthio	r3,0(r2)
    current_sector_modified = true;
 1003b8c:	00800044 	movi	r2,1
 1003b90:	d0a6d315 	stw	r2,-25780(gp)
    return true;
 1003b94:	00800044 	movi	r2,1
 1003b98:	e0bfff15 	stw	r2,-4(fp)
 1003b9c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003ba0:	e037883a 	mov	sp,fp
 1003ba4:	dfc00117 	ldw	ra,4(sp)
 1003ba8:	df000017 	ldw	fp,0(sp)
 1003bac:	dec00204 	addi	sp,sp,8
 1003bb0:	f800283a 	ret

01003bb4 <Check_for_Master_Boot_Record>:

bool Check_for_Master_Boot_Record(void)
// This function reads the first 512 bytes on the SD Card. This data should
// contain the Master Boot Record. If it does, then print
// relevant information and return true. Otherwise, return false. 
{
 1003bb4:	defff704 	addi	sp,sp,-36
 1003bb8:	dfc00815 	stw	ra,32(sp)
 1003bbc:	df000715 	stw	fp,28(sp)
 1003bc0:	df000704 	addi	fp,sp,28
	bool result = false;
 1003bc4:	e03fff15 	stw	zero,-4(fp)
	int index;
	int end, offset, partition_size;

	/* Load the first 512 bytes of data from SD card. */
	if (Read_Sector_Data(0, 0))
 1003bc8:	0009883a 	mov	r4,zero
 1003bcc:	000b883a 	mov	r5,zero
 1003bd0:	100391c0 	call	100391c <Read_Sector_Data>
 1003bd4:	1005003a 	cmpeq	r2,r2,zero
 1003bd8:	10005c1e 	bne	r2,zero,1003d4c <Check_for_Master_Boot_Record+0x198>
	{
		end =  (short int) IORD_16DIRECT(device_pointer->base,0x1fe);
 1003bdc:	d0a6d217 	ldw	r2,-25784(gp)
 1003be0:	10800a17 	ldw	r2,40(r2)
 1003be4:	10807f84 	addi	r2,r2,510
 1003be8:	1080002b 	ldhuio	r2,0(r2)
 1003bec:	10bfffcc 	andi	r2,r2,65535
 1003bf0:	10a0001c 	xori	r2,r2,32768
 1003bf4:	10a00004 	addi	r2,r2,-32768
 1003bf8:	e0bffd15 	stw	r2,-12(fp)

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
 1003bfc:	e0bffd17 	ldw	r2,-12(fp)
 1003c00:	10ffffcc 	andi	r3,r2,65535
 1003c04:	00aa9554 	movui	r2,43605
 1003c08:	1880501e 	bne	r3,r2,1003d4c <Check_for_Master_Boot_Record+0x198>
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 1003c0c:	e03ffe15 	stw	zero,-8(fp)
 1003c10:	00004b06 	br	1003d40 <Check_for_Master_Boot_Record+0x18c>
			{
				int partition_data_offset = (index * 16) + 0x01be;
 1003c14:	e0bffe17 	ldw	r2,-8(fp)
 1003c18:	1004913a 	slli	r2,r2,4
 1003c1c:	10806f84 	addi	r2,r2,446
 1003c20:	e0bffa15 	stw	r2,-24(fp)
				char type;
		        
				// Read Partition type
				type = (unsigned char) IORD_8DIRECT(device_pointer->base,partition_data_offset + 0x04);
 1003c24:	d0a6d217 	ldw	r2,-25784(gp)
 1003c28:	10800a17 	ldw	r2,40(r2)
 1003c2c:	1007883a 	mov	r3,r2
 1003c30:	e0bffa17 	ldw	r2,-24(fp)
 1003c34:	1885883a 	add	r2,r3,r2
 1003c38:	10800104 	addi	r2,r2,4
 1003c3c:	10800023 	ldbuio	r2,0(r2)
 1003c40:	e0bff905 	stb	r2,-28(fp)

				// Check if this is an FAT parition
				if ((type == 1) || (type == 4) || (type == 6) || (type == 14))
 1003c44:	e0bff907 	ldb	r2,-28(fp)
 1003c48:	10800060 	cmpeqi	r2,r2,1
 1003c4c:	1000091e 	bne	r2,zero,1003c74 <Check_for_Master_Boot_Record+0xc0>
 1003c50:	e0bff907 	ldb	r2,-28(fp)
 1003c54:	10800120 	cmpeqi	r2,r2,4
 1003c58:	1000061e 	bne	r2,zero,1003c74 <Check_for_Master_Boot_Record+0xc0>
 1003c5c:	e0bff907 	ldb	r2,-28(fp)
 1003c60:	108001a0 	cmpeqi	r2,r2,6
 1003c64:	1000031e 	bne	r2,zero,1003c74 <Check_for_Master_Boot_Record+0xc0>
 1003c68:	e0bff907 	ldb	r2,-28(fp)
 1003c6c:	10800398 	cmpnei	r2,r2,14
 1003c70:	1000301e 	bne	r2,zero,1003d34 <Check_for_Master_Boot_Record+0x180>
				{
					// Get partition offset and size.
					offset = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0A)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x08));
 1003c74:	d0a6d217 	ldw	r2,-25784(gp)
 1003c78:	10800a17 	ldw	r2,40(r2)
 1003c7c:	1007883a 	mov	r3,r2
 1003c80:	e0bffa17 	ldw	r2,-24(fp)
 1003c84:	1885883a 	add	r2,r3,r2
 1003c88:	10800284 	addi	r2,r2,10
 1003c8c:	1080002b 	ldhuio	r2,0(r2)
 1003c90:	10bfffcc 	andi	r2,r2,65535
 1003c94:	1008943a 	slli	r4,r2,16
 1003c98:	d0a6d217 	ldw	r2,-25784(gp)
 1003c9c:	10800a17 	ldw	r2,40(r2)
 1003ca0:	1007883a 	mov	r3,r2
 1003ca4:	e0bffa17 	ldw	r2,-24(fp)
 1003ca8:	1885883a 	add	r2,r3,r2
 1003cac:	10800204 	addi	r2,r2,8
 1003cb0:	1080002b 	ldhuio	r2,0(r2)
 1003cb4:	10bfffcc 	andi	r2,r2,65535
 1003cb8:	2084b03a 	or	r2,r4,r2
 1003cbc:	e0bffc15 	stw	r2,-16(fp)
					partition_size = (((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0E)) << 16) | ((unsigned short int) IORD_16DIRECT(device_pointer->base,partition_data_offset + 0x0C));
 1003cc0:	d0a6d217 	ldw	r2,-25784(gp)
 1003cc4:	10800a17 	ldw	r2,40(r2)
 1003cc8:	1007883a 	mov	r3,r2
 1003ccc:	e0bffa17 	ldw	r2,-24(fp)
 1003cd0:	1885883a 	add	r2,r3,r2
 1003cd4:	10800384 	addi	r2,r2,14
 1003cd8:	1080002b 	ldhuio	r2,0(r2)
 1003cdc:	10bfffcc 	andi	r2,r2,65535
 1003ce0:	1008943a 	slli	r4,r2,16
 1003ce4:	d0a6d217 	ldw	r2,-25784(gp)
 1003ce8:	10800a17 	ldw	r2,40(r2)
 1003cec:	1007883a 	mov	r3,r2
 1003cf0:	e0bffa17 	ldw	r2,-24(fp)
 1003cf4:	1885883a 	add	r2,r3,r2
 1003cf8:	10800304 	addi	r2,r2,12
 1003cfc:	1080002b 	ldhuio	r2,0(r2)
 1003d00:	10bfffcc 	andi	r2,r2,65535
 1003d04:	2084b03a 	or	r2,r4,r2
 1003d08:	e0bffb15 	stw	r2,-20(fp)
		            
					// Check if the partition is valid
					if (partition_size > 0)
 1003d0c:	e0bffb17 	ldw	r2,-20(fp)
 1003d10:	10800050 	cmplti	r2,r2,1
 1003d14:	1000071e 	bne	r2,zero,1003d34 <Check_for_Master_Boot_Record+0x180>
					{
						result = true;
 1003d18:	00800044 	movi	r2,1
 1003d1c:	e0bfff15 	stw	r2,-4(fp)
						fat_partition_size_in_512_byte_sectors = partition_size;
 1003d20:	e0bffb17 	ldw	r2,-20(fp)
 1003d24:	d0a6d115 	stw	r2,-25788(gp)
						fat_partition_offset_in_512_byte_sectors = offset;
 1003d28:	e0bffc17 	ldw	r2,-16(fp)
 1003d2c:	d0a6d015 	stw	r2,-25792(gp)
						break;
 1003d30:	00000606 	br	1003d4c <Check_for_Master_Boot_Record+0x198>

		// Check if the end of the sector contains an end string 0xaa55.
		if ((end & 0x0000ffff) == 0x0000aa55)
		{
			// Check four partition entries and see if any are valid
			for (index = 0; index < 4; index++)
 1003d34:	e0bffe17 	ldw	r2,-8(fp)
 1003d38:	10800044 	addi	r2,r2,1
 1003d3c:	e0bffe15 	stw	r2,-8(fp)
 1003d40:	e0bffe17 	ldw	r2,-8(fp)
 1003d44:	10800110 	cmplti	r2,r2,4
 1003d48:	103fb21e 	bne	r2,zero,1003c14 <Check_for_Master_Boot_Record+0x60>
				}
			}
		}
	}

	return result;
 1003d4c:	e0bfff17 	ldw	r2,-4(fp)
}
 1003d50:	e037883a 	mov	sp,fp
 1003d54:	dfc00117 	ldw	ra,4(sp)
 1003d58:	df000017 	ldw	fp,0(sp)
 1003d5c:	dec00204 	addi	sp,sp,8
 1003d60:	f800283a 	ret

01003d64 <Read_File_Record_At_Offset>:


bool Read_File_Record_At_Offset(int offset, t_file_record *record, unsigned int cluster_index, unsigned int sector_in_cluster)
// This function reads a file record
{
 1003d64:	defff804 	addi	sp,sp,-32
 1003d68:	dfc00715 	stw	ra,28(sp)
 1003d6c:	df000615 	stw	fp,24(sp)
 1003d70:	df000604 	addi	fp,sp,24
 1003d74:	e13ffc15 	stw	r4,-16(fp)
 1003d78:	e17ffd15 	stw	r5,-12(fp)
 1003d7c:	e1bffe15 	stw	r6,-8(fp)
 1003d80:	e1ffff15 	stw	r7,-4(fp)
	bool result = false;
 1003d84:	e03ffb15 	stw	zero,-20(fp)
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 1003d88:	e0bffc17 	ldw	r2,-16(fp)
 1003d8c:	108007cc 	andi	r2,r2,31
 1003d90:	1004c03a 	cmpne	r2,r2,zero
 1003d94:	10008e1e 	bne	r2,zero,1003fd0 <Read_File_Record_At_Offset+0x26c>
 1003d98:	100661c0 	call	100661c <alt_up_sd_card_is_Present>
 1003d9c:	1005003a 	cmpeq	r2,r2,zero
 1003da0:	10008b1e 	bne	r2,zero,1003fd0 <Read_File_Record_At_Offset+0x26c>
 1003da4:	d0a6c917 	ldw	r2,-25820(gp)
 1003da8:	1005003a 	cmpeq	r2,r2,zero
 1003dac:	1000881e 	bne	r2,zero,1003fd0 <Read_File_Record_At_Offset+0x26c>
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 1003db0:	e03ffa15 	stw	zero,-24(fp)
 1003db4:	00001006 	br	1003df8 <Read_File_Record_At_Offset+0x94>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
 1003db8:	e17ffa17 	ldw	r5,-24(fp)
 1003dbc:	d0a6d217 	ldw	r2,-25784(gp)
 1003dc0:	10800a17 	ldw	r2,40(r2)
 1003dc4:	1009883a 	mov	r4,r2
 1003dc8:	e0fffc17 	ldw	r3,-16(fp)
 1003dcc:	e0bffa17 	ldw	r2,-24(fp)
 1003dd0:	1885883a 	add	r2,r3,r2
 1003dd4:	2085883a 	add	r2,r4,r2
 1003dd8:	10800023 	ldbuio	r2,0(r2)
 1003ddc:	1007883a 	mov	r3,r2
 1003de0:	e0bffd17 	ldw	r2,-12(fp)
 1003de4:	1145883a 	add	r2,r2,r5
 1003de8:	10c00005 	stb	r3,0(r2)
	bool result = false;
	if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
	{
		int counter;

		for (counter = 0; counter < 8; counter++)
 1003dec:	e0bffa17 	ldw	r2,-24(fp)
 1003df0:	10800044 	addi	r2,r2,1
 1003df4:	e0bffa15 	stw	r2,-24(fp)
 1003df8:	e0bffa17 	ldw	r2,-24(fp)
 1003dfc:	10800210 	cmplti	r2,r2,8
 1003e00:	103fed1e 	bne	r2,zero,1003db8 <Read_File_Record_At_Offset+0x54>
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 1003e04:	e03ffa15 	stw	zero,-24(fp)
 1003e08:	00001206 	br	1003e54 <Read_File_Record_At_Offset+0xf0>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
 1003e0c:	e17ffa17 	ldw	r5,-24(fp)
 1003e10:	d0a6d217 	ldw	r2,-25784(gp)
 1003e14:	10800a17 	ldw	r2,40(r2)
 1003e18:	1009883a 	mov	r4,r2
 1003e1c:	e0fffc17 	ldw	r3,-16(fp)
 1003e20:	e0bffa17 	ldw	r2,-24(fp)
 1003e24:	1885883a 	add	r2,r3,r2
 1003e28:	2085883a 	add	r2,r4,r2
 1003e2c:	10800204 	addi	r2,r2,8
 1003e30:	10800023 	ldbuio	r2,0(r2)
 1003e34:	1007883a 	mov	r3,r2
 1003e38:	e0bffd17 	ldw	r2,-12(fp)
 1003e3c:	2885883a 	add	r2,r5,r2
 1003e40:	10800204 	addi	r2,r2,8
 1003e44:	10c00005 	stb	r3,0(r2)

		for (counter = 0; counter < 8; counter++)
		{
			record->name[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter);
		}        
		for (counter = 0; counter < 3; counter++)
 1003e48:	e0bffa17 	ldw	r2,-24(fp)
 1003e4c:	10800044 	addi	r2,r2,1
 1003e50:	e0bffa15 	stw	r2,-24(fp)
 1003e54:	e0bffa17 	ldw	r2,-24(fp)
 1003e58:	108000d0 	cmplti	r2,r2,3
 1003e5c:	103feb1e 	bne	r2,zero,1003e0c <Read_File_Record_At_Offset+0xa8>
		{
			record->extension[counter] = (char) IORD_8DIRECT(device_pointer->base, offset+counter+8);
		}        
		record->attributes          =   (char) IORD_8DIRECT(device_pointer->base, offset+11);
 1003e60:	d0a6d217 	ldw	r2,-25784(gp)
 1003e64:	10800a17 	ldw	r2,40(r2)
 1003e68:	1007883a 	mov	r3,r2
 1003e6c:	e0bffc17 	ldw	r2,-16(fp)
 1003e70:	1885883a 	add	r2,r3,r2
 1003e74:	108002c4 	addi	r2,r2,11
 1003e78:	10800023 	ldbuio	r2,0(r2)
 1003e7c:	1007883a 	mov	r3,r2
 1003e80:	e0bffd17 	ldw	r2,-12(fp)
 1003e84:	10c002c5 	stb	r3,11(r2)
		/* Ignore reserved bytes at locations 12 and 13. */
		record->create_time         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+14);
 1003e88:	d0a6d217 	ldw	r2,-25784(gp)
 1003e8c:	10800a17 	ldw	r2,40(r2)
 1003e90:	1007883a 	mov	r3,r2
 1003e94:	e0bffc17 	ldw	r2,-16(fp)
 1003e98:	1885883a 	add	r2,r3,r2
 1003e9c:	10800384 	addi	r2,r2,14
 1003ea0:	1080002b 	ldhuio	r2,0(r2)
 1003ea4:	1007883a 	mov	r3,r2
 1003ea8:	e0bffd17 	ldw	r2,-12(fp)
 1003eac:	10c0030d 	sth	r3,12(r2)
		record->create_date         =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+16);
 1003eb0:	d0a6d217 	ldw	r2,-25784(gp)
 1003eb4:	10800a17 	ldw	r2,40(r2)
 1003eb8:	1007883a 	mov	r3,r2
 1003ebc:	e0bffc17 	ldw	r2,-16(fp)
 1003ec0:	1885883a 	add	r2,r3,r2
 1003ec4:	10800404 	addi	r2,r2,16
 1003ec8:	1080002b 	ldhuio	r2,0(r2)
 1003ecc:	1007883a 	mov	r3,r2
 1003ed0:	e0bffd17 	ldw	r2,-12(fp)
 1003ed4:	10c0038d 	sth	r3,14(r2)
		record->last_access_date    =   (unsigned short int) IORD_16DIRECT(device_pointer->base, offset+18);
 1003ed8:	d0a6d217 	ldw	r2,-25784(gp)
 1003edc:	10800a17 	ldw	r2,40(r2)
 1003ee0:	1007883a 	mov	r3,r2
 1003ee4:	e0bffc17 	ldw	r2,-16(fp)
 1003ee8:	1885883a 	add	r2,r3,r2
 1003eec:	10800484 	addi	r2,r2,18
 1003ef0:	1080002b 	ldhuio	r2,0(r2)
 1003ef4:	1007883a 	mov	r3,r2
 1003ef8:	e0bffd17 	ldw	r2,-12(fp)
 1003efc:	10c0040d 	sth	r3,16(r2)
		/* Ignore reserved bytes at locations 20 and 21. */
		record->last_modified_time  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+22);
 1003f00:	d0a6d217 	ldw	r2,-25784(gp)
 1003f04:	10800a17 	ldw	r2,40(r2)
 1003f08:	1007883a 	mov	r3,r2
 1003f0c:	e0bffc17 	ldw	r2,-16(fp)
 1003f10:	1885883a 	add	r2,r3,r2
 1003f14:	10800584 	addi	r2,r2,22
 1003f18:	1080002b 	ldhuio	r2,0(r2)
 1003f1c:	1007883a 	mov	r3,r2
 1003f20:	e0bffd17 	ldw	r2,-12(fp)
 1003f24:	10c0048d 	sth	r3,18(r2)
		record->last_modified_date  =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+24);
 1003f28:	d0a6d217 	ldw	r2,-25784(gp)
 1003f2c:	10800a17 	ldw	r2,40(r2)
 1003f30:	1007883a 	mov	r3,r2
 1003f34:	e0bffc17 	ldw	r2,-16(fp)
 1003f38:	1885883a 	add	r2,r3,r2
 1003f3c:	10800604 	addi	r2,r2,24
 1003f40:	1080002b 	ldhuio	r2,0(r2)
 1003f44:	1007883a 	mov	r3,r2
 1003f48:	e0bffd17 	ldw	r2,-12(fp)
 1003f4c:	10c0050d 	sth	r3,20(r2)
		record->start_cluster_index =	(unsigned short int) IORD_16DIRECT(device_pointer->base, offset+26);
 1003f50:	d0a6d217 	ldw	r2,-25784(gp)
 1003f54:	10800a17 	ldw	r2,40(r2)
 1003f58:	1007883a 	mov	r3,r2
 1003f5c:	e0bffc17 	ldw	r2,-16(fp)
 1003f60:	1885883a 	add	r2,r3,r2
 1003f64:	10800684 	addi	r2,r2,26
 1003f68:	1080002b 	ldhuio	r2,0(r2)
 1003f6c:	1007883a 	mov	r3,r2
 1003f70:	e0bffd17 	ldw	r2,-12(fp)
 1003f74:	10c0058d 	sth	r3,22(r2)
		record->file_size_in_bytes  =	(unsigned int) IORD_32DIRECT(device_pointer->base, offset+28);
 1003f78:	d0a6d217 	ldw	r2,-25784(gp)
 1003f7c:	10800a17 	ldw	r2,40(r2)
 1003f80:	1007883a 	mov	r3,r2
 1003f84:	e0bffc17 	ldw	r2,-16(fp)
 1003f88:	1885883a 	add	r2,r3,r2
 1003f8c:	10800704 	addi	r2,r2,28
 1003f90:	10800037 	ldwio	r2,0(r2)
 1003f94:	1007883a 	mov	r3,r2
 1003f98:	e0bffd17 	ldw	r2,-12(fp)
 1003f9c:	10c00615 	stw	r3,24(r2)
		record->file_record_cluster = cluster_index;
 1003fa0:	e0fffd17 	ldw	r3,-12(fp)
 1003fa4:	e0bffe17 	ldw	r2,-8(fp)
 1003fa8:	18800a15 	stw	r2,40(r3)
		record->file_record_sector_in_cluster = sector_in_cluster;
 1003fac:	e0fffd17 	ldw	r3,-12(fp)
 1003fb0:	e0bfff17 	ldw	r2,-4(fp)
 1003fb4:	18800b15 	stw	r2,44(r3)
		record->file_record_offset = offset;
 1003fb8:	e0bffc17 	ldw	r2,-16(fp)
 1003fbc:	1007883a 	mov	r3,r2
 1003fc0:	e0bffd17 	ldw	r2,-12(fp)
 1003fc4:	10c00c0d 	sth	r3,48(r2)
		result = true;
 1003fc8:	00800044 	movi	r2,1
 1003fcc:	e0bffb15 	stw	r2,-20(fp)
	}
	return result;
 1003fd0:	e0bffb17 	ldw	r2,-20(fp)
}
 1003fd4:	e037883a 	mov	sp,fp
 1003fd8:	dfc00117 	ldw	ra,4(sp)
 1003fdc:	df000017 	ldw	fp,0(sp)
 1003fe0:	dec00204 	addi	sp,sp,8
 1003fe4:	f800283a 	ret

01003fe8 <Write_File_Record_At_Offset>:


bool Write_File_Record_At_Offset(int offset, t_file_record *record)
// This function writes a file record at a given offset. The offset is given in bytes.
{
 1003fe8:	defff904 	addi	sp,sp,-28
 1003fec:	dfc00615 	stw	ra,24(sp)
 1003ff0:	df000515 	stw	fp,20(sp)
 1003ff4:	df000504 	addi	fp,sp,20
 1003ff8:	e13ffe15 	stw	r4,-8(fp)
 1003ffc:	e17fff15 	stw	r5,-4(fp)
    bool result = false;
 1004000:	e03ffd15 	stw	zero,-12(fp)
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 1004004:	e0bffe17 	ldw	r2,-8(fp)
 1004008:	108007cc 	andi	r2,r2,31
 100400c:	1004c03a 	cmpne	r2,r2,zero
 1004010:	10009d1e 	bne	r2,zero,1004288 <Write_File_Record_At_Offset+0x2a0>
 1004014:	100661c0 	call	100661c <alt_up_sd_card_is_Present>
 1004018:	1005003a 	cmpeq	r2,r2,zero
 100401c:	10009a1e 	bne	r2,zero,1004288 <Write_File_Record_At_Offset+0x2a0>
 1004020:	d0a6c917 	ldw	r2,-25820(gp)
 1004024:	1005003a 	cmpeq	r2,r2,zero
 1004028:	1000971e 	bne	r2,zero,1004288 <Write_File_Record_At_Offset+0x2a0>
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 100402c:	e03ffc15 	stw	zero,-16(fp)
 1004030:	00001e06 	br	10040ac <Write_File_Record_At_Offset+0xc4>
        {
            short int two_chars = (short int) record->name[counter+1];
 1004034:	e0bffc17 	ldw	r2,-16(fp)
 1004038:	10c00044 	addi	r3,r2,1
 100403c:	e0bfff17 	ldw	r2,-4(fp)
 1004040:	10c5883a 	add	r2,r2,r3
 1004044:	10800003 	ldbu	r2,0(r2)
 1004048:	10803fcc 	andi	r2,r2,255
 100404c:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars << 8;
 1004050:	e0bffb0f 	ldh	r2,-20(fp)
 1004054:	1004923a 	slli	r2,r2,8
 1004058:	e0bffb0d 	sth	r2,-20(fp)
            two_chars = two_chars | record->name[counter];
 100405c:	e0fffc17 	ldw	r3,-16(fp)
 1004060:	e0bfff17 	ldw	r2,-4(fp)
 1004064:	10c5883a 	add	r2,r2,r3
 1004068:	10800003 	ldbu	r2,0(r2)
 100406c:	10c03fcc 	andi	r3,r2,255
 1004070:	e0bffb0b 	ldhu	r2,-20(fp)
 1004074:	10c4b03a 	or	r2,r2,r3
 1004078:	e0bffb0d 	sth	r2,-20(fp)
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
 100407c:	d0a6d217 	ldw	r2,-25784(gp)
 1004080:	10800a17 	ldw	r2,40(r2)
 1004084:	1009883a 	mov	r4,r2
 1004088:	e0fffe17 	ldw	r3,-8(fp)
 100408c:	e0bffc17 	ldw	r2,-16(fp)
 1004090:	1885883a 	add	r2,r3,r2
 1004094:	2085883a 	add	r2,r4,r2
 1004098:	e0fffb0f 	ldh	r3,-20(fp)
 100409c:	10c0002d 	sthio	r3,0(r2)
    bool result = false;
    if (((offset & 0x01f) == 0) && (alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
    {
        int counter;

        for (counter = 0; counter < 8; counter=counter+2)
 10040a0:	e0bffc17 	ldw	r2,-16(fp)
 10040a4:	10800084 	addi	r2,r2,2
 10040a8:	e0bffc15 	stw	r2,-16(fp)
 10040ac:	e0bffc17 	ldw	r2,-16(fp)
 10040b0:	10800210 	cmplti	r2,r2,8
 10040b4:	103fdf1e 	bne	r2,zero,1004034 <Write_File_Record_At_Offset+0x4c>
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 10040b8:	e03ffc15 	stw	zero,-16(fp)
 10040bc:	00001306 	br	100410c <Write_File_Record_At_Offset+0x124>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
 10040c0:	d0a6d217 	ldw	r2,-25784(gp)
 10040c4:	10800a17 	ldw	r2,40(r2)
 10040c8:	1009883a 	mov	r4,r2
 10040cc:	e0fffe17 	ldw	r3,-8(fp)
 10040d0:	e0bffc17 	ldw	r2,-16(fp)
 10040d4:	1885883a 	add	r2,r3,r2
 10040d8:	2085883a 	add	r2,r4,r2
 10040dc:	11000204 	addi	r4,r2,8
 10040e0:	e0fffc17 	ldw	r3,-16(fp)
 10040e4:	e0bfff17 	ldw	r2,-4(fp)
 10040e8:	1885883a 	add	r2,r3,r2
 10040ec:	10800204 	addi	r2,r2,8
 10040f0:	10800003 	ldbu	r2,0(r2)
 10040f4:	10c03fcc 	andi	r3,r2,255
 10040f8:	2005883a 	mov	r2,r4
 10040fc:	10c00025 	stbio	r3,0(r2)
            short int two_chars = (short int) record->name[counter+1];
            two_chars = two_chars << 8;
            two_chars = two_chars | record->name[counter];
            IOWR_16DIRECT(device_pointer->base, offset+counter, two_chars);
        }        
        for (counter = 0; counter < 3; counter++)
 1004100:	e0bffc17 	ldw	r2,-16(fp)
 1004104:	10800044 	addi	r2,r2,1
 1004108:	e0bffc15 	stw	r2,-16(fp)
 100410c:	e0bffc17 	ldw	r2,-16(fp)
 1004110:	108000d0 	cmplti	r2,r2,3
 1004114:	103fea1e 	bne	r2,zero,10040c0 <Write_File_Record_At_Offset+0xd8>
        {
            IOWR_8DIRECT(device_pointer->base, offset+counter+8, record->extension[counter]);
        }        
        IOWR_8DIRECT(device_pointer->base, offset+11, record->attributes);
 1004118:	d0a6d217 	ldw	r2,-25784(gp)
 100411c:	10800a17 	ldw	r2,40(r2)
 1004120:	1007883a 	mov	r3,r2
 1004124:	e0bffe17 	ldw	r2,-8(fp)
 1004128:	1885883a 	add	r2,r3,r2
 100412c:	110002c4 	addi	r4,r2,11
 1004130:	e0bfff17 	ldw	r2,-4(fp)
 1004134:	108002c3 	ldbu	r2,11(r2)
 1004138:	10c03fcc 	andi	r3,r2,255
 100413c:	2005883a 	mov	r2,r4
 1004140:	10c00025 	stbio	r3,0(r2)
        /* Ignore reserved bytes at locations 12 and 13. */
        IOWR_16DIRECT(device_pointer->base, offset+14, record->create_time);
 1004144:	d0a6d217 	ldw	r2,-25784(gp)
 1004148:	10800a17 	ldw	r2,40(r2)
 100414c:	1007883a 	mov	r3,r2
 1004150:	e0bffe17 	ldw	r2,-8(fp)
 1004154:	1885883a 	add	r2,r3,r2
 1004158:	11000384 	addi	r4,r2,14
 100415c:	e0bfff17 	ldw	r2,-4(fp)
 1004160:	1080030b 	ldhu	r2,12(r2)
 1004164:	10ffffcc 	andi	r3,r2,65535
 1004168:	2005883a 	mov	r2,r4
 100416c:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+16, record->create_date);
 1004170:	d0a6d217 	ldw	r2,-25784(gp)
 1004174:	10800a17 	ldw	r2,40(r2)
 1004178:	1007883a 	mov	r3,r2
 100417c:	e0bffe17 	ldw	r2,-8(fp)
 1004180:	1885883a 	add	r2,r3,r2
 1004184:	11000404 	addi	r4,r2,16
 1004188:	e0bfff17 	ldw	r2,-4(fp)
 100418c:	1080038b 	ldhu	r2,14(r2)
 1004190:	10ffffcc 	andi	r3,r2,65535
 1004194:	2005883a 	mov	r2,r4
 1004198:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+18, record->last_access_date);
 100419c:	d0a6d217 	ldw	r2,-25784(gp)
 10041a0:	10800a17 	ldw	r2,40(r2)
 10041a4:	1007883a 	mov	r3,r2
 10041a8:	e0bffe17 	ldw	r2,-8(fp)
 10041ac:	1885883a 	add	r2,r3,r2
 10041b0:	11000484 	addi	r4,r2,18
 10041b4:	e0bfff17 	ldw	r2,-4(fp)
 10041b8:	1080040b 	ldhu	r2,16(r2)
 10041bc:	10ffffcc 	andi	r3,r2,65535
 10041c0:	2005883a 	mov	r2,r4
 10041c4:	10c0002d 	sthio	r3,0(r2)
        /* Ignore reserved bytes at locations 20 and 21. */
        IOWR_16DIRECT(device_pointer->base, offset+22, record->last_modified_time);
 10041c8:	d0a6d217 	ldw	r2,-25784(gp)
 10041cc:	10800a17 	ldw	r2,40(r2)
 10041d0:	1007883a 	mov	r3,r2
 10041d4:	e0bffe17 	ldw	r2,-8(fp)
 10041d8:	1885883a 	add	r2,r3,r2
 10041dc:	11000584 	addi	r4,r2,22
 10041e0:	e0bfff17 	ldw	r2,-4(fp)
 10041e4:	1080048b 	ldhu	r2,18(r2)
 10041e8:	10ffffcc 	andi	r3,r2,65535
 10041ec:	2005883a 	mov	r2,r4
 10041f0:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+24, record->last_modified_date);
 10041f4:	d0a6d217 	ldw	r2,-25784(gp)
 10041f8:	10800a17 	ldw	r2,40(r2)
 10041fc:	1007883a 	mov	r3,r2
 1004200:	e0bffe17 	ldw	r2,-8(fp)
 1004204:	1885883a 	add	r2,r3,r2
 1004208:	11000604 	addi	r4,r2,24
 100420c:	e0bfff17 	ldw	r2,-4(fp)
 1004210:	1080050b 	ldhu	r2,20(r2)
 1004214:	10ffffcc 	andi	r3,r2,65535
 1004218:	2005883a 	mov	r2,r4
 100421c:	10c0002d 	sthio	r3,0(r2)
        IOWR_16DIRECT(device_pointer->base, offset+26, record->start_cluster_index);
 1004220:	d0a6d217 	ldw	r2,-25784(gp)
 1004224:	10800a17 	ldw	r2,40(r2)
 1004228:	1007883a 	mov	r3,r2
 100422c:	e0bffe17 	ldw	r2,-8(fp)
 1004230:	1885883a 	add	r2,r3,r2
 1004234:	11000684 	addi	r4,r2,26
 1004238:	e0bfff17 	ldw	r2,-4(fp)
 100423c:	1080058b 	ldhu	r2,22(r2)
 1004240:	10ffffcc 	andi	r3,r2,65535
 1004244:	2005883a 	mov	r2,r4
 1004248:	10c0002d 	sthio	r3,0(r2)
        IOWR_32DIRECT(device_pointer->base, offset+28, record->file_size_in_bytes);
 100424c:	d0a6d217 	ldw	r2,-25784(gp)
 1004250:	10800a17 	ldw	r2,40(r2)
 1004254:	1007883a 	mov	r3,r2
 1004258:	e0bffe17 	ldw	r2,-8(fp)
 100425c:	1885883a 	add	r2,r3,r2
 1004260:	11000704 	addi	r4,r2,28
 1004264:	e0bfff17 	ldw	r2,-4(fp)
 1004268:	10800617 	ldw	r2,24(r2)
 100426c:	1007883a 	mov	r3,r2
 1004270:	2005883a 	mov	r2,r4
 1004274:	10c00035 	stwio	r3,0(r2)
        current_sector_modified = true;                  
 1004278:	00800044 	movi	r2,1
 100427c:	d0a6d315 	stw	r2,-25780(gp)
        result = true;
 1004280:	00800044 	movi	r2,1
 1004284:	e0bffd15 	stw	r2,-12(fp)
    }
    return result;
 1004288:	e0bffd17 	ldw	r2,-12(fp)
}
 100428c:	e037883a 	mov	sp,fp
 1004290:	dfc00117 	ldw	ra,4(sp)
 1004294:	df000017 	ldw	fp,0(sp)
 1004298:	dec00204 	addi	sp,sp,8
 100429c:	f800283a 	ret

010042a0 <Check_for_DOS_FAT>:
// This function reads the boot sector for the FAT file system on the SD Card.
// The offset_address should point to the sector on the card where the boot sector is located.
// The sector number is specified either in the master Boot Record, or is 0 by default for a purely FAT
// based file system. If the specified sector contains a FAT boot sector, then this function prints the
// relevant information and returns 1. Otherwise, it returns 0. 
{
 10042a0:	defff904 	addi	sp,sp,-28
 10042a4:	dfc00615 	stw	ra,24(sp)
 10042a8:	df000515 	stw	fp,20(sp)
 10042ac:	df000504 	addi	fp,sp,20
 10042b0:	e13fff15 	stw	r4,-4(fp)
	bool result = false;
 10042b4:	e03ffe15 	stw	zero,-8(fp)
	int counter = 0;
 10042b8:	e03ffd15 	stw	zero,-12(fp)
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
 10042bc:	0009883a 	mov	r4,zero
 10042c0:	e17fff17 	ldw	r5,-4(fp)
 10042c4:	100391c0 	call	100391c <Read_Sector_Data>
 10042c8:	e0bffe15 	stw	r2,-8(fp)
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
 10042cc:	d0a6d217 	ldw	r2,-25784(gp)
 10042d0:	10800a17 	ldw	r2,40(r2)
 10042d4:	10807f84 	addi	r2,r2,510
 10042d8:	1080002b 	ldhuio	r2,0(r2)
 10042dc:	e0bffc0d 	sth	r2,-16(fp)
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
 10042e0:	e0bffc0f 	ldh	r2,-16(fp)
 10042e4:	10ffffcc 	andi	r3,r2,65535
 10042e8:	00aa9554 	movui	r2,43605
 10042ec:	1881751e 	bne	r3,r2,10048c4 <Check_for_DOS_FAT+0x624>
 10042f0:	e0bffe17 	ldw	r2,-8(fp)
 10042f4:	1005003a 	cmpeq	r2,r2,zero
 10042f8:	1001721e 	bne	r2,zero,10048c4 <Check_for_DOS_FAT+0x624>
	{
		int num_clusters = 0;
 10042fc:	e03ffb15 	stw	zero,-20(fp)

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
 1004300:	d0a6d217 	ldw	r2,-25784(gp)
 1004304:	10800a17 	ldw	r2,40(r2)
 1004308:	10800023 	ldbuio	r2,0(r2)
 100430c:	1007883a 	mov	r3,r2
 1004310:	00804074 	movhi	r2,257
 1004314:	10b69304 	addi	r2,r2,-9652
 1004318:	10c00005 	stb	r3,0(r2)
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
 100431c:	d0a6d217 	ldw	r2,-25784(gp)
 1004320:	10800a17 	ldw	r2,40(r2)
 1004324:	10800044 	addi	r2,r2,1
 1004328:	10800023 	ldbuio	r2,0(r2)
 100432c:	1007883a 	mov	r3,r2
 1004330:	00804074 	movhi	r2,257
 1004334:	10b69304 	addi	r2,r2,-9652
 1004338:	10c00045 	stb	r3,1(r2)
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
 100433c:	d0a6d217 	ldw	r2,-25784(gp)
 1004340:	10800a17 	ldw	r2,40(r2)
 1004344:	10800084 	addi	r2,r2,2
 1004348:	10800023 	ldbuio	r2,0(r2)
 100434c:	1007883a 	mov	r3,r2
 1004350:	00804074 	movhi	r2,257
 1004354:	10b69304 	addi	r2,r2,-9652
 1004358:	10c00085 	stb	r3,2(r2)
		for (counter = 0; counter < 8; counter++)
 100435c:	e03ffd15 	stw	zero,-12(fp)
 1004360:	00001006 	br	10043a4 <Check_for_DOS_FAT+0x104>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
 1004364:	e13ffd17 	ldw	r4,-12(fp)
 1004368:	d0a6d217 	ldw	r2,-25784(gp)
 100436c:	10800a17 	ldw	r2,40(r2)
 1004370:	1007883a 	mov	r3,r2
 1004374:	e0bffd17 	ldw	r2,-12(fp)
 1004378:	1885883a 	add	r2,r3,r2
 100437c:	108000c4 	addi	r2,r2,3
 1004380:	10800023 	ldbuio	r2,0(r2)
 1004384:	1007883a 	mov	r3,r2
 1004388:	00804074 	movhi	r2,257
 100438c:	10b69304 	addi	r2,r2,-9652
 1004390:	1105883a 	add	r2,r2,r4
 1004394:	10c000c5 	stb	r3,3(r2)
		int num_clusters = 0;

		boot_sector_data.jump_instruction[0] = (char) IORD_8DIRECT(device_pointer->base, 0);
		boot_sector_data.jump_instruction[1] = (char) IORD_8DIRECT(device_pointer->base, 1);
		boot_sector_data.jump_instruction[2] = (char) IORD_8DIRECT(device_pointer->base, 2);
		for (counter = 0; counter < 8; counter++)
 1004398:	e0bffd17 	ldw	r2,-12(fp)
 100439c:	10800044 	addi	r2,r2,1
 10043a0:	e0bffd15 	stw	r2,-12(fp)
 10043a4:	e0bffd17 	ldw	r2,-12(fp)
 10043a8:	10800210 	cmplti	r2,r2,8
 10043ac:	103fed1e 	bne	r2,zero,1004364 <Check_for_DOS_FAT+0xc4>
		{
			boot_sector_data.OEM_name[counter] = (char) IORD_8DIRECT(device_pointer->base, 3+counter);
		}
		boot_sector_data.sector_size_in_bytes = (((unsigned char) IORD_8DIRECT(device_pointer->base, 12)) << 8 ) | ((char) IORD_8DIRECT(device_pointer->base, 11));
 10043b0:	d0a6d217 	ldw	r2,-25784(gp)
 10043b4:	10800a17 	ldw	r2,40(r2)
 10043b8:	10800304 	addi	r2,r2,12
 10043bc:	10800023 	ldbuio	r2,0(r2)
 10043c0:	10803fcc 	andi	r2,r2,255
 10043c4:	1004923a 	slli	r2,r2,8
 10043c8:	1007883a 	mov	r3,r2
 10043cc:	d0a6d217 	ldw	r2,-25784(gp)
 10043d0:	10800a17 	ldw	r2,40(r2)
 10043d4:	108002c4 	addi	r2,r2,11
 10043d8:	10800023 	ldbuio	r2,0(r2)
 10043dc:	10803fcc 	andi	r2,r2,255
 10043e0:	1080201c 	xori	r2,r2,128
 10043e4:	10bfe004 	addi	r2,r2,-128
 10043e8:	1884b03a 	or	r2,r3,r2
 10043ec:	1007883a 	mov	r3,r2
 10043f0:	00804074 	movhi	r2,257
 10043f4:	10b69304 	addi	r2,r2,-9652
 10043f8:	10c0030d 	sth	r3,12(r2)
		boot_sector_data.sectors_per_cluster = ((unsigned char) IORD_8DIRECT(device_pointer->base, 13));
 10043fc:	d0a6d217 	ldw	r2,-25784(gp)
 1004400:	10800a17 	ldw	r2,40(r2)
 1004404:	10800344 	addi	r2,r2,13
 1004408:	10800023 	ldbuio	r2,0(r2)
 100440c:	1007883a 	mov	r3,r2
 1004410:	00804074 	movhi	r2,257
 1004414:	10b69304 	addi	r2,r2,-9652
 1004418:	10c00385 	stb	r3,14(r2)
		boot_sector_data.reserved_sectors = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 14));
 100441c:	d0a6d217 	ldw	r2,-25784(gp)
 1004420:	10800a17 	ldw	r2,40(r2)
 1004424:	10800384 	addi	r2,r2,14
 1004428:	1080002b 	ldhuio	r2,0(r2)
 100442c:	1007883a 	mov	r3,r2
 1004430:	00804074 	movhi	r2,257
 1004434:	10b69304 	addi	r2,r2,-9652
 1004438:	10c0040d 	sth	r3,16(r2)
		boot_sector_data.number_of_FATs = ((unsigned char) IORD_8DIRECT(device_pointer->base, 16));
 100443c:	d0a6d217 	ldw	r2,-25784(gp)
 1004440:	10800a17 	ldw	r2,40(r2)
 1004444:	10800404 	addi	r2,r2,16
 1004448:	10800023 	ldbuio	r2,0(r2)
 100444c:	1007883a 	mov	r3,r2
 1004450:	00804074 	movhi	r2,257
 1004454:	10b69304 	addi	r2,r2,-9652
 1004458:	10c00485 	stb	r3,18(r2)
		boot_sector_data.max_number_of_dir_entires = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 18)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 17));
 100445c:	d0a6d217 	ldw	r2,-25784(gp)
 1004460:	10800a17 	ldw	r2,40(r2)
 1004464:	10800484 	addi	r2,r2,18
 1004468:	10800023 	ldbuio	r2,0(r2)
 100446c:	10803fcc 	andi	r2,r2,255
 1004470:	1004923a 	slli	r2,r2,8
 1004474:	1007883a 	mov	r3,r2
 1004478:	d0a6d217 	ldw	r2,-25784(gp)
 100447c:	10800a17 	ldw	r2,40(r2)
 1004480:	10800444 	addi	r2,r2,17
 1004484:	10800023 	ldbuio	r2,0(r2)
 1004488:	10803fcc 	andi	r2,r2,255
 100448c:	1884b03a 	or	r2,r3,r2
 1004490:	1007883a 	mov	r3,r2
 1004494:	00804074 	movhi	r2,257
 1004498:	10b69304 	addi	r2,r2,-9652
 100449c:	10c0050d 	sth	r3,20(r2)
		boot_sector_data.number_of_sectors_in_partition = (((unsigned short int)(((unsigned char) IORD_8DIRECT(device_pointer->base, 20)))) << 8 ) | ((unsigned char) IORD_8DIRECT(device_pointer->base, 19));
 10044a0:	d0a6d217 	ldw	r2,-25784(gp)
 10044a4:	10800a17 	ldw	r2,40(r2)
 10044a8:	10800504 	addi	r2,r2,20
 10044ac:	10800023 	ldbuio	r2,0(r2)
 10044b0:	10803fcc 	andi	r2,r2,255
 10044b4:	1004923a 	slli	r2,r2,8
 10044b8:	1007883a 	mov	r3,r2
 10044bc:	d0a6d217 	ldw	r2,-25784(gp)
 10044c0:	10800a17 	ldw	r2,40(r2)
 10044c4:	108004c4 	addi	r2,r2,19
 10044c8:	10800023 	ldbuio	r2,0(r2)
 10044cc:	10803fcc 	andi	r2,r2,255
 10044d0:	1884b03a 	or	r2,r3,r2
 10044d4:	1007883a 	mov	r3,r2
 10044d8:	00804074 	movhi	r2,257
 10044dc:	10b69304 	addi	r2,r2,-9652
 10044e0:	10c0058d 	sth	r3,22(r2)
		boot_sector_data.media_descriptor = ((unsigned char) IORD_8DIRECT(device_pointer->base, 21));
 10044e4:	d0a6d217 	ldw	r2,-25784(gp)
 10044e8:	10800a17 	ldw	r2,40(r2)
 10044ec:	10800544 	addi	r2,r2,21
 10044f0:	10800023 	ldbuio	r2,0(r2)
 10044f4:	1007883a 	mov	r3,r2
 10044f8:	00804074 	movhi	r2,257
 10044fc:	10b69304 	addi	r2,r2,-9652
 1004500:	10c00605 	stb	r3,24(r2)
		boot_sector_data.number_of_sectors_per_table = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 22));
 1004504:	d0a6d217 	ldw	r2,-25784(gp)
 1004508:	10800a17 	ldw	r2,40(r2)
 100450c:	10800584 	addi	r2,r2,22
 1004510:	1080002b 	ldhuio	r2,0(r2)
 1004514:	1007883a 	mov	r3,r2
 1004518:	00804074 	movhi	r2,257
 100451c:	10b69304 	addi	r2,r2,-9652
 1004520:	10c0068d 	sth	r3,26(r2)
		boot_sector_data.number_of_sectors_per_track = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 24));
 1004524:	d0a6d217 	ldw	r2,-25784(gp)
 1004528:	10800a17 	ldw	r2,40(r2)
 100452c:	10800604 	addi	r2,r2,24
 1004530:	1080002b 	ldhuio	r2,0(r2)
 1004534:	1007883a 	mov	r3,r2
 1004538:	00804074 	movhi	r2,257
 100453c:	10b69304 	addi	r2,r2,-9652
 1004540:	10c0070d 	sth	r3,28(r2)
		boot_sector_data.number_of_heads = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 26));
 1004544:	d0a6d217 	ldw	r2,-25784(gp)
 1004548:	10800a17 	ldw	r2,40(r2)
 100454c:	10800684 	addi	r2,r2,26
 1004550:	1080002b 	ldhuio	r2,0(r2)
 1004554:	1007883a 	mov	r3,r2
 1004558:	00804074 	movhi	r2,257
 100455c:	10b69304 	addi	r2,r2,-9652
 1004560:	10c0078d 	sth	r3,30(r2)
		boot_sector_data.number_of_hidden_sectors = ((unsigned int) IORD_32DIRECT(device_pointer->base, 28));
 1004564:	d0a6d217 	ldw	r2,-25784(gp)
 1004568:	10800a17 	ldw	r2,40(r2)
 100456c:	10800704 	addi	r2,r2,28
 1004570:	10800037 	ldwio	r2,0(r2)
 1004574:	1007883a 	mov	r3,r2
 1004578:	00804074 	movhi	r2,257
 100457c:	10b69304 	addi	r2,r2,-9652
 1004580:	10c00815 	stw	r3,32(r2)
		boot_sector_data.total_sector_count_if_above_32MB = ((unsigned int) IORD_32DIRECT(device_pointer->base, 32));
 1004584:	d0a6d217 	ldw	r2,-25784(gp)
 1004588:	10800a17 	ldw	r2,40(r2)
 100458c:	10800804 	addi	r2,r2,32
 1004590:	10800037 	ldwio	r2,0(r2)
 1004594:	1007883a 	mov	r3,r2
 1004598:	00804074 	movhi	r2,257
 100459c:	10b69304 	addi	r2,r2,-9652
 10045a0:	10c00915 	stw	r3,36(r2)
		boot_sector_data.drive_number = ((unsigned char) IORD_8DIRECT(device_pointer->base, 36));
 10045a4:	d0a6d217 	ldw	r2,-25784(gp)
 10045a8:	10800a17 	ldw	r2,40(r2)
 10045ac:	10800904 	addi	r2,r2,36
 10045b0:	10800023 	ldbuio	r2,0(r2)
 10045b4:	1007883a 	mov	r3,r2
 10045b8:	00804074 	movhi	r2,257
 10045bc:	10b69304 	addi	r2,r2,-9652
 10045c0:	10c00a05 	stb	r3,40(r2)
		boot_sector_data.current_head = ((unsigned char) IORD_8DIRECT(device_pointer->base, 37));
 10045c4:	d0a6d217 	ldw	r2,-25784(gp)
 10045c8:	10800a17 	ldw	r2,40(r2)
 10045cc:	10800944 	addi	r2,r2,37
 10045d0:	10800023 	ldbuio	r2,0(r2)
 10045d4:	1007883a 	mov	r3,r2
 10045d8:	00804074 	movhi	r2,257
 10045dc:	10b69304 	addi	r2,r2,-9652
 10045e0:	10c00a45 	stb	r3,41(r2)
		boot_sector_data.boot_signature = ((unsigned char) IORD_8DIRECT(device_pointer->base, 38));
 10045e4:	d0a6d217 	ldw	r2,-25784(gp)
 10045e8:	10800a17 	ldw	r2,40(r2)
 10045ec:	10800984 	addi	r2,r2,38
 10045f0:	10800023 	ldbuio	r2,0(r2)
 10045f4:	1007883a 	mov	r3,r2
 10045f8:	00804074 	movhi	r2,257
 10045fc:	10b69304 	addi	r2,r2,-9652
 1004600:	10c00a85 	stb	r3,42(r2)
		boot_sector_data.first_fat_sector_offset = boot_sector_data.reserved_sectors;
 1004604:	00804074 	movhi	r2,257
 1004608:	10b69304 	addi	r2,r2,-9652
 100460c:	1080040b 	ldhu	r2,16(r2)
 1004610:	10ffffcc 	andi	r3,r2,65535
 1004614:	00804074 	movhi	r2,257
 1004618:	10b69304 	addi	r2,r2,-9652
 100461c:	10c01115 	stw	r3,68(r2)
		boot_sector_data.second_fat_sector_offset = boot_sector_data.first_fat_sector_offset + boot_sector_data.number_of_sectors_per_table;
 1004620:	00804074 	movhi	r2,257
 1004624:	10b69304 	addi	r2,r2,-9652
 1004628:	10c01117 	ldw	r3,68(r2)
 100462c:	00804074 	movhi	r2,257
 1004630:	10b69304 	addi	r2,r2,-9652
 1004634:	1080068b 	ldhu	r2,26(r2)
 1004638:	10bfffcc 	andi	r2,r2,65535
 100463c:	1887883a 	add	r3,r3,r2
 1004640:	00804074 	movhi	r2,257
 1004644:	10b69304 	addi	r2,r2,-9652
 1004648:	10c01215 	stw	r3,72(r2)
		boot_sector_data.root_directory_sector_offset = boot_sector_data.second_fat_sector_offset + boot_sector_data.number_of_sectors_per_table; 
 100464c:	00804074 	movhi	r2,257
 1004650:	10b69304 	addi	r2,r2,-9652
 1004654:	10c01217 	ldw	r3,72(r2)
 1004658:	00804074 	movhi	r2,257
 100465c:	10b69304 	addi	r2,r2,-9652
 1004660:	1080068b 	ldhu	r2,26(r2)
 1004664:	10bfffcc 	andi	r2,r2,65535
 1004668:	1887883a 	add	r3,r3,r2
 100466c:	00804074 	movhi	r2,257
 1004670:	10b69304 	addi	r2,r2,-9652
 1004674:	10c01315 	stw	r3,76(r2)
		boot_sector_data.data_sector_offset = boot_sector_data.root_directory_sector_offset + (32*boot_sector_data.max_number_of_dir_entires / boot_sector_data.sector_size_in_bytes);    
 1004678:	00804074 	movhi	r2,257
 100467c:	10b69304 	addi	r2,r2,-9652
 1004680:	11001317 	ldw	r4,76(r2)
 1004684:	00804074 	movhi	r2,257
 1004688:	10b69304 	addi	r2,r2,-9652
 100468c:	1080050b 	ldhu	r2,20(r2)
 1004690:	10bfffcc 	andi	r2,r2,65535
 1004694:	1006917a 	slli	r3,r2,5
 1004698:	00804074 	movhi	r2,257
 100469c:	10b69304 	addi	r2,r2,-9652
 10046a0:	1080030b 	ldhu	r2,12(r2)
 10046a4:	10bfffcc 	andi	r2,r2,65535
 10046a8:	1885283a 	div	r2,r3,r2
 10046ac:	2087883a 	add	r3,r4,r2
 10046b0:	00804074 	movhi	r2,257
 10046b4:	10b69304 	addi	r2,r2,-9652
 10046b8:	10c01415 	stw	r3,80(r2)
	    
		if (boot_sector_data.number_of_sectors_in_partition > 0)
 10046bc:	00804074 	movhi	r2,257
 10046c0:	10b69304 	addi	r2,r2,-9652
 10046c4:	1080058b 	ldhu	r2,22(r2)
 10046c8:	10bfffcc 	andi	r2,r2,65535
 10046cc:	1005003a 	cmpeq	r2,r2,zero
 10046d0:	10000b1e 	bne	r2,zero,1004700 <Check_for_DOS_FAT+0x460>
		{
			num_clusters = (boot_sector_data.number_of_sectors_in_partition / boot_sector_data.sectors_per_cluster);
 10046d4:	00804074 	movhi	r2,257
 10046d8:	10b69304 	addi	r2,r2,-9652
 10046dc:	1080058b 	ldhu	r2,22(r2)
 10046e0:	10ffffcc 	andi	r3,r2,65535
 10046e4:	00804074 	movhi	r2,257
 10046e8:	10b69304 	addi	r2,r2,-9652
 10046ec:	10800383 	ldbu	r2,14(r2)
 10046f0:	10803fcc 	andi	r2,r2,255
 10046f4:	1885283a 	div	r2,r3,r2
 10046f8:	e0bffb15 	stw	r2,-20(fp)
 10046fc:	00000906 	br	1004724 <Check_for_DOS_FAT+0x484>
		}
		else
		{
			num_clusters = (boot_sector_data.total_sector_count_if_above_32MB / boot_sector_data.sectors_per_cluster);
 1004700:	00804074 	movhi	r2,257
 1004704:	10b69304 	addi	r2,r2,-9652
 1004708:	10c00917 	ldw	r3,36(r2)
 100470c:	00804074 	movhi	r2,257
 1004710:	10b69304 	addi	r2,r2,-9652
 1004714:	10800383 	ldbu	r2,14(r2)
 1004718:	10803fcc 	andi	r2,r2,255
 100471c:	1885203a 	divu	r2,r3,r2
 1004720:	e0bffb15 	stw	r2,-20(fp)
		}
		if (num_clusters < 4087)
 1004724:	e0bffb17 	ldw	r2,-20(fp)
 1004728:	1083fdc8 	cmpgei	r2,r2,4087
 100472c:	1000051e 	bne	r2,zero,1004744 <Check_for_DOS_FAT+0x4a4>
		{
			boot_sector_data.bits_for_cluster_index = 12;
 1004730:	00c04074 	movhi	r3,257
 1004734:	18f69304 	addi	r3,r3,-9652
 1004738:	00800304 	movi	r2,12
 100473c:	18801085 	stb	r2,66(r3)
 1004740:	00000c06 	br	1004774 <Check_for_DOS_FAT+0x4d4>
		}
		else if (num_clusters <= 65517)
 1004744:	e0fffb17 	ldw	r3,-20(fp)
 1004748:	00bffb54 	movui	r2,65517
 100474c:	10c00516 	blt	r2,r3,1004764 <Check_for_DOS_FAT+0x4c4>
		{
			boot_sector_data.bits_for_cluster_index = 16;
 1004750:	00c04074 	movhi	r3,257
 1004754:	18f69304 	addi	r3,r3,-9652
 1004758:	00800404 	movi	r2,16
 100475c:	18801085 	stb	r2,66(r3)
 1004760:	00000406 	br	1004774 <Check_for_DOS_FAT+0x4d4>
		}
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
 1004764:	00c04074 	movhi	r3,257
 1004768:	18f69304 	addi	r3,r3,-9652
 100476c:	00800804 	movi	r2,32
 1004770:	18801085 	stb	r2,66(r3)
		}
	    
		for (counter = 0; counter < 4; counter++)
 1004774:	e03ffd15 	stw	zero,-12(fp)
 1004778:	00001106 	br	10047c0 <Check_for_DOS_FAT+0x520>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
 100477c:	e13ffd17 	ldw	r4,-12(fp)
 1004780:	d0a6d217 	ldw	r2,-25784(gp)
 1004784:	10800a17 	ldw	r2,40(r2)
 1004788:	1007883a 	mov	r3,r2
 100478c:	e0bffd17 	ldw	r2,-12(fp)
 1004790:	1885883a 	add	r2,r3,r2
 1004794:	108009c4 	addi	r2,r2,39
 1004798:	10800023 	ldbuio	r2,0(r2)
 100479c:	1007883a 	mov	r3,r2
 10047a0:	00804074 	movhi	r2,257
 10047a4:	10b69304 	addi	r2,r2,-9652
 10047a8:	2085883a 	add	r2,r4,r2
 10047ac:	10800a04 	addi	r2,r2,40
 10047b0:	10c000c5 	stb	r3,3(r2)
		else
		{
			boot_sector_data.bits_for_cluster_index = 32;
		}
	    
		for (counter = 0; counter < 4; counter++)
 10047b4:	e0bffd17 	ldw	r2,-12(fp)
 10047b8:	10800044 	addi	r2,r2,1
 10047bc:	e0bffd15 	stw	r2,-12(fp)
 10047c0:	e0bffd17 	ldw	r2,-12(fp)
 10047c4:	10800110 	cmplti	r2,r2,4
 10047c8:	103fec1e 	bne	r2,zero,100477c <Check_for_DOS_FAT+0x4dc>
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 10047cc:	e03ffd15 	stw	zero,-12(fp)
 10047d0:	00001106 	br	1004818 <Check_for_DOS_FAT+0x578>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
 10047d4:	e13ffd17 	ldw	r4,-12(fp)
 10047d8:	d0a6d217 	ldw	r2,-25784(gp)
 10047dc:	10800a17 	ldw	r2,40(r2)
 10047e0:	1007883a 	mov	r3,r2
 10047e4:	e0bffd17 	ldw	r2,-12(fp)
 10047e8:	1885883a 	add	r2,r3,r2
 10047ec:	10800ac4 	addi	r2,r2,43
 10047f0:	10800023 	ldbuio	r2,0(r2)
 10047f4:	1007883a 	mov	r3,r2
 10047f8:	00804074 	movhi	r2,257
 10047fc:	10b69304 	addi	r2,r2,-9652
 1004800:	2085883a 	add	r2,r4,r2
 1004804:	10800b04 	addi	r2,r2,44
 1004808:	10c000c5 	stb	r3,3(r2)
	    
		for (counter = 0; counter < 4; counter++)
		{
			boot_sector_data.volume_id[counter] = ((char) IORD_8DIRECT(device_pointer->base, 39+counter));
		}    
		for (counter = 0; counter < 11; counter++)
 100480c:	e0bffd17 	ldw	r2,-12(fp)
 1004810:	10800044 	addi	r2,r2,1
 1004814:	e0bffd15 	stw	r2,-12(fp)
 1004818:	e0bffd17 	ldw	r2,-12(fp)
 100481c:	108002d0 	cmplti	r2,r2,11
 1004820:	103fec1e 	bne	r2,zero,10047d4 <Check_for_DOS_FAT+0x534>
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 1004824:	e03ffd15 	stw	zero,-12(fp)
 1004828:	00001106 	br	1004870 <Check_for_DOS_FAT+0x5d0>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
 100482c:	e13ffd17 	ldw	r4,-12(fp)
 1004830:	d0a6d217 	ldw	r2,-25784(gp)
 1004834:	10800a17 	ldw	r2,40(r2)
 1004838:	1007883a 	mov	r3,r2
 100483c:	e0bffd17 	ldw	r2,-12(fp)
 1004840:	1885883a 	add	r2,r3,r2
 1004844:	10800d84 	addi	r2,r2,54
 1004848:	10800023 	ldbuio	r2,0(r2)
 100484c:	1007883a 	mov	r3,r2
 1004850:	00804074 	movhi	r2,257
 1004854:	10b69304 	addi	r2,r2,-9652
 1004858:	2085883a 	add	r2,r4,r2
 100485c:	10800e04 	addi	r2,r2,56
 1004860:	10c00085 	stb	r3,2(r2)
		}    
		for (counter = 0; counter < 11; counter++)
		{
			boot_sector_data.volume_label[counter] = ((char) IORD_8DIRECT(device_pointer->base, 43+counter));
		}    
		for (counter = 0; counter < 8; counter++)
 1004864:	e0bffd17 	ldw	r2,-12(fp)
 1004868:	10800044 	addi	r2,r2,1
 100486c:	e0bffd15 	stw	r2,-12(fp)
 1004870:	e0bffd17 	ldw	r2,-12(fp)
 1004874:	10800210 	cmplti	r2,r2,8
 1004878:	103fec1e 	bne	r2,zero,100482c <Check_for_DOS_FAT+0x58c>
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 100487c:	e03ffd15 	stw	zero,-12(fp)
 1004880:	00000a06 	br	10048ac <Check_for_DOS_FAT+0x60c>
		{
			active_files[counter].in_use = false;
 1004884:	e0bffd17 	ldw	r2,-12(fp)
 1004888:	00c04074 	movhi	r3,257
 100488c:	18f6a804 	addi	r3,r3,-9568
 1004890:	100491ba 	slli	r2,r2,6
 1004894:	10c5883a 	add	r2,r2,r3
 1004898:	10800f04 	addi	r2,r2,60
 100489c:	10000015 	stw	zero,0(r2)
		for (counter = 0; counter < 8; counter++)
		{
			boot_sector_data.file_system_type[counter] = ((char) IORD_8DIRECT(device_pointer->base, 54+counter));
		}    
		// Clear file records
		for (counter = 0; counter < MAX_FILES_OPENED; counter++)
 10048a0:	e0bffd17 	ldw	r2,-12(fp)
 10048a4:	10800044 	addi	r2,r2,1
 10048a8:	e0bffd15 	stw	r2,-12(fp)
 10048ac:	e0bffd17 	ldw	r2,-12(fp)
 10048b0:	10800510 	cmplti	r2,r2,20
 10048b4:	103ff31e 	bne	r2,zero,1004884 <Check_for_DOS_FAT+0x5e4>
		{
			active_files[counter].in_use = false;
		}
		result = true;
 10048b8:	00800044 	movi	r2,1
 10048bc:	e0bffe15 	stw	r2,-8(fp)
	int counter = 0;
	short int end;

	result = Read_Sector_Data(0, FAT_partition_start_sector);
	end =  (short int) IORD_16DIRECT(device_pointer->base, 0x1fe);
	if (((end & 0x0000ffff) == 0x0000aa55) && (result))
 10048c0:	00000106 	br	10048c8 <Check_for_DOS_FAT+0x628>
		}
		result = true;
	}
    else
    {
        result = false;
 10048c4:	e03ffe15 	stw	zero,-8(fp)
    }
	return result;
 10048c8:	e0bffe17 	ldw	r2,-8(fp)
}
 10048cc:	e037883a 	mov	sp,fp
 10048d0:	dfc00117 	ldw	ra,4(sp)
 10048d4:	df000017 	ldw	fp,0(sp)
 10048d8:	dec00204 	addi	sp,sp,8
 10048dc:	f800283a 	ret

010048e0 <Look_for_FAT16>:


bool Look_for_FAT16(void)
// Read the SD card to determine if it contains a FAT16 partition.
{
 10048e0:	defffc04 	addi	sp,sp,-16
 10048e4:	dfc00315 	stw	ra,12(sp)
 10048e8:	df000215 	stw	fp,8(sp)
 10048ec:	df000204 	addi	fp,sp,8
	bool result = false;
 10048f0:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
 10048f4:	100661c0 	call	100661c <alt_up_sd_card_is_Present>
 10048f8:	1005003a 	cmpeq	r2,r2,zero
 10048fc:	1000301e 	bne	r2,zero,10049c0 <Look_for_FAT16+0xe0>
	{
		short int csd_file_format = *CSD_register_w0;
 1004900:	d0a6cc17 	ldw	r2,-25808(gp)
 1004904:	1080000b 	ldhu	r2,0(r2)
 1004908:	e0bffe0d 	sth	r2,-8(fp)
        
		fat_partition_offset_in_512_byte_sectors = 0;
 100490c:	d026d015 	stw	zero,-25792(gp)
		fat_partition_size_in_512_byte_sectors = 0;              
 1004910:	d026d115 	stw	zero,-25788(gp)

		if (((csd_file_format & 0x8000) == 0) && ((csd_file_format & 0x0c00) != 0x0c00))
 1004914:	e0bffe0f 	ldh	r2,-8(fp)
 1004918:	1004803a 	cmplt	r2,r2,zero
 100491c:	1000281e 	bne	r2,zero,10049c0 <Look_for_FAT16+0xe0>
 1004920:	e0bffe0b 	ldhu	r2,-8(fp)
 1004924:	10bfffcc 	andi	r2,r2,65535
 1004928:	1083000c 	andi	r2,r2,3072
 100492c:	10830020 	cmpeqi	r2,r2,3072
 1004930:	1000231e 	bne	r2,zero,10049c0 <Look_for_FAT16+0xe0>
		{
			if ((csd_file_format & 0x0c00) == 0x0400)
 1004934:	e0bffe0b 	ldhu	r2,-8(fp)
 1004938:	10bfffcc 	andi	r2,r2,65535
 100493c:	1083000c 	andi	r2,r2,3072
 1004940:	10810018 	cmpnei	r2,r2,1024
 1004944:	1000031e 	bne	r2,zero,1004954 <Look_for_FAT16+0x74>
			{
				/* SD Card contains files stored in a DOS FAT (floppy like) file format, without a partition table */
				result = Check_for_DOS_FAT(0);
 1004948:	0009883a 	mov	r4,zero
 100494c:	10042a00 	call	10042a0 <Check_for_DOS_FAT>
 1004950:	e0bfff15 	stw	r2,-4(fp)
			}
			if ((csd_file_format & 0x0c00) == 0x0000)
 1004954:	e0bffe0b 	ldhu	r2,-8(fp)
 1004958:	10bfffcc 	andi	r2,r2,65535
 100495c:	1083000c 	andi	r2,r2,3072
 1004960:	1004c03a 	cmpne	r2,r2,zero
 1004964:	1000061e 	bne	r2,zero,1004980 <Look_for_FAT16+0xa0>
			{
				/* SD Card contains files stored in a Hard disk-like file format that contains a partition table */
				if (Check_for_Master_Boot_Record())
 1004968:	1003bb40 	call	1003bb4 <Check_for_Master_Boot_Record>
 100496c:	1005003a 	cmpeq	r2,r2,zero
 1004970:	1000031e 	bne	r2,zero,1004980 <Look_for_FAT16+0xa0>
				{
					result = Check_for_DOS_FAT(fat_partition_offset_in_512_byte_sectors);
 1004974:	d126d017 	ldw	r4,-25792(gp)
 1004978:	10042a00 	call	10042a0 <Check_for_DOS_FAT>
 100497c:	e0bfff15 	stw	r2,-4(fp)
				}                        
			}
			if (result == true)
 1004980:	e0bfff17 	ldw	r2,-4(fp)
 1004984:	10800058 	cmpnei	r2,r2,1
 1004988:	10000d1e 	bne	r2,zero,10049c0 <Look_for_FAT16+0xe0>
			{
				// Accept only FAT16, not FAT12.
				if (boot_sector_data.bits_for_cluster_index != 16)
 100498c:	00804074 	movhi	r2,257
 1004990:	10b69304 	addi	r2,r2,-9652
 1004994:	10801083 	ldbu	r2,66(r2)
 1004998:	10803fcc 	andi	r2,r2,255
 100499c:	10800420 	cmpeqi	r2,r2,16
 10049a0:	1000021e 	bne	r2,zero,10049ac <Look_for_FAT16+0xcc>
				{
					result = false;
 10049a4:	e03fff15 	stw	zero,-4(fp)
 10049a8:	00000506 	br	10049c0 <Look_for_FAT16+0xe0>
				}
				else
				{
					fat_partition_size_in_512_byte_sectors = boot_sector_data.number_of_sectors_in_partition;
 10049ac:	00804074 	movhi	r2,257
 10049b0:	10b69304 	addi	r2,r2,-9652
 10049b4:	1080058b 	ldhu	r2,22(r2)
 10049b8:	10bfffcc 	andi	r2,r2,65535
 10049bc:	d0a6d115 	stw	r2,-25788(gp)
				}
			}
		}
	}
	return result;
 10049c0:	e0bfff17 	ldw	r2,-4(fp)
}
 10049c4:	e037883a 	mov	sp,fp
 10049c8:	dfc00117 	ldw	ra,4(sp)
 10049cc:	df000017 	ldw	fp,0(sp)
 10049d0:	dec00204 	addi	sp,sp,8
 10049d4:	f800283a 	ret

010049d8 <filename_to_upper_case>:
 

void filename_to_upper_case(char *file_name)
// Change file name to upper case.
{
 10049d8:	defffb04 	addi	sp,sp,-20
 10049dc:	dfc00415 	stw	ra,16(sp)
 10049e0:	df000315 	stw	fp,12(sp)
 10049e4:	df000304 	addi	fp,sp,12
 10049e8:	e13fff15 	stw	r4,-4(fp)
    int index;
    int length = strlen(file_name);
 10049ec:	e13fff17 	ldw	r4,-4(fp)
 10049f0:	10003d40 	call	10003d4 <strlen>
 10049f4:	e0bffd15 	stw	r2,-12(fp)
    
    for (index = 0; index < length; index++)
 10049f8:	e03ffe15 	stw	zero,-8(fp)
 10049fc:	00002206 	br	1004a88 <filename_to_upper_case+0xb0>
    {
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
 1004a00:	e0bffe17 	ldw	r2,-8(fp)
 1004a04:	1007883a 	mov	r3,r2
 1004a08:	e0bfff17 	ldw	r2,-4(fp)
 1004a0c:	1885883a 	add	r2,r3,r2
 1004a10:	10800003 	ldbu	r2,0(r2)
 1004a14:	10803fcc 	andi	r2,r2,255
 1004a18:	1080201c 	xori	r2,r2,128
 1004a1c:	10bfe004 	addi	r2,r2,-128
 1004a20:	10801850 	cmplti	r2,r2,97
 1004a24:	1000151e 	bne	r2,zero,1004a7c <filename_to_upper_case+0xa4>
 1004a28:	e0bffe17 	ldw	r2,-8(fp)
 1004a2c:	1007883a 	mov	r3,r2
 1004a30:	e0bfff17 	ldw	r2,-4(fp)
 1004a34:	1885883a 	add	r2,r3,r2
 1004a38:	10800003 	ldbu	r2,0(r2)
 1004a3c:	10803fcc 	andi	r2,r2,255
 1004a40:	1080201c 	xori	r2,r2,128
 1004a44:	10bfe004 	addi	r2,r2,-128
 1004a48:	10801ec8 	cmpgei	r2,r2,123
 1004a4c:	10000b1e 	bne	r2,zero,1004a7c <filename_to_upper_case+0xa4>
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
 1004a50:	e0bffe17 	ldw	r2,-8(fp)
 1004a54:	1007883a 	mov	r3,r2
 1004a58:	e0bfff17 	ldw	r2,-4(fp)
 1004a5c:	1889883a 	add	r4,r3,r2
 1004a60:	e0bffe17 	ldw	r2,-8(fp)
 1004a64:	1007883a 	mov	r3,r2
 1004a68:	e0bfff17 	ldw	r2,-4(fp)
 1004a6c:	1885883a 	add	r2,r3,r2
 1004a70:	10800003 	ldbu	r2,0(r2)
 1004a74:	10bff804 	addi	r2,r2,-32
 1004a78:	20800005 	stb	r2,0(r4)
// Change file name to upper case.
{
    int index;
    int length = strlen(file_name);
    
    for (index = 0; index < length; index++)
 1004a7c:	e0bffe17 	ldw	r2,-8(fp)
 1004a80:	10800044 	addi	r2,r2,1
 1004a84:	e0bffe15 	stw	r2,-8(fp)
 1004a88:	e0fffe17 	ldw	r3,-8(fp)
 1004a8c:	e0bffd17 	ldw	r2,-12(fp)
 1004a90:	18bfdb16 	blt	r3,r2,1004a00 <filename_to_upper_case+0x28>
        if ((file_name[index] >= 'a') && (file_name[index] <= 'z'))
        {
            file_name[index] = (file_name[index] - 'a') + 'A';
        }
    }
}
 1004a94:	e037883a 	mov	sp,fp
 1004a98:	dfc00117 	ldw	ra,4(sp)
 1004a9c:	df000017 	ldw	fp,0(sp)
 1004aa0:	dec00204 	addi	sp,sp,8
 1004aa4:	f800283a 	ret

01004aa8 <check_file_name_for_FAT16_compliance>:


bool check_file_name_for_FAT16_compliance(char *file_name)
// Check if the file complies with FAT16 naming convention.
{
 1004aa8:	defff804 	addi	sp,sp,-32
 1004aac:	dfc00715 	stw	ra,28(sp)
 1004ab0:	df000615 	stw	fp,24(sp)
 1004ab4:	df000604 	addi	fp,sp,24
 1004ab8:	e13fff15 	stw	r4,-4(fp)
    int length = strlen(file_name);
 1004abc:	e13fff17 	ldw	r4,-4(fp)
 1004ac0:	10003d40 	call	10003d4 <strlen>
 1004ac4:	e0bffe15 	stw	r2,-8(fp)
    int index;
    int last_dir_break_position = -1;
 1004ac8:	00bfffc4 	movi	r2,-1
 1004acc:	e0bffc15 	stw	r2,-16(fp)
    int last_period = -1;
 1004ad0:	00bfffc4 	movi	r2,-1
 1004ad4:	e0bffb15 	stw	r2,-20(fp)
    bool result = true;
 1004ad8:	00800044 	movi	r2,1
 1004adc:	e0bffa15 	stw	r2,-24(fp)
    
    for(index = 0; index < length; index++)
 1004ae0:	e03ffd15 	stw	zero,-12(fp)
 1004ae4:	00007606 	br	1004cc0 <check_file_name_for_FAT16_compliance+0x218>
    {
        if ((file_name[index] == ' ') ||
 1004ae8:	e0bffd17 	ldw	r2,-12(fp)
 1004aec:	1007883a 	mov	r3,r2
 1004af0:	e0bfff17 	ldw	r2,-4(fp)
 1004af4:	1885883a 	add	r2,r3,r2
 1004af8:	10800003 	ldbu	r2,0(r2)
 1004afc:	10803fcc 	andi	r2,r2,255
 1004b00:	1080201c 	xori	r2,r2,128
 1004b04:	10bfe004 	addi	r2,r2,-128
 1004b08:	10800820 	cmpeqi	r2,r2,32
 1004b0c:	1000431e 	bne	r2,zero,1004c1c <check_file_name_for_FAT16_compliance+0x174>
 1004b10:	e0bffd17 	ldw	r2,-12(fp)
 1004b14:	10ffffc4 	addi	r3,r2,-1
 1004b18:	e0bffc17 	ldw	r2,-16(fp)
 1004b1c:	1880141e 	bne	r3,r2,1004b70 <check_file_name_for_FAT16_compliance+0xc8>
 1004b20:	e0bffd17 	ldw	r2,-12(fp)
 1004b24:	1007883a 	mov	r3,r2
 1004b28:	e0bfff17 	ldw	r2,-4(fp)
 1004b2c:	1885883a 	add	r2,r3,r2
 1004b30:	10800003 	ldbu	r2,0(r2)
 1004b34:	10803fcc 	andi	r2,r2,255
 1004b38:	1080201c 	xori	r2,r2,128
 1004b3c:	10bfe004 	addi	r2,r2,-128
 1004b40:	10801720 	cmpeqi	r2,r2,92
 1004b44:	1000351e 	bne	r2,zero,1004c1c <check_file_name_for_FAT16_compliance+0x174>
 1004b48:	e0bffd17 	ldw	r2,-12(fp)
 1004b4c:	1007883a 	mov	r3,r2
 1004b50:	e0bfff17 	ldw	r2,-4(fp)
 1004b54:	1885883a 	add	r2,r3,r2
 1004b58:	10800003 	ldbu	r2,0(r2)
 1004b5c:	10803fcc 	andi	r2,r2,255
 1004b60:	1080201c 	xori	r2,r2,128
 1004b64:	10bfe004 	addi	r2,r2,-128
 1004b68:	10800be0 	cmpeqi	r2,r2,47
 1004b6c:	10002b1e 	bne	r2,zero,1004c1c <check_file_name_for_FAT16_compliance+0x174>
 1004b70:	e0fffd17 	ldw	r3,-12(fp)
 1004b74:	e0bffb17 	ldw	r2,-20(fp)
 1004b78:	1885c83a 	sub	r2,r3,r2
 1004b7c:	10800258 	cmpnei	r2,r2,9
 1004b80:	10000a1e 	bne	r2,zero,1004bac <check_file_name_for_FAT16_compliance+0x104>
 1004b84:	e0bffd17 	ldw	r2,-12(fp)
 1004b88:	1007883a 	mov	r3,r2
 1004b8c:	e0bfff17 	ldw	r2,-4(fp)
 1004b90:	1885883a 	add	r2,r3,r2
 1004b94:	10800003 	ldbu	r2,0(r2)
 1004b98:	10803fcc 	andi	r2,r2,255
 1004b9c:	1080201c 	xori	r2,r2,128
 1004ba0:	10bfe004 	addi	r2,r2,-128
 1004ba4:	10800b98 	cmpnei	r2,r2,46
 1004ba8:	10001c1e 	bne	r2,zero,1004c1c <check_file_name_for_FAT16_compliance+0x174>
 1004bac:	e0fffc17 	ldw	r3,-16(fp)
 1004bb0:	e0bffb17 	ldw	r2,-20(fp)
 1004bb4:	18801b26 	beq	r3,r2,1004c24 <check_file_name_for_FAT16_compliance+0x17c>
 1004bb8:	e0fffd17 	ldw	r3,-12(fp)
 1004bbc:	e0bffb17 	ldw	r2,-20(fp)
 1004bc0:	1885c83a 	sub	r2,r3,r2
 1004bc4:	10800110 	cmplti	r2,r2,4
 1004bc8:	1000161e 	bne	r2,zero,1004c24 <check_file_name_for_FAT16_compliance+0x17c>
 1004bcc:	e0bffd17 	ldw	r2,-12(fp)
 1004bd0:	1007883a 	mov	r3,r2
 1004bd4:	e0bfff17 	ldw	r2,-4(fp)
 1004bd8:	1885883a 	add	r2,r3,r2
 1004bdc:	10800003 	ldbu	r2,0(r2)
 1004be0:	10803fcc 	andi	r2,r2,255
 1004be4:	1080201c 	xori	r2,r2,128
 1004be8:	10bfe004 	addi	r2,r2,-128
 1004bec:	10801720 	cmpeqi	r2,r2,92
 1004bf0:	10000c1e 	bne	r2,zero,1004c24 <check_file_name_for_FAT16_compliance+0x17c>
 1004bf4:	e0bffd17 	ldw	r2,-12(fp)
 1004bf8:	1007883a 	mov	r3,r2
 1004bfc:	e0bfff17 	ldw	r2,-4(fp)
 1004c00:	1885883a 	add	r2,r3,r2
 1004c04:	10800003 	ldbu	r2,0(r2)
 1004c08:	10803fcc 	andi	r2,r2,255
 1004c0c:	1080201c 	xori	r2,r2,128
 1004c10:	10bfe004 	addi	r2,r2,-128
 1004c14:	10800be0 	cmpeqi	r2,r2,47
 1004c18:	1000021e 	bne	r2,zero,1004c24 <check_file_name_for_FAT16_compliance+0x17c>
            ((index - last_period == 9) && (file_name[index] != '.')) ||
            ((last_dir_break_position != last_period) && (index - last_period > 3) &&
             (file_name[index] != '\\') && (file_name[index] != '/'))
           )
        {
            result = false;
 1004c1c:	e03ffa15 	stw	zero,-24(fp)
            break;
 1004c20:	00002a06 	br	1004ccc <check_file_name_for_FAT16_compliance+0x224>
        }
        if ((file_name[index] == '\\') || (file_name[index] == '/'))
 1004c24:	e0bffd17 	ldw	r2,-12(fp)
 1004c28:	1007883a 	mov	r3,r2
 1004c2c:	e0bfff17 	ldw	r2,-4(fp)
 1004c30:	1885883a 	add	r2,r3,r2
 1004c34:	10800003 	ldbu	r2,0(r2)
 1004c38:	10803fcc 	andi	r2,r2,255
 1004c3c:	1080201c 	xori	r2,r2,128
 1004c40:	10bfe004 	addi	r2,r2,-128
 1004c44:	10801720 	cmpeqi	r2,r2,92
 1004c48:	10000a1e 	bne	r2,zero,1004c74 <check_file_name_for_FAT16_compliance+0x1cc>
 1004c4c:	e0bffd17 	ldw	r2,-12(fp)
 1004c50:	1007883a 	mov	r3,r2
 1004c54:	e0bfff17 	ldw	r2,-4(fp)
 1004c58:	1885883a 	add	r2,r3,r2
 1004c5c:	10800003 	ldbu	r2,0(r2)
 1004c60:	10803fcc 	andi	r2,r2,255
 1004c64:	1080201c 	xori	r2,r2,128
 1004c68:	10bfe004 	addi	r2,r2,-128
 1004c6c:	10800bd8 	cmpnei	r2,r2,47
 1004c70:	1000041e 	bne	r2,zero,1004c84 <check_file_name_for_FAT16_compliance+0x1dc>
        {
            last_period = index;
 1004c74:	e0bffd17 	ldw	r2,-12(fp)
 1004c78:	e0bffb15 	stw	r2,-20(fp)
            last_dir_break_position = index;
 1004c7c:	e0bffd17 	ldw	r2,-12(fp)
 1004c80:	e0bffc15 	stw	r2,-16(fp)
        }
        if (file_name[index] == '.')
 1004c84:	e0bffd17 	ldw	r2,-12(fp)
 1004c88:	1007883a 	mov	r3,r2
 1004c8c:	e0bfff17 	ldw	r2,-4(fp)
 1004c90:	1885883a 	add	r2,r3,r2
 1004c94:	10800003 	ldbu	r2,0(r2)
 1004c98:	10803fcc 	andi	r2,r2,255
 1004c9c:	1080201c 	xori	r2,r2,128
 1004ca0:	10bfe004 	addi	r2,r2,-128
 1004ca4:	10800b98 	cmpnei	r2,r2,46
 1004ca8:	1000021e 	bne	r2,zero,1004cb4 <check_file_name_for_FAT16_compliance+0x20c>
        {
            last_period = index;
 1004cac:	e0bffd17 	ldw	r2,-12(fp)
 1004cb0:	e0bffb15 	stw	r2,-20(fp)
    int index;
    int last_dir_break_position = -1;
    int last_period = -1;
    bool result = true;
    
    for(index = 0; index < length; index++)
 1004cb4:	e0bffd17 	ldw	r2,-12(fp)
 1004cb8:	10800044 	addi	r2,r2,1
 1004cbc:	e0bffd15 	stw	r2,-12(fp)
 1004cc0:	e0fffd17 	ldw	r3,-12(fp)
 1004cc4:	e0bffe17 	ldw	r2,-8(fp)
 1004cc8:	18bf8716 	blt	r3,r2,1004ae8 <check_file_name_for_FAT16_compliance+0x40>
        if (file_name[index] == '.')
        {
            last_period = index;
        }
    }
    if ((file_name[length-1] == '\\') || (file_name[length-1] == '/'))
 1004ccc:	e0fffe17 	ldw	r3,-8(fp)
 1004cd0:	e0bfff17 	ldw	r2,-4(fp)
 1004cd4:	1885883a 	add	r2,r3,r2
 1004cd8:	10bfffc4 	addi	r2,r2,-1
 1004cdc:	10800003 	ldbu	r2,0(r2)
 1004ce0:	10803fcc 	andi	r2,r2,255
 1004ce4:	1080201c 	xori	r2,r2,128
 1004ce8:	10bfe004 	addi	r2,r2,-128
 1004cec:	10801720 	cmpeqi	r2,r2,92
 1004cf0:	10000a1e 	bne	r2,zero,1004d1c <check_file_name_for_FAT16_compliance+0x274>
 1004cf4:	e0fffe17 	ldw	r3,-8(fp)
 1004cf8:	e0bfff17 	ldw	r2,-4(fp)
 1004cfc:	1885883a 	add	r2,r3,r2
 1004d00:	10bfffc4 	addi	r2,r2,-1
 1004d04:	10800003 	ldbu	r2,0(r2)
 1004d08:	10803fcc 	andi	r2,r2,255
 1004d0c:	1080201c 	xori	r2,r2,128
 1004d10:	10bfe004 	addi	r2,r2,-128
 1004d14:	10800bd8 	cmpnei	r2,r2,47
 1004d18:	1000011e 	bne	r2,zero,1004d20 <check_file_name_for_FAT16_compliance+0x278>
    {
        result = false;
 1004d1c:	e03ffa15 	stw	zero,-24(fp)
    }
    return result;
 1004d20:	e0bffa17 	ldw	r2,-24(fp)
}
 1004d24:	e037883a 	mov	sp,fp
 1004d28:	dfc00117 	ldw	ra,4(sp)
 1004d2c:	df000017 	ldw	fp,0(sp)
 1004d30:	dec00204 	addi	sp,sp,8
 1004d34:	f800283a 	ret

01004d38 <get_dir_divider_location>:


int get_dir_divider_location(char *name)
// Find a directory divider location.
{
 1004d38:	defffb04 	addi	sp,sp,-20
 1004d3c:	dfc00415 	stw	ra,16(sp)
 1004d40:	df000315 	stw	fp,12(sp)
 1004d44:	df000304 	addi	fp,sp,12
 1004d48:	e13fff15 	stw	r4,-4(fp)
    int index = 0;
 1004d4c:	e03ffe15 	stw	zero,-8(fp)
    int length = strlen(name);
 1004d50:	e13fff17 	ldw	r4,-4(fp)
 1004d54:	10003d40 	call	10003d4 <strlen>
 1004d58:	e0bffd15 	stw	r2,-12(fp)
    
    for(index = 0; index < length; index++)
 1004d5c:	e03ffe15 	stw	zero,-8(fp)
 1004d60:	00001706 	br	1004dc0 <get_dir_divider_location+0x88>
    {
        if ((name[index] == '\\') || (name[index] == '/'))
 1004d64:	e0bffe17 	ldw	r2,-8(fp)
 1004d68:	1007883a 	mov	r3,r2
 1004d6c:	e0bfff17 	ldw	r2,-4(fp)
 1004d70:	1885883a 	add	r2,r3,r2
 1004d74:	10800003 	ldbu	r2,0(r2)
 1004d78:	10803fcc 	andi	r2,r2,255
 1004d7c:	1080201c 	xori	r2,r2,128
 1004d80:	10bfe004 	addi	r2,r2,-128
 1004d84:	10801720 	cmpeqi	r2,r2,92
 1004d88:	1000101e 	bne	r2,zero,1004dcc <get_dir_divider_location+0x94>
 1004d8c:	e0bffe17 	ldw	r2,-8(fp)
 1004d90:	1007883a 	mov	r3,r2
 1004d94:	e0bfff17 	ldw	r2,-4(fp)
 1004d98:	1885883a 	add	r2,r3,r2
 1004d9c:	10800003 	ldbu	r2,0(r2)
 1004da0:	10803fcc 	andi	r2,r2,255
 1004da4:	1080201c 	xori	r2,r2,128
 1004da8:	10bfe004 	addi	r2,r2,-128
 1004dac:	10800be0 	cmpeqi	r2,r2,47
 1004db0:	1000061e 	bne	r2,zero,1004dcc <get_dir_divider_location+0x94>
// Find a directory divider location.
{
    int index = 0;
    int length = strlen(name);
    
    for(index = 0; index < length; index++)
 1004db4:	e0bffe17 	ldw	r2,-8(fp)
 1004db8:	10800044 	addi	r2,r2,1
 1004dbc:	e0bffe15 	stw	r2,-8(fp)
 1004dc0:	e0fffe17 	ldw	r3,-8(fp)
 1004dc4:	e0bffd17 	ldw	r2,-12(fp)
 1004dc8:	18bfe616 	blt	r3,r2,1004d64 <get_dir_divider_location+0x2c>
        {
            break;
        }
    }
    
    if (index == length)
 1004dcc:	e0fffe17 	ldw	r3,-8(fp)
 1004dd0:	e0bffd17 	ldw	r2,-12(fp)
 1004dd4:	1880021e 	bne	r3,r2,1004de0 <get_dir_divider_location+0xa8>
    {
        index = -1;
 1004dd8:	00bfffc4 	movi	r2,-1
 1004ddc:	e0bffe15 	stw	r2,-8(fp)
    }
    
    return index;
 1004de0:	e0bffe17 	ldw	r2,-8(fp)
}
 1004de4:	e037883a 	mov	sp,fp
 1004de8:	dfc00117 	ldw	ra,4(sp)
 1004dec:	df000017 	ldw	fp,0(sp)
 1004df0:	dec00204 	addi	sp,sp,8
 1004df4:	f800283a 	ret

01004df8 <match_file_record_to_name_ext>:


bool match_file_record_to_name_ext(t_file_record *file_record, char *name, char *extension)
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
 1004df8:	defff604 	addi	sp,sp,-40
 1004dfc:	df000915 	stw	fp,36(sp)
 1004e00:	df000904 	addi	fp,sp,36
 1004e04:	e13ff915 	stw	r4,-28(fp)
 1004e08:	e17ffa15 	stw	r5,-24(fp)
 1004e0c:	e1bffb15 	stw	r6,-20(fp)
    bool match = true;
 1004e10:	00800044 	movi	r2,1
 1004e14:	e0bff815 	stw	r2,-32(fp)
	int index;

    for (index = 0; index < 8; index++)
 1004e18:	e03ff715 	stw	zero,-36(fp)
 1004e1c:	00005006 	br	1004f60 <match_file_record_to_name_ext+0x168>
    {
        if (CHAR_TO_UPPER(file_record->name[index]) != CHAR_TO_UPPER(name[index]))
 1004e20:	e0fff717 	ldw	r3,-36(fp)
 1004e24:	e0bff917 	ldw	r2,-28(fp)
 1004e28:	10c5883a 	add	r2,r2,r3
 1004e2c:	10800003 	ldbu	r2,0(r2)
 1004e30:	10803fcc 	andi	r2,r2,255
 1004e34:	10801870 	cmpltui	r2,r2,97
 1004e38:	1000111e 	bne	r2,zero,1004e80 <match_file_record_to_name_ext+0x88>
 1004e3c:	e0fff717 	ldw	r3,-36(fp)
 1004e40:	e0bff917 	ldw	r2,-28(fp)
 1004e44:	10c5883a 	add	r2,r2,r3
 1004e48:	10800003 	ldbu	r2,0(r2)
 1004e4c:	10803fcc 	andi	r2,r2,255
 1004e50:	10801ee8 	cmpgeui	r2,r2,123
 1004e54:	10000a1e 	bne	r2,zero,1004e80 <match_file_record_to_name_ext+0x88>
 1004e58:	e0fff717 	ldw	r3,-36(fp)
 1004e5c:	e0bff917 	ldw	r2,-28(fp)
 1004e60:	10c5883a 	add	r2,r2,r3
 1004e64:	10800003 	ldbu	r2,0(r2)
 1004e68:	10bff804 	addi	r2,r2,-32
 1004e6c:	10803fcc 	andi	r2,r2,255
 1004e70:	1080201c 	xori	r2,r2,128
 1004e74:	10bfe004 	addi	r2,r2,-128
 1004e78:	e0bfff15 	stw	r2,-4(fp)
 1004e7c:	00000806 	br	1004ea0 <match_file_record_to_name_ext+0xa8>
 1004e80:	e0fff717 	ldw	r3,-36(fp)
 1004e84:	e0bff917 	ldw	r2,-28(fp)
 1004e88:	10c5883a 	add	r2,r2,r3
 1004e8c:	10800003 	ldbu	r2,0(r2)
 1004e90:	10803fcc 	andi	r2,r2,255
 1004e94:	1080201c 	xori	r2,r2,128
 1004e98:	10bfe004 	addi	r2,r2,-128
 1004e9c:	e0bfff15 	stw	r2,-4(fp)
 1004ea0:	e0bff717 	ldw	r2,-36(fp)
 1004ea4:	1007883a 	mov	r3,r2
 1004ea8:	e0bffa17 	ldw	r2,-24(fp)
 1004eac:	1885883a 	add	r2,r3,r2
 1004eb0:	10800003 	ldbu	r2,0(r2)
 1004eb4:	10803fcc 	andi	r2,r2,255
 1004eb8:	1080201c 	xori	r2,r2,128
 1004ebc:	10bfe004 	addi	r2,r2,-128
 1004ec0:	10801850 	cmplti	r2,r2,97
 1004ec4:	1000151e 	bne	r2,zero,1004f1c <match_file_record_to_name_ext+0x124>
 1004ec8:	e0bff717 	ldw	r2,-36(fp)
 1004ecc:	1007883a 	mov	r3,r2
 1004ed0:	e0bffa17 	ldw	r2,-24(fp)
 1004ed4:	1885883a 	add	r2,r3,r2
 1004ed8:	10800003 	ldbu	r2,0(r2)
 1004edc:	10803fcc 	andi	r2,r2,255
 1004ee0:	1080201c 	xori	r2,r2,128
 1004ee4:	10bfe004 	addi	r2,r2,-128
 1004ee8:	10801ec8 	cmpgei	r2,r2,123
 1004eec:	10000b1e 	bne	r2,zero,1004f1c <match_file_record_to_name_ext+0x124>
 1004ef0:	e0bff717 	ldw	r2,-36(fp)
 1004ef4:	1007883a 	mov	r3,r2
 1004ef8:	e0bffa17 	ldw	r2,-24(fp)
 1004efc:	1885883a 	add	r2,r3,r2
 1004f00:	10800003 	ldbu	r2,0(r2)
 1004f04:	10bff804 	addi	r2,r2,-32
 1004f08:	10803fcc 	andi	r2,r2,255
 1004f0c:	1080201c 	xori	r2,r2,128
 1004f10:	10bfe004 	addi	r2,r2,-128
 1004f14:	e0bffe15 	stw	r2,-8(fp)
 1004f18:	00000906 	br	1004f40 <match_file_record_to_name_ext+0x148>
 1004f1c:	e0bff717 	ldw	r2,-36(fp)
 1004f20:	1007883a 	mov	r3,r2
 1004f24:	e0bffa17 	ldw	r2,-24(fp)
 1004f28:	1885883a 	add	r2,r3,r2
 1004f2c:	10800003 	ldbu	r2,0(r2)
 1004f30:	10803fcc 	andi	r2,r2,255
 1004f34:	1080201c 	xori	r2,r2,128
 1004f38:	10bfe004 	addi	r2,r2,-128
 1004f3c:	e0bffe15 	stw	r2,-8(fp)
 1004f40:	e0bfff17 	ldw	r2,-4(fp)
 1004f44:	e0fffe17 	ldw	r3,-8(fp)
 1004f48:	10c00226 	beq	r2,r3,1004f54 <match_file_record_to_name_ext+0x15c>
        {
            match = false;
 1004f4c:	e03ff815 	stw	zero,-32(fp)
			break;
 1004f50:	00000606 	br	1004f6c <match_file_record_to_name_ext+0x174>
/* See if the given name and extension match the file record. Return true if this is so, false otherwise. */
{
    bool match = true;
	int index;

    for (index = 0; index < 8; index++)
 1004f54:	e0bff717 	ldw	r2,-36(fp)
 1004f58:	10800044 	addi	r2,r2,1
 1004f5c:	e0bff715 	stw	r2,-36(fp)
 1004f60:	e0bff717 	ldw	r2,-36(fp)
 1004f64:	10800210 	cmplti	r2,r2,8
 1004f68:	103fad1e 	bne	r2,zero,1004e20 <match_file_record_to_name_ext+0x28>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 1004f6c:	e03ff715 	stw	zero,-36(fp)
 1004f70:	00005406 	br	10050c4 <match_file_record_to_name_ext+0x2cc>
    {
        if (CHAR_TO_UPPER(file_record->extension[index]) != CHAR_TO_UPPER(extension[index]))
 1004f74:	e0fff717 	ldw	r3,-36(fp)
 1004f78:	e0bff917 	ldw	r2,-28(fp)
 1004f7c:	1885883a 	add	r2,r3,r2
 1004f80:	10800204 	addi	r2,r2,8
 1004f84:	10800003 	ldbu	r2,0(r2)
 1004f88:	10803fcc 	andi	r2,r2,255
 1004f8c:	10801870 	cmpltui	r2,r2,97
 1004f90:	1000131e 	bne	r2,zero,1004fe0 <match_file_record_to_name_ext+0x1e8>
 1004f94:	e0fff717 	ldw	r3,-36(fp)
 1004f98:	e0bff917 	ldw	r2,-28(fp)
 1004f9c:	1885883a 	add	r2,r3,r2
 1004fa0:	10800204 	addi	r2,r2,8
 1004fa4:	10800003 	ldbu	r2,0(r2)
 1004fa8:	10803fcc 	andi	r2,r2,255
 1004fac:	10801ee8 	cmpgeui	r2,r2,123
 1004fb0:	10000b1e 	bne	r2,zero,1004fe0 <match_file_record_to_name_ext+0x1e8>
 1004fb4:	e0fff717 	ldw	r3,-36(fp)
 1004fb8:	e0bff917 	ldw	r2,-28(fp)
 1004fbc:	1885883a 	add	r2,r3,r2
 1004fc0:	10800204 	addi	r2,r2,8
 1004fc4:	10800003 	ldbu	r2,0(r2)
 1004fc8:	10bff804 	addi	r2,r2,-32
 1004fcc:	10803fcc 	andi	r2,r2,255
 1004fd0:	1080201c 	xori	r2,r2,128
 1004fd4:	10bfe004 	addi	r2,r2,-128
 1004fd8:	e0bffd15 	stw	r2,-12(fp)
 1004fdc:	00000906 	br	1005004 <match_file_record_to_name_ext+0x20c>
 1004fe0:	e0fff717 	ldw	r3,-36(fp)
 1004fe4:	e0bff917 	ldw	r2,-28(fp)
 1004fe8:	1885883a 	add	r2,r3,r2
 1004fec:	10800204 	addi	r2,r2,8
 1004ff0:	10800003 	ldbu	r2,0(r2)
 1004ff4:	10803fcc 	andi	r2,r2,255
 1004ff8:	1080201c 	xori	r2,r2,128
 1004ffc:	10bfe004 	addi	r2,r2,-128
 1005000:	e0bffd15 	stw	r2,-12(fp)
 1005004:	e0bff717 	ldw	r2,-36(fp)
 1005008:	1007883a 	mov	r3,r2
 100500c:	e0bffb17 	ldw	r2,-20(fp)
 1005010:	1885883a 	add	r2,r3,r2
 1005014:	10800003 	ldbu	r2,0(r2)
 1005018:	10803fcc 	andi	r2,r2,255
 100501c:	1080201c 	xori	r2,r2,128
 1005020:	10bfe004 	addi	r2,r2,-128
 1005024:	10801850 	cmplti	r2,r2,97
 1005028:	1000151e 	bne	r2,zero,1005080 <match_file_record_to_name_ext+0x288>
 100502c:	e0bff717 	ldw	r2,-36(fp)
 1005030:	1007883a 	mov	r3,r2
 1005034:	e0bffb17 	ldw	r2,-20(fp)
 1005038:	1885883a 	add	r2,r3,r2
 100503c:	10800003 	ldbu	r2,0(r2)
 1005040:	10803fcc 	andi	r2,r2,255
 1005044:	1080201c 	xori	r2,r2,128
 1005048:	10bfe004 	addi	r2,r2,-128
 100504c:	10801ec8 	cmpgei	r2,r2,123
 1005050:	10000b1e 	bne	r2,zero,1005080 <match_file_record_to_name_ext+0x288>
 1005054:	e0bff717 	ldw	r2,-36(fp)
 1005058:	1007883a 	mov	r3,r2
 100505c:	e0bffb17 	ldw	r2,-20(fp)
 1005060:	1885883a 	add	r2,r3,r2
 1005064:	10800003 	ldbu	r2,0(r2)
 1005068:	10bff804 	addi	r2,r2,-32
 100506c:	10803fcc 	andi	r2,r2,255
 1005070:	1080201c 	xori	r2,r2,128
 1005074:	10bfe004 	addi	r2,r2,-128
 1005078:	e0bffc15 	stw	r2,-16(fp)
 100507c:	00000906 	br	10050a4 <match_file_record_to_name_ext+0x2ac>
 1005080:	e0bff717 	ldw	r2,-36(fp)
 1005084:	1007883a 	mov	r3,r2
 1005088:	e0bffb17 	ldw	r2,-20(fp)
 100508c:	1885883a 	add	r2,r3,r2
 1005090:	10800003 	ldbu	r2,0(r2)
 1005094:	10803fcc 	andi	r2,r2,255
 1005098:	1080201c 	xori	r2,r2,128
 100509c:	10bfe004 	addi	r2,r2,-128
 10050a0:	e0bffc15 	stw	r2,-16(fp)
 10050a4:	e0bffd17 	ldw	r2,-12(fp)
 10050a8:	e0fffc17 	ldw	r3,-16(fp)
 10050ac:	10c00226 	beq	r2,r3,10050b8 <match_file_record_to_name_ext+0x2c0>
        {
            match = false;
 10050b0:	e03ff815 	stw	zero,-32(fp)
			break;
 10050b4:	00000606 	br	10050d0 <match_file_record_to_name_ext+0x2d8>
        {
            match = false;
			break;
        }
    }
    for (index = 0; index < 3; index++)
 10050b8:	e0bff717 	ldw	r2,-36(fp)
 10050bc:	10800044 	addi	r2,r2,1
 10050c0:	e0bff715 	stw	r2,-36(fp)
 10050c4:	e0bff717 	ldw	r2,-36(fp)
 10050c8:	108000d0 	cmplti	r2,r2,3
 10050cc:	103fa91e 	bne	r2,zero,1004f74 <match_file_record_to_name_ext+0x17c>
        {
            match = false;
			break;
        }
    }
	return match;
 10050d0:	e0bff817 	ldw	r2,-32(fp)
}
 10050d4:	e037883a 	mov	sp,fp
 10050d8:	df000017 	ldw	fp,0(sp)
 10050dc:	dec00104 	addi	sp,sp,4
 10050e0:	f800283a 	ret

010050e4 <get_home_directory_cluster_for_file>:


bool get_home_directory_cluster_for_file(char *file_name, int *home_directory_cluster, t_file_record *file_record)
// Scan the directories in given in the file name and find the root directory for the file.
{
 10050e4:	deffe604 	addi	sp,sp,-104
 10050e8:	dfc01915 	stw	ra,100(sp)
 10050ec:	df001815 	stw	fp,96(sp)
 10050f0:	df001804 	addi	fp,sp,96
 10050f4:	e13ffc15 	stw	r4,-16(fp)
 10050f8:	e17ffd15 	stw	r5,-12(fp)
 10050fc:	e1bffe15 	stw	r6,-8(fp)
    bool result = false;
 1005100:	e03ff715 	stw	zero,-36(fp)
    int home_dir_cluster = 0;
 1005104:	e03ff615 	stw	zero,-40(fp)
    int location, index;
    int start_location = 0;
 1005108:	e03ff315 	stw	zero,-52(fp)
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
 100510c:	e13ffc17 	ldw	r4,-16(fp)
 1005110:	1004d380 	call	1004d38 <get_dir_divider_location>
 1005114:	e0bff515 	stw	r2,-44(fp)
    while (location > 0)
 1005118:	00012206 	br	10055a4 <get_home_directory_cluster_for_file+0x4c0>
    {
        char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 100511c:	00800804 	movi	r2,32
 1005120:	e0bff805 	stb	r2,-32(fp)
 1005124:	00800804 	movi	r2,32
 1005128:	e0bff845 	stb	r2,-31(fp)
 100512c:	00800804 	movi	r2,32
 1005130:	e0bff885 	stb	r2,-30(fp)
 1005134:	00800804 	movi	r2,32
 1005138:	e0bff8c5 	stb	r2,-29(fp)
 100513c:	00800804 	movi	r2,32
 1005140:	e0bff905 	stb	r2,-28(fp)
 1005144:	00800804 	movi	r2,32
 1005148:	e0bff945 	stb	r2,-27(fp)
 100514c:	00800804 	movi	r2,32
 1005150:	e0bff985 	stb	r2,-26(fp)
 1005154:	00800804 	movi	r2,32
 1005158:	e0bff9c5 	stb	r2,-25(fp)
        char extension[3] = { ' ', ' ', ' ' };
 100515c:	00800804 	movi	r2,32
 1005160:	e0bffa05 	stb	r2,-24(fp)
 1005164:	00800804 	movi	r2,32
 1005168:	e0bffa45 	stb	r2,-23(fp)
 100516c:	00800804 	movi	r2,32
 1005170:	e0bffa85 	stb	r2,-22(fp)
        int ext_index = -1;
 1005174:	00bfffc4 	movi	r2,-1
 1005178:	e0bff215 	stw	r2,-56(fp)
        int new_cluster = home_dir_cluster;
 100517c:	e0bff617 	ldw	r2,-40(fp)
 1005180:	e0bff115 	stw	r2,-60(fp)
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 1005184:	e03ff415 	stw	zero,-48(fp)
 1005188:	00002e06 	br	1005244 <get_home_directory_cluster_for_file+0x160>
        {
            if (file_name[index+start_location] == '.')
 100518c:	e0fff417 	ldw	r3,-48(fp)
 1005190:	e0bff317 	ldw	r2,-52(fp)
 1005194:	1885883a 	add	r2,r3,r2
 1005198:	1007883a 	mov	r3,r2
 100519c:	e0bffc17 	ldw	r2,-16(fp)
 10051a0:	1885883a 	add	r2,r3,r2
 10051a4:	10800003 	ldbu	r2,0(r2)
 10051a8:	10803fcc 	andi	r2,r2,255
 10051ac:	1080201c 	xori	r2,r2,128
 10051b0:	10bfe004 	addi	r2,r2,-128
 10051b4:	10800b98 	cmpnei	r2,r2,46
 10051b8:	1000031e 	bne	r2,zero,10051c8 <get_home_directory_cluster_for_file+0xe4>
            {
                ext_index = index;
 10051bc:	e0bff417 	ldw	r2,-48(fp)
 10051c0:	e0bff215 	stw	r2,-56(fp)
 10051c4:	00001c06 	br	1005238 <get_home_directory_cluster_for_file+0x154>
            }
            else if (ext_index < 0)
 10051c8:	e0bff217 	ldw	r2,-56(fp)
 10051cc:	1004403a 	cmpge	r2,r2,zero
 10051d0:	10000c1e 	bne	r2,zero,1005204 <get_home_directory_cluster_for_file+0x120>
            {
                name[index] = file_name[index+start_location];
 10051d4:	e13ff417 	ldw	r4,-48(fp)
 10051d8:	e0fff417 	ldw	r3,-48(fp)
 10051dc:	e0bff317 	ldw	r2,-52(fp)
 10051e0:	1885883a 	add	r2,r3,r2
 10051e4:	1007883a 	mov	r3,r2
 10051e8:	e0bffc17 	ldw	r2,-16(fp)
 10051ec:	1885883a 	add	r2,r3,r2
 10051f0:	10c00003 	ldbu	r3,0(r2)
 10051f4:	e0bff804 	addi	r2,fp,-32
 10051f8:	1105883a 	add	r2,r2,r4
 10051fc:	10c00005 	stb	r3,0(r2)
 1005200:	00000d06 	br	1005238 <get_home_directory_cluster_for_file+0x154>
            }
            else
            {
                extension[index-ext_index] = file_name[index+start_location];
 1005204:	e0fff417 	ldw	r3,-48(fp)
 1005208:	e0bff217 	ldw	r2,-56(fp)
 100520c:	1889c83a 	sub	r4,r3,r2
 1005210:	e0fff417 	ldw	r3,-48(fp)
 1005214:	e0bff317 	ldw	r2,-52(fp)
 1005218:	1885883a 	add	r2,r3,r2
 100521c:	1007883a 	mov	r3,r2
 1005220:	e0bffc17 	ldw	r2,-16(fp)
 1005224:	1885883a 	add	r2,r3,r2
 1005228:	10c00003 	ldbu	r3,0(r2)
 100522c:	e0bffa04 	addi	r2,fp,-24
 1005230:	1105883a 	add	r2,r2,r4
 1005234:	10c00005 	stb	r3,0(r2)
        char extension[3] = { ' ', ' ', ' ' };
        int ext_index = -1;
        int new_cluster = home_dir_cluster;
        
        // Get the name of the directory in name/extension format.
        for (index = 0; index < location; index++)
 1005238:	e0bff417 	ldw	r2,-48(fp)
 100523c:	10800044 	addi	r2,r2,1
 1005240:	e0bff415 	stw	r2,-48(fp)
 1005244:	e0fff417 	ldw	r3,-48(fp)
 1005248:	e0bff517 	ldw	r2,-44(fp)
 100524c:	18bfcf16 	blt	r3,r2,100518c <get_home_directory_cluster_for_file+0xa8>
            {
                extension[index-ext_index] = file_name[index+start_location];
            }
        }
        
        if (home_dir_cluster == 0)
 1005250:	e0bff617 	ldw	r2,-40(fp)
 1005254:	1004c03a 	cmpne	r2,r2,zero
 1005258:	1000551e 	bne	r2,zero,10053b0 <get_home_directory_cluster_for_file+0x2cc>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 100525c:	00804074 	movhi	r2,257
 1005260:	10b69304 	addi	r2,r2,-9652
 1005264:	1080050b 	ldhu	r2,20(r2)
 1005268:	10bfffcc 	andi	r2,r2,65535
 100526c:	1006917a 	slli	r3,r2,5
 1005270:	00804074 	movhi	r2,257
 1005274:	10b69304 	addi	r2,r2,-9652
 1005278:	1080030b 	ldhu	r2,12(r2)
 100527c:	10bfffcc 	andi	r2,r2,65535
 1005280:	1885283a 	div	r2,r3,r2
 1005284:	e0bff015 	stw	r2,-64(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 1005288:	e03fef15 	stw	zero,-68(fp)
 100528c:	00003806 	br	1005370 <get_home_directory_cluster_for_file+0x28c>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
 1005290:	00804074 	movhi	r2,257
 1005294:	10b69304 	addi	r2,r2,-9652
 1005298:	10c01317 	ldw	r3,76(r2)
 100529c:	e0bfef17 	ldw	r2,-68(fp)
 10052a0:	1885883a 	add	r2,r3,r2
 10052a4:	1009883a 	mov	r4,r2
 10052a8:	d166d017 	ldw	r5,-25792(gp)
 10052ac:	100391c0 	call	100391c <Read_Sector_Data>
 10052b0:	1005003a 	cmpeq	r2,r2,zero
 10052b4:	1000311e 	bne	r2,zero,100537c <get_home_directory_cluster_for_file+0x298>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 10052b8:	e03fee15 	stw	zero,-72(fp)
 10052bc:	00002306 	br	100534c <get_home_directory_cluster_for_file+0x268>
                    {
                       
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 10052c0:	e0bfee17 	ldw	r2,-72(fp)
 10052c4:	1008917a 	slli	r4,r2,5
 10052c8:	e1ffef17 	ldw	r7,-68(fp)
 10052cc:	e17ffe17 	ldw	r5,-8(fp)
 10052d0:	000d883a 	mov	r6,zero
 10052d4:	1003d640 	call	1003d64 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 10052d8:	e0bffe17 	ldw	r2,-8(fp)
 10052dc:	10800003 	ldbu	r2,0(r2)
 10052e0:	10803fcc 	andi	r2,r2,255
 10052e4:	10803960 	cmpeqi	r2,r2,229
 10052e8:	1000151e 	bne	r2,zero,1005340 <get_home_directory_cluster_for_file+0x25c>
 10052ec:	e0bffe17 	ldw	r2,-8(fp)
 10052f0:	10800003 	ldbu	r2,0(r2)
 10052f4:	10803fcc 	andi	r2,r2,255
 10052f8:	1005003a 	cmpeq	r2,r2,zero
 10052fc:	1000101e 	bne	r2,zero,1005340 <get_home_directory_cluster_for_file+0x25c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 1005300:	e17ff804 	addi	r5,fp,-32
 1005304:	e1bffa04 	addi	r6,fp,-24
 1005308:	e13ffe17 	ldw	r4,-8(fp)
 100530c:	1004df80 	call	1004df8 <match_file_record_to_name_ext>
 1005310:	e0bfed15 	stw	r2,-76(fp)
                            if (match)
 1005314:	e0bfed17 	ldw	r2,-76(fp)
 1005318:	1005003a 	cmpeq	r2,r2,zero
 100531c:	1000081e 	bne	r2,zero,1005340 <get_home_directory_cluster_for_file+0x25c>
                            {
                                new_cluster = file_record->start_cluster_index;
 1005320:	e0bffe17 	ldw	r2,-8(fp)
 1005324:	1080058b 	ldhu	r2,22(r2)
 1005328:	10bfffcc 	andi	r2,r2,65535
 100532c:	e0bff115 	stw	r2,-60(fp)
                                file_record->file_record_cluster = 1; // Home directory is a subdirectory in the root directory.
 1005330:	e0fffe17 	ldw	r3,-8(fp)
 1005334:	00800044 	movi	r2,1
 1005338:	18800a15 	stw	r2,40(r3)
                                break;
 100533c:	00000606 	br	1005358 <get_home_directory_cluster_for_file+0x274>
            {
                if (Read_Sector_Data(sector_index+boot_sector_data.root_directory_sector_offset, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 1005340:	e0bfee17 	ldw	r2,-72(fp)
 1005344:	10800044 	addi	r2,r2,1
 1005348:	e0bfee15 	stw	r2,-72(fp)
 100534c:	e0bfee17 	ldw	r2,-72(fp)
 1005350:	10800410 	cmplti	r2,r2,16
 1005354:	103fda1e 	bne	r2,zero,10052c0 <get_home_directory_cluster_for_file+0x1dc>
                }
                else
                {
                    break;
                }
                if (new_cluster != home_dir_cluster)
 1005358:	e0fff117 	ldw	r3,-60(fp)
 100535c:	e0bff617 	ldw	r2,-40(fp)
 1005360:	1880061e 	bne	r3,r2,100537c <get_home_directory_cluster_for_file+0x298>
        {
            /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
            int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
            int sector_index;
            
            for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 1005364:	e0bfef17 	ldw	r2,-68(fp)
 1005368:	10800044 	addi	r2,r2,1
 100536c:	e0bfef15 	stw	r2,-68(fp)
 1005370:	e0ffef17 	ldw	r3,-68(fp)
 1005374:	e0bff017 	ldw	r2,-64(fp)
 1005378:	18bfc516 	blt	r3,r2,1005290 <get_home_directory_cluster_for_file+0x1ac>
                if (new_cluster != home_dir_cluster)
                {
                    break;
                }
            }
            if (new_cluster != home_dir_cluster)
 100537c:	e0fff117 	ldw	r3,-60(fp)
 1005380:	e0bff617 	ldw	r2,-40(fp)
 1005384:	18800826 	beq	r3,r2,10053a8 <get_home_directory_cluster_for_file+0x2c4>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 1005388:	e0bff117 	ldw	r2,-60(fp)
 100538c:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
 1005390:	e0fff317 	ldw	r3,-52(fp)
 1005394:	e0bff517 	ldw	r2,-44(fp)
 1005398:	1885883a 	add	r2,r3,r2
 100539c:	10800044 	addi	r2,r2,1
 10053a0:	e0bff315 	stw	r2,-52(fp)
 10053a4:	00007406 	br	1005578 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 10053a8:	e03fff15 	stw	zero,-4(fp)
 10053ac:	00008c06 	br	10055e0 <get_home_directory_cluster_for_file+0x4fc>
            }
        } else {
            // This is a subdirectory that can have any number of elements. So scan through it as though it was a file
            // and see if you can find the directory of interest.
            int cluster = home_dir_cluster;
 10053b0:	e0bff617 	ldw	r2,-40(fp)
 10053b4:	e0bfec15 	stw	r2,-80(fp)
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 10053b8:	e0bfec17 	ldw	r2,-80(fp)
 10053bc:	10ffff84 	addi	r3,r2,-2
 10053c0:	00804074 	movhi	r2,257
 10053c4:	10b69304 	addi	r2,r2,-9652
 10053c8:	10800383 	ldbu	r2,14(r2)
 10053cc:	10803fcc 	andi	r2,r2,255
 10053d0:	1885383a 	mul	r2,r3,r2
 10053d4:	1007883a 	mov	r3,r2
 10053d8:	00804074 	movhi	r2,257
 10053dc:	10b69304 	addi	r2,r2,-9652
 10053e0:	10801417 	ldw	r2,80(r2)
 10053e4:	1885883a 	add	r2,r3,r2
 10053e8:	e0bfeb15 	stw	r2,-84(fp)
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 10053ec:	e03fea15 	stw	zero,-88(fp)
 10053f0:	00003206 	br	10054bc <get_home_directory_cluster_for_file+0x3d8>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 10053f4:	e0ffea17 	ldw	r3,-88(fp)
 10053f8:	e0bfeb17 	ldw	r2,-84(fp)
 10053fc:	1889883a 	add	r4,r3,r2
 1005400:	d166d017 	ldw	r5,-25792(gp)
 1005404:	100391c0 	call	100391c <Read_Sector_Data>
 1005408:	1005003a 	cmpeq	r2,r2,zero
 100540c:	1000311e 	bne	r2,zero,10054d4 <get_home_directory_cluster_for_file+0x3f0>
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 1005410:	e03fe915 	stw	zero,-92(fp)
 1005414:	00002006 	br	1005498 <get_home_directory_cluster_for_file+0x3b4>
                        {                         
                            // Read file record.
                            Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 1005418:	e0bfe917 	ldw	r2,-92(fp)
 100541c:	1008917a 	slli	r4,r2,5
 1005420:	e1bfec17 	ldw	r6,-80(fp)
 1005424:	e1ffea17 	ldw	r7,-88(fp)
 1005428:	e17ffe17 	ldw	r5,-8(fp)
 100542c:	1003d640 	call	1003d64 <Read_File_Record_At_Offset>
                            if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 1005430:	e0bffe17 	ldw	r2,-8(fp)
 1005434:	10800003 	ldbu	r2,0(r2)
 1005438:	10803fcc 	andi	r2,r2,255
 100543c:	10803960 	cmpeqi	r2,r2,229
 1005440:	1000121e 	bne	r2,zero,100548c <get_home_directory_cluster_for_file+0x3a8>
 1005444:	e0bffe17 	ldw	r2,-8(fp)
 1005448:	10800003 	ldbu	r2,0(r2)
 100544c:	10803fcc 	andi	r2,r2,255
 1005450:	1005003a 	cmpeq	r2,r2,zero
 1005454:	10000d1e 	bne	r2,zero,100548c <get_home_directory_cluster_for_file+0x3a8>
                            {
								bool match = match_file_record_to_name_ext(file_record, name, extension);
 1005458:	e17ff804 	addi	r5,fp,-32
 100545c:	e1bffa04 	addi	r6,fp,-24
 1005460:	e13ffe17 	ldw	r4,-8(fp)
 1005464:	1004df80 	call	1004df8 <match_file_record_to_name_ext>
 1005468:	e0bfe815 	stw	r2,-96(fp)
                                if (match)
 100546c:	e0bfe817 	ldw	r2,-96(fp)
 1005470:	1005003a 	cmpeq	r2,r2,zero
 1005474:	1000051e 	bne	r2,zero,100548c <get_home_directory_cluster_for_file+0x3a8>
                                {
                                    new_cluster = file_record->start_cluster_index;                                   
 1005478:	e0bffe17 	ldw	r2,-8(fp)
 100547c:	1080058b 	ldhu	r2,22(r2)
 1005480:	10bfffcc 	andi	r2,r2,65535
 1005484:	e0bff115 	stw	r2,-60(fp)
                                    break;
 1005488:	00000606 	br	10054a4 <get_home_directory_cluster_for_file+0x3c0>
                {
                    if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                    {
                        int file_counter;
                        
                        for (file_counter = 0; file_counter < 16; file_counter++)
 100548c:	e0bfe917 	ldw	r2,-92(fp)
 1005490:	10800044 	addi	r2,r2,1
 1005494:	e0bfe915 	stw	r2,-92(fp)
 1005498:	e0bfe917 	ldw	r2,-92(fp)
 100549c:	10800410 	cmplti	r2,r2,16
 10054a0:	103fdd1e 	bne	r2,zero,1005418 <get_home_directory_cluster_for_file+0x334>
                    }
                    else
                    {
                        break;
                    }
                    if (new_cluster != home_dir_cluster)
 10054a4:	e0fff117 	ldw	r3,-60(fp)
 10054a8:	e0bff617 	ldw	r2,-40(fp)
 10054ac:	1880091e 	bne	r3,r2,10054d4 <get_home_directory_cluster_for_file+0x3f0>
            
            do {
                int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
                int sector_index;
                
                for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 10054b0:	e0bfea17 	ldw	r2,-88(fp)
 10054b4:	10800044 	addi	r2,r2,1
 10054b8:	e0bfea15 	stw	r2,-88(fp)
 10054bc:	00804074 	movhi	r2,257
 10054c0:	10b69304 	addi	r2,r2,-9652
 10054c4:	10800383 	ldbu	r2,14(r2)
 10054c8:	10c03fcc 	andi	r3,r2,255
 10054cc:	e0bfea17 	ldw	r2,-88(fp)
 10054d0:	10ffc816 	blt	r2,r3,10053f4 <get_home_directory_cluster_for_file+0x310>
                        break;
                    }
                }
                // If this is the end of the cluster and the directory has not been found, then see if there is another cluster
                // that holds data for the current directory.
                if (new_cluster == home_dir_cluster)
 10054d4:	e0fff117 	ldw	r3,-60(fp)
 10054d8:	e0bff617 	ldw	r2,-40(fp)
 10054dc:	1880131e 	bne	r3,r2,100552c <get_home_directory_cluster_for_file+0x448>
                {
					unsigned short int next_cluster;

					if (get_cluster_flag(new_cluster, &next_cluster))
 10054e0:	e13ff117 	ldw	r4,-60(fp)
 10054e4:	e17ffb04 	addi	r5,fp,-20
 10054e8:	1003a180 	call	1003a18 <get_cluster_flag>
 10054ec:	1005003a 	cmpeq	r2,r2,zero
 10054f0:	10000c1e 	bne	r2,zero,1005524 <get_home_directory_cluster_for_file+0x440>
					{
						// The directory needs to be expanded to store more files.
						if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 10054f4:	e0bffb0b 	ldhu	r2,-20(fp)
 10054f8:	10bfffcc 	andi	r2,r2,65535
 10054fc:	10fffe0c 	andi	r3,r2,65528
 1005500:	00bffe14 	movui	r2,65528
 1005504:	1880021e 	bne	r3,r2,1005510 <get_home_directory_cluster_for_file+0x42c>
						{
							return false;
 1005508:	e03fff15 	stw	zero,-4(fp)
 100550c:	00003406 	br	10055e0 <get_home_directory_cluster_for_file+0x4fc>
						}
						new_cluster = (next_cluster & 0x0000fff8);
 1005510:	e0bffb0b 	ldhu	r2,-20(fp)
 1005514:	10bfffcc 	andi	r2,r2,65535
 1005518:	10bffe0c 	andi	r2,r2,65528
 100551c:	e0bff115 	stw	r2,-60(fp)
 1005520:	00000206 	br	100552c <get_home_directory_cluster_for_file+0x448>
					}
					else
					{
						// Directory path is invalid.                 
						return false;
 1005524:	e03fff15 	stw	zero,-4(fp)
 1005528:	00002d06 	br	10055e0 <get_home_directory_cluster_for_file+0x4fc>
					}
                }              
            } while ((cluster < 0x0000fff8) && (new_cluster == home_dir_cluster));
 100552c:	e0ffec17 	ldw	r3,-80(fp)
 1005530:	00bffdd4 	movui	r2,65527
 1005534:	10c00316 	blt	r2,r3,1005544 <get_home_directory_cluster_for_file+0x460>
 1005538:	e0fff117 	ldw	r3,-60(fp)
 100553c:	e0bff617 	ldw	r2,-40(fp)
 1005540:	18bf9d26 	beq	r3,r2,10053b8 <get_home_directory_cluster_for_file+0x2d4>
            if (new_cluster != home_dir_cluster)
 1005544:	e0fff117 	ldw	r3,-60(fp)
 1005548:	e0bff617 	ldw	r2,-40(fp)
 100554c:	18800826 	beq	r3,r2,1005570 <get_home_directory_cluster_for_file+0x48c>
            {
                // A valid directory is found, so go to it.
                home_dir_cluster = new_cluster;
 1005550:	e0bff117 	ldw	r2,-60(fp)
 1005554:	e0bff615 	stw	r2,-40(fp)
                start_location = start_location+location+1;
 1005558:	e0fff317 	ldw	r3,-52(fp)
 100555c:	e0bff517 	ldw	r2,-44(fp)
 1005560:	1885883a 	add	r2,r3,r2
 1005564:	10800044 	addi	r2,r2,1
 1005568:	e0bff315 	stw	r2,-52(fp)
 100556c:	00000206 	br	1005578 <get_home_directory_cluster_for_file+0x494>
            }
            else
            {
                // Directory path is invalid. 
                return false;
 1005570:	e03fff15 	stw	zero,-4(fp)
 1005574:	00001a06 	br	10055e0 <get_home_directory_cluster_for_file+0x4fc>
            }            
        }
        location = get_dir_divider_location(&(file_name[start_location]));
 1005578:	e0bff317 	ldw	r2,-52(fp)
 100557c:	1007883a 	mov	r3,r2
 1005580:	e0bffc17 	ldw	r2,-16(fp)
 1005584:	1889883a 	add	r4,r3,r2
 1005588:	1004d380 	call	1004d38 <get_dir_divider_location>
 100558c:	e0bff515 	stw	r2,-44(fp)
        if (location < 0)
 1005590:	e0bff517 	ldw	r2,-44(fp)
 1005594:	1004403a 	cmpge	r2,r2,zero
 1005598:	1000021e 	bne	r2,zero,10055a4 <get_home_directory_cluster_for_file+0x4c0>
        {
            // Directory has been located.
            result = true;
 100559c:	00800044 	movi	r2,1
 10055a0:	e0bff715 	stw	r2,-36(fp)
    int location, index;
    int start_location = 0;
    
    /* Get Next Directory. */
    location = get_dir_divider_location( file_name );
    while (location > 0)
 10055a4:	e0bff517 	ldw	r2,-44(fp)
 10055a8:	10800048 	cmpgei	r2,r2,1
 10055ac:	103edb1e 	bne	r2,zero,100511c <get_home_directory_cluster_for_file+0x38>
            // Directory has been located.
            result = true;
        }
    }
    
    *home_directory_cluster = home_dir_cluster;
 10055b0:	e0fffd17 	ldw	r3,-12(fp)
 10055b4:	e0bff617 	ldw	r2,-40(fp)
 10055b8:	18800015 	stw	r2,0(r3)
    if (home_dir_cluster == 0)
 10055bc:	e0bff617 	ldw	r2,-40(fp)
 10055c0:	1004c03a 	cmpne	r2,r2,zero
 10055c4:	1000041e 	bne	r2,zero,10055d8 <get_home_directory_cluster_for_file+0x4f4>
    {
        file_record->file_record_cluster = 0; // Home directory is the root directory.
 10055c8:	e0bffe17 	ldw	r2,-8(fp)
 10055cc:	10000a15 	stw	zero,40(r2)
		result = true;
 10055d0:	00800044 	movi	r2,1
 10055d4:	e0bff715 	stw	r2,-36(fp)
    }
    return result;
 10055d8:	e0bff717 	ldw	r2,-36(fp)
 10055dc:	e0bfff15 	stw	r2,-4(fp)
 10055e0:	e0bfff17 	ldw	r2,-4(fp)
}
 10055e4:	e037883a 	mov	sp,fp
 10055e8:	dfc00117 	ldw	ra,4(sp)
 10055ec:	df000017 	ldw	fp,0(sp)
 10055f0:	dec00204 	addi	sp,sp,8
 10055f4:	f800283a 	ret

010055f8 <find_file_in_directory>:


bool find_file_in_directory(int directory_start_cluster, char *file_name, t_file_record *file_record)
// Given a cluster and a file name, check if the file already exists. Return the file record if the file is found.
{
 10055f8:	deffe704 	addi	sp,sp,-100
 10055fc:	dfc01815 	stw	ra,96(sp)
 1005600:	df001715 	stw	fp,92(sp)
 1005604:	df001704 	addi	fp,sp,92
 1005608:	e13ffc15 	stw	r4,-16(fp)
 100560c:	e17ffd15 	stw	r5,-12(fp)
 1005610:	e1bffe15 	stw	r6,-8(fp)
    int location = get_dir_divider_location( file_name );
 1005614:	e13ffd17 	ldw	r4,-12(fp)
 1005618:	1004d380 	call	1004d38 <get_dir_divider_location>
 100561c:	e0bff715 	stw	r2,-36(fp)
    int last_dir_separator = 0;
 1005620:	e03ff615 	stw	zero,-40(fp)
    char name[8] = { ' ', ' ', ' ', ' ', ' ', ' ', ' ', ' ' };
 1005624:	00800804 	movi	r2,32
 1005628:	e0bff805 	stb	r2,-32(fp)
 100562c:	00800804 	movi	r2,32
 1005630:	e0bff845 	stb	r2,-31(fp)
 1005634:	00800804 	movi	r2,32
 1005638:	e0bff885 	stb	r2,-30(fp)
 100563c:	00800804 	movi	r2,32
 1005640:	e0bff8c5 	stb	r2,-29(fp)
 1005644:	00800804 	movi	r2,32
 1005648:	e0bff905 	stb	r2,-28(fp)
 100564c:	00800804 	movi	r2,32
 1005650:	e0bff945 	stb	r2,-27(fp)
 1005654:	00800804 	movi	r2,32
 1005658:	e0bff985 	stb	r2,-26(fp)
 100565c:	00800804 	movi	r2,32
 1005660:	e0bff9c5 	stb	r2,-25(fp)
    char extension[3] = { ' ', ' ', ' ' };
 1005664:	00800804 	movi	r2,32
 1005668:	e0bffa05 	stb	r2,-24(fp)
 100566c:	00800804 	movi	r2,32
 1005670:	e0bffa45 	stb	r2,-23(fp)
 1005674:	00800804 	movi	r2,32
 1005678:	e0bffa85 	stb	r2,-22(fp)
    int ext_index = -1;
 100567c:	00bfffc4 	movi	r2,-1
 1005680:	e0bff515 	stw	r2,-44(fp)
    int cluster = directory_start_cluster;
 1005684:	e0bffc17 	ldw	r2,-16(fp)
 1005688:	e0bff415 	stw	r2,-48(fp)
    int index;
	int length = strlen(file_name);
 100568c:	e13ffd17 	ldw	r4,-12(fp)
 1005690:	10003d40 	call	10003d4 <strlen>
 1005694:	e0bff215 	stw	r2,-56(fp)
    bool result = false;
 1005698:	e03ff115 	stw	zero,-60(fp)
    
    // Skip through all directory separators.
    while (location > 0)
 100569c:	00000b06 	br	10056cc <find_file_in_directory+0xd4>
    {
        last_dir_separator = last_dir_separator+location+1;
 10056a0:	e0fff617 	ldw	r3,-40(fp)
 10056a4:	e0bff717 	ldw	r2,-36(fp)
 10056a8:	1885883a 	add	r2,r3,r2
 10056ac:	10800044 	addi	r2,r2,1
 10056b0:	e0bff615 	stw	r2,-40(fp)
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
 10056b4:	e0bff617 	ldw	r2,-40(fp)
 10056b8:	1007883a 	mov	r3,r2
 10056bc:	e0bffd17 	ldw	r2,-12(fp)
 10056c0:	1889883a 	add	r4,r3,r2
 10056c4:	1004d380 	call	1004d38 <get_dir_divider_location>
 10056c8:	e0bff715 	stw	r2,-36(fp)
    int index;
	int length = strlen(file_name);
    bool result = false;
    
    // Skip through all directory separators.
    while (location > 0)
 10056cc:	e0bff717 	ldw	r2,-36(fp)
 10056d0:	10800048 	cmpgei	r2,r2,1
 10056d4:	103ff21e 	bne	r2,zero,10056a0 <find_file_in_directory+0xa8>
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 10056d8:	e0bff617 	ldw	r2,-40(fp)
 10056dc:	e0bff315 	stw	r2,-52(fp)
 10056e0:	00002b06 	br	1005790 <find_file_in_directory+0x198>
    {
        if (file_name[index] == '.')
 10056e4:	e0bff317 	ldw	r2,-52(fp)
 10056e8:	1007883a 	mov	r3,r2
 10056ec:	e0bffd17 	ldw	r2,-12(fp)
 10056f0:	1885883a 	add	r2,r3,r2
 10056f4:	10800003 	ldbu	r2,0(r2)
 10056f8:	10803fcc 	andi	r2,r2,255
 10056fc:	1080201c 	xori	r2,r2,128
 1005700:	10bfe004 	addi	r2,r2,-128
 1005704:	10800b98 	cmpnei	r2,r2,46
 1005708:	1000031e 	bne	r2,zero,1005718 <find_file_in_directory+0x120>
        {
            ext_index = index;
 100570c:	e0bff317 	ldw	r2,-52(fp)
 1005710:	e0bff515 	stw	r2,-44(fp)
 1005714:	00001b06 	br	1005784 <find_file_in_directory+0x18c>
        }
        else if (ext_index < 0)
 1005718:	e0bff517 	ldw	r2,-44(fp)
 100571c:	1004403a 	cmpge	r2,r2,zero
 1005720:	10000c1e 	bne	r2,zero,1005754 <find_file_in_directory+0x15c>
        {
            name[index-last_dir_separator] = file_name[index];
 1005724:	e0fff317 	ldw	r3,-52(fp)
 1005728:	e0bff617 	ldw	r2,-40(fp)
 100572c:	1889c83a 	sub	r4,r3,r2
 1005730:	e0bff317 	ldw	r2,-52(fp)
 1005734:	1007883a 	mov	r3,r2
 1005738:	e0bffd17 	ldw	r2,-12(fp)
 100573c:	1885883a 	add	r2,r3,r2
 1005740:	10c00003 	ldbu	r3,0(r2)
 1005744:	e0bff804 	addi	r2,fp,-32
 1005748:	1105883a 	add	r2,r2,r4
 100574c:	10c00005 	stb	r3,0(r2)
 1005750:	00000c06 	br	1005784 <find_file_in_directory+0x18c>
        }
        else
        {
            extension[index-ext_index-1] = file_name[index];
 1005754:	e0fff317 	ldw	r3,-52(fp)
 1005758:	e0bff517 	ldw	r2,-44(fp)
 100575c:	1885c83a 	sub	r2,r3,r2
 1005760:	113fffc4 	addi	r4,r2,-1
 1005764:	e0bff317 	ldw	r2,-52(fp)
 1005768:	1007883a 	mov	r3,r2
 100576c:	e0bffd17 	ldw	r2,-12(fp)
 1005770:	1885883a 	add	r2,r3,r2
 1005774:	10c00003 	ldbu	r3,0(r2)
 1005778:	e0bffa04 	addi	r2,fp,-24
 100577c:	1105883a 	add	r2,r2,r4
 1005780:	10c00005 	stb	r3,0(r2)
        last_dir_separator = last_dir_separator+location+1;
        location = get_dir_divider_location( &(file_name[last_dir_separator]) );
    }
        
    // Get the name of the file in name/extension format.
    for (index = last_dir_separator; index < length; index++)
 1005784:	e0bff317 	ldw	r2,-52(fp)
 1005788:	10800044 	addi	r2,r2,1
 100578c:	e0bff315 	stw	r2,-52(fp)
 1005790:	e0fff317 	ldw	r3,-52(fp)
 1005794:	e0bff217 	ldw	r2,-56(fp)
 1005798:	18bfd216 	blt	r3,r2,10056e4 <find_file_in_directory+0xec>
            extension[index-ext_index-1] = file_name[index];
        }
    }

    // Look for the file.
    if (directory_start_cluster == 0)
 100579c:	e0bffc17 	ldw	r2,-16(fp)
 10057a0:	1004c03a 	cmpne	r2,r2,zero
 10057a4:	1000441e 	bne	r2,zero,10058b8 <find_file_in_directory+0x2c0>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 10057a8:	00804074 	movhi	r2,257
 10057ac:	10b69304 	addi	r2,r2,-9652
 10057b0:	1080050b 	ldhu	r2,20(r2)
 10057b4:	10bfffcc 	andi	r2,r2,65535
 10057b8:	1006917a 	slli	r3,r2,5
 10057bc:	00804074 	movhi	r2,257
 10057c0:	10b69304 	addi	r2,r2,-9652
 10057c4:	1080030b 	ldhu	r2,12(r2)
 10057c8:	10bfffcc 	andi	r2,r2,65535
 10057cc:	1885283a 	div	r2,r3,r2
 10057d0:	e0bff015 	stw	r2,-64(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 10057d4:	e03fef15 	stw	zero,-68(fp)
 10057d8:	00003306 	br	10058a8 <find_file_in_directory+0x2b0>
        {
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 10057dc:	00804074 	movhi	r2,257
 10057e0:	10b69304 	addi	r2,r2,-9652
 10057e4:	10c01317 	ldw	r3,76(r2)
 10057e8:	e0bfef17 	ldw	r2,-68(fp)
 10057ec:	1885883a 	add	r2,r3,r2
 10057f0:	1009883a 	mov	r4,r2
 10057f4:	d166d017 	ldw	r5,-25792(gp)
 10057f8:	100391c0 	call	100391c <Read_Sector_Data>
 10057fc:	1005003a 	cmpeq	r2,r2,zero
 1005800:	10008e1e 	bne	r2,zero,1005a3c <find_file_in_directory+0x444>
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 1005804:	e03fee15 	stw	zero,-72(fp)
 1005808:	00001e06 	br	1005884 <find_file_in_directory+0x28c>
                {
                    // Read file record.
                    Read_File_Record_At_Offset(file_counter*32, file_record, 0, sector_index);
 100580c:	e0bfee17 	ldw	r2,-72(fp)
 1005810:	1008917a 	slli	r4,r2,5
 1005814:	e1ffef17 	ldw	r7,-68(fp)
 1005818:	e17ffe17 	ldw	r5,-8(fp)
 100581c:	000d883a 	mov	r6,zero
 1005820:	1003d640 	call	1003d64 <Read_File_Record_At_Offset>
                    if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 1005824:	e0bffe17 	ldw	r2,-8(fp)
 1005828:	10800003 	ldbu	r2,0(r2)
 100582c:	10803fcc 	andi	r2,r2,255
 1005830:	10803960 	cmpeqi	r2,r2,229
 1005834:	1000101e 	bne	r2,zero,1005878 <find_file_in_directory+0x280>
 1005838:	e0bffe17 	ldw	r2,-8(fp)
 100583c:	10800003 	ldbu	r2,0(r2)
 1005840:	10803fcc 	andi	r2,r2,255
 1005844:	1005003a 	cmpeq	r2,r2,zero
 1005848:	10000b1e 	bne	r2,zero,1005878 <find_file_in_directory+0x280>
                    {
                        bool match = match_file_record_to_name_ext(file_record, name, extension);
 100584c:	e17ff804 	addi	r5,fp,-32
 1005850:	e1bffa04 	addi	r6,fp,-24
 1005854:	e13ffe17 	ldw	r4,-8(fp)
 1005858:	1004df80 	call	1004df8 <match_file_record_to_name_ext>
 100585c:	e0bfed15 	stw	r2,-76(fp)

                        if (match)
 1005860:	e0bfed17 	ldw	r2,-76(fp)
 1005864:	1005003a 	cmpeq	r2,r2,zero
 1005868:	1000031e 	bne	r2,zero,1005878 <find_file_in_directory+0x280>
                        {
                            result = true;
 100586c:	00800044 	movi	r2,1
 1005870:	e0bff115 	stw	r2,-60(fp)
                            break;
 1005874:	00000606 	br	1005890 <find_file_in_directory+0x298>
            if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                    fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 1005878:	e0bfee17 	ldw	r2,-72(fp)
 100587c:	10800044 	addi	r2,r2,1
 1005880:	e0bfee15 	stw	r2,-72(fp)
 1005884:	e0bfee17 	ldw	r2,-72(fp)
 1005888:	10800410 	cmplti	r2,r2,16
 100588c:	103fdf1e 	bne	r2,zero,100580c <find_file_in_directory+0x214>
            }
            else
            {
                break;
            }
            if (result)
 1005890:	e0bff117 	ldw	r2,-60(fp)
 1005894:	1004c03a 	cmpne	r2,r2,zero
 1005898:	1000681e 	bne	r2,zero,1005a3c <find_file_in_directory+0x444>
    {
        /* We are in the root directory. Scan the directory (of predefined size) and see if you can find the specified file. */
        int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
        int sector_index;
        
        for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 100589c:	e0bfef17 	ldw	r2,-68(fp)
 10058a0:	10800044 	addi	r2,r2,1
 10058a4:	e0bfef15 	stw	r2,-68(fp)
 10058a8:	e0ffef17 	ldw	r3,-68(fp)
 10058ac:	e0bff017 	ldw	r2,-64(fp)
 10058b0:	18bfca16 	blt	r3,r2,10057dc <find_file_in_directory+0x1e4>
 10058b4:	00006106 	br	1005a3c <find_file_in_directory+0x444>
        }
    }
    else
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 10058b8:	e0bff417 	ldw	r2,-48(fp)
 10058bc:	10ffff84 	addi	r3,r2,-2
 10058c0:	00804074 	movhi	r2,257
 10058c4:	10b69304 	addi	r2,r2,-9652
 10058c8:	10800383 	ldbu	r2,14(r2)
 10058cc:	10803fcc 	andi	r2,r2,255
 10058d0:	1885383a 	mul	r2,r3,r2
 10058d4:	1007883a 	mov	r3,r2
 10058d8:	00804074 	movhi	r2,257
 10058dc:	10b69304 	addi	r2,r2,-9652
 10058e0:	10801417 	ldw	r2,80(r2)
 10058e4:	1885883a 	add	r2,r3,r2
 10058e8:	e0bfec15 	stw	r2,-80(fp)
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 10058ec:	e03feb15 	stw	zero,-84(fp)
 10058f0:	00003006 	br	10059b4 <find_file_in_directory+0x3bc>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 10058f4:	e0ffeb17 	ldw	r3,-84(fp)
 10058f8:	e0bfec17 	ldw	r2,-80(fp)
 10058fc:	1889883a 	add	r4,r3,r2
 1005900:	d166d017 	ldw	r5,-25792(gp)
 1005904:	100391c0 	call	100391c <Read_Sector_Data>
 1005908:	1005003a 	cmpeq	r2,r2,zero
 100590c:	10002f1e 	bne	r2,zero,10059cc <find_file_in_directory+0x3d4>
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 1005910:	e03fea15 	stw	zero,-88(fp)
 1005914:	00001e06 	br	1005990 <find_file_in_directory+0x398>
                    {
                        // Read file record.
                        Read_File_Record_At_Offset(file_counter*32, file_record, cluster, sector_index);
 1005918:	e0bfea17 	ldw	r2,-88(fp)
 100591c:	1008917a 	slli	r4,r2,5
 1005920:	e1bff417 	ldw	r6,-48(fp)
 1005924:	e1ffeb17 	ldw	r7,-84(fp)
 1005928:	e17ffe17 	ldw	r5,-8(fp)
 100592c:	1003d640 	call	1003d64 <Read_File_Record_At_Offset>
                        if ((file_record->name[0] != 0xe5) && (file_record->name[0] != 0x00))
 1005930:	e0bffe17 	ldw	r2,-8(fp)
 1005934:	10800003 	ldbu	r2,0(r2)
 1005938:	10803fcc 	andi	r2,r2,255
 100593c:	10803960 	cmpeqi	r2,r2,229
 1005940:	1000101e 	bne	r2,zero,1005984 <find_file_in_directory+0x38c>
 1005944:	e0bffe17 	ldw	r2,-8(fp)
 1005948:	10800003 	ldbu	r2,0(r2)
 100594c:	10803fcc 	andi	r2,r2,255
 1005950:	1005003a 	cmpeq	r2,r2,zero
 1005954:	10000b1e 	bne	r2,zero,1005984 <find_file_in_directory+0x38c>
                        {
                            bool match = match_file_record_to_name_ext(file_record, name, extension);
 1005958:	e17ff804 	addi	r5,fp,-32
 100595c:	e1bffa04 	addi	r6,fp,-24
 1005960:	e13ffe17 	ldw	r4,-8(fp)
 1005964:	1004df80 	call	1004df8 <match_file_record_to_name_ext>
 1005968:	e0bfe915 	stw	r2,-92(fp)

                            if (match)
 100596c:	e0bfe917 	ldw	r2,-92(fp)
 1005970:	1005003a 	cmpeq	r2,r2,zero
 1005974:	1000031e 	bne	r2,zero,1005984 <find_file_in_directory+0x38c>
                            {                               
                                result = true;
 1005978:	00800044 	movi	r2,1
 100597c:	e0bff115 	stw	r2,-60(fp)
                                break;
 1005980:	00000606 	br	100599c <find_file_in_directory+0x3a4>
            {
                if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
                {
                    int file_counter;
                    
                    for (file_counter = 0; file_counter < 16; file_counter++)
 1005984:	e0bfea17 	ldw	r2,-88(fp)
 1005988:	10800044 	addi	r2,r2,1
 100598c:	e0bfea15 	stw	r2,-88(fp)
 1005990:	e0bfea17 	ldw	r2,-88(fp)
 1005994:	10800410 	cmplti	r2,r2,16
 1005998:	103fdf1e 	bne	r2,zero,1005918 <find_file_in_directory+0x320>
                }
                else
                {
                    break;
                }
                if (result)
 100599c:	e0bff117 	ldw	r2,-60(fp)
 10059a0:	1004c03a 	cmpne	r2,r2,zero
 10059a4:	1000091e 	bne	r2,zero,10059cc <find_file_in_directory+0x3d4>
    {          
        do {
            int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
            int sector_index;
            
            for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 10059a8:	e0bfeb17 	ldw	r2,-84(fp)
 10059ac:	10800044 	addi	r2,r2,1
 10059b0:	e0bfeb15 	stw	r2,-84(fp)
 10059b4:	00804074 	movhi	r2,257
 10059b8:	10b69304 	addi	r2,r2,-9652
 10059bc:	10800383 	ldbu	r2,14(r2)
 10059c0:	10c03fcc 	andi	r3,r2,255
 10059c4:	e0bfeb17 	ldw	r2,-84(fp)
 10059c8:	10ffca16 	blt	r2,r3,10058f4 <find_file_in_directory+0x2fc>
                    break;
                }
            }
            // If this is the end of the cluster and the file has not been found, then see if there is another cluster
            // that holds data for the current directory.
            if (result == false)
 10059cc:	e0bff117 	ldw	r2,-60(fp)
 10059d0:	1004c03a 	cmpne	r2,r2,zero
 10059d4:	1000131e 	bne	r2,zero,1005a24 <find_file_in_directory+0x42c>
            {
				unsigned short int new_cluster;

				if (get_cluster_flag(cluster, &new_cluster))
 10059d8:	e13ff417 	ldw	r4,-48(fp)
 10059dc:	e17ffb04 	addi	r5,fp,-20
 10059e0:	1003a180 	call	1003a18 <get_cluster_flag>
 10059e4:	1005003a 	cmpeq	r2,r2,zero
 10059e8:	10000c1e 	bne	r2,zero,1005a1c <find_file_in_directory+0x424>
				{
					// The directory needs to be expanded to store more files.
					if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 10059ec:	e0bffb0b 	ldhu	r2,-20(fp)
 10059f0:	10bfffcc 	andi	r2,r2,65535
 10059f4:	10fffe0c 	andi	r3,r2,65528
 10059f8:	00bffe14 	movui	r2,65528
 10059fc:	1880021e 	bne	r3,r2,1005a08 <find_file_in_directory+0x410>
					{
						return false;
 1005a00:	e03fff15 	stw	zero,-4(fp)
 1005a04:	00000f06 	br	1005a44 <find_file_in_directory+0x44c>
					}
					cluster = (new_cluster & 0x0000fff8);
 1005a08:	e0bffb0b 	ldhu	r2,-20(fp)
 1005a0c:	10bfffcc 	andi	r2,r2,65535
 1005a10:	10bffe0c 	andi	r2,r2,65528
 1005a14:	e0bff415 	stw	r2,-48(fp)
 1005a18:	00000206 	br	1005a24 <find_file_in_directory+0x42c>
				}
				else
                {
                    // Directory path is invalid.                 
                    return false;
 1005a1c:	e03fff15 	stw	zero,-4(fp)
 1005a20:	00000806 	br	1005a44 <find_file_in_directory+0x44c>
                }
            }              
        } while ((cluster < 0x0000fff8) && (result == false));
 1005a24:	e0fff417 	ldw	r3,-48(fp)
 1005a28:	00bffdd4 	movui	r2,65527
 1005a2c:	10c00316 	blt	r2,r3,1005a3c <find_file_in_directory+0x444>
 1005a30:	e0bff117 	ldw	r2,-60(fp)
 1005a34:	1005003a 	cmpeq	r2,r2,zero
 1005a38:	103f9f1e 	bne	r2,zero,10058b8 <find_file_in_directory+0x2c0>
    }
    
    return result;   
 1005a3c:	e0bff117 	ldw	r2,-60(fp)
 1005a40:	e0bfff15 	stw	r2,-4(fp)
 1005a44:	e0bfff17 	ldw	r2,-4(fp)
}
 1005a48:	e037883a 	mov	sp,fp
 1005a4c:	dfc00117 	ldw	ra,4(sp)
 1005a50:	df000017 	ldw	fp,0(sp)
 1005a54:	dec00204 	addi	sp,sp,8
 1005a58:	f800283a 	ret

01005a5c <find_first_empty_cluster>:


bool find_first_empty_cluster(unsigned int *cluster_number)
// Find the first empty cluster. It will be marked by a 0 entry in the File Allocation Table.
{
 1005a5c:	defff504 	addi	sp,sp,-44
 1005a60:	dfc00a15 	stw	ra,40(sp)
 1005a64:	df000915 	stw	fp,36(sp)
 1005a68:	df000904 	addi	fp,sp,36
 1005a6c:	e13fff15 	stw	r4,-4(fp)
    unsigned int sector = boot_sector_data.first_fat_sector_offset;
 1005a70:	00804074 	movhi	r2,257
 1005a74:	10b69304 	addi	r2,r2,-9652
 1005a78:	10801117 	ldw	r2,68(r2)
 1005a7c:	e0bffe15 	stw	r2,-8(fp)
    unsigned int cluster_index = 2;
 1005a80:	00800084 	movi	r2,2
 1005a84:	e0bffd15 	stw	r2,-12(fp)
    short int cluster = -1;
 1005a88:	00bfffc4 	movi	r2,-1
 1005a8c:	e0bffc0d 	sth	r2,-16(fp)
    bool result = false;
 1005a90:	e03ffb15 	stw	zero,-20(fp)
	unsigned max_cluster_index = 0;
 1005a94:	e03ffa15 	stw	zero,-24(fp)
	unsigned int non_data_sectors = boot_sector_data.data_sector_offset;
 1005a98:	00804074 	movhi	r2,257
 1005a9c:	10b69304 	addi	r2,r2,-9652
 1005aa0:	10801417 	ldw	r2,80(r2)
 1005aa4:	e0bff915 	stw	r2,-28(fp)
	unsigned int less_than_32 = boot_sector_data.number_of_sectors_in_partition;
 1005aa8:	00804074 	movhi	r2,257
 1005aac:	10b69304 	addi	r2,r2,-9652
 1005ab0:	1080058b 	ldhu	r2,22(r2)
 1005ab4:	10bfffcc 	andi	r2,r2,65535
 1005ab8:	e0bff815 	stw	r2,-32(fp)
	unsigned int greater_than_32 = boot_sector_data.total_sector_count_if_above_32MB;
 1005abc:	00804074 	movhi	r2,257
 1005ac0:	10b69304 	addi	r2,r2,-9652
 1005ac4:	10800917 	ldw	r2,36(r2)
 1005ac8:	e0bff715 	stw	r2,-36(fp)

	if (less_than_32 > greater_than_32)
 1005acc:	e0fff817 	ldw	r3,-32(fp)
 1005ad0:	e0bff717 	ldw	r2,-36(fp)
 1005ad4:	10c00b2e 	bgeu	r2,r3,1005b04 <find_first_empty_cluster+0xa8>
	{
		max_cluster_index = ((less_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 1005ad8:	e0fff817 	ldw	r3,-32(fp)
 1005adc:	e0bff917 	ldw	r2,-28(fp)
 1005ae0:	1887c83a 	sub	r3,r3,r2
 1005ae4:	00804074 	movhi	r2,257
 1005ae8:	10b69304 	addi	r2,r2,-9652
 1005aec:	10800383 	ldbu	r2,14(r2)
 1005af0:	10803fcc 	andi	r2,r2,255
 1005af4:	1885203a 	divu	r2,r3,r2
 1005af8:	10800044 	addi	r2,r2,1
 1005afc:	e0bffa15 	stw	r2,-24(fp)
 1005b00:	00002906 	br	1005ba8 <find_first_empty_cluster+0x14c>
	}
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
 1005b04:	e0fff717 	ldw	r3,-36(fp)
 1005b08:	e0bff917 	ldw	r2,-28(fp)
 1005b0c:	1887c83a 	sub	r3,r3,r2
 1005b10:	00804074 	movhi	r2,257
 1005b14:	10b69304 	addi	r2,r2,-9652
 1005b18:	10800383 	ldbu	r2,14(r2)
 1005b1c:	10803fcc 	andi	r2,r2,255
 1005b20:	1885203a 	divu	r2,r3,r2
 1005b24:	10800044 	addi	r2,r2,1
 1005b28:	e0bffa15 	stw	r2,-24(fp)
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 1005b2c:	00001e06 	br	1005ba8 <find_first_empty_cluster+0x14c>
    {
        if (Read_Sector_Data( sector, fat_partition_offset_in_512_byte_sectors))
 1005b30:	e13ffe17 	ldw	r4,-8(fp)
 1005b34:	d166d017 	ldw	r5,-25792(gp)
 1005b38:	100391c0 	call	100391c <Read_Sector_Data>
 1005b3c:	1005003a 	cmpeq	r2,r2,zero
 1005b40:	1000131e 	bne	r2,zero,1005b90 <find_first_empty_cluster+0x134>
        {
            do {
                cluster = ((unsigned short int) IORD_16DIRECT(device_pointer->base, 2*(cluster_index % 256)));
 1005b44:	d0a6d217 	ldw	r2,-25784(gp)
 1005b48:	10800a17 	ldw	r2,40(r2)
 1005b4c:	1007883a 	mov	r3,r2
 1005b50:	e0bffd17 	ldw	r2,-12(fp)
 1005b54:	10803fcc 	andi	r2,r2,255
 1005b58:	1085883a 	add	r2,r2,r2
 1005b5c:	1885883a 	add	r2,r3,r2
 1005b60:	1080002b 	ldhuio	r2,0(r2)
 1005b64:	e0bffc0d 	sth	r2,-16(fp)
                if (cluster == 0)
 1005b68:	e0bffc0f 	ldh	r2,-16(fp)
 1005b6c:	1005003a 	cmpeq	r2,r2,zero
 1005b70:	1000071e 	bne	r2,zero,1005b90 <find_first_empty_cluster+0x134>
                    // Free cluster found.
                    break;
                }
                else
                {
                    cluster_index++;
 1005b74:	e0bffd17 	ldw	r2,-12(fp)
 1005b78:	10800044 	addi	r2,r2,1
 1005b7c:	e0bffd15 	stw	r2,-12(fp)
                } 
            } while ((cluster_index % 256) != 0);
 1005b80:	e0bffd17 	ldw	r2,-12(fp)
 1005b84:	10803fcc 	andi	r2,r2,255
 1005b88:	1004c03a 	cmpne	r2,r2,zero
 1005b8c:	103fed1e 	bne	r2,zero,1005b44 <find_first_empty_cluster+0xe8>
        }
        if (cluster == 0)
 1005b90:	e0bffc0f 	ldh	r2,-16(fp)
 1005b94:	1005003a 	cmpeq	r2,r2,zero
 1005b98:	1000081e 	bne	r2,zero,1005bbc <find_first_empty_cluster+0x160>
        {
            break;
        }
        sector++;
 1005b9c:	e0bffe17 	ldw	r2,-8(fp)
 1005ba0:	10800044 	addi	r2,r2,1
 1005ba4:	e0bffe15 	stw	r2,-8(fp)
	else
	{
		max_cluster_index = ((greater_than_32 - non_data_sectors) / boot_sector_data.sectors_per_cluster) + 1;
	}
    // Find an empty cluster for the file.
    while (sector != boot_sector_data.second_fat_sector_offset)
 1005ba8:	00804074 	movhi	r2,257
 1005bac:	10b69304 	addi	r2,r2,-9652
 1005bb0:	10c01217 	ldw	r3,72(r2)
 1005bb4:	e0bffe17 	ldw	r2,-8(fp)
 1005bb8:	18bfdd1e 	bne	r3,r2,1005b30 <find_first_empty_cluster+0xd4>
        {
            break;
        }
        sector++;
    }
    if ((cluster == 0) && (cluster <= max_cluster_index))
 1005bbc:	e0bffc0f 	ldh	r2,-16(fp)
 1005bc0:	1004c03a 	cmpne	r2,r2,zero
 1005bc4:	1000081e 	bne	r2,zero,1005be8 <find_first_empty_cluster+0x18c>
 1005bc8:	e0fffc0f 	ldh	r3,-16(fp)
 1005bcc:	e0bffa17 	ldw	r2,-24(fp)
 1005bd0:	10c00536 	bltu	r2,r3,1005be8 <find_first_empty_cluster+0x18c>
    {
        *cluster_number = cluster_index;
 1005bd4:	e0bfff17 	ldw	r2,-4(fp)
 1005bd8:	e0fffd17 	ldw	r3,-12(fp)
 1005bdc:	10c00015 	stw	r3,0(r2)
		result = true;
 1005be0:	00800044 	movi	r2,1
 1005be4:	e0bffb15 	stw	r2,-20(fp)
    }
    return result;
 1005be8:	e0bffb17 	ldw	r2,-20(fp)
}
 1005bec:	e037883a 	mov	sp,fp
 1005bf0:	dfc00117 	ldw	ra,4(sp)
 1005bf4:	df000017 	ldw	fp,0(sp)
 1005bf8:	dec00204 	addi	sp,sp,8
 1005bfc:	f800283a 	ret

01005c00 <find_first_empty_record_in_a_subdirectory>:


int find_first_empty_record_in_a_subdirectory(int start_cluster_index)
// Search for a free spot in a subdirectory. Return an encoded location for the file record.
{
 1005c00:	defff404 	addi	sp,sp,-48
 1005c04:	dfc00b15 	stw	ra,44(sp)
 1005c08:	df000a15 	stw	fp,40(sp)
 1005c0c:	df000a04 	addi	fp,sp,40
 1005c10:	e13ffe15 	stw	r4,-8(fp)
    int result = -1;
 1005c14:	00bfffc4 	movi	r2,-1
 1005c18:	e0bffb15 	stw	r2,-20(fp)
    int cluster = start_cluster_index;
 1005c1c:	e0bffe17 	ldw	r2,-8(fp)
 1005c20:	e0bffa15 	stw	r2,-24(fp)
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 1005c24:	e0bffa17 	ldw	r2,-24(fp)
 1005c28:	10ffff84 	addi	r3,r2,-2
 1005c2c:	00804074 	movhi	r2,257
 1005c30:	10b69304 	addi	r2,r2,-9652
 1005c34:	10800383 	ldbu	r2,14(r2)
 1005c38:	10803fcc 	andi	r2,r2,255
 1005c3c:	1885383a 	mul	r2,r3,r2
 1005c40:	1007883a 	mov	r3,r2
 1005c44:	00804074 	movhi	r2,257
 1005c48:	10b69304 	addi	r2,r2,-9652
 1005c4c:	10801417 	ldw	r2,80(r2)
 1005c50:	1885883a 	add	r2,r3,r2
 1005c54:	e0bff915 	stw	r2,-28(fp)
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 1005c58:	e03ff815 	stw	zero,-32(fp)
 1005c5c:	00002c06 	br	1005d10 <find_first_empty_record_in_a_subdirectory+0x110>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 1005c60:	e0fff817 	ldw	r3,-32(fp)
 1005c64:	e0bff917 	ldw	r2,-28(fp)
 1005c68:	1889883a 	add	r4,r3,r2
 1005c6c:	d166d017 	ldw	r5,-25792(gp)
 1005c70:	100391c0 	call	100391c <Read_Sector_Data>
 1005c74:	1005003a 	cmpeq	r2,r2,zero
 1005c78:	10002b1e 	bne	r2,zero,1005d28 <find_first_empty_record_in_a_subdirectory+0x128>
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 1005c7c:	e03ff715 	stw	zero,-36(fp)
 1005c80:	00001d06 	br	1005cf8 <find_first_empty_record_in_a_subdirectory+0xf8>
                {
                    unsigned short int leading_char;
                    
                    // Read file record.
                    leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 1005c84:	d0a6d217 	ldw	r2,-25784(gp)
 1005c88:	10800a17 	ldw	r2,40(r2)
 1005c8c:	1007883a 	mov	r3,r2
 1005c90:	e0bff717 	ldw	r2,-36(fp)
 1005c94:	1004917a 	slli	r2,r2,5
 1005c98:	1885883a 	add	r2,r3,r2
 1005c9c:	10800023 	ldbuio	r2,0(r2)
 1005ca0:	10803fcc 	andi	r2,r2,255
 1005ca4:	e0bff60d 	sth	r2,-40(fp)
                    if ((leading_char == 0x00e5) || (leading_char == 0))
 1005ca8:	e0bff60b 	ldhu	r2,-40(fp)
 1005cac:	10803960 	cmpeqi	r2,r2,229
 1005cb0:	1000031e 	bne	r2,zero,1005cc0 <find_first_empty_record_in_a_subdirectory+0xc0>
 1005cb4:	e0bff60b 	ldhu	r2,-40(fp)
 1005cb8:	1004c03a 	cmpne	r2,r2,zero
 1005cbc:	10000b1e 	bne	r2,zero,1005cec <find_first_empty_record_in_a_subdirectory+0xec>
                    {
                        result = (cluster) | ((sector_index*16 + file_counter) << 16);
 1005cc0:	e0bff817 	ldw	r2,-32(fp)
 1005cc4:	1006913a 	slli	r3,r2,4
 1005cc8:	e0bff717 	ldw	r2,-36(fp)
 1005ccc:	1885883a 	add	r2,r3,r2
 1005cd0:	1006943a 	slli	r3,r2,16
 1005cd4:	e0bffa17 	ldw	r2,-24(fp)
 1005cd8:	1884b03a 	or	r2,r3,r2
 1005cdc:	e0bffb15 	stw	r2,-20(fp)
                        return result;
 1005ce0:	e0bffb17 	ldw	r2,-20(fp)
 1005ce4:	e0bfff15 	stw	r2,-4(fp)
 1005ce8:	00005206 	br	1005e34 <find_first_empty_record_in_a_subdirectory+0x234>
        {
            if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
            {
                int file_counter;
                
                for (file_counter = 0; file_counter < 16; file_counter++)
 1005cec:	e0bff717 	ldw	r2,-36(fp)
 1005cf0:	10800044 	addi	r2,r2,1
 1005cf4:	e0bff715 	stw	r2,-36(fp)
 1005cf8:	e0bff717 	ldw	r2,-36(fp)
 1005cfc:	10800410 	cmplti	r2,r2,16
 1005d00:	103fe01e 	bne	r2,zero,1005c84 <find_first_empty_record_in_a_subdirectory+0x84>
    int cluster = start_cluster_index;
    do {
        int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
        int sector_index;
        
        for (sector_index = 0; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 1005d04:	e0bff817 	ldw	r2,-32(fp)
 1005d08:	10800044 	addi	r2,r2,1
 1005d0c:	e0bff815 	stw	r2,-32(fp)
 1005d10:	00804074 	movhi	r2,257
 1005d14:	10b69304 	addi	r2,r2,-9652
 1005d18:	10800383 	ldbu	r2,14(r2)
 1005d1c:	10c03fcc 	andi	r3,r2,255
 1005d20:	e0bff817 	ldw	r2,-32(fp)
 1005d24:	10ffce16 	blt	r2,r3,1005c60 <find_first_empty_record_in_a_subdirectory+0x60>
                break;
            }
        }
        // If this is the end of the cluster and the file has not been found, then see if there is another cluster
        // that holds data for the current directory.
        if (result < 0)
 1005d28:	e0bffb17 	ldw	r2,-20(fp)
 1005d2c:	1004403a 	cmpge	r2,r2,zero
 1005d30:	1000381e 	bne	r2,zero,1005e14 <find_first_empty_record_in_a_subdirectory+0x214>
        {
			unsigned short int new_cluster;
			if (get_cluster_flag(cluster, &new_cluster))
 1005d34:	e13ffa17 	ldw	r4,-24(fp)
 1005d38:	e17ffc04 	addi	r5,fp,-16
 1005d3c:	1003a180 	call	1003a18 <get_cluster_flag>
 1005d40:	1005003a 	cmpeq	r2,r2,zero
 1005d44:	1000311e 	bne	r2,zero,1005e0c <find_first_empty_record_in_a_subdirectory+0x20c>
			{
                // The directory needs to be expanded to store more files.
				if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 1005d48:	e0bffc0b 	ldhu	r2,-16(fp)
 1005d4c:	10bfffcc 	andi	r2,r2,65535
 1005d50:	10fffe0c 	andi	r3,r2,65528
 1005d54:	00bffe14 	movui	r2,65528
 1005d58:	18802e1e 	bne	r3,r2,1005e14 <find_first_empty_record_in_a_subdirectory+0x214>
				{
					int new_dir_cluster; 
					if (find_first_empty_cluster(&new_dir_cluster))
 1005d5c:	e13ffd04 	addi	r4,fp,-12
 1005d60:	1005a5c0 	call	1005a5c <find_first_empty_cluster>
 1005d64:	1005003a 	cmpeq	r2,r2,zero
 1005d68:	1000231e 	bne	r2,zero,1005df8 <find_first_empty_record_in_a_subdirectory+0x1f8>
					{
						// Add the new cluster to the linked list of the given directory.
						if (mark_cluster(cluster, ((short int) (new_dir_cluster)), true) &&
 1005d6c:	e13ffa17 	ldw	r4,-24(fp)
 1005d70:	e0bffd17 	ldw	r2,-12(fp)
 1005d74:	117fffcc 	andi	r5,r2,65535
 1005d78:	2960001c 	xori	r5,r5,32768
 1005d7c:	29600004 	addi	r5,r5,-32768
 1005d80:	01800044 	movi	r6,1
 1005d84:	1003ad00 	call	1003ad0 <mark_cluster>
 1005d88:	1005003a 	cmpeq	r2,r2,zero
 1005d8c:	10001a1e 	bne	r2,zero,1005df8 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1005d90:	e0bffd17 	ldw	r2,-12(fp)
 1005d94:	1009883a 	mov	r4,r2
 1005d98:	017fffc4 	movi	r5,-1
 1005d9c:	01800044 	movi	r6,1
 1005da0:	1003ad00 	call	1003ad0 <mark_cluster>
 1005da4:	1005003a 	cmpeq	r2,r2,zero
 1005da8:	1000131e 	bne	r2,zero,1005df8 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1005dac:	e13ffa17 	ldw	r4,-24(fp)
 1005db0:	e0bffd17 	ldw	r2,-12(fp)
 1005db4:	117fffcc 	andi	r5,r2,65535
 1005db8:	2960001c 	xori	r5,r5,32768
 1005dbc:	29600004 	addi	r5,r5,-32768
 1005dc0:	000d883a 	mov	r6,zero
 1005dc4:	1003ad00 	call	1003ad0 <mark_cluster>
 1005dc8:	1005003a 	cmpeq	r2,r2,zero
 1005dcc:	10000a1e 	bne	r2,zero,1005df8 <find_first_empty_record_in_a_subdirectory+0x1f8>
 1005dd0:	e0bffd17 	ldw	r2,-12(fp)
 1005dd4:	1009883a 	mov	r4,r2
 1005dd8:	017fffc4 	movi	r5,-1
 1005ddc:	000d883a 	mov	r6,zero
 1005de0:	1003ad00 	call	1003ad0 <mark_cluster>
 1005de4:	1005003a 	cmpeq	r2,r2,zero
 1005de8:	1000031e 	bne	r2,zero,1005df8 <find_first_empty_record_in_a_subdirectory+0x1f8>
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), true) &&
							mark_cluster(cluster, ((short int) (new_dir_cluster)), false) &&
							mark_cluster(new_dir_cluster, ((short int) (0xffff)), false))
						{
							Save_Modified_Sector();
 1005dec:	10038cc0 	call	10038cc <Save_Modified_Sector>
							// The new file will begin at the first entry of the directory.
							result = new_dir_cluster;                           
 1005df0:	e0bffd17 	ldw	r2,-12(fp)
 1005df4:	e0bffb15 	stw	r2,-20(fp)
						}
					}
					cluster = (new_cluster & 0x0000fff8);
 1005df8:	e0bffc0b 	ldhu	r2,-16(fp)
 1005dfc:	10bfffcc 	andi	r2,r2,65535
 1005e00:	10bffe0c 	andi	r2,r2,65528
 1005e04:	e0bffa15 	stw	r2,-24(fp)
 1005e08:	00000206 	br	1005e14 <find_first_empty_record_in_a_subdirectory+0x214>
				}
			}
			else
			{
				// Error encountered.                 
				result = -1;
 1005e0c:	00bfffc4 	movi	r2,-1
 1005e10:	e0bffb15 	stw	r2,-20(fp)
			}
        }              
    } while ((cluster < 0x0000fff8) && (result == -1)); 
 1005e14:	e0fffa17 	ldw	r3,-24(fp)
 1005e18:	00bffdd4 	movui	r2,65527
 1005e1c:	10c00316 	blt	r2,r3,1005e2c <find_first_empty_record_in_a_subdirectory+0x22c>
 1005e20:	e0bffb17 	ldw	r2,-20(fp)
 1005e24:	10bfffe0 	cmpeqi	r2,r2,-1
 1005e28:	103f7e1e 	bne	r2,zero,1005c24 <find_first_empty_record_in_a_subdirectory+0x24>
    return result; 
 1005e2c:	e0bffb17 	ldw	r2,-20(fp)
 1005e30:	e0bfff15 	stw	r2,-4(fp)
 1005e34:	e0bfff17 	ldw	r2,-4(fp)
}
 1005e38:	e037883a 	mov	sp,fp
 1005e3c:	dfc00117 	ldw	ra,4(sp)
 1005e40:	df000017 	ldw	fp,0(sp)
 1005e44:	dec00204 	addi	sp,sp,8
 1005e48:	f800283a 	ret

01005e4c <find_first_empty_record_in_root_directory>:


int find_first_empty_record_in_root_directory()
// Find a first unused record location to use. Return -1 if none is found.
{
 1005e4c:	defff804 	addi	sp,sp,-32
 1005e50:	dfc00715 	stw	ra,28(sp)
 1005e54:	df000615 	stw	fp,24(sp)
 1005e58:	df000604 	addi	fp,sp,24
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 1005e5c:	00804074 	movhi	r2,257
 1005e60:	10b69304 	addi	r2,r2,-9652
 1005e64:	1080050b 	ldhu	r2,20(r2)
 1005e68:	10bfffcc 	andi	r2,r2,65535
 1005e6c:	1006917a 	slli	r3,r2,5
 1005e70:	00804074 	movhi	r2,257
 1005e74:	10b69304 	addi	r2,r2,-9652
 1005e78:	1080030b 	ldhu	r2,12(r2)
 1005e7c:	10bfffcc 	andi	r2,r2,65535
 1005e80:	1885283a 	div	r2,r3,r2
 1005e84:	e0bffe15 	stw	r2,-8(fp)
    int sector_index;
    int result = -1;
 1005e88:	00bfffc4 	movi	r2,-1
 1005e8c:	e0bffc15 	stw	r2,-16(fp)
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 1005e90:	e03ffd15 	stw	zero,-12(fp)
 1005e94:	00002d06 	br	1005f4c <find_first_empty_record_in_root_directory+0x100>
    {
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 1005e98:	00804074 	movhi	r2,257
 1005e9c:	10b69304 	addi	r2,r2,-9652
 1005ea0:	10c01317 	ldw	r3,76(r2)
 1005ea4:	e0bffd17 	ldw	r2,-12(fp)
 1005ea8:	1885883a 	add	r2,r3,r2
 1005eac:	1009883a 	mov	r4,r2
 1005eb0:	d166d017 	ldw	r5,-25792(gp)
 1005eb4:	100391c0 	call	100391c <Read_Sector_Data>
 1005eb8:	1005003a 	cmpeq	r2,r2,zero
 1005ebc:	1000261e 	bne	r2,zero,1005f58 <find_first_empty_record_in_root_directory+0x10c>
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 1005ec0:	e03ffb15 	stw	zero,-20(fp)
 1005ec4:	00001b06 	br	1005f34 <find_first_empty_record_in_root_directory+0xe8>
            {
                unsigned short int leading_char;
                
                // Read first character of the file record.
                leading_char = ((unsigned char) IORD_8DIRECT(device_pointer->base, file_counter*32));
 1005ec8:	d0a6d217 	ldw	r2,-25784(gp)
 1005ecc:	10800a17 	ldw	r2,40(r2)
 1005ed0:	1007883a 	mov	r3,r2
 1005ed4:	e0bffb17 	ldw	r2,-20(fp)
 1005ed8:	1004917a 	slli	r2,r2,5
 1005edc:	1885883a 	add	r2,r3,r2
 1005ee0:	10800023 	ldbuio	r2,0(r2)
 1005ee4:	10803fcc 	andi	r2,r2,255
 1005ee8:	e0bffa0d 	sth	r2,-24(fp)
                if ((leading_char == 0x00e5) || (leading_char == 0))
 1005eec:	e0bffa0b 	ldhu	r2,-24(fp)
 1005ef0:	10803960 	cmpeqi	r2,r2,229
 1005ef4:	1000031e 	bne	r2,zero,1005f04 <find_first_empty_record_in_root_directory+0xb8>
 1005ef8:	e0bffa0b 	ldhu	r2,-24(fp)
 1005efc:	1004c03a 	cmpne	r2,r2,zero
 1005f00:	1000091e 	bne	r2,zero,1005f28 <find_first_empty_record_in_root_directory+0xdc>
                {
                    result = (sector_index*16 + file_counter) << 16;
 1005f04:	e0bffd17 	ldw	r2,-12(fp)
 1005f08:	1006913a 	slli	r3,r2,4
 1005f0c:	e0bffb17 	ldw	r2,-20(fp)
 1005f10:	1885883a 	add	r2,r3,r2
 1005f14:	1004943a 	slli	r2,r2,16
 1005f18:	e0bffc15 	stw	r2,-16(fp)
                    return result;
 1005f1c:	e0bffc17 	ldw	r2,-16(fp)
 1005f20:	e0bfff15 	stw	r2,-4(fp)
 1005f24:	00000e06 	br	1005f60 <find_first_empty_record_in_root_directory+0x114>
        if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
                                fat_partition_offset_in_512_byte_sectors))
        {
            int file_counter;
            
            for (file_counter = 0; file_counter < 16; file_counter++)
 1005f28:	e0bffb17 	ldw	r2,-20(fp)
 1005f2c:	10800044 	addi	r2,r2,1
 1005f30:	e0bffb15 	stw	r2,-20(fp)
 1005f34:	e0bffb17 	ldw	r2,-20(fp)
 1005f38:	10800410 	cmplti	r2,r2,16
 1005f3c:	103fe21e 	bne	r2,zero,1005ec8 <find_first_empty_record_in_root_directory+0x7c>
{
    int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
    int sector_index;
    int result = -1;
    
    for (sector_index = 0; sector_index < max_root_dir_sectors; sector_index++)
 1005f40:	e0bffd17 	ldw	r2,-12(fp)
 1005f44:	10800044 	addi	r2,r2,1
 1005f48:	e0bffd15 	stw	r2,-12(fp)
 1005f4c:	e0fffd17 	ldw	r3,-12(fp)
 1005f50:	e0bffe17 	ldw	r2,-8(fp)
 1005f54:	18bfd016 	blt	r3,r2,1005e98 <find_first_empty_record_in_root_directory+0x4c>
        else
        {
            break;
        }
    }
    return result;
 1005f58:	e0bffc17 	ldw	r2,-16(fp)
 1005f5c:	e0bfff15 	stw	r2,-4(fp)
 1005f60:	e0bfff17 	ldw	r2,-4(fp)
}
 1005f64:	e037883a 	mov	sp,fp
 1005f68:	dfc00117 	ldw	ra,4(sp)
 1005f6c:	df000017 	ldw	fp,0(sp)
 1005f70:	dec00204 	addi	sp,sp,8
 1005f74:	f800283a 	ret

01005f78 <convert_filename_to_name_extension>:

void convert_filename_to_name_extension(char *filename, char *name, char *extension)
// This function converts the file name into a name . extension format.
{
 1005f78:	defffa04 	addi	sp,sp,-24
 1005f7c:	df000515 	stw	fp,20(sp)
 1005f80:	df000504 	addi	fp,sp,20
 1005f84:	e13ffd15 	stw	r4,-12(fp)
 1005f88:	e17ffe15 	stw	r5,-8(fp)
 1005f8c:	e1bfff15 	stw	r6,-4(fp)
    int counter;
    int local = 0;
 1005f90:	e03ffb15 	stw	zero,-20(fp)
    
    for(counter = 0; counter < 8; counter++)
 1005f94:	e03ffc15 	stw	zero,-16(fp)
 1005f98:	00002b06 	br	1006048 <convert_filename_to_name_extension+0xd0>
    {
        if (filename[local] != '.')
 1005f9c:	e0bffb17 	ldw	r2,-20(fp)
 1005fa0:	1007883a 	mov	r3,r2
 1005fa4:	e0bffd17 	ldw	r2,-12(fp)
 1005fa8:	1885883a 	add	r2,r3,r2
 1005fac:	10800003 	ldbu	r2,0(r2)
 1005fb0:	10803fcc 	andi	r2,r2,255
 1005fb4:	1080201c 	xori	r2,r2,128
 1005fb8:	10bfe004 	addi	r2,r2,-128
 1005fbc:	10800ba0 	cmpeqi	r2,r2,46
 1005fc0:	1000181e 	bne	r2,zero,1006024 <convert_filename_to_name_extension+0xac>
        {
            name[counter] = filename[local];
 1005fc4:	e0bffc17 	ldw	r2,-16(fp)
 1005fc8:	1007883a 	mov	r3,r2
 1005fcc:	e0bffe17 	ldw	r2,-8(fp)
 1005fd0:	1889883a 	add	r4,r3,r2
 1005fd4:	e0bffb17 	ldw	r2,-20(fp)
 1005fd8:	1007883a 	mov	r3,r2
 1005fdc:	e0bffd17 	ldw	r2,-12(fp)
 1005fe0:	1885883a 	add	r2,r3,r2
 1005fe4:	10800003 	ldbu	r2,0(r2)
 1005fe8:	20800005 	stb	r2,0(r4)
            if (filename[local] != 0) local++;
 1005fec:	e0bffb17 	ldw	r2,-20(fp)
 1005ff0:	1007883a 	mov	r3,r2
 1005ff4:	e0bffd17 	ldw	r2,-12(fp)
 1005ff8:	1885883a 	add	r2,r3,r2
 1005ffc:	10800003 	ldbu	r2,0(r2)
 1006000:	10803fcc 	andi	r2,r2,255
 1006004:	1080201c 	xori	r2,r2,128
 1006008:	10bfe004 	addi	r2,r2,-128
 100600c:	1005003a 	cmpeq	r2,r2,zero
 1006010:	10000a1e 	bne	r2,zero,100603c <convert_filename_to_name_extension+0xc4>
 1006014:	e0bffb17 	ldw	r2,-20(fp)
 1006018:	10800044 	addi	r2,r2,1
 100601c:	e0bffb15 	stw	r2,-20(fp)
 1006020:	00000606 	br	100603c <convert_filename_to_name_extension+0xc4>
        }
        else
        {
            name[counter] = ' ';
 1006024:	e0bffc17 	ldw	r2,-16(fp)
 1006028:	1007883a 	mov	r3,r2
 100602c:	e0bffe17 	ldw	r2,-8(fp)
 1006030:	1887883a 	add	r3,r3,r2
 1006034:	00800804 	movi	r2,32
 1006038:	18800005 	stb	r2,0(r3)
// This function converts the file name into a name . extension format.
{
    int counter;
    int local = 0;
    
    for(counter = 0; counter < 8; counter++)
 100603c:	e0bffc17 	ldw	r2,-16(fp)
 1006040:	10800044 	addi	r2,r2,1
 1006044:	e0bffc15 	stw	r2,-16(fp)
 1006048:	e0bffc17 	ldw	r2,-16(fp)
 100604c:	10800210 	cmplti	r2,r2,8
 1006050:	103fd21e 	bne	r2,zero,1005f9c <convert_filename_to_name_extension+0x24>
        else
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
 1006054:	e0bffb17 	ldw	r2,-20(fp)
 1006058:	1007883a 	mov	r3,r2
 100605c:	e0bffd17 	ldw	r2,-12(fp)
 1006060:	1885883a 	add	r2,r3,r2
 1006064:	10800003 	ldbu	r2,0(r2)
 1006068:	10803fcc 	andi	r2,r2,255
 100606c:	1080201c 	xori	r2,r2,128
 1006070:	10bfe004 	addi	r2,r2,-128
 1006074:	10800b98 	cmpnei	r2,r2,46
 1006078:	1000031e 	bne	r2,zero,1006088 <convert_filename_to_name_extension+0x110>
 100607c:	e0bffb17 	ldw	r2,-20(fp)
 1006080:	10800044 	addi	r2,r2,1
 1006084:	e0bffb15 	stw	r2,-20(fp)
    for(counter = 0; counter < 3; counter++)
 1006088:	e03ffc15 	stw	zero,-16(fp)
 100608c:	00002106 	br	1006114 <convert_filename_to_name_extension+0x19c>
    {
        if (filename[local] != 0)
 1006090:	e0bffb17 	ldw	r2,-20(fp)
 1006094:	1007883a 	mov	r3,r2
 1006098:	e0bffd17 	ldw	r2,-12(fp)
 100609c:	1885883a 	add	r2,r3,r2
 10060a0:	10800003 	ldbu	r2,0(r2)
 10060a4:	10803fcc 	andi	r2,r2,255
 10060a8:	1080201c 	xori	r2,r2,128
 10060ac:	10bfe004 	addi	r2,r2,-128
 10060b0:	1005003a 	cmpeq	r2,r2,zero
 10060b4:	10000e1e 	bne	r2,zero,10060f0 <convert_filename_to_name_extension+0x178>
        {
            extension[counter] = filename[local];
 10060b8:	e0bffc17 	ldw	r2,-16(fp)
 10060bc:	1007883a 	mov	r3,r2
 10060c0:	e0bfff17 	ldw	r2,-4(fp)
 10060c4:	1889883a 	add	r4,r3,r2
 10060c8:	e0bffb17 	ldw	r2,-20(fp)
 10060cc:	1007883a 	mov	r3,r2
 10060d0:	e0bffd17 	ldw	r2,-12(fp)
 10060d4:	1885883a 	add	r2,r3,r2
 10060d8:	10800003 	ldbu	r2,0(r2)
 10060dc:	20800005 	stb	r2,0(r4)
            local++;
 10060e0:	e0bffb17 	ldw	r2,-20(fp)
 10060e4:	10800044 	addi	r2,r2,1
 10060e8:	e0bffb15 	stw	r2,-20(fp)
 10060ec:	00000606 	br	1006108 <convert_filename_to_name_extension+0x190>
        }
        else
        {
            extension[counter] = ' ';
 10060f0:	e0bffc17 	ldw	r2,-16(fp)
 10060f4:	1007883a 	mov	r3,r2
 10060f8:	e0bfff17 	ldw	r2,-4(fp)
 10060fc:	1887883a 	add	r3,r3,r2
 1006100:	00800804 	movi	r2,32
 1006104:	18800005 	stb	r2,0(r3)
        {
            name[counter] = ' ';
        }
    }
    if (filename[local] == '.') local++;
    for(counter = 0; counter < 3; counter++)
 1006108:	e0bffc17 	ldw	r2,-16(fp)
 100610c:	10800044 	addi	r2,r2,1
 1006110:	e0bffc15 	stw	r2,-16(fp)
 1006114:	e0bffc17 	ldw	r2,-16(fp)
 1006118:	108000d0 	cmplti	r2,r2,3
 100611c:	103fdc1e 	bne	r2,zero,1006090 <convert_filename_to_name_extension+0x118>
        {
            extension[counter] = ' ';
        }
    }

}
 1006120:	e037883a 	mov	sp,fp
 1006124:	df000017 	ldw	fp,0(sp)
 1006128:	dec00104 	addi	sp,sp,4
 100612c:	f800283a 	ret

01006130 <create_file>:

bool create_file(char *name, t_file_record *file_record, t_file_record *home_dir)
// Create a file in a given directory. Expand the directory if needed.
{
 1006130:	defff304 	addi	sp,sp,-52
 1006134:	dfc00c15 	stw	ra,48(sp)
 1006138:	df000b15 	stw	fp,44(sp)
 100613c:	df000b04 	addi	fp,sp,44
 1006140:	e13ffb15 	stw	r4,-20(fp)
 1006144:	e17ffc15 	stw	r5,-16(fp)
 1006148:	e1bffd15 	stw	r6,-12(fp)
    unsigned int cluster_number;
    bool result = false;
 100614c:	e03ff915 	stw	zero,-28(fp)
    
    if (find_first_empty_cluster(&cluster_number))
 1006150:	e13ffa04 	addi	r4,fp,-24
 1006154:	1005a5c0 	call	1005a5c <find_first_empty_cluster>
 1006158:	1005003a 	cmpeq	r2,r2,zero
 100615c:	1000a31e 	bne	r2,zero,10063ec <create_file+0x2bc>
    {
        int record_index;
        
        if (home_dir->file_record_cluster == 0)
 1006160:	e0bffd17 	ldw	r2,-12(fp)
 1006164:	10800a17 	ldw	r2,40(r2)
 1006168:	1004c03a 	cmpne	r2,r2,zero
 100616c:	1000031e 	bne	r2,zero,100617c <create_file+0x4c>
        {
            // Put a file in the root directory.
            record_index = find_first_empty_record_in_root_directory();
 1006170:	1005e4c0 	call	1005e4c <find_first_empty_record_in_root_directory>
 1006174:	e0bff815 	stw	r2,-32(fp)
 1006178:	00000506 	br	1006190 <create_file+0x60>
        }
        else
        {
            // Put a file in a subdirectory.
            record_index = find_first_empty_record_in_a_subdirectory(home_dir->start_cluster_index);           
 100617c:	e0bffd17 	ldw	r2,-12(fp)
 1006180:	1080058b 	ldhu	r2,22(r2)
 1006184:	113fffcc 	andi	r4,r2,65535
 1006188:	1005c000 	call	1005c00 <find_first_empty_record_in_a_subdirectory>
 100618c:	e0bff815 	stw	r2,-32(fp)
        }
        if (record_index >= 0)
 1006190:	e0bff817 	ldw	r2,-32(fp)
 1006194:	1004803a 	cmplt	r2,r2,zero
 1006198:	1000941e 	bne	r2,zero,10063ec <create_file+0x2bc>
        {   
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
 100619c:	e13ffb17 	ldw	r4,-20(fp)
 10061a0:	1004d380 	call	1004d38 <get_dir_divider_location>
 10061a4:	e0bff615 	stw	r2,-40(fp)
            int last_dir_separator = 0;
 10061a8:	e03ff515 	stw	zero,-44(fp)

            // Skip through all directory separators.
            while (location > 0)
 10061ac:	00000b06 	br	10061dc <create_file+0xac>
            {
                last_dir_separator = last_dir_separator+location+1;
 10061b0:	e0fff517 	ldw	r3,-44(fp)
 10061b4:	e0bff617 	ldw	r2,-40(fp)
 10061b8:	1885883a 	add	r2,r3,r2
 10061bc:	10800044 	addi	r2,r2,1
 10061c0:	e0bff515 	stw	r2,-44(fp)
                location = get_dir_divider_location( &(name[last_dir_separator]) );
 10061c4:	e0bff517 	ldw	r2,-44(fp)
 10061c8:	1007883a 	mov	r3,r2
 10061cc:	e0bffb17 	ldw	r2,-20(fp)
 10061d0:	1889883a 	add	r4,r3,r2
 10061d4:	1004d380 	call	1004d38 <get_dir_divider_location>
 10061d8:	e0bff615 	stw	r2,-40(fp)
            unsigned int file_record_sector;
            int location = get_dir_divider_location( name );
            int last_dir_separator = 0;

            // Skip through all directory separators.
            while (location > 0)
 10061dc:	e0bff617 	ldw	r2,-40(fp)
 10061e0:	10800048 	cmpgei	r2,r2,1
 10061e4:	103ff21e 	bne	r2,zero,10061b0 <create_file+0x80>
            {
                last_dir_separator = last_dir_separator+location+1;
                location = get_dir_divider_location( &(name[last_dir_separator]) );
            }
            
            convert_filename_to_name_extension(&(name[last_dir_separator]), file_record->name, file_record->extension);
 10061e8:	e0bff517 	ldw	r2,-44(fp)
 10061ec:	1007883a 	mov	r3,r2
 10061f0:	e0bffb17 	ldw	r2,-20(fp)
 10061f4:	1889883a 	add	r4,r3,r2
 10061f8:	e0bffc17 	ldw	r2,-16(fp)
 10061fc:	100b883a 	mov	r5,r2
 1006200:	e0bffc17 	ldw	r2,-16(fp)
 1006204:	10800204 	addi	r2,r2,8
 1006208:	100d883a 	mov	r6,r2
 100620c:	1005f780 	call	1005f78 <convert_filename_to_name_extension>
                         
            file_record->attributes = 0;
 1006210:	e0bffc17 	ldw	r2,-16(fp)
 1006214:	100002c5 	stb	zero,11(r2)
            file_record->create_time = 0;
 1006218:	e0bffc17 	ldw	r2,-16(fp)
 100621c:	1000030d 	sth	zero,12(r2)
            file_record->create_date = 0;
 1006220:	e0bffc17 	ldw	r2,-16(fp)
 1006224:	1000038d 	sth	zero,14(r2)
            file_record->last_access_date = 0;
 1006228:	e0bffc17 	ldw	r2,-16(fp)
 100622c:	1000040d 	sth	zero,16(r2)
            file_record->last_modified_time = 0;
 1006230:	e0bffc17 	ldw	r2,-16(fp)
 1006234:	1000048d 	sth	zero,18(r2)
            file_record->last_modified_date = 0;
 1006238:	e0bffc17 	ldw	r2,-16(fp)
 100623c:	1000050d 	sth	zero,20(r2)
            file_record->start_cluster_index = cluster_number;
 1006240:	e0bffa17 	ldw	r2,-24(fp)
 1006244:	1007883a 	mov	r3,r2
 1006248:	e0bffc17 	ldw	r2,-16(fp)
 100624c:	10c0058d 	sth	r3,22(r2)
            file_record->file_size_in_bytes = 0;
 1006250:	e0bffc17 	ldw	r2,-16(fp)
 1006254:	10000615 	stw	zero,24(r2)
            file_record->current_cluster_index = cluster_number;
 1006258:	e0fffa17 	ldw	r3,-24(fp)
 100625c:	e0bffc17 	ldw	r2,-16(fp)
 1006260:	10c00715 	stw	r3,28(r2)
            file_record->current_sector_in_cluster = 0;
 1006264:	e0bffc17 	ldw	r2,-16(fp)
 1006268:	10000815 	stw	zero,32(r2)
            file_record->current_byte_position = 0;
 100626c:	e0bffc17 	ldw	r2,-16(fp)
 1006270:	10000915 	stw	zero,36(r2)
            file_record->file_record_cluster = record_index & 0x0000ffff;
 1006274:	e0bff817 	ldw	r2,-32(fp)
 1006278:	10ffffcc 	andi	r3,r2,65535
 100627c:	e0bffc17 	ldw	r2,-16(fp)
 1006280:	10c00a15 	stw	r3,40(r2)
            file_record->file_record_sector_in_cluster = ((record_index >> 16) & 0x0000ffff) / 16;
 1006284:	e0bff817 	ldw	r2,-32(fp)
 1006288:	1005d43a 	srai	r2,r2,16
 100628c:	10bfffcc 	andi	r2,r2,65535
 1006290:	e0bfff15 	stw	r2,-4(fp)
 1006294:	e0ffff17 	ldw	r3,-4(fp)
 1006298:	1804403a 	cmpge	r2,r3,zero
 100629c:	1000031e 	bne	r2,zero,10062ac <create_file+0x17c>
 10062a0:	e0bfff17 	ldw	r2,-4(fp)
 10062a4:	108003c4 	addi	r2,r2,15
 10062a8:	e0bfff15 	stw	r2,-4(fp)
 10062ac:	e0ffff17 	ldw	r3,-4(fp)
 10062b0:	1805d13a 	srai	r2,r3,4
 10062b4:	1007883a 	mov	r3,r2
 10062b8:	e0bffc17 	ldw	r2,-16(fp)
 10062bc:	10c00b15 	stw	r3,44(r2)
            file_record->file_record_offset = (((record_index >> 16) & 0x0000ffff) % 16)*32;   
 10062c0:	e0bff817 	ldw	r2,-32(fp)
 10062c4:	1005d43a 	srai	r2,r2,16
 10062c8:	108003cc 	andi	r2,r2,15
 10062cc:	1004917a 	slli	r2,r2,5
 10062d0:	1007883a 	mov	r3,r2
 10062d4:	e0bffc17 	ldw	r2,-16(fp)
 10062d8:	10c00c0d 	sth	r3,48(r2)
            file_record->home_directory_cluster = home_dir->start_cluster_index;
 10062dc:	e0bffd17 	ldw	r2,-12(fp)
 10062e0:	1080058b 	ldhu	r2,22(r2)
 10062e4:	10ffffcc 	andi	r3,r2,65535
 10062e8:	e0bffc17 	ldw	r2,-16(fp)
 10062ec:	10c00d15 	stw	r3,52(r2)
            file_record->in_use = true;
 10062f0:	e0fffc17 	ldw	r3,-16(fp)
 10062f4:	00800044 	movi	r2,1
 10062f8:	18800f15 	stw	r2,60(r3)
            file_record->modified = true;
 10062fc:	e0fffc17 	ldw	r3,-16(fp)
 1006300:	00800044 	movi	r2,1
 1006304:	18800e15 	stw	r2,56(r3)
            // Now write the record at the specified location.
            file_record_sector = (file_record->file_record_cluster == 0) ? 
 1006308:	e0bffc17 	ldw	r2,-16(fp)
 100630c:	10800a17 	ldw	r2,40(r2)
 1006310:	1004c03a 	cmpne	r2,r2,zero
 1006314:	1000081e 	bne	r2,zero,1006338 <create_file+0x208>
 1006318:	00804074 	movhi	r2,257
 100631c:	10b69304 	addi	r2,r2,-9652
 1006320:	10c01317 	ldw	r3,76(r2)
 1006324:	e0bffc17 	ldw	r2,-16(fp)
 1006328:	10800b17 	ldw	r2,44(r2)
 100632c:	1887883a 	add	r3,r3,r2
 1006330:	e0fffe15 	stw	r3,-8(fp)
 1006334:	00001006 	br	1006378 <create_file+0x248>
 1006338:	00804074 	movhi	r2,257
 100633c:	10b69304 	addi	r2,r2,-9652
 1006340:	11001417 	ldw	r4,80(r2)
 1006344:	e0bffc17 	ldw	r2,-16(fp)
 1006348:	10800a17 	ldw	r2,40(r2)
 100634c:	10ffff84 	addi	r3,r2,-2
 1006350:	00804074 	movhi	r2,257
 1006354:	10b69304 	addi	r2,r2,-9652
 1006358:	10800383 	ldbu	r2,14(r2)
 100635c:	10803fcc 	andi	r2,r2,255
 1006360:	1885383a 	mul	r2,r3,r2
 1006364:	2087883a 	add	r3,r4,r2
 1006368:	e0bffc17 	ldw	r2,-16(fp)
 100636c:	10800b17 	ldw	r2,44(r2)
 1006370:	1887883a 	add	r3,r3,r2
 1006374:	e0fffe15 	stw	r3,-8(fp)
 1006378:	e0bffe17 	ldw	r2,-8(fp)
 100637c:	e0bff715 	stw	r2,-36(fp)
                                    (boot_sector_data.root_directory_sector_offset + file_record->file_record_sector_in_cluster):  
                                    (boot_sector_data.data_sector_offset + (file_record->file_record_cluster-2)*boot_sector_data.sectors_per_cluster +
                                     file_record->file_record_sector_in_cluster);

			if (Read_Sector_Data(file_record_sector, fat_partition_offset_in_512_byte_sectors))
 1006380:	e13ff717 	ldw	r4,-36(fp)
 1006384:	d166d017 	ldw	r5,-25792(gp)
 1006388:	100391c0 	call	100391c <Read_Sector_Data>
 100638c:	1005003a 	cmpeq	r2,r2,zero
 1006390:	1000161e 	bne	r2,zero,10063ec <create_file+0x2bc>
            {
                if (Write_File_Record_At_Offset(file_record->file_record_offset, file_record))
 1006394:	e0bffc17 	ldw	r2,-16(fp)
 1006398:	10800c0b 	ldhu	r2,48(r2)
 100639c:	113fffcc 	andi	r4,r2,65535
 10063a0:	2120001c 	xori	r4,r4,32768
 10063a4:	21200004 	addi	r4,r4,-32768
 10063a8:	e17ffc17 	ldw	r5,-16(fp)
 10063ac:	1003fe80 	call	1003fe8 <Write_File_Record_At_Offset>
 10063b0:	1005003a 	cmpeq	r2,r2,zero
 10063b4:	10000d1e 	bne	r2,zero,10063ec <create_file+0x2bc>
                {
                    Save_Modified_Sector();
 10063b8:	10038cc0 	call	10038cc <Save_Modified_Sector>
                    // Mark the first cluster of the file as the last cluster at first.
                    mark_cluster(cluster_number, ((short int) (0xffff)), true);
 10063bc:	e13ffa17 	ldw	r4,-24(fp)
 10063c0:	017fffc4 	movi	r5,-1
 10063c4:	01800044 	movi	r6,1
 10063c8:	1003ad00 	call	1003ad0 <mark_cluster>
                    if (mark_cluster(cluster_number, ((short int) (0xffff)), false))
 10063cc:	e13ffa17 	ldw	r4,-24(fp)
 10063d0:	017fffc4 	movi	r5,-1
 10063d4:	000d883a 	mov	r6,zero
 10063d8:	1003ad00 	call	1003ad0 <mark_cluster>
 10063dc:	1005003a 	cmpeq	r2,r2,zero
 10063e0:	1000021e 	bne	r2,zero,10063ec <create_file+0x2bc>
                    {
                        result = true;
 10063e4:	00800044 	movi	r2,1
 10063e8:	e0bff915 	stw	r2,-28(fp)
                }
            }
        }

    }
    return result;           
 10063ec:	e0bff917 	ldw	r2,-28(fp)
}
 10063f0:	e037883a 	mov	sp,fp
 10063f4:	dfc00117 	ldw	ra,4(sp)
 10063f8:	df000017 	ldw	fp,0(sp)
 10063fc:	dec00204 	addi	sp,sp,8
 1006400:	f800283a 	ret

01006404 <copy_file_record_name_to_string>:


void copy_file_record_name_to_string(t_file_record *file_record, char *file_name)
/* Copy a file name from the file record to a given string */
{
 1006404:	defffb04 	addi	sp,sp,-20
 1006408:	df000415 	stw	fp,16(sp)
 100640c:	df000404 	addi	fp,sp,16
 1006410:	e13ffe15 	stw	r4,-8(fp)
 1006414:	e17fff15 	stw	r5,-4(fp)
	int index;
	int flength = 0;
 1006418:	e03ffc15 	stw	zero,-16(fp)

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 100641c:	e03ffd15 	stw	zero,-12(fp)
 1006420:	00001606 	br	100647c <copy_file_record_name_to_string+0x78>
	{
		if (file_record->name[index] != ' ')
 1006424:	e0fffd17 	ldw	r3,-12(fp)
 1006428:	e0bffe17 	ldw	r2,-8(fp)
 100642c:	10c5883a 	add	r2,r2,r3
 1006430:	10800003 	ldbu	r2,0(r2)
 1006434:	10803fcc 	andi	r2,r2,255
 1006438:	10800820 	cmpeqi	r2,r2,32
 100643c:	10000c1e 	bne	r2,zero,1006470 <copy_file_record_name_to_string+0x6c>
		{
			file_name[flength] = file_record->name[index];
 1006440:	e0bffc17 	ldw	r2,-16(fp)
 1006444:	1007883a 	mov	r3,r2
 1006448:	e0bfff17 	ldw	r2,-4(fp)
 100644c:	1889883a 	add	r4,r3,r2
 1006450:	e0fffd17 	ldw	r3,-12(fp)
 1006454:	e0bffe17 	ldw	r2,-8(fp)
 1006458:	10c5883a 	add	r2,r2,r3
 100645c:	10800003 	ldbu	r2,0(r2)
 1006460:	20800005 	stb	r2,0(r4)
			flength = flength + 1;
 1006464:	e0bffc17 	ldw	r2,-16(fp)
 1006468:	10800044 	addi	r2,r2,1
 100646c:	e0bffc15 	stw	r2,-16(fp)
{
	int index;
	int flength = 0;

	/* Copy file name.*/
	for (index = 0; index < 8; index++)
 1006470:	e0bffd17 	ldw	r2,-12(fp)
 1006474:	10800044 	addi	r2,r2,1
 1006478:	e0bffd15 	stw	r2,-12(fp)
 100647c:	e0bffd17 	ldw	r2,-12(fp)
 1006480:	10800210 	cmplti	r2,r2,8
 1006484:	103fe71e 	bne	r2,zero,1006424 <copy_file_record_name_to_string+0x20>
		{
			file_name[flength] = file_record->name[index];
			flength = flength + 1;
		}
	}
	if (file_record->extension[0] != ' ')
 1006488:	e0bffe17 	ldw	r2,-8(fp)
 100648c:	10800203 	ldbu	r2,8(r2)
 1006490:	10803fcc 	andi	r2,r2,255
 1006494:	10800820 	cmpeqi	r2,r2,32
 1006498:	1000261e 	bne	r2,zero,1006534 <copy_file_record_name_to_string+0x130>
	{
		file_name[flength] = '.';
 100649c:	e0bffc17 	ldw	r2,-16(fp)
 10064a0:	1007883a 	mov	r3,r2
 10064a4:	e0bfff17 	ldw	r2,-4(fp)
 10064a8:	1887883a 	add	r3,r3,r2
 10064ac:	00800b84 	movi	r2,46
 10064b0:	18800005 	stb	r2,0(r3)
		flength = flength + 1;
 10064b4:	e0bffc17 	ldw	r2,-16(fp)
 10064b8:	10800044 	addi	r2,r2,1
 10064bc:	e0bffc15 	stw	r2,-16(fp)
		for (index = 0; index < 3; index++)
 10064c0:	e03ffd15 	stw	zero,-12(fp)
 10064c4:	00001806 	br	1006528 <copy_file_record_name_to_string+0x124>
		{
			if (file_record->extension[index] != ' ')
 10064c8:	e0fffd17 	ldw	r3,-12(fp)
 10064cc:	e0bffe17 	ldw	r2,-8(fp)
 10064d0:	1885883a 	add	r2,r3,r2
 10064d4:	10800204 	addi	r2,r2,8
 10064d8:	10800003 	ldbu	r2,0(r2)
 10064dc:	10803fcc 	andi	r2,r2,255
 10064e0:	10800820 	cmpeqi	r2,r2,32
 10064e4:	10000d1e 	bne	r2,zero,100651c <copy_file_record_name_to_string+0x118>
			{
				file_name[flength] = file_record->extension[index];
 10064e8:	e0bffc17 	ldw	r2,-16(fp)
 10064ec:	1007883a 	mov	r3,r2
 10064f0:	e0bfff17 	ldw	r2,-4(fp)
 10064f4:	1889883a 	add	r4,r3,r2
 10064f8:	e0fffd17 	ldw	r3,-12(fp)
 10064fc:	e0bffe17 	ldw	r2,-8(fp)
 1006500:	1885883a 	add	r2,r3,r2
 1006504:	10800204 	addi	r2,r2,8
 1006508:	10800003 	ldbu	r2,0(r2)
 100650c:	20800005 	stb	r2,0(r4)
				flength = flength + 1;
 1006510:	e0bffc17 	ldw	r2,-16(fp)
 1006514:	10800044 	addi	r2,r2,1
 1006518:	e0bffc15 	stw	r2,-16(fp)
	}
	if (file_record->extension[0] != ' ')
	{
		file_name[flength] = '.';
		flength = flength + 1;
		for (index = 0; index < 3; index++)
 100651c:	e0bffd17 	ldw	r2,-12(fp)
 1006520:	10800044 	addi	r2,r2,1
 1006524:	e0bffd15 	stw	r2,-12(fp)
 1006528:	e0bffd17 	ldw	r2,-12(fp)
 100652c:	108000d0 	cmplti	r2,r2,3
 1006530:	103fe51e 	bne	r2,zero,10064c8 <copy_file_record_name_to_string+0xc4>
				file_name[flength] = file_record->extension[index];
				flength = flength + 1;
			}
		}
	}
	file_name[flength] = 0;
 1006534:	e0bffc17 	ldw	r2,-16(fp)
 1006538:	1007883a 	mov	r3,r2
 100653c:	e0bfff17 	ldw	r2,-4(fp)
 1006540:	1885883a 	add	r2,r3,r2
 1006544:	10000005 	stb	zero,0(r2)
}
 1006548:	e037883a 	mov	sp,fp
 100654c:	df000017 	ldw	fp,0(sp)
 1006550:	dec00104 	addi	sp,sp,4
 1006554:	f800283a 	ret

01006558 <alt_up_sd_card_open_dev>:
// Direct functions
///////////////////////////////////////////////////////////////////////////


alt_up_sd_card_dev* alt_up_sd_card_open_dev(const char* name)
{
 1006558:	defffc04 	addi	sp,sp,-16
 100655c:	dfc00315 	stw	ra,12(sp)
 1006560:	df000215 	stw	fp,8(sp)
 1006564:	df000204 	addi	fp,sp,8
 1006568:	e13fff15 	stw	r4,-4(fp)
	// find the device from the device list 
	// (see altera_hal/HAL/inc/priv/alt_file.h 
	// and altera_hal/HAL/src/alt_find_dev.c 
	// for details)
	alt_up_sd_card_dev *dev = (alt_up_sd_card_dev *) alt_find_dev(name, &alt_dev_list);
 100656c:	e13fff17 	ldw	r4,-4(fp)
 1006570:	01404074 	movhi	r5,257
 1006574:	296fb204 	addi	r5,r5,-16696
 1006578:	10094000 	call	1009400 <alt_find_dev>
 100657c:	e0bffe15 	stw	r2,-8(fp)

	if (dev != NULL)
 1006580:	e0bffe17 	ldw	r2,-8(fp)
 1006584:	1005003a 	cmpeq	r2,r2,zero
 1006588:	10001e1e 	bne	r2,zero,1006604 <alt_up_sd_card_open_dev+0xac>
	{
		aux_status_register = ((short int *) SD_CARD_AUX_STATUS(dev->base));
 100658c:	e0bffe17 	ldw	r2,-8(fp)
 1006590:	10800a17 	ldw	r2,40(r2)
 1006594:	10808d04 	addi	r2,r2,564
 1006598:	d0a6ca15 	stw	r2,-25816(gp)
		status_register = ((int *) SD_CARD_STATUS(dev->base));
 100659c:	e0bffe17 	ldw	r2,-8(fp)
 10065a0:	10800a17 	ldw	r2,40(r2)
 10065a4:	10808904 	addi	r2,r2,548
 10065a8:	d0a6cb15 	stw	r2,-25812(gp)
		CSD_register_w0 = ((short int *) SD_CARD_CSD(dev->base, 0));
 10065ac:	e0bffe17 	ldw	r2,-8(fp)
 10065b0:	10800a17 	ldw	r2,40(r2)
 10065b4:	10808404 	addi	r2,r2,528
 10065b8:	d0a6cc15 	stw	r2,-25808(gp)
		command_register = ((short int *) SD_CARD_COMMAND(dev->base));
 10065bc:	e0bffe17 	ldw	r2,-8(fp)
 10065c0:	10800a17 	ldw	r2,40(r2)
 10065c4:	10808c04 	addi	r2,r2,560
 10065c8:	d0a6cd15 	stw	r2,-25804(gp)
		command_argument_register = ((int *) SD_CARD_ARGUMENT(dev->base));
 10065cc:	e0bffe17 	ldw	r2,-8(fp)
 10065d0:	10800a17 	ldw	r2,40(r2)
 10065d4:	10808b04 	addi	r2,r2,556
 10065d8:	d0a6ce15 	stw	r2,-25800(gp)
		buffer_memory = (char *) SD_CARD_BUFFER(dev->base, 0);
 10065dc:	e0bffe17 	ldw	r2,-8(fp)
 10065e0:	10800a17 	ldw	r2,40(r2)
 10065e4:	d0a6cf15 	stw	r2,-25796(gp)
		device_pointer = dev;
 10065e8:	e0bffe17 	ldw	r2,-8(fp)
 10065ec:	d0a6d215 	stw	r2,-25784(gp)
		initialized = false;
 10065f0:	d026c815 	stw	zero,-25824(gp)
		is_sd_card_formated_as_FAT16 = false;
 10065f4:	d026c915 	stw	zero,-25820(gp)
		search_data.valid = false;
 10065f8:	00804074 	movhi	r2,257
 10065fc:	10b68e04 	addi	r2,r2,-9672
 1006600:	10000415 	stw	zero,16(r2)
	}
	return dev;
 1006604:	e0bffe17 	ldw	r2,-8(fp)
}
 1006608:	e037883a 	mov	sp,fp
 100660c:	dfc00117 	ldw	ra,4(sp)
 1006610:	df000017 	ldw	fp,0(sp)
 1006614:	dec00204 	addi	sp,sp,8
 1006618:	f800283a 	ret

0100661c <alt_up_sd_card_is_Present>:


bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
 100661c:	defffd04 	addi	sp,sp,-12
 1006620:	df000215 	stw	fp,8(sp)
 1006624:	df000204 	addi	fp,sp,8
    bool result = false;
 1006628:	e03fff15 	stw	zero,-4(fp)

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
 100662c:	d0a6d217 	ldw	r2,-25784(gp)
 1006630:	1005003a 	cmpeq	r2,r2,zero
 1006634:	1000081e 	bne	r2,zero,1006658 <alt_up_sd_card_is_Present+0x3c>
 1006638:	d0a6ca17 	ldw	r2,-25816(gp)
 100663c:	1080002b 	ldhuio	r2,0(r2)
 1006640:	1080008c 	andi	r2,r2,2
 1006644:	1005003a 	cmpeq	r2,r2,zero
 1006648:	1000031e 	bne	r2,zero,1006658 <alt_up_sd_card_is_Present+0x3c>
    {
        result = true;
 100664c:	00800044 	movi	r2,1
 1006650:	e0bfff15 	stw	r2,-4(fp)
bool alt_up_sd_card_is_Present(void)
// Check if there is an SD Card insterted into the SD Card socket.
{
    bool result = false;

    if ((device_pointer != NULL) && ((IORD_16DIRECT(aux_status_register,0) & 0x02) != 0))
 1006654:	00001e06 	br	10066d0 <alt_up_sd_card_is_Present+0xb4>
    {
        result = true;
    }
	else if (initialized == true)
 1006658:	d0a6c817 	ldw	r2,-25824(gp)
 100665c:	10800058 	cmpnei	r2,r2,1
 1006660:	10001b1e 	bne	r2,zero,10066d0 <alt_up_sd_card_is_Present+0xb4>
	{
		int index;

		initialized = false;
 1006664:	d026c815 	stw	zero,-25824(gp)
		search_data.valid = false;
 1006668:	00804074 	movhi	r2,257
 100666c:	10b68e04 	addi	r2,r2,-9672
 1006670:	10000415 	stw	zero,16(r2)
		is_sd_card_formated_as_FAT16 = false;
 1006674:	d026c915 	stw	zero,-25820(gp)

		for(index = 0; index < MAX_FILES_OPENED; index++)
 1006678:	e03ffe15 	stw	zero,-8(fp)
 100667c:	00001106 	br	10066c4 <alt_up_sd_card_is_Present+0xa8>
		{
			active_files[index].in_use = false;
 1006680:	e0bffe17 	ldw	r2,-8(fp)
 1006684:	00c04074 	movhi	r3,257
 1006688:	18f6a804 	addi	r3,r3,-9568
 100668c:	100491ba 	slli	r2,r2,6
 1006690:	10c5883a 	add	r2,r2,r3
 1006694:	10800f04 	addi	r2,r2,60
 1006698:	10000015 	stw	zero,0(r2)
			active_files[index].modified = false;
 100669c:	e0bffe17 	ldw	r2,-8(fp)
 10066a0:	00c04074 	movhi	r3,257
 10066a4:	18f6a804 	addi	r3,r3,-9568
 10066a8:	100491ba 	slli	r2,r2,6
 10066ac:	10c5883a 	add	r2,r2,r3
 10066b0:	10800e04 	addi	r2,r2,56
 10066b4:	10000015 	stw	zero,0(r2)

		initialized = false;
		search_data.valid = false;
		is_sd_card_formated_as_FAT16 = false;

		for(index = 0; index < MAX_FILES_OPENED; index++)
 10066b8:	e0bffe17 	ldw	r2,-8(fp)
 10066bc:	10800044 	addi	r2,r2,1
 10066c0:	e0bffe15 	stw	r2,-8(fp)
 10066c4:	e0bffe17 	ldw	r2,-8(fp)
 10066c8:	10800510 	cmplti	r2,r2,20
 10066cc:	103fec1e 	bne	r2,zero,1006680 <alt_up_sd_card_is_Present+0x64>
		{
			active_files[index].in_use = false;
			active_files[index].modified = false;
		}
	}
    return result;
 10066d0:	e0bfff17 	ldw	r2,-4(fp)
}
 10066d4:	e037883a 	mov	sp,fp
 10066d8:	df000017 	ldw	fp,0(sp)
 10066dc:	dec00104 	addi	sp,sp,4
 10066e0:	f800283a 	ret

010066e4 <alt_up_sd_card_is_FAT16>:
/* This function reads the SD card data in an effort to determine if the card is formated as a FAT16
 * volume. Please note that FAT12 has a similar format, but will not be supported by this driver.
 * If the card contains a FAT16 volume, the local data structures will be initialized to allow reading and writing
 * to the SD card as though it was a hard drive.
 */
{
 10066e4:	defffd04 	addi	sp,sp,-12
 10066e8:	dfc00215 	stw	ra,8(sp)
 10066ec:	df000115 	stw	fp,4(sp)
 10066f0:	df000104 	addi	fp,sp,4
	bool result = false;
 10066f4:	e03fff15 	stw	zero,-4(fp)

	if (alt_up_sd_card_is_Present())
 10066f8:	100661c0 	call	100661c <alt_up_sd_card_is_Present>
 10066fc:	1005003a 	cmpeq	r2,r2,zero
 1006700:	10000d1e 	bne	r2,zero,1006738 <alt_up_sd_card_is_FAT16+0x54>
	{
		// Check if an SD Card is in the SD Card slot.
		if (initialized == false)
 1006704:	d0a6c817 	ldw	r2,-25824(gp)
 1006708:	1004c03a 	cmpne	r2,r2,zero
 100670c:	1000071e 	bne	r2,zero,100672c <alt_up_sd_card_is_FAT16+0x48>
		{
			// Now determine if the card is formatted as FAT 16.
			is_sd_card_formated_as_FAT16 = Look_for_FAT16();
 1006710:	10048e00 	call	10048e0 <Look_for_FAT16>
 1006714:	d0a6c915 	stw	r2,-25820(gp)
			initialized = is_sd_card_formated_as_FAT16;
 1006718:	d0a6c917 	ldw	r2,-25820(gp)
 100671c:	d0a6c815 	stw	r2,-25824(gp)
			search_data.valid = false;
 1006720:	00804074 	movhi	r2,257
 1006724:	10b68e04 	addi	r2,r2,-9672
 1006728:	10000415 	stw	zero,16(r2)
		}
		result = is_sd_card_formated_as_FAT16;
 100672c:	d0a6c917 	ldw	r2,-25820(gp)
 1006730:	e0bfff15 	stw	r2,-4(fp)
 1006734:	00000206 	br	1006740 <alt_up_sd_card_is_FAT16+0x5c>
	}
	else
	{
		// If not then you may as well not open the device.
		initialized = false;
 1006738:	d026c815 	stw	zero,-25824(gp)
		is_sd_card_formated_as_FAT16 = false;
 100673c:	d026c915 	stw	zero,-25820(gp)
	}

	return result;
 1006740:	e0bfff17 	ldw	r2,-4(fp)
}
 1006744:	e037883a 	mov	sp,fp
 1006748:	dfc00117 	ldw	ra,4(sp)
 100674c:	df000017 	ldw	fp,0(sp)
 1006750:	dec00204 	addi	sp,sp,8
 1006754:	f800283a 	ret

01006758 <alt_up_sd_card_find_first>:
 * "first/sub/." - look through a directory named "sub", that is located within the subdirectory named "first". "first" is located in the root directory.
 * Invalid examples include:
 * "/.", "/////." - this is not the root directory.
 * "/first/." - the first character may not be a '/'.
 */
{
 1006758:	deffea04 	addi	sp,sp,-88
 100675c:	dfc01515 	stw	ra,84(sp)
 1006760:	df001415 	stw	fp,80(sp)
 1006764:	df001404 	addi	fp,sp,80
 1006768:	e13ffe15 	stw	r4,-8(fp)
 100676c:	e17fff15 	stw	r5,-4(fp)
	short int result = 2;
 1006770:	00800084 	movi	r2,2
 1006774:	e0bfec0d 	sth	r2,-80(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 1006778:	100661c0 	call	100661c <alt_up_sd_card_is_Present>
 100677c:	1005003a 	cmpeq	r2,r2,zero
 1006780:	1000241e 	bne	r2,zero,1006814 <alt_up_sd_card_find_first+0xbc>
 1006784:	d0a6c917 	ldw	r2,-25820(gp)
 1006788:	1005003a 	cmpeq	r2,r2,zero
 100678c:	1000211e 	bne	r2,zero,1006814 <alt_up_sd_card_find_first+0xbc>
	{
		int home_directory_cluster;
		t_file_record file_record;

		if (get_home_directory_cluster_for_file(directory_to_search_through, &home_directory_cluster, &file_record))
 1006790:	e17fed04 	addi	r5,fp,-76
 1006794:	e1bfee04 	addi	r6,fp,-72
 1006798:	e13ffe17 	ldw	r4,-8(fp)
 100679c:	10050e40 	call	10050e4 <get_home_directory_cluster_for_file>
 10067a0:	1005003a 	cmpeq	r2,r2,zero
 10067a4:	1000191e 	bne	r2,zero,100680c <alt_up_sd_card_find_first+0xb4>
		{
			search_data.directory_root_cluster = home_directory_cluster;
 10067a8:	e0bfed17 	ldw	r2,-76(fp)
 10067ac:	1007883a 	mov	r3,r2
 10067b0:	00804074 	movhi	r2,257
 10067b4:	10b68e04 	addi	r2,r2,-9672
 10067b8:	10c00015 	stw	r3,0(r2)
			search_data.current_cluster_index = home_directory_cluster;
 10067bc:	e0bfed17 	ldw	r2,-76(fp)
 10067c0:	1007883a 	mov	r3,r2
 10067c4:	00804074 	movhi	r2,257
 10067c8:	10b68e04 	addi	r2,r2,-9672
 10067cc:	10c00115 	stw	r3,4(r2)
			search_data.current_sector_in_cluster = 0;
 10067d0:	00804074 	movhi	r2,257
 10067d4:	10b68e04 	addi	r2,r2,-9672
 10067d8:	10000215 	stw	zero,8(r2)
			search_data.file_index_in_sector = -1;
 10067dc:	00c04074 	movhi	r3,257
 10067e0:	18f68e04 	addi	r3,r3,-9672
 10067e4:	00bfffc4 	movi	r2,-1
 10067e8:	1880030d 	sth	r2,12(r3)
			search_data.valid = true;
 10067ec:	00c04074 	movhi	r3,257
 10067f0:	18f68e04 	addi	r3,r3,-9672
 10067f4:	00800044 	movi	r2,1
 10067f8:	18800415 	stw	r2,16(r3)
			result = alt_up_sd_card_find_next(file_name);
 10067fc:	e13fff17 	ldw	r4,-4(fp)
 1006800:	100682c0 	call	100682c <alt_up_sd_card_find_next>
 1006804:	e0bfec0d 	sth	r2,-80(fp)
 1006808:	00000206 	br	1006814 <alt_up_sd_card_find_first+0xbc>
		}
		else
		{
			result = 1;
 100680c:	00800044 	movi	r2,1
 1006810:	e0bfec0d 	sth	r2,-80(fp)
		}
	}
	return result;
 1006814:	e0bfec0f 	ldh	r2,-80(fp)
}
 1006818:	e037883a 	mov	sp,fp
 100681c:	dfc00117 	ldw	ra,4(sp)
 1006820:	df000017 	ldw	fp,0(sp)
 1006824:	dec00204 	addi	sp,sp,8
 1006828:	f800283a 	ret

0100682c <alt_up_sd_card_find_next>:
 *		-1 - end of directory.
 *		0 - success
 *		2 - No card or incorrect card format.
 *		3 - find_first has not been called successfully.
 */
{
 100682c:	deffe404 	addi	sp,sp,-112
 1006830:	dfc01b15 	stw	ra,108(sp)
 1006834:	df001a15 	stw	fp,104(sp)
 1006838:	df001a04 	addi	fp,sp,104
 100683c:	e13ffe15 	stw	r4,-8(fp)
	short int result = 2;
 1006840:	00800084 	movi	r2,2
 1006844:	e0bfed0d 	sth	r2,-76(fp)
	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 1006848:	100661c0 	call	100661c <alt_up_sd_card_is_Present>
 100684c:	1005003a 	cmpeq	r2,r2,zero
 1006850:	1000da1e 	bne	r2,zero,1006bbc <alt_up_sd_card_find_next+0x390>
 1006854:	d0a6c917 	ldw	r2,-25820(gp)
 1006858:	1005003a 	cmpeq	r2,r2,zero
 100685c:	1000d71e 	bne	r2,zero,1006bbc <alt_up_sd_card_find_next+0x390>
	{
		if (search_data.valid)
 1006860:	00804074 	movhi	r2,257
 1006864:	10b68e04 	addi	r2,r2,-9672
 1006868:	10800417 	ldw	r2,16(r2)
 100686c:	1005003a 	cmpeq	r2,r2,zero
 1006870:	1000d01e 	bne	r2,zero,1006bb4 <alt_up_sd_card_find_next+0x388>
		{
			t_file_record file_record;
			int cluster = search_data.current_cluster_index;
 1006874:	00804074 	movhi	r2,257
 1006878:	10b68e04 	addi	r2,r2,-9672
 100687c:	10800117 	ldw	r2,4(r2)
 1006880:	e0bfec15 	stw	r2,-80(fp)

			if (cluster == 0)
 1006884:	e0bfec17 	ldw	r2,-80(fp)
 1006888:	1004c03a 	cmpne	r2,r2,zero
 100688c:	1000511e 	bne	r2,zero,10069d4 <alt_up_sd_card_find_next+0x1a8>
			{
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
 1006890:	00804074 	movhi	r2,257
 1006894:	10b69304 	addi	r2,r2,-9652
 1006898:	1080050b 	ldhu	r2,20(r2)
 100689c:	10bfffcc 	andi	r2,r2,65535
 10068a0:	1006917a 	slli	r3,r2,5
 10068a4:	00804074 	movhi	r2,257
 10068a8:	10b69304 	addi	r2,r2,-9652
 10068ac:	1080030b 	ldhu	r2,12(r2)
 10068b0:	10bfffcc 	andi	r2,r2,65535
 10068b4:	1885283a 	div	r2,r3,r2
 10068b8:	e0bfeb15 	stw	r2,-84(fp)
				int sector_index = search_data.current_sector_in_cluster;
 10068bc:	00804074 	movhi	r2,257
 10068c0:	10b68e04 	addi	r2,r2,-9672
 10068c4:	10800217 	ldw	r2,8(r2)
 10068c8:	e0bfea15 	stw	r2,-88(fp)
				int file_counter = search_data.file_index_in_sector+1;
 10068cc:	00804074 	movhi	r2,257
 10068d0:	10b68e04 	addi	r2,r2,-9672
 10068d4:	1080030b 	ldhu	r2,12(r2)
 10068d8:	10bfffcc 	andi	r2,r2,65535
 10068dc:	10a0001c 	xori	r2,r2,32768
 10068e0:	10a00004 	addi	r2,r2,-32768
 10068e4:	10800044 	addi	r2,r2,1
 10068e8:	e0bfe915 	stw	r2,-92(fp)
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 10068ec:	00003306 	br	10069bc <alt_up_sd_card_find_next+0x190>
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
 10068f0:	00804074 	movhi	r2,257
 10068f4:	10b69304 	addi	r2,r2,-9652
 10068f8:	10c01317 	ldw	r3,76(r2)
 10068fc:	e0bfea17 	ldw	r2,-88(fp)
 1006900:	1885883a 	add	r2,r3,r2
 1006904:	1009883a 	mov	r4,r2
 1006908:	d166d017 	ldw	r5,-25792(gp)
 100690c:	100391c0 	call	100391c <Read_Sector_Data>
 1006910:	1005003a 	cmpeq	r2,r2,zero
 1006914:	10002c1e 	bne	r2,zero,10069c8 <alt_up_sd_card_find_next+0x19c>
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 1006918:	00002106 	br	10069a0 <alt_up_sd_card_find_next+0x174>
						{
							if (Read_File_Record_At_Offset(file_counter*32, &file_record, 0, sector_index))
 100691c:	e0bfe917 	ldw	r2,-92(fp)
 1006920:	1008917a 	slli	r4,r2,5
 1006924:	e1ffea17 	ldw	r7,-88(fp)
 1006928:	e17fee04 	addi	r5,fp,-72
 100692c:	000d883a 	mov	r6,zero
 1006930:	1003d640 	call	1003d64 <Read_File_Record_At_Offset>
 1006934:	1005003a 	cmpeq	r2,r2,zero
 1006938:	1000161e 	bne	r2,zero,1006994 <alt_up_sd_card_find_next+0x168>
							{
								if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 100693c:	e0bfee03 	ldbu	r2,-72(fp)
 1006940:	10803fcc 	andi	r2,r2,255
 1006944:	1005003a 	cmpeq	r2,r2,zero
 1006948:	1000121e 	bne	r2,zero,1006994 <alt_up_sd_card_find_next+0x168>
 100694c:	e0bfee03 	ldbu	r2,-72(fp)
 1006950:	10803fcc 	andi	r2,r2,255
 1006954:	10803960 	cmpeqi	r2,r2,229
 1006958:	10000e1e 	bne	r2,zero,1006994 <alt_up_sd_card_find_next+0x168>
								{
									/* Update search structure. */
									search_data.file_index_in_sector = file_counter;
 100695c:	e0bfe917 	ldw	r2,-92(fp)
 1006960:	1007883a 	mov	r3,r2
 1006964:	00804074 	movhi	r2,257
 1006968:	10b68e04 	addi	r2,r2,-9672
 100696c:	10c0030d 	sth	r3,12(r2)
									search_data.current_sector_in_cluster = sector_index;
 1006970:	e0ffea17 	ldw	r3,-88(fp)
 1006974:	00804074 	movhi	r2,257
 1006978:	10b68e04 	addi	r2,r2,-9672
 100697c:	10c00215 	stw	r3,8(r2)

									/* Copy file name.*/
									copy_file_record_name_to_string(&file_record, file_name);
 1006980:	e13fee04 	addi	r4,fp,-72
 1006984:	e17ffe17 	ldw	r5,-8(fp)
 1006988:	10064040 	call	1006404 <copy_file_record_name_to_string>
									return 0;
 100698c:	e03fff15 	stw	zero,-4(fp)
 1006990:	00008c06 	br	1006bc4 <alt_up_sd_card_find_next+0x398>
				for (; sector_index < max_root_dir_sectors; sector_index++)
				{
					if (Read_Sector_Data(   sector_index + boot_sector_data.root_directory_sector_offset,
											fat_partition_offset_in_512_byte_sectors))
					{
						for (; file_counter < 16; file_counter++)
 1006994:	e0bfe917 	ldw	r2,-92(fp)
 1006998:	10800044 	addi	r2,r2,1
 100699c:	e0bfe915 	stw	r2,-92(fp)
 10069a0:	e0bfe917 	ldw	r2,-92(fp)
 10069a4:	10800410 	cmplti	r2,r2,16
 10069a8:	103fdc1e 	bne	r2,zero,100691c <alt_up_sd_card_find_next+0xf0>
									copy_file_record_name_to_string(&file_record, file_name);
									return 0;
								}
							}
						}
						file_counter = 0;
 10069ac:	e03fe915 	stw	zero,-92(fp)
				// Searching through the root directory
				int max_root_dir_sectors = ((32*boot_sector_data.max_number_of_dir_entires) / boot_sector_data.sector_size_in_bytes);
				int sector_index = search_data.current_sector_in_cluster;
				int file_counter = search_data.file_index_in_sector+1;
    
				for (; sector_index < max_root_dir_sectors; sector_index++)
 10069b0:	e0bfea17 	ldw	r2,-88(fp)
 10069b4:	10800044 	addi	r2,r2,1
 10069b8:	e0bfea15 	stw	r2,-88(fp)
 10069bc:	e0ffea17 	ldw	r3,-88(fp)
 10069c0:	e0bfeb17 	ldw	r2,-84(fp)
 10069c4:	18bfca16 	blt	r3,r2,10068f0 <alt_up_sd_card_find_next+0xc4>
					else
					{
						break;
					}
				}
				result = -1;
 10069c8:	00bfffc4 	movi	r2,-1
 10069cc:	e0bfed0d 	sth	r2,-76(fp)
 10069d0:	00007a06 	br	1006bbc <alt_up_sd_card_find_next+0x390>
			}
			else
			{
				int file_counter = search_data.file_index_in_sector+1;
 10069d4:	00804074 	movhi	r2,257
 10069d8:	10b68e04 	addi	r2,r2,-9672
 10069dc:	1080030b 	ldhu	r2,12(r2)
 10069e0:	10bfffcc 	andi	r2,r2,65535
 10069e4:	10a0001c 	xori	r2,r2,32768
 10069e8:	10a00004 	addi	r2,r2,-32768
 10069ec:	10800044 	addi	r2,r2,1
 10069f0:	e0bfe815 	stw	r2,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
 10069f4:	e0bfec17 	ldw	r2,-80(fp)
 10069f8:	10ffff84 	addi	r3,r2,-2
 10069fc:	00804074 	movhi	r2,257
 1006a00:	10b69304 	addi	r2,r2,-9652
 1006a04:	10800383 	ldbu	r2,14(r2)
 1006a08:	10803fcc 	andi	r2,r2,255
 1006a0c:	1885383a 	mul	r2,r3,r2
 1006a10:	1007883a 	mov	r3,r2
 1006a14:	00804074 	movhi	r2,257
 1006a18:	10b69304 	addi	r2,r2,-9652
 1006a1c:	10801417 	ldw	r2,80(r2)
 1006a20:	1885883a 	add	r2,r3,r2
 1006a24:	e0bfe715 	stw	r2,-100(fp)
					int sector_index = search_data.current_sector_in_cluster;
 1006a28:	00804074 	movhi	r2,257
 1006a2c:	10b68e04 	addi	r2,r2,-9672
 1006a30:	10800217 	ldw	r2,8(r2)
 1006a34:	e0bfe615 	stw	r2,-104(fp)
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 1006a38:	00003406 	br	1006b0c <alt_up_sd_card_find_next+0x2e0>
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
 1006a3c:	e0ffe617 	ldw	r3,-104(fp)
 1006a40:	e0bfe717 	ldw	r2,-100(fp)
 1006a44:	1889883a 	add	r4,r3,r2
 1006a48:	d166d017 	ldw	r5,-25792(gp)
 1006a4c:	100391c0 	call	100391c <Read_Sector_Data>
 1006a50:	1005003a 	cmpeq	r2,r2,zero
 1006a54:	1000331e 	bne	r2,zero,1006b24 <alt_up_sd_card_find_next+0x2f8>
						{        
							for (; file_counter < 16; file_counter++)
 1006a58:	00002506 	br	1006af0 <alt_up_sd_card_find_next+0x2c4>
							{
								if (Read_File_Record_At_Offset(file_counter*32, &file_record, cluster, sector_index))
 1006a5c:	e0bfe817 	ldw	r2,-96(fp)
 1006a60:	1008917a 	slli	r4,r2,5
 1006a64:	e1bfec17 	ldw	r6,-80(fp)
 1006a68:	e1ffe617 	ldw	r7,-104(fp)
 1006a6c:	e17fee04 	addi	r5,fp,-72
 1006a70:	1003d640 	call	1003d64 <Read_File_Record_At_Offset>
 1006a74:	1005003a 	cmpeq	r2,r2,zero
 1006a78:	10001a1e 	bne	r2,zero,1006ae4 <alt_up_sd_card_find_next+0x2b8>
								{
									if ((file_record.name[0] != 0) && (file_record.name[0] != 0xe5))
 1006a7c:	e0bfee03 	ldbu	r2,-72(fp)
 1006a80:	10803fcc 	andi	r2,r2,255
 1006a84:	1005003a 	cmpeq	r2,r2,zero
 1006a88:	1000161e 	bne	r2,zero,1006ae4 <alt_up_sd_card_find_next+0x2b8>
 1006a8c:	e0bfee03 	ldbu	r2,-72(fp)
 1006a90:	10803fcc 	andi	r2,r2,255
 1006a94:	10803960 	cmpeqi	r2,r2,229
 1006a98:	1000121e 	bne	r2,zero,1006ae4 <alt_up_sd_card_find_next+0x2b8>
									{
										/* Update search structure. */
										search_data.current_cluster_index = cluster;
 1006a9c:	e0ffec17 	ldw	r3,-80(fp)
 1006aa0:	00804074 	movhi	r2,257
 1006aa4:	10b68e04 	addi	r2,r2,-9672
 1006aa8:	10c00115 	stw	r3,4(r2)
										search_data.file_index_in_sector = file_counter;
 1006aac:	e0bfe817 	ldw	r2,-96(fp)
 1006ab0:	1007883a 	mov	r3,r2
 1006ab4:	00804074 	movhi	r2,257
 1006ab8:	10b68e04 	addi	r2,r2,-9672
 1006abc:	10c0030d 	sth	r3,12(r2)
										search_data.current_sector_in_cluster = sector_index;
 1006ac0:	e0ffe617 	ldw	r3,-104(fp)
 1006ac4:	00804074 	movhi	r2,257
 1006ac8:	10b68e04 	addi	r2,r2,-9672
 1006acc:	10c00215 	stw	r3,8(r2)

										/* Copy file name.*/
										copy_file_record_name_to_string(&file_record, file_name);
 1006ad0:	e13fee04 	addi	r4,fp,-72
 1006ad4:	e17ffe17 	ldw	r5,-8(fp)
 1006ad8:	10064040 	call	1006404 <copy_file_record_name_to_string>
										return 0;
 1006adc:	e03fff15 	stw	zero,-4(fp)
 1006ae0:	00003806 	br	1006bc4 <alt_up_sd_card_find_next+0x398>
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
					{
						if (Read_Sector_Data(sector_index + start_sector, fat_partition_offset_in_512_byte_sectors))
						{        
							for (; file_counter < 16; file_counter++)
 1006ae4:	e0bfe817 	ldw	r2,-96(fp)
 1006ae8:	10800044 	addi	r2,r2,1
 1006aec:	e0bfe815 	stw	r2,-96(fp)
 1006af0:	e0bfe817 	ldw	r2,-96(fp)
 1006af4:	10800410 	cmplti	r2,r2,16
 1006af8:	103fd81e 	bne	r2,zero,1006a5c <alt_up_sd_card_find_next+0x230>
										copy_file_record_name_to_string(&file_record, file_name);
										return 0;
									}
								}
							}
							file_counter = 0;
 1006afc:	e03fe815 	stw	zero,-96(fp)
				do 
				{
					int start_sector = ( cluster - 2 ) * ( boot_sector_data.sectors_per_cluster ) + boot_sector_data.data_sector_offset;
					int sector_index = search_data.current_sector_in_cluster;
			        
					for (; sector_index < boot_sector_data.sectors_per_cluster; sector_index++)
 1006b00:	e0bfe617 	ldw	r2,-104(fp)
 1006b04:	10800044 	addi	r2,r2,1
 1006b08:	e0bfe615 	stw	r2,-104(fp)
 1006b0c:	00804074 	movhi	r2,257
 1006b10:	10b69304 	addi	r2,r2,-9652
 1006b14:	10800383 	ldbu	r2,14(r2)
 1006b18:	10c03fcc 	andi	r3,r2,255
 1006b1c:	e0bfe617 	ldw	r2,-104(fp)
 1006b20:	10ffc616 	blt	r2,r3,1006a3c <alt_up_sd_card_find_next+0x210>
							break;
						}
					}
					// If this is the end of the cluster and the file has not been found, then see if there is another cluster
					// that holds data for the current directory.
					if (sector_index >= boot_sector_data.sectors_per_cluster)
 1006b24:	00804074 	movhi	r2,257
 1006b28:	10b69304 	addi	r2,r2,-9652
 1006b2c:	10800383 	ldbu	r2,14(r2)
 1006b30:	10c03fcc 	andi	r3,r2,255
 1006b34:	e0bfe617 	ldw	r2,-104(fp)
 1006b38:	10c01a16 	blt	r2,r3,1006ba4 <alt_up_sd_card_find_next+0x378>
					{
						short int new_cluster;

						if (get_cluster_flag(cluster, &new_cluster))
 1006b3c:	e13fec17 	ldw	r4,-80(fp)
 1006b40:	e17fed84 	addi	r5,fp,-74
 1006b44:	1003a180 	call	1003a18 <get_cluster_flag>
 1006b48:	1005003a 	cmpeq	r2,r2,zero
 1006b4c:	1000131e 	bne	r2,zero,1006b9c <alt_up_sd_card_find_next+0x370>
						{
							if ((new_cluster & 0x0000fff8) == 0x0000fff8)
 1006b50:	e0bfed8b 	ldhu	r2,-74(fp)
 1006b54:	10bfffcc 	andi	r2,r2,65535
 1006b58:	10a0001c 	xori	r2,r2,32768
 1006b5c:	10a00004 	addi	r2,r2,-32768
 1006b60:	10fffe0c 	andi	r3,r2,65528
 1006b64:	00bffe14 	movui	r2,65528
 1006b68:	1880051e 	bne	r3,r2,1006b80 <alt_up_sd_card_find_next+0x354>
							{
								result = -1;
 1006b6c:	00bfffc4 	movi	r2,-1
 1006b70:	e0bfed0d 	sth	r2,-76(fp)
								search_data.valid = false;
 1006b74:	00804074 	movhi	r2,257
 1006b78:	10b68e04 	addi	r2,r2,-9672
 1006b7c:	10000415 	stw	zero,16(r2)
							}
							cluster = ((new_cluster) & 0x0000fff8);
 1006b80:	e0bfed8b 	ldhu	r2,-74(fp)
 1006b84:	10bfffcc 	andi	r2,r2,65535
 1006b88:	10a0001c 	xori	r2,r2,32768
 1006b8c:	10a00004 	addi	r2,r2,-32768
 1006b90:	10bffe0c 	andi	r2,r2,65528
 1006b94:	e0bfec15 	stw	r2,-80(fp)
 1006b98:	00000206 	br	1006ba4 <alt_up_sd_card_find_next+0x378>
						}
						else
						{
							// Error encountered.                 
							result = -1;
 1006b9c:	00bfffc4 	movi	r2,-1
 1006ba0:	e0bfed0d 	sth	r2,-76(fp)
						}
					}              
				} while (cluster < 0x0000fff8);
 1006ba4:	e0ffec17 	ldw	r3,-80(fp)
 1006ba8:	00bffdd4 	movui	r2,65527
 1006bac:	10ff910e 	bge	r2,r3,10069f4 <alt_up_sd_card_find_next+0x1c8>
 1006bb0:	00000206 	br	1006bbc <alt_up_sd_card_find_next+0x390>
			}
		}
		else
		{
			// Call Find_First first.
			result = 3;
 1006bb4:	008000c4 	movi	r2,3
 1006bb8:	e0bfed0d 	sth	r2,-76(fp)
		}
	}
	return result;
 1006bbc:	e0bfed0f 	ldh	r2,-76(fp)
 1006bc0:	e0bfff15 	stw	r2,-4(fp)
 1006bc4:	e0bfff17 	ldw	r2,-4(fp)
}
 1006bc8:	e037883a 	mov	sp,fp
 1006bcc:	dfc00117 	ldw	ra,4(sp)
 1006bd0:	df000017 	ldw	fp,0(sp)
 1006bd4:	dec00204 	addi	sp,sp,8
 1006bd8:	f800283a 	ret

01006bdc <alt_up_sd_card_fopen>:
 *      create - a flag set to true to create a file if it does not already exist
 * Output:
 *      An index to the file record assigned to the specified file. -1 is returned if the file could not be opened.
 *		Return -2 if the specified file has already been opened previously.
 */
{
 1006bdc:	deffe804 	addi	sp,sp,-96
 1006be0:	dfc01715 	stw	ra,92(sp)
 1006be4:	df001615 	stw	fp,88(sp)
 1006be8:	df001604 	addi	fp,sp,88
 1006bec:	e13ffd15 	stw	r4,-12(fp)
 1006bf0:	e17ffe15 	stw	r5,-8(fp)
	short int file_record_index = -1;
 1006bf4:	00bfffc4 	movi	r2,-1
 1006bf8:	e0bfeb0d 	sth	r2,-84(fp)

	if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 1006bfc:	100661c0 	call	100661c <alt_up_sd_card_is_Present>
 1006c00:	1005003a 	cmpeq	r2,r2,zero
 1006c04:	1000d71e 	bne	r2,zero,1006f64 <alt_up_sd_card_fopen+0x388>
 1006c08:	d0a6c917 	ldw	r2,-25820(gp)
 1006c0c:	1005003a 	cmpeq	r2,r2,zero
 1006c10:	1000d41e 	bne	r2,zero,1006f64 <alt_up_sd_card_fopen+0x388>
	{
        unsigned int home_directory_cluster = 0;
 1006c14:	e03fec15 	stw	zero,-80(fp)
         * Rules:
         *  - no spaces
         *  - at most 12 chatacters per name, with a period in 9th position.
         *  - a / or a \ every at most 12 characters.
         */
        filename_to_upper_case(name);
 1006c18:	e13ffd17 	ldw	r4,-12(fp)
 1006c1c:	10049d80 	call	10049d8 <filename_to_upper_case>
        if (check_file_name_for_FAT16_compliance(name))
 1006c20:	e13ffd17 	ldw	r4,-12(fp)
 1006c24:	1004aa80 	call	1004aa8 <check_file_name_for_FAT16_compliance>
 1006c28:	1005003a 	cmpeq	r2,r2,zero
 1006c2c:	1000cd1e 	bne	r2,zero,1006f64 <alt_up_sd_card_fopen+0x388>
        {
			int index;

            /* Get home directory cluster location for the specified file. 0 means root directory. */
            if (!get_home_directory_cluster_for_file(name, &home_directory_cluster, &home_dir))
 1006c30:	e17fec04 	addi	r5,fp,-80
 1006c34:	e1bfed04 	addi	r6,fp,-76
 1006c38:	e13ffd17 	ldw	r4,-12(fp)
 1006c3c:	10050e40 	call	10050e4 <get_home_directory_cluster_for_file>
 1006c40:	1004c03a 	cmpne	r2,r2,zero
 1006c44:	1000031e 	bne	r2,zero,1006c54 <alt_up_sd_card_fopen+0x78>
            {
                return file_record_index;
 1006c48:	e0bfeb0f 	ldh	r2,-84(fp)
 1006c4c:	e0bfff15 	stw	r2,-4(fp)
 1006c50:	0000c606 	br	1006f6c <alt_up_sd_card_fopen+0x390>
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 1006c54:	e03fea15 	stw	zero,-88(fp)
 1006c58:	00000f06 	br	1006c98 <alt_up_sd_card_fopen+0xbc>
    		{
    			if (active_files[index].in_use == false)
 1006c5c:	e0bfea17 	ldw	r2,-88(fp)
 1006c60:	00c04074 	movhi	r3,257
 1006c64:	18f6a804 	addi	r3,r3,-9568
 1006c68:	100491ba 	slli	r2,r2,6
 1006c6c:	10c5883a 	add	r2,r2,r3
 1006c70:	10800f04 	addi	r2,r2,60
 1006c74:	10800017 	ldw	r2,0(r2)
 1006c78:	1004c03a 	cmpne	r2,r2,zero
 1006c7c:	1000031e 	bne	r2,zero,1006c8c <alt_up_sd_card_fopen+0xb0>
    			{
    				file_record_index = index;
 1006c80:	e0bfea17 	ldw	r2,-88(fp)
 1006c84:	e0bfeb0d 	sth	r2,-84(fp)
    				break;
 1006c88:	00000606 	br	1006ca4 <alt_up_sd_card_fopen+0xc8>
            {
                return file_record_index;
            }
            
    		/* Find a free file slot to store file specs in. */
    		for (index = 0; index < MAX_FILES_OPENED; index++)
 1006c8c:	e0bfea17 	ldw	r2,-88(fp)
 1006c90:	10800044 	addi	r2,r2,1
 1006c94:	e0bfea15 	stw	r2,-88(fp)
 1006c98:	e0bfea17 	ldw	r2,-88(fp)
 1006c9c:	10800510 	cmplti	r2,r2,20
 1006ca0:	103fee1e 	bne	r2,zero,1006c5c <alt_up_sd_card_fopen+0x80>
    			{
    				file_record_index = index;
    				break;
    			}
    		}
    		if (file_record_index >= 0)
 1006ca4:	e0bfeb0f 	ldh	r2,-84(fp)
 1006ca8:	1004803a 	cmplt	r2,r2,zero
 1006cac:	1000ad1e 	bne	r2,zero,1006f64 <alt_up_sd_card_fopen+0x388>
    		{
    			/* If file record is found, then look for the specified file. If the create flag is set to true 
    			 * and the file is not found, then it should be created in the current directory. 
    			 */
                
                if (find_file_in_directory(home_directory_cluster, name, &(active_files[file_record_index])))
 1006cb0:	e0bfec17 	ldw	r2,-80(fp)
 1006cb4:	1009883a 	mov	r4,r2
 1006cb8:	e0bfeb0f 	ldh	r2,-84(fp)
 1006cbc:	100491ba 	slli	r2,r2,6
 1006cc0:	1007883a 	mov	r3,r2
 1006cc4:	00804074 	movhi	r2,257
 1006cc8:	10b6a804 	addi	r2,r2,-9568
 1006ccc:	188d883a 	add	r6,r3,r2
 1006cd0:	e17ffd17 	ldw	r5,-12(fp)
 1006cd4:	10055f80 	call	10055f8 <find_file_in_directory>
 1006cd8:	1005003a 	cmpeq	r2,r2,zero
 1006cdc:	10007d1e 	bne	r2,zero,1006ed4 <alt_up_sd_card_fopen+0x2f8>
                {
                    if (create)
 1006ce0:	e0bffe17 	ldw	r2,-8(fp)
 1006ce4:	1005003a 	cmpeq	r2,r2,zero
 1006ce8:	1000031e 	bne	r2,zero,1006cf8 <alt_up_sd_card_fopen+0x11c>
                    {
                        /* Do not allow overwriting existing files for now. */
                        return -1;
 1006cec:	00bfffc4 	movi	r2,-1
 1006cf0:	e0bfff15 	stw	r2,-4(fp)
 1006cf4:	00009d06 	br	1006f6c <alt_up_sd_card_fopen+0x390>
                    }
                    active_files[file_record_index].current_cluster_index = active_files[file_record_index].start_cluster_index;
 1006cf8:	e17feb0f 	ldh	r5,-84(fp)
 1006cfc:	e0bfeb0f 	ldh	r2,-84(fp)
 1006d00:	00c04074 	movhi	r3,257
 1006d04:	18f6a804 	addi	r3,r3,-9568
 1006d08:	100491ba 	slli	r2,r2,6
 1006d0c:	10c5883a 	add	r2,r2,r3
 1006d10:	10800504 	addi	r2,r2,20
 1006d14:	1080008b 	ldhu	r2,2(r2)
 1006d18:	113fffcc 	andi	r4,r2,65535
 1006d1c:	00c04074 	movhi	r3,257
 1006d20:	18f6a804 	addi	r3,r3,-9568
 1006d24:	280491ba 	slli	r2,r5,6
 1006d28:	10c5883a 	add	r2,r2,r3
 1006d2c:	10800704 	addi	r2,r2,28
 1006d30:	11000015 	stw	r4,0(r2)
                    active_files[file_record_index].current_sector_in_cluster = 0;
 1006d34:	e0bfeb0f 	ldh	r2,-84(fp)
 1006d38:	00c04074 	movhi	r3,257
 1006d3c:	18f6a804 	addi	r3,r3,-9568
 1006d40:	100491ba 	slli	r2,r2,6
 1006d44:	10c5883a 	add	r2,r2,r3
 1006d48:	10800804 	addi	r2,r2,32
 1006d4c:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].current_byte_position = 0;
 1006d50:	e0bfeb0f 	ldh	r2,-84(fp)
 1006d54:	00c04074 	movhi	r3,257
 1006d58:	18f6a804 	addi	r3,r3,-9568
 1006d5c:	100491ba 	slli	r2,r2,6
 1006d60:	10c5883a 	add	r2,r2,r3
 1006d64:	10800904 	addi	r2,r2,36
 1006d68:	10000015 	stw	zero,0(r2)
                    active_files[file_record_index].in_use = true;
 1006d6c:	e0bfeb0f 	ldh	r2,-84(fp)
 1006d70:	00c04074 	movhi	r3,257
 1006d74:	18f6a804 	addi	r3,r3,-9568
 1006d78:	100491ba 	slli	r2,r2,6
 1006d7c:	10c5883a 	add	r2,r2,r3
 1006d80:	10c00f04 	addi	r3,r2,60
 1006d84:	00800044 	movi	r2,1
 1006d88:	18800015 	stw	r2,0(r3)
    				active_files[file_record_index].modified = false;
 1006d8c:	e0bfeb0f 	ldh	r2,-84(fp)
 1006d90:	00c04074 	movhi	r3,257
 1006d94:	18f6a804 	addi	r3,r3,-9568
 1006d98:	100491ba 	slli	r2,r2,6
 1006d9c:	10c5883a 	add	r2,r2,r3
 1006da0:	10800e04 	addi	r2,r2,56
 1006da4:	10000015 	stw	zero,0(r2)

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 1006da8:	e03fea15 	stw	zero,-88(fp)
 1006dac:	00004506 	br	1006ec4 <alt_up_sd_card_fopen+0x2e8>
					{
						if ((file_record_index != index) && (active_files[index].in_use == true))
 1006db0:	e0ffeb0f 	ldh	r3,-84(fp)
 1006db4:	e0bfea17 	ldw	r2,-88(fp)
 1006db8:	18803f26 	beq	r3,r2,1006eb8 <alt_up_sd_card_fopen+0x2dc>
 1006dbc:	e0bfea17 	ldw	r2,-88(fp)
 1006dc0:	00c04074 	movhi	r3,257
 1006dc4:	18f6a804 	addi	r3,r3,-9568
 1006dc8:	100491ba 	slli	r2,r2,6
 1006dcc:	10c5883a 	add	r2,r2,r3
 1006dd0:	10800f04 	addi	r2,r2,60
 1006dd4:	10800017 	ldw	r2,0(r2)
 1006dd8:	10800058 	cmpnei	r2,r2,1
 1006ddc:	1000361e 	bne	r2,zero,1006eb8 <alt_up_sd_card_fopen+0x2dc>
						{
							if ((active_files[file_record_index].file_record_cluster == active_files[index].file_record_cluster) &&
 1006de0:	e0bfeb0f 	ldh	r2,-84(fp)
 1006de4:	00c04074 	movhi	r3,257
 1006de8:	18f6a804 	addi	r3,r3,-9568
 1006dec:	100491ba 	slli	r2,r2,6
 1006df0:	10c5883a 	add	r2,r2,r3
 1006df4:	10800a04 	addi	r2,r2,40
 1006df8:	11000017 	ldw	r4,0(r2)
 1006dfc:	e0bfea17 	ldw	r2,-88(fp)
 1006e00:	00c04074 	movhi	r3,257
 1006e04:	18f6a804 	addi	r3,r3,-9568
 1006e08:	100491ba 	slli	r2,r2,6
 1006e0c:	10c5883a 	add	r2,r2,r3
 1006e10:	10800a04 	addi	r2,r2,40
 1006e14:	10800017 	ldw	r2,0(r2)
 1006e18:	2080271e 	bne	r4,r2,1006eb8 <alt_up_sd_card_fopen+0x2dc>
 1006e1c:	e0bfeb0f 	ldh	r2,-84(fp)
 1006e20:	00c04074 	movhi	r3,257
 1006e24:	18f6a804 	addi	r3,r3,-9568
 1006e28:	100491ba 	slli	r2,r2,6
 1006e2c:	10c5883a 	add	r2,r2,r3
 1006e30:	10800b04 	addi	r2,r2,44
 1006e34:	11000017 	ldw	r4,0(r2)
 1006e38:	e0bfea17 	ldw	r2,-88(fp)
 1006e3c:	00c04074 	movhi	r3,257
 1006e40:	18f6a804 	addi	r3,r3,-9568
 1006e44:	100491ba 	slli	r2,r2,6
 1006e48:	10c5883a 	add	r2,r2,r3
 1006e4c:	10800b04 	addi	r2,r2,44
 1006e50:	10800017 	ldw	r2,0(r2)
 1006e54:	2080181e 	bne	r4,r2,1006eb8 <alt_up_sd_card_fopen+0x2dc>
 1006e58:	e0bfeb0f 	ldh	r2,-84(fp)
 1006e5c:	00c04074 	movhi	r3,257
 1006e60:	18f6a804 	addi	r3,r3,-9568
 1006e64:	100491ba 	slli	r2,r2,6
 1006e68:	10c5883a 	add	r2,r2,r3
 1006e6c:	10800c04 	addi	r2,r2,48
 1006e70:	1100000b 	ldhu	r4,0(r2)
 1006e74:	e0bfea17 	ldw	r2,-88(fp)
 1006e78:	00c04074 	movhi	r3,257
 1006e7c:	18f6a804 	addi	r3,r3,-9568
 1006e80:	100491ba 	slli	r2,r2,6
 1006e84:	10c5883a 	add	r2,r2,r3
 1006e88:	10800c04 	addi	r2,r2,48
 1006e8c:	1080000b 	ldhu	r2,0(r2)
 1006e90:	20ffffcc 	andi	r3,r4,65535
 1006e94:	18e0001c 	xori	r3,r3,32768
 1006e98:	18e00004 	addi	r3,r3,-32768
 1006e9c:	10bfffcc 	andi	r2,r2,65535
 1006ea0:	10a0001c 	xori	r2,r2,32768
 1006ea4:	10a00004 	addi	r2,r2,-32768
 1006ea8:	1880031e 	bne	r3,r2,1006eb8 <alt_up_sd_card_fopen+0x2dc>
								(active_files[file_record_index].file_record_sector_in_cluster == active_files[index].file_record_sector_in_cluster) &&
								(active_files[file_record_index].file_record_offset == active_files[index].file_record_offset))
							{
								// file already in use.
								file_record_index = -2;
 1006eac:	00bfff84 	movi	r2,-2
 1006eb0:	e0bfeb0d 	sth	r2,-84(fp)
								break;
 1006eb4:	00002b06 	br	1006f64 <alt_up_sd_card_fopen+0x388>
                    active_files[file_record_index].current_byte_position = 0;
                    active_files[file_record_index].in_use = true;
    				active_files[file_record_index].modified = false;

					/* Check if the file has already been opened. */
					for (index = 0; index < MAX_FILES_OPENED; index++)
 1006eb8:	e0bfea17 	ldw	r2,-88(fp)
 1006ebc:	10800044 	addi	r2,r2,1
 1006ec0:	e0bfea15 	stw	r2,-88(fp)
 1006ec4:	e0bfea17 	ldw	r2,-88(fp)
 1006ec8:	10800510 	cmplti	r2,r2,20
 1006ecc:	103fb81e 	bne	r2,zero,1006db0 <alt_up_sd_card_fopen+0x1d4>
 1006ed0:	00002406 	br	1006f64 <alt_up_sd_card_fopen+0x388>
							}
						}
					}

                }
                else if (create)
 1006ed4:	e0bffe17 	ldw	r2,-8(fp)
 1006ed8:	1005003a 	cmpeq	r2,r2,zero
 1006edc:	10001f1e 	bne	r2,zero,1006f5c <alt_up_sd_card_fopen+0x380>
                {
                    /* Create file if needed. */
                    if (create_file(name, &(active_files[file_record_index]), &home_dir))
 1006ee0:	e0bfeb0f 	ldh	r2,-84(fp)
 1006ee4:	100491ba 	slli	r2,r2,6
 1006ee8:	1007883a 	mov	r3,r2
 1006eec:	00804074 	movhi	r2,257
 1006ef0:	10b6a804 	addi	r2,r2,-9568
 1006ef4:	188b883a 	add	r5,r3,r2
 1006ef8:	e1bfed04 	addi	r6,fp,-76
 1006efc:	e13ffd17 	ldw	r4,-12(fp)
 1006f00:	10061300 	call	1006130 <create_file>
 1006f04:	1005003a 	cmpeq	r2,r2,zero
 1006f08:	1000111e 	bne	r2,zero,1006f50 <alt_up_sd_card_fopen+0x374>
                    {
                        active_files[file_record_index].in_use = true;
 1006f0c:	e0bfeb0f 	ldh	r2,-84(fp)
 1006f10:	00c04074 	movhi	r3,257
 1006f14:	18f6a804 	addi	r3,r3,-9568
 1006f18:	100491ba 	slli	r2,r2,6
 1006f1c:	10c5883a 	add	r2,r2,r3
 1006f20:	10c00f04 	addi	r3,r2,60
 1006f24:	00800044 	movi	r2,1
 1006f28:	18800015 	stw	r2,0(r3)
    					active_files[file_record_index].modified = true;
 1006f2c:	e0bfeb0f 	ldh	r2,-84(fp)
 1006f30:	00c04074 	movhi	r3,257
 1006f34:	18f6a804 	addi	r3,r3,-9568
 1006f38:	100491ba 	slli	r2,r2,6
 1006f3c:	10c5883a 	add	r2,r2,r3
 1006f40:	10c00e04 	addi	r3,r2,56
 1006f44:	00800044 	movi	r2,1
 1006f48:	18800015 	stw	r2,0(r3)
 1006f4c:	00000506 	br	1006f64 <alt_up_sd_card_fopen+0x388>
                    }
                    else
                    {
                        /* If file creation fails then return an invalid file handle. */
                        file_record_index = -1;
 1006f50:	00bfffc4 	movi	r2,-1
 1006f54:	e0bfeb0d 	sth	r2,-84(fp)
 1006f58:	00000206 	br	1006f64 <alt_up_sd_card_fopen+0x388>
                    }                
                }
                else
                {
                    /* Otherwise the file could not be opened.*/
                    file_record_index = -1;
 1006f5c:	00bfffc4 	movi	r2,-1
 1006f60:	e0bfeb0d 	sth	r2,-84(fp)
                }
    		}
        }
	}

	return file_record_index;
 1006f64:	e0bfeb0f 	ldh	r2,-84(fp)
 1006f68:	e0bfff15 	stw	r2,-4(fp)
 1006f6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1006f70:	e037883a 	mov	sp,fp
 1006f74:	dfc00117 	ldw	ra,4(sp)
 1006f78:	df000017 	ldw	fp,0(sp)
 1006f7c:	dec00204 	addi	sp,sp,8
 1006f80:	f800283a 	ret

01006f84 <alt_up_sd_card_set_attributes>:


void alt_up_sd_card_set_attributes(short int file_handle, short int attributes)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 1006f84:	defffd04 	addi	sp,sp,-12
 1006f88:	df000215 	stw	fp,8(sp)
 1006f8c:	df000204 	addi	fp,sp,8
 1006f90:	e13ffe0d 	sth	r4,-8(fp)
 1006f94:	e17fff0d 	sth	r5,-4(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 1006f98:	e0bffe0f 	ldh	r2,-8(fp)
 1006f9c:	1004803a 	cmplt	r2,r2,zero
 1006fa0:	1000181e 	bne	r2,zero,1007004 <alt_up_sd_card_set_attributes+0x80>
 1006fa4:	e0bffe0f 	ldh	r2,-8(fp)
 1006fa8:	10800508 	cmpgei	r2,r2,20
 1006fac:	1000151e 	bne	r2,zero,1007004 <alt_up_sd_card_set_attributes+0x80>
    {
        if (active_files[file_handle].in_use)
 1006fb0:	e0bffe0f 	ldh	r2,-8(fp)
 1006fb4:	00c04074 	movhi	r3,257
 1006fb8:	18f6a804 	addi	r3,r3,-9568
 1006fbc:	100491ba 	slli	r2,r2,6
 1006fc0:	10c5883a 	add	r2,r2,r3
 1006fc4:	10800f04 	addi	r2,r2,60
 1006fc8:	10800017 	ldw	r2,0(r2)
 1006fcc:	1005003a 	cmpeq	r2,r2,zero
 1006fd0:	10000c1e 	bne	r2,zero,1007004 <alt_up_sd_card_set_attributes+0x80>
        {
            active_files[file_handle].attributes = ((char)(attributes & 0x00ff));
 1006fd4:	e17ffe0f 	ldh	r5,-8(fp)
 1006fd8:	e0bfff0b 	ldhu	r2,-4(fp)
 1006fdc:	1007883a 	mov	r3,r2
 1006fe0:	00bfffc4 	movi	r2,-1
 1006fe4:	1884703a 	and	r2,r3,r2
 1006fe8:	1009883a 	mov	r4,r2
 1006fec:	00c04074 	movhi	r3,257
 1006ff0:	18f6a804 	addi	r3,r3,-9568
 1006ff4:	280491ba 	slli	r2,r5,6
 1006ff8:	10c5883a 	add	r2,r2,r3
 1006ffc:	10800204 	addi	r2,r2,8
 1007000:	110000c5 	stb	r4,3(r2)
        }
    }
}
 1007004:	e037883a 	mov	sp,fp
 1007008:	df000017 	ldw	fp,0(sp)
 100700c:	dec00104 	addi	sp,sp,4
 1007010:	f800283a 	ret

01007014 <alt_up_sd_card_get_attributes>:


short int alt_up_sd_card_get_attributes(short int file_handle)
/* Return file attributes, or -1 if the file_handle is invalid.
 */
{
 1007014:	defffd04 	addi	sp,sp,-12
 1007018:	df000215 	stw	fp,8(sp)
 100701c:	df000204 	addi	fp,sp,8
 1007020:	e13fff0d 	sth	r4,-4(fp)
	short int result = -1;
 1007024:	00bfffc4 	movi	r2,-1
 1007028:	e0bffe0d 	sth	r2,-8(fp)
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 100702c:	e0bfff0f 	ldh	r2,-4(fp)
 1007030:	1004803a 	cmplt	r2,r2,zero
 1007034:	1000151e 	bne	r2,zero,100708c <alt_up_sd_card_get_attributes+0x78>
 1007038:	e0bfff0f 	ldh	r2,-4(fp)
 100703c:	10800508 	cmpgei	r2,r2,20
 1007040:	1000121e 	bne	r2,zero,100708c <alt_up_sd_card_get_attributes+0x78>
    {
        if (active_files[file_handle].in_use)
 1007044:	e0bfff0f 	ldh	r2,-4(fp)
 1007048:	00c04074 	movhi	r3,257
 100704c:	18f6a804 	addi	r3,r3,-9568
 1007050:	100491ba 	slli	r2,r2,6
 1007054:	10c5883a 	add	r2,r2,r3
 1007058:	10800f04 	addi	r2,r2,60
 100705c:	10800017 	ldw	r2,0(r2)
 1007060:	1005003a 	cmpeq	r2,r2,zero
 1007064:	1000091e 	bne	r2,zero,100708c <alt_up_sd_card_get_attributes+0x78>
		{
			result = ((active_files[file_handle].attributes) & 0x00ff);
 1007068:	e0bfff0f 	ldh	r2,-4(fp)
 100706c:	00c04074 	movhi	r3,257
 1007070:	18f6a804 	addi	r3,r3,-9568
 1007074:	100491ba 	slli	r2,r2,6
 1007078:	10c5883a 	add	r2,r2,r3
 100707c:	10800204 	addi	r2,r2,8
 1007080:	108000c3 	ldbu	r2,3(r2)
 1007084:	10803fcc 	andi	r2,r2,255
 1007088:	e0bffe0d 	sth	r2,-8(fp)
		}
	}
	return result;
 100708c:	e0bffe0f 	ldh	r2,-8(fp)
}
 1007090:	e037883a 	mov	sp,fp
 1007094:	df000017 	ldw	fp,0(sp)
 1007098:	dec00104 	addi	sp,sp,4
 100709c:	f800283a 	ret

010070a0 <alt_up_sd_card_read>:

short int alt_up_sd_card_read(short int file_handle)
/* Read a single character from a given file. Return -1 if at the end of a file. Any other negative number
 * means that the file could not be read. A number between 0 and 255 is an ASCII character read from the SD Card. */
{
 10070a0:	defffa04 	addi	sp,sp,-24
 10070a4:	dfc00515 	stw	ra,20(sp)
 10070a8:	df000415 	stw	fp,16(sp)
 10070ac:	df000404 	addi	fp,sp,16
 10070b0:	e13ffe0d 	sth	r4,-8(fp)
    short int ch = -1;
 10070b4:	00bfffc4 	movi	r2,-1
 10070b8:	e0bffd0d 	sth	r2,-12(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 10070bc:	e0bffe0f 	ldh	r2,-8(fp)
 10070c0:	1004803a 	cmplt	r2,r2,zero
 10070c4:	1000d31e 	bne	r2,zero,1007414 <alt_up_sd_card_read+0x374>
 10070c8:	e0bffe0f 	ldh	r2,-8(fp)
 10070cc:	10800508 	cmpgei	r2,r2,20
 10070d0:	1000d01e 	bne	r2,zero,1007414 <alt_up_sd_card_read+0x374>
    {
        if (active_files[file_handle].in_use)
 10070d4:	e0bffe0f 	ldh	r2,-8(fp)
 10070d8:	00c04074 	movhi	r3,257
 10070dc:	18f6a804 	addi	r3,r3,-9568
 10070e0:	100491ba 	slli	r2,r2,6
 10070e4:	10c5883a 	add	r2,r2,r3
 10070e8:	10800f04 	addi	r2,r2,60
 10070ec:	10800017 	ldw	r2,0(r2)
 10070f0:	1005003a 	cmpeq	r2,r2,zero
 10070f4:	1000c71e 	bne	r2,zero,1007414 <alt_up_sd_card_read+0x374>
        {
            if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 10070f8:	e0bffe0f 	ldh	r2,-8(fp)
 10070fc:	00c04074 	movhi	r3,257
 1007100:	18f6a804 	addi	r3,r3,-9568
 1007104:	100491ba 	slli	r2,r2,6
 1007108:	10c5883a 	add	r2,r2,r3
 100710c:	10800904 	addi	r2,r2,36
 1007110:	11000017 	ldw	r4,0(r2)
 1007114:	e0bffe0f 	ldh	r2,-8(fp)
 1007118:	00c04074 	movhi	r3,257
 100711c:	18f6a804 	addi	r3,r3,-9568
 1007120:	100491ba 	slli	r2,r2,6
 1007124:	10c5883a 	add	r2,r2,r3
 1007128:	10800604 	addi	r2,r2,24
 100712c:	10800017 	ldw	r2,0(r2)
 1007130:	2080b82e 	bgeu	r4,r2,1007414 <alt_up_sd_card_read+0x374>
            {
                int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                                  active_files[file_handle].current_sector_in_cluster;
 1007134:	00804074 	movhi	r2,257
 1007138:	10b69304 	addi	r2,r2,-9652
 100713c:	11001417 	ldw	r4,80(r2)
 1007140:	e0bffe0f 	ldh	r2,-8(fp)
 1007144:	00c04074 	movhi	r3,257
 1007148:	18f6a804 	addi	r3,r3,-9568
 100714c:	100491ba 	slli	r2,r2,6
 1007150:	10c5883a 	add	r2,r2,r3
 1007154:	10800704 	addi	r2,r2,28
 1007158:	10800017 	ldw	r2,0(r2)
 100715c:	10ffff84 	addi	r3,r2,-2
 1007160:	00804074 	movhi	r2,257
 1007164:	10b69304 	addi	r2,r2,-9652
 1007168:	10800383 	ldbu	r2,14(r2)
 100716c:	10803fcc 	andi	r2,r2,255
 1007170:	1885383a 	mul	r2,r3,r2
 1007174:	2089883a 	add	r4,r4,r2
 1007178:	e0bffe0f 	ldh	r2,-8(fp)
 100717c:	00c04074 	movhi	r3,257
 1007180:	18f6a804 	addi	r3,r3,-9568
 1007184:	100491ba 	slli	r2,r2,6
 1007188:	10c5883a 	add	r2,r2,r3
 100718c:	10800804 	addi	r2,r2,32
 1007190:	10800017 	ldw	r2,0(r2)
 1007194:	2085883a 	add	r2,r4,r2
 1007198:	e0bffc15 	stw	r2,-16(fp)
                
                if ((active_files[file_handle].current_byte_position > 0) && ((active_files[file_handle].current_byte_position % 512) == 0))
 100719c:	e0bffe0f 	ldh	r2,-8(fp)
 10071a0:	00c04074 	movhi	r3,257
 10071a4:	18f6a804 	addi	r3,r3,-9568
 10071a8:	100491ba 	slli	r2,r2,6
 10071ac:	10c5883a 	add	r2,r2,r3
 10071b0:	10800904 	addi	r2,r2,36
 10071b4:	10800017 	ldw	r2,0(r2)
 10071b8:	1005003a 	cmpeq	r2,r2,zero
 10071bc:	10006a1e 	bne	r2,zero,1007368 <alt_up_sd_card_read+0x2c8>
 10071c0:	e0bffe0f 	ldh	r2,-8(fp)
 10071c4:	00c04074 	movhi	r3,257
 10071c8:	18f6a804 	addi	r3,r3,-9568
 10071cc:	100491ba 	slli	r2,r2,6
 10071d0:	10c5883a 	add	r2,r2,r3
 10071d4:	10800904 	addi	r2,r2,36
 10071d8:	10800017 	ldw	r2,0(r2)
 10071dc:	10807fcc 	andi	r2,r2,511
 10071e0:	1004c03a 	cmpne	r2,r2,zero
 10071e4:	1000601e 	bne	r2,zero,1007368 <alt_up_sd_card_read+0x2c8>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 10071e8:	e0bffe0f 	ldh	r2,-8(fp)
 10071ec:	00c04074 	movhi	r3,257
 10071f0:	18f6a804 	addi	r3,r3,-9568
 10071f4:	100491ba 	slli	r2,r2,6
 10071f8:	10c5883a 	add	r2,r2,r3
 10071fc:	10800804 	addi	r2,r2,32
 1007200:	10c00017 	ldw	r3,0(r2)
 1007204:	00804074 	movhi	r2,257
 1007208:	10b69304 	addi	r2,r2,-9652
 100720c:	10800383 	ldbu	r2,14(r2)
 1007210:	10803fcc 	andi	r2,r2,255
 1007214:	10bfffc4 	addi	r2,r2,-1
 1007218:	1880411e 	bne	r3,r2,1007320 <alt_up_sd_card_read+0x280>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 100721c:	e0bffe0f 	ldh	r2,-8(fp)
 1007220:	00c04074 	movhi	r3,257
 1007224:	18f6a804 	addi	r3,r3,-9568
 1007228:	100491ba 	slli	r2,r2,6
 100722c:	10c5883a 	add	r2,r2,r3
 1007230:	10800704 	addi	r2,r2,28
 1007234:	11000017 	ldw	r4,0(r2)
 1007238:	e17ffd84 	addi	r5,fp,-10
 100723c:	1003a180 	call	1003a18 <get_cluster_flag>
 1007240:	1005003a 	cmpeq	r2,r2,zero
 1007244:	1000331e 	bne	r2,zero,1007314 <alt_up_sd_card_read+0x274>
                        {
                            if ((next_cluster & 0x0000fff8) == 0x0000fff8)
 1007248:	e0bffd8b 	ldhu	r2,-10(fp)
 100724c:	10bfffcc 	andi	r2,r2,65535
 1007250:	10fffe0c 	andi	r3,r2,65528
 1007254:	00bffe14 	movui	r2,65528
 1007258:	1880031e 	bne	r3,r2,1007268 <alt_up_sd_card_read+0x1c8>
                            {
                                /* End of file */
                                return -1;
 100725c:	00bfffc4 	movi	r2,-1
 1007260:	e0bfff15 	stw	r2,-4(fp)
 1007264:	00006d06 	br	100741c <alt_up_sd_card_read+0x37c>
                            } 
                            else
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 1007268:	e13ffe0f 	ldh	r4,-8(fp)
 100726c:	e0bffd8b 	ldhu	r2,-10(fp)
 1007270:	117fffcc 	andi	r5,r2,65535
 1007274:	00c04074 	movhi	r3,257
 1007278:	18f6a804 	addi	r3,r3,-9568
 100727c:	200491ba 	slli	r2,r4,6
 1007280:	10c5883a 	add	r2,r2,r3
 1007284:	10800704 	addi	r2,r2,28
 1007288:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 100728c:	e0bffe0f 	ldh	r2,-8(fp)
 1007290:	00c04074 	movhi	r3,257
 1007294:	18f6a804 	addi	r3,r3,-9568
 1007298:	100491ba 	slli	r2,r2,6
 100729c:	10c5883a 	add	r2,r2,r3
 10072a0:	10800804 	addi	r2,r2,32
 10072a4:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 10072a8:	00804074 	movhi	r2,257
 10072ac:	10b69304 	addi	r2,r2,-9652
 10072b0:	11001417 	ldw	r4,80(r2)
 10072b4:	e0bffe0f 	ldh	r2,-8(fp)
 10072b8:	00c04074 	movhi	r3,257
 10072bc:	18f6a804 	addi	r3,r3,-9568
 10072c0:	100491ba 	slli	r2,r2,6
 10072c4:	10c5883a 	add	r2,r2,r3
 10072c8:	10800704 	addi	r2,r2,28
 10072cc:	10800017 	ldw	r2,0(r2)
 10072d0:	10ffff84 	addi	r3,r2,-2
 10072d4:	00804074 	movhi	r2,257
 10072d8:	10b69304 	addi	r2,r2,-9652
 10072dc:	10800383 	ldbu	r2,14(r2)
 10072e0:	10803fcc 	andi	r2,r2,255
 10072e4:	1885383a 	mul	r2,r3,r2
 10072e8:	2089883a 	add	r4,r4,r2
 10072ec:	e0bffe0f 	ldh	r2,-8(fp)
 10072f0:	00c04074 	movhi	r3,257
 10072f4:	18f6a804 	addi	r3,r3,-9568
 10072f8:	100491ba 	slli	r2,r2,6
 10072fc:	10c5883a 	add	r2,r2,r3
 1007300:	10800804 	addi	r2,r2,32
 1007304:	10800017 	ldw	r2,0(r2)
 1007308:	2085883a 	add	r2,r4,r2
 100730c:	e0bffc15 	stw	r2,-16(fp)
 1007310:	00001506 	br	1007368 <alt_up_sd_card_read+0x2c8>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return -2;
 1007314:	00bfff84 	movi	r2,-2
 1007318:	e0bfff15 	stw	r2,-4(fp)
 100731c:	00003f06 	br	100741c <alt_up_sd_card_read+0x37c>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 1007320:	e17ffe0f 	ldh	r5,-8(fp)
 1007324:	e0bffe0f 	ldh	r2,-8(fp)
 1007328:	00c04074 	movhi	r3,257
 100732c:	18f6a804 	addi	r3,r3,-9568
 1007330:	100491ba 	slli	r2,r2,6
 1007334:	10c5883a 	add	r2,r2,r3
 1007338:	10800804 	addi	r2,r2,32
 100733c:	10800017 	ldw	r2,0(r2)
 1007340:	11000044 	addi	r4,r2,1
 1007344:	00c04074 	movhi	r3,257
 1007348:	18f6a804 	addi	r3,r3,-9568
 100734c:	280491ba 	slli	r2,r5,6
 1007350:	10c5883a 	add	r2,r2,r3
 1007354:	10800804 	addi	r2,r2,32
 1007358:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
 100735c:	e0bffc17 	ldw	r2,-16(fp)
 1007360:	10800044 	addi	r2,r2,1
 1007364:	e0bffc15 	stw	r2,-16(fp)
                    }
                }
                // Reading te first byte of the file.
                if (current_sector_index != (data_sector + fat_partition_offset_in_512_byte_sectors))
 1007368:	d0e6d017 	ldw	r3,-25792(gp)
 100736c:	e0bffc17 	ldw	r2,-16(fp)
 1007370:	1885883a 	add	r2,r3,r2
 1007374:	1007883a 	mov	r3,r2
 1007378:	d0a6d417 	ldw	r2,-25776(gp)
 100737c:	18800826 	beq	r3,r2,10073a0 <alt_up_sd_card_read+0x300>
                {
                    if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 1007380:	d166d017 	ldw	r5,-25792(gp)
 1007384:	e13ffc17 	ldw	r4,-16(fp)
 1007388:	100391c0 	call	100391c <Read_Sector_Data>
 100738c:	1004c03a 	cmpne	r2,r2,zero
 1007390:	1000031e 	bne	r2,zero,10073a0 <alt_up_sd_card_read+0x300>
                    {
						return -2;
 1007394:	00bfff84 	movi	r2,-2
 1007398:	e0bfff15 	stw	r2,-4(fp)
 100739c:	00001f06 	br	100741c <alt_up_sd_card_read+0x37c>
                    }
                }

                ch = (unsigned char) IORD_8DIRECT(buffer_memory, (active_files[file_handle].current_byte_position % 512));
 10073a0:	e0bffe0f 	ldh	r2,-8(fp)
 10073a4:	00c04074 	movhi	r3,257
 10073a8:	18f6a804 	addi	r3,r3,-9568
 10073ac:	100491ba 	slli	r2,r2,6
 10073b0:	10c5883a 	add	r2,r2,r3
 10073b4:	10800904 	addi	r2,r2,36
 10073b8:	10800017 	ldw	r2,0(r2)
 10073bc:	10807fcc 	andi	r2,r2,511
 10073c0:	1007883a 	mov	r3,r2
 10073c4:	d0a6cf17 	ldw	r2,-25796(gp)
 10073c8:	1885883a 	add	r2,r3,r2
 10073cc:	10800023 	ldbuio	r2,0(r2)
 10073d0:	10803fcc 	andi	r2,r2,255
 10073d4:	e0bffd0d 	sth	r2,-12(fp)
                active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 10073d8:	e17ffe0f 	ldh	r5,-8(fp)
 10073dc:	e0bffe0f 	ldh	r2,-8(fp)
 10073e0:	00c04074 	movhi	r3,257
 10073e4:	18f6a804 	addi	r3,r3,-9568
 10073e8:	100491ba 	slli	r2,r2,6
 10073ec:	10c5883a 	add	r2,r2,r3
 10073f0:	10800904 	addi	r2,r2,36
 10073f4:	10800017 	ldw	r2,0(r2)
 10073f8:	11000044 	addi	r4,r2,1
 10073fc:	00c04074 	movhi	r3,257
 1007400:	18f6a804 	addi	r3,r3,-9568
 1007404:	280491ba 	slli	r2,r5,6
 1007408:	10c5883a 	add	r2,r2,r3
 100740c:	10800904 	addi	r2,r2,36
 1007410:	11000015 	stw	r4,0(r2)
            }
        }
    }
    
    return ch;
 1007414:	e0bffd0f 	ldh	r2,-12(fp)
 1007418:	e0bfff15 	stw	r2,-4(fp)
 100741c:	e0bfff17 	ldw	r2,-4(fp)
}
 1007420:	e037883a 	mov	sp,fp
 1007424:	dfc00117 	ldw	ra,4(sp)
 1007428:	df000017 	ldw	fp,0(sp)
 100742c:	dec00204 	addi	sp,sp,8
 1007430:	f800283a 	ret

01007434 <alt_up_sd_card_write>:


bool alt_up_sd_card_write(short int file_handle, char byte_of_data)
/* Write a single character to a given file. Return true if successful, and false otherwise. */
{
 1007434:	defff604 	addi	sp,sp,-40
 1007438:	dfc00915 	stw	ra,36(sp)
 100743c:	df000815 	stw	fp,32(sp)
 1007440:	df000804 	addi	fp,sp,32
 1007444:	e13ffd0d 	sth	r4,-12(fp)
 1007448:	e17ffe05 	stb	r5,-8(fp)
    bool result = false;
 100744c:	e03ffa15 	stw	zero,-24(fp)
    
    if ((file_handle >= 0) && (file_handle < MAX_FILES_OPENED))
 1007450:	e0bffd0f 	ldh	r2,-12(fp)
 1007454:	1004803a 	cmplt	r2,r2,zero
 1007458:	1001761e 	bne	r2,zero,1007a34 <alt_up_sd_card_write+0x600>
 100745c:	e0bffd0f 	ldh	r2,-12(fp)
 1007460:	10800508 	cmpgei	r2,r2,20
 1007464:	1001731e 	bne	r2,zero,1007a34 <alt_up_sd_card_write+0x600>
    {
        if (active_files[file_handle].in_use)
 1007468:	e0bffd0f 	ldh	r2,-12(fp)
 100746c:	00c04074 	movhi	r3,257
 1007470:	18f6a804 	addi	r3,r3,-9568
 1007474:	100491ba 	slli	r2,r2,6
 1007478:	10c5883a 	add	r2,r2,r3
 100747c:	10800f04 	addi	r2,r2,60
 1007480:	10800017 	ldw	r2,0(r2)
 1007484:	1005003a 	cmpeq	r2,r2,zero
 1007488:	10016a1e 	bne	r2,zero,1007a34 <alt_up_sd_card_write+0x600>
        {
            int data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
                              active_files[file_handle].current_sector_in_cluster;
 100748c:	00804074 	movhi	r2,257
 1007490:	10b69304 	addi	r2,r2,-9652
 1007494:	11001417 	ldw	r4,80(r2)
 1007498:	e0bffd0f 	ldh	r2,-12(fp)
 100749c:	00c04074 	movhi	r3,257
 10074a0:	18f6a804 	addi	r3,r3,-9568
 10074a4:	100491ba 	slli	r2,r2,6
 10074a8:	10c5883a 	add	r2,r2,r3
 10074ac:	10800704 	addi	r2,r2,28
 10074b0:	10800017 	ldw	r2,0(r2)
 10074b4:	10ffff84 	addi	r3,r2,-2
 10074b8:	00804074 	movhi	r2,257
 10074bc:	10b69304 	addi	r2,r2,-9652
 10074c0:	10800383 	ldbu	r2,14(r2)
 10074c4:	10803fcc 	andi	r2,r2,255
 10074c8:	1885383a 	mul	r2,r3,r2
 10074cc:	2089883a 	add	r4,r4,r2
 10074d0:	e0bffd0f 	ldh	r2,-12(fp)
 10074d4:	00c04074 	movhi	r3,257
 10074d8:	18f6a804 	addi	r3,r3,-9568
 10074dc:	100491ba 	slli	r2,r2,6
 10074e0:	10c5883a 	add	r2,r2,r3
 10074e4:	10800804 	addi	r2,r2,32
 10074e8:	10800017 	ldw	r2,0(r2)
 10074ec:	2085883a 	add	r2,r4,r2
 10074f0:	e0bff915 	stw	r2,-28(fp)
			short int buffer_offset = active_files[file_handle].current_byte_position % boot_sector_data.sector_size_in_bytes;
 10074f4:	e0bffd0f 	ldh	r2,-12(fp)
 10074f8:	00c04074 	movhi	r3,257
 10074fc:	18f6a804 	addi	r3,r3,-9568
 1007500:	100491ba 	slli	r2,r2,6
 1007504:	10c5883a 	add	r2,r2,r3
 1007508:	10800904 	addi	r2,r2,36
 100750c:	11000017 	ldw	r4,0(r2)
 1007510:	00804074 	movhi	r2,257
 1007514:	10b69304 	addi	r2,r2,-9652
 1007518:	1080030b 	ldhu	r2,12(r2)
 100751c:	10ffffcc 	andi	r3,r2,65535
 1007520:	20c5203a 	divu	r2,r4,r3
 1007524:	10c5383a 	mul	r2,r2,r3
 1007528:	2085c83a 	sub	r2,r4,r2
 100752c:	e0bff80d 	sth	r2,-32(fp)

			if (active_files[file_handle].current_byte_position < active_files[file_handle].file_size_in_bytes)
 1007530:	e0bffd0f 	ldh	r2,-12(fp)
 1007534:	00c04074 	movhi	r3,257
 1007538:	18f6a804 	addi	r3,r3,-9568
 100753c:	100491ba 	slli	r2,r2,6
 1007540:	10c5883a 	add	r2,r2,r3
 1007544:	10800904 	addi	r2,r2,36
 1007548:	11000017 	ldw	r4,0(r2)
 100754c:	e0bffd0f 	ldh	r2,-12(fp)
 1007550:	00c04074 	movhi	r3,257
 1007554:	18f6a804 	addi	r3,r3,-9568
 1007558:	100491ba 	slli	r2,r2,6
 100755c:	10c5883a 	add	r2,r2,r3
 1007560:	10800604 	addi	r2,r2,24
 1007564:	10800017 	ldw	r2,0(r2)
 1007568:	2080682e 	bgeu	r4,r2,100770c <alt_up_sd_card_write+0x2d8>
            {
                if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 100756c:	e0bffd0f 	ldh	r2,-12(fp)
 1007570:	00c04074 	movhi	r3,257
 1007574:	18f6a804 	addi	r3,r3,-9568
 1007578:	100491ba 	slli	r2,r2,6
 100757c:	10c5883a 	add	r2,r2,r3
 1007580:	10800904 	addi	r2,r2,36
 1007584:	10800017 	ldw	r2,0(r2)
 1007588:	1005003a 	cmpeq	r2,r2,zero
 100758c:	1000dd1e 	bne	r2,zero,1007904 <alt_up_sd_card_write+0x4d0>
 1007590:	e0bff80f 	ldh	r2,-32(fp)
 1007594:	1004c03a 	cmpne	r2,r2,zero
 1007598:	1000da1e 	bne	r2,zero,1007904 <alt_up_sd_card_write+0x4d0>
                {
                    // Read in a new sector of data.
                    if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 100759c:	e0bffd0f 	ldh	r2,-12(fp)
 10075a0:	00c04074 	movhi	r3,257
 10075a4:	18f6a804 	addi	r3,r3,-9568
 10075a8:	100491ba 	slli	r2,r2,6
 10075ac:	10c5883a 	add	r2,r2,r3
 10075b0:	10800804 	addi	r2,r2,32
 10075b4:	10c00017 	ldw	r3,0(r2)
 10075b8:	00804074 	movhi	r2,257
 10075bc:	10b69304 	addi	r2,r2,-9652
 10075c0:	10800383 	ldbu	r2,14(r2)
 10075c4:	10803fcc 	andi	r2,r2,255
 10075c8:	10bfffc4 	addi	r2,r2,-1
 10075cc:	18803c1e 	bne	r3,r2,10076c0 <alt_up_sd_card_write+0x28c>
                    {
                        // Go to the next cluster.
                        unsigned short int next_cluster;
                        if (get_cluster_flag(active_files[file_handle].current_cluster_index, &next_cluster))
 10075d0:	e0bffd0f 	ldh	r2,-12(fp)
 10075d4:	00c04074 	movhi	r3,257
 10075d8:	18f6a804 	addi	r3,r3,-9568
 10075dc:	100491ba 	slli	r2,r2,6
 10075e0:	10c5883a 	add	r2,r2,r3
 10075e4:	10800704 	addi	r2,r2,28
 10075e8:	11000017 	ldw	r4,0(r2)
 10075ec:	e17ffb04 	addi	r5,fp,-20
 10075f0:	1003a180 	call	1003a18 <get_cluster_flag>
 10075f4:	1005003a 	cmpeq	r2,r2,zero
 10075f8:	10002f1e 	bne	r2,zero,10076b8 <alt_up_sd_card_write+0x284>
                        {
                            if (next_cluster < 0x0000fff8)
 10075fc:	e0bffb0b 	ldhu	r2,-20(fp)
 1007600:	10ffffcc 	andi	r3,r2,65535
 1007604:	00bffdd4 	movui	r2,65527
 1007608:	10c0be36 	bltu	r2,r3,1007904 <alt_up_sd_card_write+0x4d0>
                            {
                                active_files[file_handle].current_cluster_index = next_cluster;
 100760c:	e13ffd0f 	ldh	r4,-12(fp)
 1007610:	e0bffb0b 	ldhu	r2,-20(fp)
 1007614:	117fffcc 	andi	r5,r2,65535
 1007618:	00c04074 	movhi	r3,257
 100761c:	18f6a804 	addi	r3,r3,-9568
 1007620:	200491ba 	slli	r2,r4,6
 1007624:	10c5883a 	add	r2,r2,r3
 1007628:	10800704 	addi	r2,r2,28
 100762c:	11400015 	stw	r5,0(r2)
								active_files[file_handle].current_sector_in_cluster = 0;
 1007630:	e0bffd0f 	ldh	r2,-12(fp)
 1007634:	00c04074 	movhi	r3,257
 1007638:	18f6a804 	addi	r3,r3,-9568
 100763c:	100491ba 	slli	r2,r2,6
 1007640:	10c5883a 	add	r2,r2,r3
 1007644:	10800804 	addi	r2,r2,32
 1007648:	10000015 	stw	zero,0(r2)
                                data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 100764c:	00804074 	movhi	r2,257
 1007650:	10b69304 	addi	r2,r2,-9652
 1007654:	11001417 	ldw	r4,80(r2)
 1007658:	e0bffd0f 	ldh	r2,-12(fp)
 100765c:	00c04074 	movhi	r3,257
 1007660:	18f6a804 	addi	r3,r3,-9568
 1007664:	100491ba 	slli	r2,r2,6
 1007668:	10c5883a 	add	r2,r2,r3
 100766c:	10800704 	addi	r2,r2,28
 1007670:	10800017 	ldw	r2,0(r2)
 1007674:	10ffff84 	addi	r3,r2,-2
 1007678:	00804074 	movhi	r2,257
 100767c:	10b69304 	addi	r2,r2,-9652
 1007680:	10800383 	ldbu	r2,14(r2)
 1007684:	10803fcc 	andi	r2,r2,255
 1007688:	1885383a 	mul	r2,r3,r2
 100768c:	2089883a 	add	r4,r4,r2
 1007690:	e0bffd0f 	ldh	r2,-12(fp)
 1007694:	00c04074 	movhi	r3,257
 1007698:	18f6a804 	addi	r3,r3,-9568
 100769c:	100491ba 	slli	r2,r2,6
 10076a0:	10c5883a 	add	r2,r2,r3
 10076a4:	10800804 	addi	r2,r2,32
 10076a8:	10800017 	ldw	r2,0(r2)
 10076ac:	2085883a 	add	r2,r4,r2
 10076b0:	e0bff915 	stw	r2,-28(fp)
 10076b4:	00009306 	br	1007904 <alt_up_sd_card_write+0x4d0>
                                  active_files[file_handle].current_sector_in_cluster;                                
                            }
                        }
                        else
                        {
                            return false;
 10076b8:	e03fff15 	stw	zero,-4(fp)
 10076bc:	0000df06 	br	1007a3c <alt_up_sd_card_write+0x608>
                        }
                    }
                    else
                    {
                        active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_sector_in_cluster + 1;
 10076c0:	e17ffd0f 	ldh	r5,-12(fp)
 10076c4:	e0bffd0f 	ldh	r2,-12(fp)
 10076c8:	00c04074 	movhi	r3,257
 10076cc:	18f6a804 	addi	r3,r3,-9568
 10076d0:	100491ba 	slli	r2,r2,6
 10076d4:	10c5883a 	add	r2,r2,r3
 10076d8:	10800804 	addi	r2,r2,32
 10076dc:	10800017 	ldw	r2,0(r2)
 10076e0:	11000044 	addi	r4,r2,1
 10076e4:	00c04074 	movhi	r3,257
 10076e8:	18f6a804 	addi	r3,r3,-9568
 10076ec:	280491ba 	slli	r2,r5,6
 10076f0:	10c5883a 	add	r2,r2,r3
 10076f4:	10800804 	addi	r2,r2,32
 10076f8:	11000015 	stw	r4,0(r2)
                        data_sector = data_sector + 1;
 10076fc:	e0bff917 	ldw	r2,-28(fp)
 1007700:	10800044 	addi	r2,r2,1
 1007704:	e0bff915 	stw	r2,-28(fp)
 1007708:	00007e06 	br	1007904 <alt_up_sd_card_write+0x4d0>
                }
            }
			else
			{
				/* You are adding data to the end of the file, so increment its size and look for an additional data cluster if needed. */
				if ((active_files[file_handle].current_byte_position > 0) && (buffer_offset == 0))
 100770c:	e0bffd0f 	ldh	r2,-12(fp)
 1007710:	00c04074 	movhi	r3,257
 1007714:	18f6a804 	addi	r3,r3,-9568
 1007718:	100491ba 	slli	r2,r2,6
 100771c:	10c5883a 	add	r2,r2,r3
 1007720:	10800904 	addi	r2,r2,36
 1007724:	10800017 	ldw	r2,0(r2)
 1007728:	1005003a 	cmpeq	r2,r2,zero
 100772c:	1000751e 	bne	r2,zero,1007904 <alt_up_sd_card_write+0x4d0>
 1007730:	e0bff80f 	ldh	r2,-32(fp)
 1007734:	1004c03a 	cmpne	r2,r2,zero
 1007738:	1000721e 	bne	r2,zero,1007904 <alt_up_sd_card_write+0x4d0>
				{
					if (active_files[file_handle].current_sector_in_cluster == boot_sector_data.sectors_per_cluster - 1)
 100773c:	e0bffd0f 	ldh	r2,-12(fp)
 1007740:	00c04074 	movhi	r3,257
 1007744:	18f6a804 	addi	r3,r3,-9568
 1007748:	100491ba 	slli	r2,r2,6
 100774c:	10c5883a 	add	r2,r2,r3
 1007750:	10800804 	addi	r2,r2,32
 1007754:	10c00017 	ldw	r3,0(r2)
 1007758:	00804074 	movhi	r2,257
 100775c:	10b69304 	addi	r2,r2,-9652
 1007760:	10800383 	ldbu	r2,14(r2)
 1007764:	10803fcc 	andi	r2,r2,255
 1007768:	10bfffc4 	addi	r2,r2,-1
 100776c:	1880381e 	bne	r3,r2,1007850 <alt_up_sd_card_write+0x41c>
					{
						/* Find a new cluster if possible. */
						unsigned int cluster_number;

						if (find_first_empty_cluster(&cluster_number))
 1007770:	e13ffc04 	addi	r4,fp,-16
 1007774:	1005a5c0 	call	1005a5c <find_first_empty_cluster>
 1007778:	1005003a 	cmpeq	r2,r2,zero
 100777c:	1000321e 	bne	r2,zero,1007848 <alt_up_sd_card_write+0x414>
						{
							// mark clusters in both File Allocation Tables.
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), true);
 1007780:	e0bffd0f 	ldh	r2,-12(fp)
 1007784:	00c04074 	movhi	r3,257
 1007788:	18f6a804 	addi	r3,r3,-9568
 100778c:	100491ba 	slli	r2,r2,6
 1007790:	10c5883a 	add	r2,r2,r3
 1007794:	10800704 	addi	r2,r2,28
 1007798:	11000017 	ldw	r4,0(r2)
 100779c:	e0bffc17 	ldw	r2,-16(fp)
 10077a0:	117fffcc 	andi	r5,r2,65535
 10077a4:	2960001c 	xori	r5,r5,32768
 10077a8:	29600004 	addi	r5,r5,-32768
 10077ac:	01800044 	movi	r6,1
 10077b0:	1003ad00 	call	1003ad0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, true);
 10077b4:	e13ffc17 	ldw	r4,-16(fp)
 10077b8:	017fffc4 	movi	r5,-1
 10077bc:	01800044 	movi	r6,1
 10077c0:	1003ad00 	call	1003ad0 <mark_cluster>
							mark_cluster(active_files[file_handle].current_cluster_index, ((unsigned short int) (cluster_number & 0x0000ffff)), false);
 10077c4:	e0bffd0f 	ldh	r2,-12(fp)
 10077c8:	00c04074 	movhi	r3,257
 10077cc:	18f6a804 	addi	r3,r3,-9568
 10077d0:	100491ba 	slli	r2,r2,6
 10077d4:	10c5883a 	add	r2,r2,r3
 10077d8:	10800704 	addi	r2,r2,28
 10077dc:	11000017 	ldw	r4,0(r2)
 10077e0:	e0bffc17 	ldw	r2,-16(fp)
 10077e4:	117fffcc 	andi	r5,r2,65535
 10077e8:	2960001c 	xori	r5,r5,32768
 10077ec:	29600004 	addi	r5,r5,-32768
 10077f0:	000d883a 	mov	r6,zero
 10077f4:	1003ad00 	call	1003ad0 <mark_cluster>
							mark_cluster(cluster_number, 0xffff, false);
 10077f8:	e13ffc17 	ldw	r4,-16(fp)
 10077fc:	017fffc4 	movi	r5,-1
 1007800:	000d883a 	mov	r6,zero
 1007804:	1003ad00 	call	1003ad0 <mark_cluster>
							// Change cluster index and sector index to compute a new data sector.
							active_files[file_handle].current_cluster_index = cluster_number;
 1007808:	e0bffd0f 	ldh	r2,-12(fp)
 100780c:	e13ffc17 	ldw	r4,-16(fp)
 1007810:	00c04074 	movhi	r3,257
 1007814:	18f6a804 	addi	r3,r3,-9568
 1007818:	100491ba 	slli	r2,r2,6
 100781c:	10c5883a 	add	r2,r2,r3
 1007820:	10800704 	addi	r2,r2,28
 1007824:	11000015 	stw	r4,0(r2)
							active_files[file_handle].current_sector_in_cluster = 0;
 1007828:	e0bffd0f 	ldh	r2,-12(fp)
 100782c:	00c04074 	movhi	r3,257
 1007830:	18f6a804 	addi	r3,r3,-9568
 1007834:	100491ba 	slli	r2,r2,6
 1007838:	10c5883a 	add	r2,r2,r3
 100783c:	10800804 	addi	r2,r2,32
 1007840:	10000015 	stw	zero,0(r2)
 1007844:	00001506 	br	100789c <alt_up_sd_card_write+0x468>
						}
						else
						{
							return false;
 1007848:	e03fff15 	stw	zero,-4(fp)
 100784c:	00007b06 	br	1007a3c <alt_up_sd_card_write+0x608>
						}
					}
					else
					{
						/* Read the next sector in the cluster and modify it. We only need to change the data_sector value. The actual read happens a few lines below. */
						active_files[file_handle].current_sector_in_cluster = active_files[file_handle].current_byte_position / boot_sector_data.sector_size_in_bytes;
 1007850:	e17ffd0f 	ldh	r5,-12(fp)
 1007854:	e0bffd0f 	ldh	r2,-12(fp)
 1007858:	00c04074 	movhi	r3,257
 100785c:	18f6a804 	addi	r3,r3,-9568
 1007860:	100491ba 	slli	r2,r2,6
 1007864:	10c5883a 	add	r2,r2,r3
 1007868:	10800904 	addi	r2,r2,36
 100786c:	10c00017 	ldw	r3,0(r2)
 1007870:	00804074 	movhi	r2,257
 1007874:	10b69304 	addi	r2,r2,-9652
 1007878:	1080030b 	ldhu	r2,12(r2)
 100787c:	10bfffcc 	andi	r2,r2,65535
 1007880:	1889203a 	divu	r4,r3,r2
 1007884:	00c04074 	movhi	r3,257
 1007888:	18f6a804 	addi	r3,r3,-9568
 100788c:	280491ba 	slli	r2,r5,6
 1007890:	10c5883a 	add	r2,r2,r3
 1007894:	10800804 	addi	r2,r2,32
 1007898:	11000015 	stw	r4,0(r2)
					}
					data_sector = boot_sector_data.data_sector_offset + (active_files[file_handle].current_cluster_index - 2)*boot_sector_data.sectors_per_cluster +
 100789c:	00804074 	movhi	r2,257
 10078a0:	10b69304 	addi	r2,r2,-9652
 10078a4:	11001417 	ldw	r4,80(r2)
 10078a8:	e0bffd0f 	ldh	r2,-12(fp)
 10078ac:	00c04074 	movhi	r3,257
 10078b0:	18f6a804 	addi	r3,r3,-9568
 10078b4:	100491ba 	slli	r2,r2,6
 10078b8:	10c5883a 	add	r2,r2,r3
 10078bc:	10800704 	addi	r2,r2,28
 10078c0:	10800017 	ldw	r2,0(r2)
 10078c4:	10ffff84 	addi	r3,r2,-2
 10078c8:	00804074 	movhi	r2,257
 10078cc:	10b69304 	addi	r2,r2,-9652
 10078d0:	10800383 	ldbu	r2,14(r2)
 10078d4:	10803fcc 	andi	r2,r2,255
 10078d8:	1885383a 	mul	r2,r3,r2
 10078dc:	2089883a 	add	r4,r4,r2
 10078e0:	e0bffd0f 	ldh	r2,-12(fp)
 10078e4:	00c04074 	movhi	r3,257
 10078e8:	18f6a804 	addi	r3,r3,-9568
 10078ec:	100491ba 	slli	r2,r2,6
 10078f0:	10c5883a 	add	r2,r2,r3
 10078f4:	10800804 	addi	r2,r2,32
 10078f8:	10800017 	ldw	r2,0(r2)
 10078fc:	2085883a 	add	r2,r4,r2
 1007900:	e0bff915 	stw	r2,-28(fp)
                          active_files[file_handle].current_sector_in_cluster;
				}
			}
            // Reading a data sector into the buffer. Note that changes to the most recently modified sector will be saved before
			// a new sector is read from the SD Card.
            if (current_sector_index != data_sector + fat_partition_offset_in_512_byte_sectors)
 1007904:	d0e6d017 	ldw	r3,-25792(gp)
 1007908:	e0bff917 	ldw	r2,-28(fp)
 100790c:	1885883a 	add	r2,r3,r2
 1007910:	1007883a 	mov	r3,r2
 1007914:	d0a6d417 	ldw	r2,-25776(gp)
 1007918:	18800726 	beq	r3,r2,1007938 <alt_up_sd_card_write+0x504>
            {
                if (!Read_Sector_Data(data_sector, fat_partition_offset_in_512_byte_sectors))
 100791c:	d166d017 	ldw	r5,-25792(gp)
 1007920:	e13ff917 	ldw	r4,-28(fp)
 1007924:	100391c0 	call	100391c <Read_Sector_Data>
 1007928:	1004c03a 	cmpne	r2,r2,zero
 100792c:	1000021e 	bne	r2,zero,1007938 <alt_up_sd_card_write+0x504>
                {
					return false;
 1007930:	e03fff15 	stw	zero,-4(fp)
 1007934:	00004106 	br	1007a3c <alt_up_sd_card_write+0x608>
                }
            }
            // Write a byte of data to the buffer.
			IOWR_8DIRECT(buffer_memory, buffer_offset, byte_of_data);
 1007938:	e0bff80f 	ldh	r2,-32(fp)
 100793c:	1007883a 	mov	r3,r2
 1007940:	d0a6cf17 	ldw	r2,-25796(gp)
 1007944:	1885883a 	add	r2,r3,r2
 1007948:	e0fffe07 	ldb	r3,-8(fp)
 100794c:	10c00025 	stbio	r3,0(r2)
			active_files[file_handle].current_byte_position = active_files[file_handle].current_byte_position + 1;
 1007950:	e17ffd0f 	ldh	r5,-12(fp)
 1007954:	e0bffd0f 	ldh	r2,-12(fp)
 1007958:	00c04074 	movhi	r3,257
 100795c:	18f6a804 	addi	r3,r3,-9568
 1007960:	100491ba 	slli	r2,r2,6
 1007964:	10c5883a 	add	r2,r2,r3
 1007968:	10800904 	addi	r2,r2,36
 100796c:	10800017 	ldw	r2,0(r2)
 1007970:	11000044 	addi	r4,r2,1
 1007974:	00c04074 	movhi	r3,257
 1007978:	18f6a804 	addi	r3,r3,-9568
 100797c:	280491ba 	slli	r2,r5,6
 1007980:	10c5883a 	add	r2,r2,r3
 1007984:	10800904 	addi	r2,r2,36
 1007988:	11000015 	stw	r4,0(r2)

			// Modify the file record only when necessary.
			if (active_files[file_handle].current_byte_position >= active_files[file_handle].file_size_in_bytes)
 100798c:	e0bffd0f 	ldh	r2,-12(fp)
 1007990:	00c04074 	movhi	r3,257
 1007994:	18f6a804 	addi	r3,r3,-9568
 1007998:	100491ba 	slli	r2,r2,6
 100799c:	10c5883a 	add	r2,r2,r3
 10079a0:	10800904 	addi	r2,r2,36
 10079a4:	11000017 	ldw	r4,0(r2)
 10079a8:	e0bffd0f 	ldh	r2,-12(fp)
 10079ac:	00c04074 	movhi	r3,257
 10079b0:	18f6a804 	addi	r3,r3,-9568
 10079b4:	100491ba 	slli	r2,r2,6
 10079b8:	10c5883a 	add	r2,r2,r3
 10079bc:	10800604 	addi	r2,r2,24
 10079c0:	10800017 	ldw	r2,0(r2)
 10079c4:	20801736 	bltu	r4,r2,1007a24 <alt_up_sd_card_write+0x5f0>
			{
				active_files[file_handle].file_size_in_bytes = active_files[file_handle].file_size_in_bytes + 1;
 10079c8:	e17ffd0f 	ldh	r5,-12(fp)
 10079cc:	e0bffd0f 	ldh	r2,-12(fp)
 10079d0:	00c04074 	movhi	r3,257
 10079d4:	18f6a804 	addi	r3,r3,-9568
 10079d8:	100491ba 	slli	r2,r2,6
 10079dc:	10c5883a 	add	r2,r2,r3
 10079e0:	10800604 	addi	r2,r2,24
 10079e4:	10800017 	ldw	r2,0(r2)
 10079e8:	11000044 	addi	r4,r2,1
 10079ec:	00c04074 	movhi	r3,257
 10079f0:	18f6a804 	addi	r3,r3,-9568
 10079f4:	280491ba 	slli	r2,r5,6
 10079f8:	10c5883a 	add	r2,r2,r3
 10079fc:	10800604 	addi	r2,r2,24
 1007a00:	11000015 	stw	r4,0(r2)
				active_files[file_handle].modified = true;
 1007a04:	e0bffd0f 	ldh	r2,-12(fp)
 1007a08:	00c04074 	movhi	r3,257
 1007a0c:	18f6a804 	addi	r3,r3,-9568
 1007a10:	100491ba 	slli	r2,r2,6
 1007a14:	10c5883a 	add	r2,r2,r3
 1007a18:	10c00e04 	addi	r3,r2,56
 1007a1c:	00800044 	movi	r2,1
 1007a20:	18800015 	stw	r2,0(r3)
			}
            // Invaldiate the buffer to ensure that the buffer contents are written to the SD card whe nthe file is closed.
            current_sector_modified = true;
 1007a24:	00800044 	movi	r2,1
 1007a28:	d0a6d315 	stw	r2,-25780(gp)
			result = true;
 1007a2c:	00800044 	movi	r2,1
 1007a30:	e0bffa15 	stw	r2,-24(fp)
		}
    }
    
    return result;
 1007a34:	e0bffa17 	ldw	r2,-24(fp)
 1007a38:	e0bfff15 	stw	r2,-4(fp)
 1007a3c:	e0bfff17 	ldw	r2,-4(fp)
}
 1007a40:	e037883a 	mov	sp,fp
 1007a44:	dfc00117 	ldw	ra,4(sp)
 1007a48:	df000017 	ldw	fp,0(sp)
 1007a4c:	dec00204 	addi	sp,sp,8
 1007a50:	f800283a 	ret

01007a54 <alt_up_sd_card_fclose>:


bool alt_up_sd_card_fclose(short int file_handle)
// This function closes an opened file and saves data to SD Card if necessary.
{
 1007a54:	defffb04 	addi	sp,sp,-20
 1007a58:	dfc00415 	stw	ra,16(sp)
 1007a5c:	df000315 	stw	fp,12(sp)
 1007a60:	df000304 	addi	fp,sp,12
 1007a64:	e13fff0d 	sth	r4,-4(fp)
    bool result = false;
 1007a68:	e03ffe15 	stw	zero,-8(fp)
    if ((alt_up_sd_card_is_Present()) && (is_sd_card_formated_as_FAT16))
 1007a6c:	100661c0 	call	100661c <alt_up_sd_card_is_Present>
 1007a70:	1005003a 	cmpeq	r2,r2,zero
 1007a74:	1000641e 	bne	r2,zero,1007c08 <alt_up_sd_card_fclose+0x1b4>
 1007a78:	d0a6c917 	ldw	r2,-25820(gp)
 1007a7c:	1005003a 	cmpeq	r2,r2,zero
 1007a80:	1000611e 	bne	r2,zero,1007c08 <alt_up_sd_card_fclose+0x1b4>
    {
        if (active_files[file_handle].in_use) 
 1007a84:	e0bfff0f 	ldh	r2,-4(fp)
 1007a88:	00c04074 	movhi	r3,257
 1007a8c:	18f6a804 	addi	r3,r3,-9568
 1007a90:	100491ba 	slli	r2,r2,6
 1007a94:	10c5883a 	add	r2,r2,r3
 1007a98:	10800f04 	addi	r2,r2,60
 1007a9c:	10800017 	ldw	r2,0(r2)
 1007aa0:	1005003a 	cmpeq	r2,r2,zero
 1007aa4:	1000581e 	bne	r2,zero,1007c08 <alt_up_sd_card_fclose+0x1b4>
        {
			if (active_files[file_handle].modified)
 1007aa8:	e0bfff0f 	ldh	r2,-4(fp)
 1007aac:	00c04074 	movhi	r3,257
 1007ab0:	18f6a804 	addi	r3,r3,-9568
 1007ab4:	100491ba 	slli	r2,r2,6
 1007ab8:	10c5883a 	add	r2,r2,r3
 1007abc:	10800e04 	addi	r2,r2,56
 1007ac0:	10800017 	ldw	r2,0(r2)
 1007ac4:	1005003a 	cmpeq	r2,r2,zero
 1007ac8:	1000461e 	bne	r2,zero,1007be4 <alt_up_sd_card_fclose+0x190>
			{
				unsigned int record_sector = active_files[file_handle].file_record_sector_in_cluster;
 1007acc:	e0bfff0f 	ldh	r2,-4(fp)
 1007ad0:	00c04074 	movhi	r3,257
 1007ad4:	18f6a804 	addi	r3,r3,-9568
 1007ad8:	100491ba 	slli	r2,r2,6
 1007adc:	10c5883a 	add	r2,r2,r3
 1007ae0:	10800b04 	addi	r2,r2,44
 1007ae4:	10800017 	ldw	r2,0(r2)
 1007ae8:	e0bffd15 	stw	r2,-12(fp)
				if (active_files[file_handle].file_record_cluster == 0)
 1007aec:	e0bfff0f 	ldh	r2,-4(fp)
 1007af0:	00c04074 	movhi	r3,257
 1007af4:	18f6a804 	addi	r3,r3,-9568
 1007af8:	100491ba 	slli	r2,r2,6
 1007afc:	10c5883a 	add	r2,r2,r3
 1007b00:	10800a04 	addi	r2,r2,40
 1007b04:	10800017 	ldw	r2,0(r2)
 1007b08:	1004c03a 	cmpne	r2,r2,zero
 1007b0c:	1000071e 	bne	r2,zero,1007b2c <alt_up_sd_card_fclose+0xd8>
				{
					record_sector = record_sector + boot_sector_data.root_directory_sector_offset;
 1007b10:	00804074 	movhi	r2,257
 1007b14:	10b69304 	addi	r2,r2,-9652
 1007b18:	10c01317 	ldw	r3,76(r2)
 1007b1c:	e0bffd17 	ldw	r2,-12(fp)
 1007b20:	10c5883a 	add	r2,r2,r3
 1007b24:	e0bffd15 	stw	r2,-12(fp)
 1007b28:	00001406 	br	1007b7c <alt_up_sd_card_fclose+0x128>
				}
				else
				{
					record_sector = record_sector + boot_sector_data.data_sector_offset + 
 1007b2c:	00804074 	movhi	r2,257
 1007b30:	10b69304 	addi	r2,r2,-9652
 1007b34:	10c01417 	ldw	r3,80(r2)
 1007b38:	e0bffd17 	ldw	r2,-12(fp)
 1007b3c:	1889883a 	add	r4,r3,r2
 1007b40:	e0bfff0f 	ldh	r2,-4(fp)
 1007b44:	00c04074 	movhi	r3,257
 1007b48:	18f6a804 	addi	r3,r3,-9568
 1007b4c:	100491ba 	slli	r2,r2,6
 1007b50:	10c5883a 	add	r2,r2,r3
 1007b54:	10800a04 	addi	r2,r2,40
 1007b58:	10800017 	ldw	r2,0(r2)
 1007b5c:	10ffff84 	addi	r3,r2,-2
 1007b60:	00804074 	movhi	r2,257
 1007b64:	10b69304 	addi	r2,r2,-9652
 1007b68:	10800383 	ldbu	r2,14(r2)
 1007b6c:	10803fcc 	andi	r2,r2,255
 1007b70:	1885383a 	mul	r2,r3,r2
 1007b74:	2085883a 	add	r2,r4,r2
 1007b78:	e0bffd15 	stw	r2,-12(fp)
									(active_files[file_handle].file_record_cluster - 2)*boot_sector_data.sectors_per_cluster;
				}
				if (Read_Sector_Data(record_sector, fat_partition_offset_in_512_byte_sectors))
 1007b7c:	e13ffd17 	ldw	r4,-12(fp)
 1007b80:	d166d017 	ldw	r5,-25792(gp)
 1007b84:	100391c0 	call	100391c <Read_Sector_Data>
 1007b88:	1005003a 	cmpeq	r2,r2,zero
 1007b8c:	1000151e 	bne	r2,zero,1007be4 <alt_up_sd_card_fclose+0x190>
				{
					if (Write_File_Record_At_Offset(active_files[file_handle].file_record_offset, &(active_files[file_handle])))
 1007b90:	e0bfff0f 	ldh	r2,-4(fp)
 1007b94:	00c04074 	movhi	r3,257
 1007b98:	18f6a804 	addi	r3,r3,-9568
 1007b9c:	100491ba 	slli	r2,r2,6
 1007ba0:	10c5883a 	add	r2,r2,r3
 1007ba4:	10800c04 	addi	r2,r2,48
 1007ba8:	1080000b 	ldhu	r2,0(r2)
 1007bac:	113fffcc 	andi	r4,r2,65535
 1007bb0:	2120001c 	xori	r4,r4,32768
 1007bb4:	21200004 	addi	r4,r4,-32768
 1007bb8:	e0bfff0f 	ldh	r2,-4(fp)
 1007bbc:	100491ba 	slli	r2,r2,6
 1007bc0:	1007883a 	mov	r3,r2
 1007bc4:	00804074 	movhi	r2,257
 1007bc8:	10b6a804 	addi	r2,r2,-9568
 1007bcc:	188b883a 	add	r5,r3,r2
 1007bd0:	1003fe80 	call	1003fe8 <Write_File_Record_At_Offset>
 1007bd4:	1005003a 	cmpeq	r2,r2,zero
 1007bd8:	1000021e 	bne	r2,zero,1007be4 <alt_up_sd_card_fclose+0x190>
					{
						// Make sure that the Data has been saved to the SD Card.
						result = Save_Modified_Sector();
 1007bdc:	10038cc0 	call	10038cc <Save_Modified_Sector>
 1007be0:	e0bffe15 	stw	r2,-8(fp)
					}
				}
			}
			active_files[file_handle].in_use = false;
 1007be4:	e0bfff0f 	ldh	r2,-4(fp)
 1007be8:	00c04074 	movhi	r3,257
 1007bec:	18f6a804 	addi	r3,r3,-9568
 1007bf0:	100491ba 	slli	r2,r2,6
 1007bf4:	10c5883a 	add	r2,r2,r3
 1007bf8:	10800f04 	addi	r2,r2,60
 1007bfc:	10000015 	stw	zero,0(r2)
			result = true;
 1007c00:	00800044 	movi	r2,1
 1007c04:	e0bffe15 	stw	r2,-8(fp)
        }
    }
    
    return result;
 1007c08:	e0bffe17 	ldw	r2,-8(fp)
}
 1007c0c:	e037883a 	mov	sp,fp
 1007c10:	dfc00117 	ldw	ra,4(sp)
 1007c14:	df000017 	ldw	fp,0(sp)
 1007c18:	dec00204 	addi	sp,sp,8
 1007c1c:	f800283a 	ret

01007c20 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 1007c20:	defffa04 	addi	sp,sp,-24
 1007c24:	dfc00515 	stw	ra,20(sp)
 1007c28:	df000415 	stw	fp,16(sp)
 1007c2c:	df000404 	addi	fp,sp,16
 1007c30:	e13ffd15 	stw	r4,-12(fp)
 1007c34:	e17ffe15 	stw	r5,-8(fp)
 1007c38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1007c3c:	e0bffd17 	ldw	r2,-12(fp)
 1007c40:	10800017 	ldw	r2,0(r2)
 1007c44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1007c48:	e0bffc17 	ldw	r2,-16(fp)
 1007c4c:	11000a04 	addi	r4,r2,40
 1007c50:	e0bffd17 	ldw	r2,-12(fp)
 1007c54:	11c00217 	ldw	r7,8(r2)
 1007c58:	e17ffe17 	ldw	r5,-8(fp)
 1007c5c:	e1bfff17 	ldw	r6,-4(fp)
 1007c60:	10082640 	call	1008264 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1007c64:	e037883a 	mov	sp,fp
 1007c68:	dfc00117 	ldw	ra,4(sp)
 1007c6c:	df000017 	ldw	fp,0(sp)
 1007c70:	dec00204 	addi	sp,sp,8
 1007c74:	f800283a 	ret

01007c78 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1007c78:	defffa04 	addi	sp,sp,-24
 1007c7c:	dfc00515 	stw	ra,20(sp)
 1007c80:	df000415 	stw	fp,16(sp)
 1007c84:	df000404 	addi	fp,sp,16
 1007c88:	e13ffd15 	stw	r4,-12(fp)
 1007c8c:	e17ffe15 	stw	r5,-8(fp)
 1007c90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1007c94:	e0bffd17 	ldw	r2,-12(fp)
 1007c98:	10800017 	ldw	r2,0(r2)
 1007c9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1007ca0:	e0bffc17 	ldw	r2,-16(fp)
 1007ca4:	11000a04 	addi	r4,r2,40
 1007ca8:	e0bffd17 	ldw	r2,-12(fp)
 1007cac:	11c00217 	ldw	r7,8(r2)
 1007cb0:	e17ffe17 	ldw	r5,-8(fp)
 1007cb4:	e1bfff17 	ldw	r6,-4(fp)
 1007cb8:	10084880 	call	1008488 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 1007cbc:	e037883a 	mov	sp,fp
 1007cc0:	dfc00117 	ldw	ra,4(sp)
 1007cc4:	df000017 	ldw	fp,0(sp)
 1007cc8:	dec00204 	addi	sp,sp,8
 1007ccc:	f800283a 	ret

01007cd0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1007cd0:	defffc04 	addi	sp,sp,-16
 1007cd4:	dfc00315 	stw	ra,12(sp)
 1007cd8:	df000215 	stw	fp,8(sp)
 1007cdc:	df000204 	addi	fp,sp,8
 1007ce0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1007ce4:	e0bfff17 	ldw	r2,-4(fp)
 1007ce8:	10800017 	ldw	r2,0(r2)
 1007cec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 1007cf0:	e0bffe17 	ldw	r2,-8(fp)
 1007cf4:	11000a04 	addi	r4,r2,40
 1007cf8:	e0bfff17 	ldw	r2,-4(fp)
 1007cfc:	11400217 	ldw	r5,8(r2)
 1007d00:	10080fc0 	call	10080fc <altera_avalon_jtag_uart_close>
}
 1007d04:	e037883a 	mov	sp,fp
 1007d08:	dfc00117 	ldw	ra,4(sp)
 1007d0c:	df000017 	ldw	fp,0(sp)
 1007d10:	dec00204 	addi	sp,sp,8
 1007d14:	f800283a 	ret

01007d18 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 1007d18:	defffa04 	addi	sp,sp,-24
 1007d1c:	dfc00515 	stw	ra,20(sp)
 1007d20:	df000415 	stw	fp,16(sp)
 1007d24:	df000404 	addi	fp,sp,16
 1007d28:	e13ffd15 	stw	r4,-12(fp)
 1007d2c:	e17ffe15 	stw	r5,-8(fp)
 1007d30:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 1007d34:	e0bffd17 	ldw	r2,-12(fp)
 1007d38:	10800017 	ldw	r2,0(r2)
 1007d3c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1007d40:	e0bffc17 	ldw	r2,-16(fp)
 1007d44:	11000a04 	addi	r4,r2,40
 1007d48:	e17ffe17 	ldw	r5,-8(fp)
 1007d4c:	e1bfff17 	ldw	r6,-4(fp)
 1007d50:	10081700 	call	1008170 <altera_avalon_jtag_uart_ioctl>
}
 1007d54:	e037883a 	mov	sp,fp
 1007d58:	dfc00117 	ldw	ra,4(sp)
 1007d5c:	df000017 	ldw	fp,0(sp)
 1007d60:	dec00204 	addi	sp,sp,8
 1007d64:	f800283a 	ret

01007d68 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1007d68:	defffb04 	addi	sp,sp,-20
 1007d6c:	dfc00415 	stw	ra,16(sp)
 1007d70:	df000315 	stw	fp,12(sp)
 1007d74:	df000304 	addi	fp,sp,12
 1007d78:	e13ffd15 	stw	r4,-12(fp)
 1007d7c:	e17ffe15 	stw	r5,-8(fp)
 1007d80:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1007d84:	e0fffd17 	ldw	r3,-12(fp)
 1007d88:	00800044 	movi	r2,1
 1007d8c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1007d90:	e0bffd17 	ldw	r2,-12(fp)
 1007d94:	10800017 	ldw	r2,0(r2)
 1007d98:	11000104 	addi	r4,r2,4
 1007d9c:	e0bffd17 	ldw	r2,-12(fp)
 1007da0:	10800817 	ldw	r2,32(r2)
 1007da4:	1007883a 	mov	r3,r2
 1007da8:	2005883a 	mov	r2,r4
 1007dac:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1007db0:	e13fff17 	ldw	r4,-4(fp)
 1007db4:	e17ffd17 	ldw	r5,-12(fp)
 1007db8:	01804034 	movhi	r6,256
 1007dbc:	319f8804 	addi	r6,r6,32288
 1007dc0:	10096000 	call	1009600 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1007dc4:	e0bffd17 	ldw	r2,-12(fp)
 1007dc8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1007dcc:	e0bffd17 	ldw	r2,-12(fp)
 1007dd0:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1007dd4:	00804074 	movhi	r2,257
 1007dd8:	10b68204 	addi	r2,r2,-9720
 1007ddc:	10800017 	ldw	r2,0(r2)
 1007de0:	100b883a 	mov	r5,r2
 1007de4:	01804074 	movhi	r6,257
 1007de8:	31a01304 	addi	r6,r6,-32692
 1007dec:	e1fffd17 	ldw	r7,-12(fp)
 1007df0:	100908c0 	call	100908c <alt_alarm_start>
 1007df4:	1004403a 	cmpge	r2,r2,zero
 1007df8:	1000041e 	bne	r2,zero,1007e0c <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1007dfc:	e0fffd17 	ldw	r3,-12(fp)
 1007e00:	00a00034 	movhi	r2,32768
 1007e04:	10bfffc4 	addi	r2,r2,-1
 1007e08:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1007e0c:	e037883a 	mov	sp,fp
 1007e10:	dfc00117 	ldw	ra,4(sp)
 1007e14:	df000017 	ldw	fp,0(sp)
 1007e18:	dec00204 	addi	sp,sp,8
 1007e1c:	f800283a 	ret

01007e20 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1007e20:	defff704 	addi	sp,sp,-36
 1007e24:	df000815 	stw	fp,32(sp)
 1007e28:	df000804 	addi	fp,sp,32
 1007e2c:	e13ffe15 	stw	r4,-8(fp)
 1007e30:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1007e34:	e0bffe17 	ldw	r2,-8(fp)
 1007e38:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 1007e3c:	e0bffd17 	ldw	r2,-12(fp)
 1007e40:	10800017 	ldw	r2,0(r2)
 1007e44:	e0bffc15 	stw	r2,-16(fp)
 1007e48:	00000006 	br	1007e4c <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1007e4c:	e0bffc17 	ldw	r2,-16(fp)
 1007e50:	10800104 	addi	r2,r2,4
 1007e54:	10800037 	ldwio	r2,0(r2)
 1007e58:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1007e5c:	e0bffb17 	ldw	r2,-20(fp)
 1007e60:	1080c00c 	andi	r2,r2,768
 1007e64:	1005003a 	cmpeq	r2,r2,zero
 1007e68:	1000741e 	bne	r2,zero,100803c <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1007e6c:	e0bffb17 	ldw	r2,-20(fp)
 1007e70:	1080400c 	andi	r2,r2,256
 1007e74:	1005003a 	cmpeq	r2,r2,zero
 1007e78:	1000351e 	bne	r2,zero,1007f50 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1007e7c:	00800074 	movhi	r2,1
 1007e80:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1007e84:	e0bffd17 	ldw	r2,-12(fp)
 1007e88:	10800a17 	ldw	r2,40(r2)
 1007e8c:	10800044 	addi	r2,r2,1
 1007e90:	1081ffcc 	andi	r2,r2,2047
 1007e94:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1007e98:	e0bffd17 	ldw	r2,-12(fp)
 1007e9c:	10c00b17 	ldw	r3,44(r2)
 1007ea0:	e0bff917 	ldw	r2,-28(fp)
 1007ea4:	18801626 	beq	r3,r2,1007f00 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1007ea8:	e0bffc17 	ldw	r2,-16(fp)
 1007eac:	10800037 	ldwio	r2,0(r2)
 1007eb0:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1007eb4:	e0bffa17 	ldw	r2,-24(fp)
 1007eb8:	10a0000c 	andi	r2,r2,32768
 1007ebc:	1005003a 	cmpeq	r2,r2,zero
 1007ec0:	10000f1e 	bne	r2,zero,1007f00 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1007ec4:	e0bffd17 	ldw	r2,-12(fp)
 1007ec8:	10c00a17 	ldw	r3,40(r2)
 1007ecc:	e0bffa17 	ldw	r2,-24(fp)
 1007ed0:	1009883a 	mov	r4,r2
 1007ed4:	e0bffd17 	ldw	r2,-12(fp)
 1007ed8:	1885883a 	add	r2,r3,r2
 1007edc:	10800e04 	addi	r2,r2,56
 1007ee0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1007ee4:	e0bffd17 	ldw	r2,-12(fp)
 1007ee8:	10800a17 	ldw	r2,40(r2)
 1007eec:	10800044 	addi	r2,r2,1
 1007ef0:	10c1ffcc 	andi	r3,r2,2047
 1007ef4:	e0bffd17 	ldw	r2,-12(fp)
 1007ef8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1007efc:	003fe106 	br	1007e84 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1007f00:	e0bffa17 	ldw	r2,-24(fp)
 1007f04:	10bfffec 	andhi	r2,r2,65535
 1007f08:	1005003a 	cmpeq	r2,r2,zero
 1007f0c:	1000101e 	bne	r2,zero,1007f50 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1007f10:	e0bffd17 	ldw	r2,-12(fp)
 1007f14:	10c00817 	ldw	r3,32(r2)
 1007f18:	00bfff84 	movi	r2,-2
 1007f1c:	1886703a 	and	r3,r3,r2
 1007f20:	e0bffd17 	ldw	r2,-12(fp)
 1007f24:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1007f28:	e0bffc17 	ldw	r2,-16(fp)
 1007f2c:	11000104 	addi	r4,r2,4
 1007f30:	e0bffd17 	ldw	r2,-12(fp)
 1007f34:	10800817 	ldw	r2,32(r2)
 1007f38:	1007883a 	mov	r3,r2
 1007f3c:	2005883a 	mov	r2,r4
 1007f40:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1007f44:	e0bffc17 	ldw	r2,-16(fp)
 1007f48:	10800104 	addi	r2,r2,4
 1007f4c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1007f50:	e0bffb17 	ldw	r2,-20(fp)
 1007f54:	1080800c 	andi	r2,r2,512
 1007f58:	1005003a 	cmpeq	r2,r2,zero
 1007f5c:	103fbb1e 	bne	r2,zero,1007e4c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1007f60:	e0bffb17 	ldw	r2,-20(fp)
 1007f64:	10bfffec 	andhi	r2,r2,65535
 1007f68:	1004d43a 	srli	r2,r2,16
 1007f6c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1007f70:	00001506 	br	1007fc8 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1007f74:	e13ffc17 	ldw	r4,-16(fp)
 1007f78:	e0bffd17 	ldw	r2,-12(fp)
 1007f7c:	10c00d17 	ldw	r3,52(r2)
 1007f80:	e0bffd17 	ldw	r2,-12(fp)
 1007f84:	1885883a 	add	r2,r3,r2
 1007f88:	10820e04 	addi	r2,r2,2104
 1007f8c:	10800003 	ldbu	r2,0(r2)
 1007f90:	10c03fcc 	andi	r3,r2,255
 1007f94:	18c0201c 	xori	r3,r3,128
 1007f98:	18ffe004 	addi	r3,r3,-128
 1007f9c:	2005883a 	mov	r2,r4
 1007fa0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1007fa4:	e0bffd17 	ldw	r2,-12(fp)
 1007fa8:	10800d17 	ldw	r2,52(r2)
 1007fac:	10800044 	addi	r2,r2,1
 1007fb0:	10c1ffcc 	andi	r3,r2,2047
 1007fb4:	e0bffd17 	ldw	r2,-12(fp)
 1007fb8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1007fbc:	e0bff817 	ldw	r2,-32(fp)
 1007fc0:	10bfffc4 	addi	r2,r2,-1
 1007fc4:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1007fc8:	e0bff817 	ldw	r2,-32(fp)
 1007fcc:	1005003a 	cmpeq	r2,r2,zero
 1007fd0:	1000051e 	bne	r2,zero,1007fe8 <altera_avalon_jtag_uart_irq+0x1c8>
 1007fd4:	e0bffd17 	ldw	r2,-12(fp)
 1007fd8:	10c00d17 	ldw	r3,52(r2)
 1007fdc:	e0bffd17 	ldw	r2,-12(fp)
 1007fe0:	10800c17 	ldw	r2,48(r2)
 1007fe4:	18bfe31e 	bne	r3,r2,1007f74 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1007fe8:	e0bff817 	ldw	r2,-32(fp)
 1007fec:	1005003a 	cmpeq	r2,r2,zero
 1007ff0:	103f961e 	bne	r2,zero,1007e4c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1007ff4:	e0bffd17 	ldw	r2,-12(fp)
 1007ff8:	10c00817 	ldw	r3,32(r2)
 1007ffc:	00bfff44 	movi	r2,-3
 1008000:	1886703a 	and	r3,r3,r2
 1008004:	e0bffd17 	ldw	r2,-12(fp)
 1008008:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100800c:	e0bffd17 	ldw	r2,-12(fp)
 1008010:	10800017 	ldw	r2,0(r2)
 1008014:	11000104 	addi	r4,r2,4
 1008018:	e0bffd17 	ldw	r2,-12(fp)
 100801c:	10800817 	ldw	r2,32(r2)
 1008020:	1007883a 	mov	r3,r2
 1008024:	2005883a 	mov	r2,r4
 1008028:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100802c:	e0bffc17 	ldw	r2,-16(fp)
 1008030:	10800104 	addi	r2,r2,4
 1008034:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1008038:	003f8406 	br	1007e4c <altera_avalon_jtag_uart_irq+0x2c>
}
 100803c:	e037883a 	mov	sp,fp
 1008040:	df000017 	ldw	fp,0(sp)
 1008044:	dec00104 	addi	sp,sp,4
 1008048:	f800283a 	ret

0100804c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100804c:	defffc04 	addi	sp,sp,-16
 1008050:	df000315 	stw	fp,12(sp)
 1008054:	df000304 	addi	fp,sp,12
 1008058:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100805c:	e0bfff17 	ldw	r2,-4(fp)
 1008060:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1008064:	e0bffe17 	ldw	r2,-8(fp)
 1008068:	10800017 	ldw	r2,0(r2)
 100806c:	10800104 	addi	r2,r2,4
 1008070:	10800037 	ldwio	r2,0(r2)
 1008074:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1008078:	e0bffd17 	ldw	r2,-12(fp)
 100807c:	1081000c 	andi	r2,r2,1024
 1008080:	1005003a 	cmpeq	r2,r2,zero
 1008084:	10000c1e 	bne	r2,zero,10080b8 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1008088:	e0bffe17 	ldw	r2,-8(fp)
 100808c:	10800017 	ldw	r2,0(r2)
 1008090:	11000104 	addi	r4,r2,4
 1008094:	e0bffe17 	ldw	r2,-8(fp)
 1008098:	10800817 	ldw	r2,32(r2)
 100809c:	10810014 	ori	r2,r2,1024
 10080a0:	1007883a 	mov	r3,r2
 10080a4:	2005883a 	mov	r2,r4
 10080a8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 10080ac:	e0bffe17 	ldw	r2,-8(fp)
 10080b0:	10000915 	stw	zero,36(r2)
 10080b4:	00000a06 	br	10080e0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 10080b8:	e0bffe17 	ldw	r2,-8(fp)
 10080bc:	10c00917 	ldw	r3,36(r2)
 10080c0:	00a00034 	movhi	r2,32768
 10080c4:	10bfff04 	addi	r2,r2,-4
 10080c8:	10c00536 	bltu	r2,r3,10080e0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 10080cc:	e0bffe17 	ldw	r2,-8(fp)
 10080d0:	10800917 	ldw	r2,36(r2)
 10080d4:	10c00044 	addi	r3,r2,1
 10080d8:	e0bffe17 	ldw	r2,-8(fp)
 10080dc:	10c00915 	stw	r3,36(r2)
 10080e0:	00804074 	movhi	r2,257
 10080e4:	10b68204 	addi	r2,r2,-9720
 10080e8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 10080ec:	e037883a 	mov	sp,fp
 10080f0:	df000017 	ldw	fp,0(sp)
 10080f4:	dec00104 	addi	sp,sp,4
 10080f8:	f800283a 	ret

010080fc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 10080fc:	defffc04 	addi	sp,sp,-16
 1008100:	df000315 	stw	fp,12(sp)
 1008104:	df000304 	addi	fp,sp,12
 1008108:	e13ffd15 	stw	r4,-12(fp)
 100810c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1008110:	00000706 	br	1008130 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1008114:	e0bffe17 	ldw	r2,-8(fp)
 1008118:	1090000c 	andi	r2,r2,16384
 100811c:	1005003a 	cmpeq	r2,r2,zero
 1008120:	1000031e 	bne	r2,zero,1008130 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1008124:	00bffd44 	movi	r2,-11
 1008128:	e0bfff15 	stw	r2,-4(fp)
 100812c:	00000b06 	br	100815c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1008130:	e0bffd17 	ldw	r2,-12(fp)
 1008134:	10c00d17 	ldw	r3,52(r2)
 1008138:	e0bffd17 	ldw	r2,-12(fp)
 100813c:	10800c17 	ldw	r2,48(r2)
 1008140:	18800526 	beq	r3,r2,1008158 <altera_avalon_jtag_uart_close+0x5c>
 1008144:	e0bffd17 	ldw	r2,-12(fp)
 1008148:	10c00917 	ldw	r3,36(r2)
 100814c:	e0bffd17 	ldw	r2,-12(fp)
 1008150:	10800117 	ldw	r2,4(r2)
 1008154:	18bfef36 	bltu	r3,r2,1008114 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1008158:	e03fff15 	stw	zero,-4(fp)
 100815c:	e0bfff17 	ldw	r2,-4(fp)
}
 1008160:	e037883a 	mov	sp,fp
 1008164:	df000017 	ldw	fp,0(sp)
 1008168:	dec00104 	addi	sp,sp,4
 100816c:	f800283a 	ret

01008170 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1008170:	defff804 	addi	sp,sp,-32
 1008174:	df000715 	stw	fp,28(sp)
 1008178:	df000704 	addi	fp,sp,28
 100817c:	e13ffb15 	stw	r4,-20(fp)
 1008180:	e17ffc15 	stw	r5,-16(fp)
 1008184:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1008188:	00bff9c4 	movi	r2,-25
 100818c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1008190:	e0bffc17 	ldw	r2,-16(fp)
 1008194:	e0bfff15 	stw	r2,-4(fp)
 1008198:	e0ffff17 	ldw	r3,-4(fp)
 100819c:	189a8060 	cmpeqi	r2,r3,27137
 10081a0:	1000041e 	bne	r2,zero,10081b4 <altera_avalon_jtag_uart_ioctl+0x44>
 10081a4:	e0ffff17 	ldw	r3,-4(fp)
 10081a8:	189a80a0 	cmpeqi	r2,r3,27138
 10081ac:	10001b1e 	bne	r2,zero,100821c <altera_avalon_jtag_uart_ioctl+0xac>
 10081b0:	00002706 	br	1008250 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 10081b4:	e0bffb17 	ldw	r2,-20(fp)
 10081b8:	10c00117 	ldw	r3,4(r2)
 10081bc:	00a00034 	movhi	r2,32768
 10081c0:	10bfffc4 	addi	r2,r2,-1
 10081c4:	18802226 	beq	r3,r2,1008250 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 10081c8:	e0bffd17 	ldw	r2,-12(fp)
 10081cc:	10800017 	ldw	r2,0(r2)
 10081d0:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 10081d4:	e0bff917 	ldw	r2,-28(fp)
 10081d8:	10800090 	cmplti	r2,r2,2
 10081dc:	1000071e 	bne	r2,zero,10081fc <altera_avalon_jtag_uart_ioctl+0x8c>
 10081e0:	e0fff917 	ldw	r3,-28(fp)
 10081e4:	00a00034 	movhi	r2,32768
 10081e8:	10bfffc4 	addi	r2,r2,-1
 10081ec:	18800326 	beq	r3,r2,10081fc <altera_avalon_jtag_uart_ioctl+0x8c>
 10081f0:	e0bff917 	ldw	r2,-28(fp)
 10081f4:	e0bffe15 	stw	r2,-8(fp)
 10081f8:	00000306 	br	1008208 <altera_avalon_jtag_uart_ioctl+0x98>
 10081fc:	00e00034 	movhi	r3,32768
 1008200:	18ffff84 	addi	r3,r3,-2
 1008204:	e0fffe15 	stw	r3,-8(fp)
 1008208:	e0bffb17 	ldw	r2,-20(fp)
 100820c:	e0fffe17 	ldw	r3,-8(fp)
 1008210:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1008214:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1008218:	00000d06 	br	1008250 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100821c:	e0bffb17 	ldw	r2,-20(fp)
 1008220:	10c00117 	ldw	r3,4(r2)
 1008224:	00a00034 	movhi	r2,32768
 1008228:	10bfffc4 	addi	r2,r2,-1
 100822c:	18800826 	beq	r3,r2,1008250 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1008230:	e13ffd17 	ldw	r4,-12(fp)
 1008234:	e0bffb17 	ldw	r2,-20(fp)
 1008238:	10c00917 	ldw	r3,36(r2)
 100823c:	e0bffb17 	ldw	r2,-20(fp)
 1008240:	10800117 	ldw	r2,4(r2)
 1008244:	1885803a 	cmpltu	r2,r3,r2
 1008248:	20800015 	stw	r2,0(r4)
      rc = 0;
 100824c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1008250:	e0bffa17 	ldw	r2,-24(fp)
}
 1008254:	e037883a 	mov	sp,fp
 1008258:	df000017 	ldw	fp,0(sp)
 100825c:	dec00104 	addi	sp,sp,4
 1008260:	f800283a 	ret

01008264 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1008264:	defff204 	addi	sp,sp,-56
 1008268:	dfc00d15 	stw	ra,52(sp)
 100826c:	df000c15 	stw	fp,48(sp)
 1008270:	df000c04 	addi	fp,sp,48
 1008274:	e13ffb15 	stw	r4,-20(fp)
 1008278:	e17ffc15 	stw	r5,-16(fp)
 100827c:	e1bffd15 	stw	r6,-12(fp)
 1008280:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1008284:	e0bffc17 	ldw	r2,-16(fp)
 1008288:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100828c:	00004806 	br	10083b0 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1008290:	e0bffb17 	ldw	r2,-20(fp)
 1008294:	10800a17 	ldw	r2,40(r2)
 1008298:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100829c:	e0bffb17 	ldw	r2,-20(fp)
 10082a0:	10800b17 	ldw	r2,44(r2)
 10082a4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 10082a8:	e0fff717 	ldw	r3,-36(fp)
 10082ac:	e0bff617 	ldw	r2,-40(fp)
 10082b0:	18800536 	bltu	r3,r2,10082c8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 10082b4:	e0bff717 	ldw	r2,-36(fp)
 10082b8:	e0fff617 	ldw	r3,-40(fp)
 10082bc:	10c5c83a 	sub	r2,r2,r3
 10082c0:	e0bff815 	stw	r2,-32(fp)
 10082c4:	00000406 	br	10082d8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 10082c8:	00820004 	movi	r2,2048
 10082cc:	e0fff617 	ldw	r3,-40(fp)
 10082d0:	10c5c83a 	sub	r2,r2,r3
 10082d4:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10082d8:	e0bff817 	ldw	r2,-32(fp)
 10082dc:	1005003a 	cmpeq	r2,r2,zero
 10082e0:	10001f1e 	bne	r2,zero,1008360 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 10082e4:	e0fffd17 	ldw	r3,-12(fp)
 10082e8:	e0bff817 	ldw	r2,-32(fp)
 10082ec:	1880022e 	bgeu	r3,r2,10082f8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 10082f0:	e0bffd17 	ldw	r2,-12(fp)
 10082f4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 10082f8:	e0bffb17 	ldw	r2,-20(fp)
 10082fc:	10c00e04 	addi	r3,r2,56
 1008300:	e0bff617 	ldw	r2,-40(fp)
 1008304:	1887883a 	add	r3,r3,r2
 1008308:	e0bffa17 	ldw	r2,-24(fp)
 100830c:	1009883a 	mov	r4,r2
 1008310:	180b883a 	mov	r5,r3
 1008314:	e1bff817 	ldw	r6,-32(fp)
 1008318:	10011080 	call	1001108 <memcpy>
      ptr   += n;
 100831c:	e0fff817 	ldw	r3,-32(fp)
 1008320:	e0bffa17 	ldw	r2,-24(fp)
 1008324:	10c5883a 	add	r2,r2,r3
 1008328:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100832c:	e0fffd17 	ldw	r3,-12(fp)
 1008330:	e0bff817 	ldw	r2,-32(fp)
 1008334:	1885c83a 	sub	r2,r3,r2
 1008338:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100833c:	e0fff617 	ldw	r3,-40(fp)
 1008340:	e0bff817 	ldw	r2,-32(fp)
 1008344:	1885883a 	add	r2,r3,r2
 1008348:	10c1ffcc 	andi	r3,r2,2047
 100834c:	e0bffb17 	ldw	r2,-20(fp)
 1008350:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1008354:	e0bffd17 	ldw	r2,-12(fp)
 1008358:	10800048 	cmpgei	r2,r2,1
 100835c:	103fcc1e 	bne	r2,zero,1008290 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1008360:	e0fffa17 	ldw	r3,-24(fp)
 1008364:	e0bffc17 	ldw	r2,-16(fp)
 1008368:	1880141e 	bne	r3,r2,10083bc <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100836c:	e0bffe17 	ldw	r2,-8(fp)
 1008370:	1090000c 	andi	r2,r2,16384
 1008374:	1004c03a 	cmpne	r2,r2,zero
 1008378:	1000101e 	bne	r2,zero,10083bc <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100837c:	e0bffb17 	ldw	r2,-20(fp)
 1008380:	10c00a17 	ldw	r3,40(r2)
 1008384:	e0bff717 	ldw	r2,-36(fp)
 1008388:	1880051e 	bne	r3,r2,10083a0 <altera_avalon_jtag_uart_read+0x13c>
 100838c:	e0bffb17 	ldw	r2,-20(fp)
 1008390:	10c00917 	ldw	r3,36(r2)
 1008394:	e0bffb17 	ldw	r2,-20(fp)
 1008398:	10800117 	ldw	r2,4(r2)
 100839c:	18bff736 	bltu	r3,r2,100837c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 10083a0:	e0bffb17 	ldw	r2,-20(fp)
 10083a4:	10c00a17 	ldw	r3,40(r2)
 10083a8:	e0bff717 	ldw	r2,-36(fp)
 10083ac:	18800326 	beq	r3,r2,10083bc <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 10083b0:	e0bffd17 	ldw	r2,-12(fp)
 10083b4:	10800048 	cmpgei	r2,r2,1
 10083b8:	103fb51e 	bne	r2,zero,1008290 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 10083bc:	e0fffa17 	ldw	r3,-24(fp)
 10083c0:	e0bffc17 	ldw	r2,-16(fp)
 10083c4:	18801926 	beq	r3,r2,100842c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10083c8:	0005303a 	rdctl	r2,status
 10083cc:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10083d0:	e0fff517 	ldw	r3,-44(fp)
 10083d4:	00bfff84 	movi	r2,-2
 10083d8:	1884703a 	and	r2,r3,r2
 10083dc:	1001703a 	wrctl	status,r2
  
  return context;
 10083e0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10083e4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10083e8:	e0bffb17 	ldw	r2,-20(fp)
 10083ec:	10800817 	ldw	r2,32(r2)
 10083f0:	10c00054 	ori	r3,r2,1
 10083f4:	e0bffb17 	ldw	r2,-20(fp)
 10083f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10083fc:	e0bffb17 	ldw	r2,-20(fp)
 1008400:	10800017 	ldw	r2,0(r2)
 1008404:	11000104 	addi	r4,r2,4
 1008408:	e0bffb17 	ldw	r2,-20(fp)
 100840c:	10800817 	ldw	r2,32(r2)
 1008410:	1007883a 	mov	r3,r2
 1008414:	2005883a 	mov	r2,r4
 1008418:	10c00035 	stwio	r3,0(r2)
 100841c:	e0bff917 	ldw	r2,-28(fp)
 1008420:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008424:	e0bff417 	ldw	r2,-48(fp)
 1008428:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100842c:	e0fffa17 	ldw	r3,-24(fp)
 1008430:	e0bffc17 	ldw	r2,-16(fp)
 1008434:	18800526 	beq	r3,r2,100844c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 1008438:	e0fffa17 	ldw	r3,-24(fp)
 100843c:	e0bffc17 	ldw	r2,-16(fp)
 1008440:	1887c83a 	sub	r3,r3,r2
 1008444:	e0ffff15 	stw	r3,-4(fp)
 1008448:	00000906 	br	1008470 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100844c:	e0bffe17 	ldw	r2,-8(fp)
 1008450:	1090000c 	andi	r2,r2,16384
 1008454:	1005003a 	cmpeq	r2,r2,zero
 1008458:	1000031e 	bne	r2,zero,1008468 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100845c:	00bffd44 	movi	r2,-11
 1008460:	e0bfff15 	stw	r2,-4(fp)
 1008464:	00000206 	br	1008470 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1008468:	00bffec4 	movi	r2,-5
 100846c:	e0bfff15 	stw	r2,-4(fp)
 1008470:	e0bfff17 	ldw	r2,-4(fp)
}
 1008474:	e037883a 	mov	sp,fp
 1008478:	dfc00117 	ldw	ra,4(sp)
 100847c:	df000017 	ldw	fp,0(sp)
 1008480:	dec00204 	addi	sp,sp,8
 1008484:	f800283a 	ret

01008488 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1008488:	defff204 	addi	sp,sp,-56
 100848c:	dfc00d15 	stw	ra,52(sp)
 1008490:	df000c15 	stw	fp,48(sp)
 1008494:	df000c04 	addi	fp,sp,48
 1008498:	e13ffb15 	stw	r4,-20(fp)
 100849c:	e17ffc15 	stw	r5,-16(fp)
 10084a0:	e1bffd15 	stw	r6,-12(fp)
 10084a4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 10084a8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 10084ac:	e0bffc17 	ldw	r2,-16(fp)
 10084b0:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10084b4:	00003a06 	br	10085a0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 10084b8:	e0bffb17 	ldw	r2,-20(fp)
 10084bc:	10800c17 	ldw	r2,48(r2)
 10084c0:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 10084c4:	e0bffb17 	ldw	r2,-20(fp)
 10084c8:	10800d17 	ldw	r2,52(r2)
 10084cc:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 10084d0:	e0fffa17 	ldw	r3,-24(fp)
 10084d4:	e0bff917 	ldw	r2,-28(fp)
 10084d8:	1880062e 	bgeu	r3,r2,10084f4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 10084dc:	e0fff917 	ldw	r3,-28(fp)
 10084e0:	e0bffa17 	ldw	r2,-24(fp)
 10084e4:	1885c83a 	sub	r2,r3,r2
 10084e8:	10bfffc4 	addi	r2,r2,-1
 10084ec:	e0bff815 	stw	r2,-32(fp)
 10084f0:	00000c06 	br	1008524 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 10084f4:	e0bff917 	ldw	r2,-28(fp)
 10084f8:	1005003a 	cmpeq	r2,r2,zero
 10084fc:	1000051e 	bne	r2,zero,1008514 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 1008500:	00820004 	movi	r2,2048
 1008504:	e0fffa17 	ldw	r3,-24(fp)
 1008508:	10c5c83a 	sub	r2,r2,r3
 100850c:	e0bff815 	stw	r2,-32(fp)
 1008510:	00000406 	br	1008524 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 1008514:	0081ffc4 	movi	r2,2047
 1008518:	e0fffa17 	ldw	r3,-24(fp)
 100851c:	10c5c83a 	sub	r2,r2,r3
 1008520:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1008524:	e0bff817 	ldw	r2,-32(fp)
 1008528:	1005003a 	cmpeq	r2,r2,zero
 100852c:	10001f1e 	bne	r2,zero,10085ac <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 1008530:	e0fffd17 	ldw	r3,-12(fp)
 1008534:	e0bff817 	ldw	r2,-32(fp)
 1008538:	1880022e 	bgeu	r3,r2,1008544 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100853c:	e0bffd17 	ldw	r2,-12(fp)
 1008540:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1008544:	e0bffb17 	ldw	r2,-20(fp)
 1008548:	10c20e04 	addi	r3,r2,2104
 100854c:	e0bffa17 	ldw	r2,-24(fp)
 1008550:	1885883a 	add	r2,r3,r2
 1008554:	e0fffc17 	ldw	r3,-16(fp)
 1008558:	1009883a 	mov	r4,r2
 100855c:	180b883a 	mov	r5,r3
 1008560:	e1bff817 	ldw	r6,-32(fp)
 1008564:	10011080 	call	1001108 <memcpy>
      ptr   += n;
 1008568:	e0fff817 	ldw	r3,-32(fp)
 100856c:	e0bffc17 	ldw	r2,-16(fp)
 1008570:	10c5883a 	add	r2,r2,r3
 1008574:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1008578:	e0fffd17 	ldw	r3,-12(fp)
 100857c:	e0bff817 	ldw	r2,-32(fp)
 1008580:	1885c83a 	sub	r2,r3,r2
 1008584:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1008588:	e0fffa17 	ldw	r3,-24(fp)
 100858c:	e0bff817 	ldw	r2,-32(fp)
 1008590:	1885883a 	add	r2,r3,r2
 1008594:	10c1ffcc 	andi	r3,r2,2047
 1008598:	e0bffb17 	ldw	r2,-20(fp)
 100859c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 10085a0:	e0bffd17 	ldw	r2,-12(fp)
 10085a4:	10800048 	cmpgei	r2,r2,1
 10085a8:	103fc31e 	bne	r2,zero,10084b8 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10085ac:	0005303a 	rdctl	r2,status
 10085b0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10085b4:	e0fff517 	ldw	r3,-44(fp)
 10085b8:	00bfff84 	movi	r2,-2
 10085bc:	1884703a 	and	r2,r3,r2
 10085c0:	1001703a 	wrctl	status,r2
  
  return context;
 10085c4:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 10085c8:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 10085cc:	e0bffb17 	ldw	r2,-20(fp)
 10085d0:	10800817 	ldw	r2,32(r2)
 10085d4:	10c00094 	ori	r3,r2,2
 10085d8:	e0bffb17 	ldw	r2,-20(fp)
 10085dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10085e0:	e0bffb17 	ldw	r2,-20(fp)
 10085e4:	10800017 	ldw	r2,0(r2)
 10085e8:	11000104 	addi	r4,r2,4
 10085ec:	e0bffb17 	ldw	r2,-20(fp)
 10085f0:	10800817 	ldw	r2,32(r2)
 10085f4:	1007883a 	mov	r3,r2
 10085f8:	2005883a 	mov	r2,r4
 10085fc:	10c00035 	stwio	r3,0(r2)
 1008600:	e0bff717 	ldw	r2,-36(fp)
 1008604:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008608:	e0bff417 	ldw	r2,-48(fp)
 100860c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 1008610:	e0bffd17 	ldw	r2,-12(fp)
 1008614:	10800050 	cmplti	r2,r2,1
 1008618:	1000111e 	bne	r2,zero,1008660 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100861c:	e0bffe17 	ldw	r2,-8(fp)
 1008620:	1090000c 	andi	r2,r2,16384
 1008624:	1004c03a 	cmpne	r2,r2,zero
 1008628:	1000101e 	bne	r2,zero,100866c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100862c:	e0bffb17 	ldw	r2,-20(fp)
 1008630:	10c00d17 	ldw	r3,52(r2)
 1008634:	e0bff917 	ldw	r2,-28(fp)
 1008638:	1880051e 	bne	r3,r2,1008650 <altera_avalon_jtag_uart_write+0x1c8>
 100863c:	e0bffb17 	ldw	r2,-20(fp)
 1008640:	10c00917 	ldw	r3,36(r2)
 1008644:	e0bffb17 	ldw	r2,-20(fp)
 1008648:	10800117 	ldw	r2,4(r2)
 100864c:	18bff736 	bltu	r3,r2,100862c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1008650:	e0bffb17 	ldw	r2,-20(fp)
 1008654:	10c00d17 	ldw	r3,52(r2)
 1008658:	e0bff917 	ldw	r2,-28(fp)
 100865c:	18800326 	beq	r3,r2,100866c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 1008660:	e0bffd17 	ldw	r2,-12(fp)
 1008664:	10800048 	cmpgei	r2,r2,1
 1008668:	103fcd1e 	bne	r2,zero,10085a0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100866c:	e0fffc17 	ldw	r3,-16(fp)
 1008670:	e0bff617 	ldw	r2,-40(fp)
 1008674:	18800526 	beq	r3,r2,100868c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1008678:	e0fffc17 	ldw	r3,-16(fp)
 100867c:	e0bff617 	ldw	r2,-40(fp)
 1008680:	1887c83a 	sub	r3,r3,r2
 1008684:	e0ffff15 	stw	r3,-4(fp)
 1008688:	00000906 	br	10086b0 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100868c:	e0bffe17 	ldw	r2,-8(fp)
 1008690:	1090000c 	andi	r2,r2,16384
 1008694:	1005003a 	cmpeq	r2,r2,zero
 1008698:	1000031e 	bne	r2,zero,10086a8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100869c:	00bffd44 	movi	r2,-11
 10086a0:	e0bfff15 	stw	r2,-4(fp)
 10086a4:	00000206 	br	10086b0 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 10086a8:	00bffec4 	movi	r2,-5
 10086ac:	e0bfff15 	stw	r2,-4(fp)
 10086b0:	e0bfff17 	ldw	r2,-4(fp)
}
 10086b4:	e037883a 	mov	sp,fp
 10086b8:	dfc00117 	ldw	ra,4(sp)
 10086bc:	df000017 	ldw	fp,0(sp)
 10086c0:	dec00204 	addi	sp,sp,8
 10086c4:	f800283a 	ret

010086c8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 10086c8:	defff904 	addi	sp,sp,-28
 10086cc:	dfc00615 	stw	ra,24(sp)
 10086d0:	df000515 	stw	fp,20(sp)
 10086d4:	df000504 	addi	fp,sp,20
 10086d8:	e13ffe15 	stw	r4,-8(fp)
 10086dc:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 10086e0:	e0bffe17 	ldw	r2,-8(fp)
 10086e4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 10086e8:	e0bffe17 	ldw	r2,-8(fp)
 10086ec:	10800104 	addi	r2,r2,4
 10086f0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10086f4:	0005303a 	rdctl	r2,status
 10086f8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10086fc:	e0fffc17 	ldw	r3,-16(fp)
 1008700:	00bfff84 	movi	r2,-2
 1008704:	1884703a 	and	r2,r3,r2
 1008708:	1001703a 	wrctl	status,r2
  
  return context;
 100870c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 1008710:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 1008714:	1009b1c0 	call	1009b1c <alt_tick>
 1008718:	e0bffd17 	ldw	r2,-12(fp)
 100871c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008720:	e0bffb17 	ldw	r2,-20(fp)
 1008724:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 1008728:	e037883a 	mov	sp,fp
 100872c:	dfc00117 	ldw	ra,4(sp)
 1008730:	df000017 	ldw	fp,0(sp)
 1008734:	dec00204 	addi	sp,sp,8
 1008738:	f800283a 	ret

0100873c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 100873c:	defff904 	addi	sp,sp,-28
 1008740:	dfc00615 	stw	ra,24(sp)
 1008744:	df000515 	stw	fp,20(sp)
 1008748:	df000504 	addi	fp,sp,20
 100874c:	e13ffc15 	stw	r4,-16(fp)
 1008750:	e17ffd15 	stw	r5,-12(fp)
 1008754:	e1bffe15 	stw	r6,-8(fp)
 1008758:	e1ffff15 	stw	r7,-4(fp)
 100875c:	e0bfff17 	ldw	r2,-4(fp)
 1008760:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1008764:	00804074 	movhi	r2,257
 1008768:	10b68204 	addi	r2,r2,-9720
 100876c:	10800017 	ldw	r2,0(r2)
 1008770:	1004c03a 	cmpne	r2,r2,zero
 1008774:	1000041e 	bne	r2,zero,1008788 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1008778:	00c04074 	movhi	r3,257
 100877c:	18f68204 	addi	r3,r3,-9720
 1008780:	e0bffb17 	ldw	r2,-20(fp)
 1008784:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1008788:	e0bffc17 	ldw	r2,-16(fp)
 100878c:	10800104 	addi	r2,r2,4
 1008790:	1007883a 	mov	r3,r2
 1008794:	008001c4 	movi	r2,7
 1008798:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 100879c:	e13ffe17 	ldw	r4,-8(fp)
 10087a0:	e17ffc17 	ldw	r5,-16(fp)
 10087a4:	01804074 	movhi	r6,257
 10087a8:	31a1b204 	addi	r6,r6,-31032
 10087ac:	10096000 	call	1009600 <alt_irq_register>
#endif  
}
 10087b0:	e037883a 	mov	sp,fp
 10087b4:	dfc00117 	ldw	ra,4(sp)
 10087b8:	df000017 	ldw	fp,0(sp)
 10087bc:	dec00204 	addi	sp,sp,8
 10087c0:	f800283a 	ret

010087c4 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 10087c4:	defffc04 	addi	sp,sp,-16
 10087c8:	df000315 	stw	fp,12(sp)
 10087cc:	df000304 	addi	fp,sp,12
 10087d0:	e13ffe15 	stw	r4,-8(fp)
 10087d4:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 10087d8:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 10087dc:	e0bfff17 	ldw	r2,-4(fp)
 10087e0:	1004c03a 	cmpne	r2,r2,zero
 10087e4:	1000061e 	bne	r2,zero,1008800 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 10087e8:	e0bffe17 	ldw	r2,-8(fp)
 10087ec:	1007883a 	mov	r3,r2
 10087f0:	e0bffd03 	ldbu	r2,-12(fp)
 10087f4:	10c4b03a 	or	r2,r2,r3
 10087f8:	e0bffd05 	stb	r2,-12(fp)
 10087fc:	00000806 	br	1008820 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 1008800:	e0bffe17 	ldw	r2,-8(fp)
 1008804:	1007883a 	mov	r3,r2
 1008808:	e0bffd03 	ldbu	r2,-12(fp)
 100880c:	10c4b03a 	or	r2,r2,r3
 1008810:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 1008814:	e0bffd03 	ldbu	r2,-12(fp)
 1008818:	10801014 	ori	r2,r2,64
 100881c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 1008820:	e0fffd03 	ldbu	r3,-12(fp)
 1008824:	00bfe004 	movi	r2,-128
 1008828:	1884b03a 	or	r2,r3,r2
 100882c:	10803fcc 	andi	r2,r2,255
}
 1008830:	e037883a 	mov	sp,fp
 1008834:	df000017 	ldw	fp,0(sp)
 1008838:	dec00104 	addi	sp,sp,4
 100883c:	f800283a 	ret

01008840 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1008840:	defffd04 	addi	sp,sp,-12
 1008844:	df000215 	stw	fp,8(sp)
 1008848:	df000204 	addi	fp,sp,8
 100884c:	e13ffe15 	stw	r4,-8(fp)
 1008850:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1008854:	e0bffe17 	ldw	r2,-8(fp)
 1008858:	10800a17 	ldw	r2,40(r2)
 100885c:	e0ffff03 	ldbu	r3,-4(fp)
 1008860:	10c00025 	stbio	r3,0(r2)
}
 1008864:	e037883a 	mov	sp,fp
 1008868:	df000017 	ldw	fp,0(sp)
 100886c:	dec00104 	addi	sp,sp,4
 1008870:	f800283a 	ret

01008874 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1008874:	defffe04 	addi	sp,sp,-8
 1008878:	df000115 	stw	fp,4(sp)
 100887c:	df000104 	addi	fp,sp,4
 1008880:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1008884:	e0bfff17 	ldw	r2,-4(fp)
 1008888:	10800a17 	ldw	r2,40(r2)
 100888c:	1007883a 	mov	r3,r2
 1008890:	00800044 	movi	r2,1
 1008894:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1008898:	e037883a 	mov	sp,fp
 100889c:	df000017 	ldw	fp,0(sp)
 10088a0:	dec00104 	addi	sp,sp,4
 10088a4:	f800283a 	ret

010088a8 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 10088a8:	defffc04 	addi	sp,sp,-16
 10088ac:	dfc00315 	stw	ra,12(sp)
 10088b0:	df000215 	stw	fp,8(sp)
 10088b4:	df000204 	addi	fp,sp,8
 10088b8:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 10088bc:	e13fff17 	ldw	r4,-4(fp)
 10088c0:	01404074 	movhi	r5,257
 10088c4:	296fb204 	addi	r5,r5,-16696
 10088c8:	10094000 	call	1009400 <alt_find_dev>
 10088cc:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10088d0:	e0bffe17 	ldw	r2,-8(fp)
}
 10088d4:	e037883a 	mov	sp,fp
 10088d8:	dfc00117 	ldw	ra,4(sp)
 10088dc:	df000017 	ldw	fp,0(sp)
 10088e0:	dec00204 	addi	sp,sp,8
 10088e4:	f800283a 	ret

010088e8 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 10088e8:	defffb04 	addi	sp,sp,-20
 10088ec:	df000415 	stw	fp,16(sp)
 10088f0:	df000404 	addi	fp,sp,16
 10088f4:	e13ffd15 	stw	r4,-12(fp)
 10088f8:	e17ffe15 	stw	r5,-8(fp)
 10088fc:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 1008900:	e03ffc15 	stw	zero,-16(fp)
 1008904:	00000f06 	br	1008944 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 1008908:	e0bffd17 	ldw	r2,-12(fp)
 100890c:	10800a17 	ldw	r2,40(r2)
 1008910:	11000044 	addi	r4,r2,1
 1008914:	e0fffc17 	ldw	r3,-16(fp)
 1008918:	e0bffe17 	ldw	r2,-8(fp)
 100891c:	1885883a 	add	r2,r3,r2
 1008920:	10800003 	ldbu	r2,0(r2)
 1008924:	10c03fcc 	andi	r3,r2,255
 1008928:	18c0201c 	xori	r3,r3,128
 100892c:	18ffe004 	addi	r3,r3,-128
 1008930:	2005883a 	mov	r2,r4
 1008934:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 1008938:	e0bffc17 	ldw	r2,-16(fp)
 100893c:	10800044 	addi	r2,r2,1
 1008940:	e0bffc15 	stw	r2,-16(fp)
 1008944:	e0fffc17 	ldw	r3,-16(fp)
 1008948:	e0bfff17 	ldw	r2,-4(fp)
 100894c:	18bfee36 	bltu	r3,r2,1008908 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 1008950:	e037883a 	mov	sp,fp
 1008954:	df000017 	ldw	fp,0(sp)
 1008958:	dec00104 	addi	sp,sp,4
 100895c:	f800283a 	ret

01008960 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1008960:	defffd04 	addi	sp,sp,-12
 1008964:	df000215 	stw	fp,8(sp)
 1008968:	df000204 	addi	fp,sp,8
 100896c:	e13ffe15 	stw	r4,-8(fp)
 1008970:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1008974:	00000d06 	br	10089ac <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1008978:	e0bffe17 	ldw	r2,-8(fp)
 100897c:	10800a17 	ldw	r2,40(r2)
 1008980:	11000044 	addi	r4,r2,1
 1008984:	e0bfff17 	ldw	r2,-4(fp)
 1008988:	10800003 	ldbu	r2,0(r2)
 100898c:	10c03fcc 	andi	r3,r2,255
 1008990:	18c0201c 	xori	r3,r3,128
 1008994:	18ffe004 	addi	r3,r3,-128
 1008998:	2005883a 	mov	r2,r4
 100899c:	10c00025 	stbio	r3,0(r2)
		++ptr;
 10089a0:	e0bfff17 	ldw	r2,-4(fp)
 10089a4:	10800044 	addi	r2,r2,1
 10089a8:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 10089ac:	e0bfff17 	ldw	r2,-4(fp)
 10089b0:	10800003 	ldbu	r2,0(r2)
 10089b4:	10803fcc 	andi	r2,r2,255
 10089b8:	1080201c 	xori	r2,r2,128
 10089bc:	10bfe004 	addi	r2,r2,-128
 10089c0:	1004c03a 	cmpne	r2,r2,zero
 10089c4:	103fec1e 	bne	r2,zero,1008978 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 10089c8:	e037883a 	mov	sp,fp
 10089cc:	df000017 	ldw	fp,0(sp)
 10089d0:	dec00104 	addi	sp,sp,4
 10089d4:	f800283a 	ret

010089d8 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 10089d8:	defffb04 	addi	sp,sp,-20
 10089dc:	dfc00415 	stw	ra,16(sp)
 10089e0:	df000315 	stw	fp,12(sp)
 10089e4:	df000304 	addi	fp,sp,12
 10089e8:	e13ffd15 	stw	r4,-12(fp)
 10089ec:	e17ffe15 	stw	r5,-8(fp)
 10089f0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 10089f4:	e0bffd17 	ldw	r2,-12(fp)
 10089f8:	10800017 	ldw	r2,0(r2)
 10089fc:	1009883a 	mov	r4,r2
 1008a00:	e1bfff17 	ldw	r6,-4(fp)
 1008a04:	e17ffe17 	ldw	r5,-8(fp)
 1008a08:	10088e80 	call	10088e8 <alt_up_character_lcd_write>
	return 0;
 1008a0c:	0005883a 	mov	r2,zero
}
 1008a10:	e037883a 	mov	sp,fp
 1008a14:	dfc00117 	ldw	ra,4(sp)
 1008a18:	df000017 	ldw	fp,0(sp)
 1008a1c:	dec00204 	addi	sp,sp,8
 1008a20:	f800283a 	ret

01008a24 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 1008a24:	defff904 	addi	sp,sp,-28
 1008a28:	dfc00615 	stw	ra,24(sp)
 1008a2c:	df000515 	stw	fp,20(sp)
 1008a30:	df000504 	addi	fp,sp,20
 1008a34:	e13ffc15 	stw	r4,-16(fp)
 1008a38:	e17ffd15 	stw	r5,-12(fp)
 1008a3c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 1008a40:	e0bffd17 	ldw	r2,-12(fp)
 1008a44:	10800a28 	cmpgeui	r2,r2,40
 1008a48:	1000031e 	bne	r2,zero,1008a58 <alt_up_character_lcd_set_cursor_pos+0x34>
 1008a4c:	e0bffe17 	ldw	r2,-8(fp)
 1008a50:	108000b0 	cmpltui	r2,r2,2
 1008a54:	1000031e 	bne	r2,zero,1008a64 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1008a58:	00bfffc4 	movi	r2,-1
 1008a5c:	e0bfff15 	stw	r2,-4(fp)
 1008a60:	00000806 	br	1008a84 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1008a64:	e13ffd17 	ldw	r4,-12(fp)
 1008a68:	e17ffe17 	ldw	r5,-8(fp)
 1008a6c:	10087c40 	call	10087c4 <get_DDRAM_addr>
 1008a70:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1008a74:	e17ffb03 	ldbu	r5,-20(fp)
 1008a78:	e13ffc17 	ldw	r4,-16(fp)
 1008a7c:	10088400 	call	1008840 <alt_up_character_lcd_send_cmd>
	return 0;
 1008a80:	e03fff15 	stw	zero,-4(fp)
 1008a84:	e0bfff17 	ldw	r2,-4(fp)
}
 1008a88:	e037883a 	mov	sp,fp
 1008a8c:	dfc00117 	ldw	ra,4(sp)
 1008a90:	df000017 	ldw	fp,0(sp)
 1008a94:	dec00204 	addi	sp,sp,8
 1008a98:	f800283a 	ret

01008a9c <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1008a9c:	defff904 	addi	sp,sp,-28
 1008aa0:	dfc00615 	stw	ra,24(sp)
 1008aa4:	df000515 	stw	fp,20(sp)
 1008aa8:	df000504 	addi	fp,sp,20
 1008aac:	e13ffc15 	stw	r4,-16(fp)
 1008ab0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1008ab4:	e0bffd17 	ldw	r2,-12(fp)
 1008ab8:	1005003a 	cmpeq	r2,r2,zero
 1008abc:	10001e1e 	bne	r2,zero,1008b38 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1008ac0:	e0bffd17 	ldw	r2,-12(fp)
 1008ac4:	10800050 	cmplti	r2,r2,1
 1008ac8:	1000031e 	bne	r2,zero,1008ad8 <alt_up_character_lcd_shift_cursor+0x3c>
 1008acc:	00800504 	movi	r2,20
 1008ad0:	e0bfff05 	stb	r2,-4(fp)
 1008ad4:	00000206 	br	1008ae0 <alt_up_character_lcd_shift_cursor+0x44>
 1008ad8:	00c00404 	movi	r3,16
 1008adc:	e0ffff05 	stb	r3,-4(fp)
 1008ae0:	e0bfff03 	ldbu	r2,-4(fp)
 1008ae4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1008ae8:	e0fffd17 	ldw	r3,-12(fp)
 1008aec:	e0fffe15 	stw	r3,-8(fp)
 1008af0:	e0fffe17 	ldw	r3,-8(fp)
 1008af4:	1804403a 	cmpge	r2,r3,zero
 1008af8:	1000031e 	bne	r2,zero,1008b08 <alt_up_character_lcd_shift_cursor+0x6c>
 1008afc:	e0bffe17 	ldw	r2,-8(fp)
 1008b00:	0085c83a 	sub	r2,zero,r2
 1008b04:	e0bffe15 	stw	r2,-8(fp)
 1008b08:	e0fffe17 	ldw	r3,-8(fp)
 1008b0c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1008b10:	00000306 	br	1008b20 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1008b14:	e17ffb43 	ldbu	r5,-19(fp)
 1008b18:	e13ffc17 	ldw	r4,-16(fp)
 1008b1c:	10088400 	call	1008840 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1008b20:	e0bffb03 	ldbu	r2,-20(fp)
 1008b24:	10bfffc4 	addi	r2,r2,-1
 1008b28:	e0bffb05 	stb	r2,-20(fp)
 1008b2c:	e0bffb03 	ldbu	r2,-20(fp)
 1008b30:	10803fd8 	cmpnei	r2,r2,255
 1008b34:	103ff71e 	bne	r2,zero,1008b14 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1008b38:	e037883a 	mov	sp,fp
 1008b3c:	dfc00117 	ldw	ra,4(sp)
 1008b40:	df000017 	ldw	fp,0(sp)
 1008b44:	dec00204 	addi	sp,sp,8
 1008b48:	f800283a 	ret

01008b4c <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1008b4c:	defff904 	addi	sp,sp,-28
 1008b50:	dfc00615 	stw	ra,24(sp)
 1008b54:	df000515 	stw	fp,20(sp)
 1008b58:	df000504 	addi	fp,sp,20
 1008b5c:	e13ffc15 	stw	r4,-16(fp)
 1008b60:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1008b64:	e0bffd17 	ldw	r2,-12(fp)
 1008b68:	1005003a 	cmpeq	r2,r2,zero
 1008b6c:	10001e1e 	bne	r2,zero,1008be8 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1008b70:	e0bffd17 	ldw	r2,-12(fp)
 1008b74:	10800050 	cmplti	r2,r2,1
 1008b78:	1000031e 	bne	r2,zero,1008b88 <alt_up_character_lcd_shift_display+0x3c>
 1008b7c:	00800704 	movi	r2,28
 1008b80:	e0bfff05 	stb	r2,-4(fp)
 1008b84:	00000206 	br	1008b90 <alt_up_character_lcd_shift_display+0x44>
 1008b88:	00c00604 	movi	r3,24
 1008b8c:	e0ffff05 	stb	r3,-4(fp)
 1008b90:	e0bfff03 	ldbu	r2,-4(fp)
 1008b94:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1008b98:	e0fffd17 	ldw	r3,-12(fp)
 1008b9c:	e0fffe15 	stw	r3,-8(fp)
 1008ba0:	e0fffe17 	ldw	r3,-8(fp)
 1008ba4:	1804403a 	cmpge	r2,r3,zero
 1008ba8:	1000031e 	bne	r2,zero,1008bb8 <alt_up_character_lcd_shift_display+0x6c>
 1008bac:	e0bffe17 	ldw	r2,-8(fp)
 1008bb0:	0085c83a 	sub	r2,zero,r2
 1008bb4:	e0bffe15 	stw	r2,-8(fp)
 1008bb8:	e0fffe17 	ldw	r3,-8(fp)
 1008bbc:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1008bc0:	00000306 	br	1008bd0 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1008bc4:	e17ffb43 	ldbu	r5,-19(fp)
 1008bc8:	e13ffc17 	ldw	r4,-16(fp)
 1008bcc:	10088400 	call	1008840 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1008bd0:	e0bffb03 	ldbu	r2,-20(fp)
 1008bd4:	10bfffc4 	addi	r2,r2,-1
 1008bd8:	e0bffb05 	stb	r2,-20(fp)
 1008bdc:	e0bffb03 	ldbu	r2,-20(fp)
 1008be0:	10803fd8 	cmpnei	r2,r2,255
 1008be4:	103ff71e 	bne	r2,zero,1008bc4 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1008be8:	e037883a 	mov	sp,fp
 1008bec:	dfc00117 	ldw	ra,4(sp)
 1008bf0:	df000017 	ldw	fp,0(sp)
 1008bf4:	dec00204 	addi	sp,sp,8
 1008bf8:	f800283a 	ret

01008bfc <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1008bfc:	defff904 	addi	sp,sp,-28
 1008c00:	dfc00615 	stw	ra,24(sp)
 1008c04:	df000515 	stw	fp,20(sp)
 1008c08:	df000504 	addi	fp,sp,20
 1008c0c:	e13ffc15 	stw	r4,-16(fp)
 1008c10:	e17ffd15 	stw	r5,-12(fp)
 1008c14:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1008c18:	e0bffd17 	ldw	r2,-12(fp)
 1008c1c:	10800a28 	cmpgeui	r2,r2,40
 1008c20:	1000031e 	bne	r2,zero,1008c30 <alt_up_character_lcd_erase_pos+0x34>
 1008c24:	e0bffe17 	ldw	r2,-8(fp)
 1008c28:	108000b0 	cmpltui	r2,r2,2
 1008c2c:	1000031e 	bne	r2,zero,1008c3c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1008c30:	00bfffc4 	movi	r2,-1
 1008c34:	e0bfff15 	stw	r2,-4(fp)
 1008c38:	00000e06 	br	1008c74 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1008c3c:	e13ffd17 	ldw	r4,-12(fp)
 1008c40:	e17ffe17 	ldw	r5,-8(fp)
 1008c44:	10087c40 	call	10087c4 <get_DDRAM_addr>
 1008c48:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1008c4c:	e17ffb03 	ldbu	r5,-20(fp)
 1008c50:	e13ffc17 	ldw	r4,-16(fp)
 1008c54:	10088400 	call	1008840 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1008c58:	e0bffc17 	ldw	r2,-16(fp)
 1008c5c:	10800a17 	ldw	r2,40(r2)
 1008c60:	10800044 	addi	r2,r2,1
 1008c64:	1007883a 	mov	r3,r2
 1008c68:	00800084 	movi	r2,2
 1008c6c:	18800025 	stbio	r2,0(r3)
	return 0;
 1008c70:	e03fff15 	stw	zero,-4(fp)
 1008c74:	e0bfff17 	ldw	r2,-4(fp)
}
 1008c78:	e037883a 	mov	sp,fp
 1008c7c:	dfc00117 	ldw	ra,4(sp)
 1008c80:	df000017 	ldw	fp,0(sp)
 1008c84:	dec00204 	addi	sp,sp,8
 1008c88:	f800283a 	ret

01008c8c <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1008c8c:	defffd04 	addi	sp,sp,-12
 1008c90:	dfc00215 	stw	ra,8(sp)
 1008c94:	df000115 	stw	fp,4(sp)
 1008c98:	df000104 	addi	fp,sp,4
 1008c9c:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1008ca0:	e13fff17 	ldw	r4,-4(fp)
 1008ca4:	01400304 	movi	r5,12
 1008ca8:	10088400 	call	1008840 <alt_up_character_lcd_send_cmd>
}
 1008cac:	e037883a 	mov	sp,fp
 1008cb0:	dfc00117 	ldw	ra,4(sp)
 1008cb4:	df000017 	ldw	fp,0(sp)
 1008cb8:	dec00204 	addi	sp,sp,8
 1008cbc:	f800283a 	ret

01008cc0 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1008cc0:	defffd04 	addi	sp,sp,-12
 1008cc4:	dfc00215 	stw	ra,8(sp)
 1008cc8:	df000115 	stw	fp,4(sp)
 1008ccc:	df000104 	addi	fp,sp,4
 1008cd0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1008cd4:	e13fff17 	ldw	r4,-4(fp)
 1008cd8:	014003c4 	movi	r5,15
 1008cdc:	10088400 	call	1008840 <alt_up_character_lcd_send_cmd>
}
 1008ce0:	e037883a 	mov	sp,fp
 1008ce4:	dfc00117 	ldw	ra,4(sp)
 1008ce8:	df000017 	ldw	fp,0(sp)
 1008cec:	dec00204 	addi	sp,sp,8
 1008cf0:	f800283a 	ret

01008cf4 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1008cf4:	defffd04 	addi	sp,sp,-12
 1008cf8:	df000215 	stw	fp,8(sp)
 1008cfc:	df000204 	addi	fp,sp,8
 1008d00:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1008d04:	e0bfff17 	ldw	r2,-4(fp)
 1008d08:	10800a17 	ldw	r2,40(r2)
 1008d0c:	10800104 	addi	r2,r2,4
 1008d10:	10800037 	ldwio	r2,0(r2)
 1008d14:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 1008d18:	e0bffe17 	ldw	r2,-8(fp)
 1008d1c:	10800054 	ori	r2,r2,1
 1008d20:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1008d24:	e0bfff17 	ldw	r2,-4(fp)
 1008d28:	10800a17 	ldw	r2,40(r2)
 1008d2c:	10800104 	addi	r2,r2,4
 1008d30:	e0fffe17 	ldw	r3,-8(fp)
 1008d34:	10c00035 	stwio	r3,0(r2)
}
 1008d38:	e037883a 	mov	sp,fp
 1008d3c:	df000017 	ldw	fp,0(sp)
 1008d40:	dec00104 	addi	sp,sp,4
 1008d44:	f800283a 	ret

01008d48 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1008d48:	defffd04 	addi	sp,sp,-12
 1008d4c:	df000215 	stw	fp,8(sp)
 1008d50:	df000204 	addi	fp,sp,8
 1008d54:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1008d58:	e0bfff17 	ldw	r2,-4(fp)
 1008d5c:	10800a17 	ldw	r2,40(r2)
 1008d60:	10800104 	addi	r2,r2,4
 1008d64:	10800037 	ldwio	r2,0(r2)
 1008d68:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 1008d6c:	e0fffe17 	ldw	r3,-8(fp)
 1008d70:	00bfff84 	movi	r2,-2
 1008d74:	1884703a 	and	r2,r3,r2
 1008d78:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1008d7c:	e0bfff17 	ldw	r2,-4(fp)
 1008d80:	10800a17 	ldw	r2,40(r2)
 1008d84:	10800104 	addi	r2,r2,4
 1008d88:	e0fffe17 	ldw	r3,-8(fp)
 1008d8c:	10c00035 	stwio	r3,0(r2)
}
 1008d90:	e037883a 	mov	sp,fp
 1008d94:	df000017 	ldw	fp,0(sp)
 1008d98:	dec00104 	addi	sp,sp,4
 1008d9c:	f800283a 	ret

01008da0 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 1008da0:	defffd04 	addi	sp,sp,-12
 1008da4:	df000215 	stw	fp,8(sp)
 1008da8:	df000204 	addi	fp,sp,8
 1008dac:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 1008db0:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 1008db4:	e0bfff17 	ldw	r2,-4(fp)
 1008db8:	10800a17 	ldw	r2,40(r2)
 1008dbc:	10800084 	addi	r2,r2,2
 1008dc0:	1080002b 	ldhuio	r2,0(r2)
 1008dc4:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 1008dc8:	e0bffe0b 	ldhu	r2,-8(fp)
}
 1008dcc:	e037883a 	mov	sp,fp
 1008dd0:	df000017 	ldw	fp,0(sp)
 1008dd4:	dec00104 	addi	sp,sp,4
 1008dd8:	f800283a 	ret

01008ddc <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 1008ddc:	defffd04 	addi	sp,sp,-12
 1008de0:	df000215 	stw	fp,8(sp)
 1008de4:	df000204 	addi	fp,sp,8
 1008de8:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1008dec:	e0bfff17 	ldw	r2,-4(fp)
 1008df0:	10800a17 	ldw	r2,40(r2)
 1008df4:	10800104 	addi	r2,r2,4
 1008df8:	10800037 	ldwio	r2,0(r2)
 1008dfc:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 1008e00:	e0bffe17 	ldw	r2,-8(fp)
 1008e04:	10bfffec 	andhi	r2,r2,65535
 1008e08:	1004d43a 	srli	r2,r2,16
}
 1008e0c:	e037883a 	mov	sp,fp
 1008e10:	df000017 	ldw	fp,0(sp)
 1008e14:	dec00104 	addi	sp,sp,4
 1008e18:	f800283a 	ret

01008e1c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 1008e1c:	defffc04 	addi	sp,sp,-16
 1008e20:	df000315 	stw	fp,12(sp)
 1008e24:	df000304 	addi	fp,sp,12
 1008e28:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 1008e2c:	e0bffe17 	ldw	r2,-8(fp)
 1008e30:	1080800c 	andi	r2,r2,512
 1008e34:	1004d27a 	srli	r2,r2,9
 1008e38:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 1008e3c:	e0bffd17 	ldw	r2,-12(fp)
 1008e40:	1005003a 	cmpeq	r2,r2,zero
 1008e44:	1000031e 	bne	r2,zero,1008e54 <alt_up_rs232_check_parity+0x38>
 1008e48:	00bfffc4 	movi	r2,-1
 1008e4c:	e0bfff15 	stw	r2,-4(fp)
 1008e50:	00000106 	br	1008e58 <alt_up_rs232_check_parity+0x3c>
 1008e54:	e03fff15 	stw	zero,-4(fp)
 1008e58:	e0bfff17 	ldw	r2,-4(fp)
}
 1008e5c:	e037883a 	mov	sp,fp
 1008e60:	df000017 	ldw	fp,0(sp)
 1008e64:	dec00104 	addi	sp,sp,4
 1008e68:	f800283a 	ret

01008e6c <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 1008e6c:	defffc04 	addi	sp,sp,-16
 1008e70:	df000315 	stw	fp,12(sp)
 1008e74:	df000304 	addi	fp,sp,12
 1008e78:	e13ffe15 	stw	r4,-8(fp)
 1008e7c:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1008e80:	e0bffe17 	ldw	r2,-8(fp)
 1008e84:	10800a17 	ldw	r2,40(r2)
 1008e88:	10800037 	ldwio	r2,0(r2)
 1008e8c:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 1008e90:	e0bffe17 	ldw	r2,-8(fp)
 1008e94:	10800a17 	ldw	r2,40(r2)
 1008e98:	e0ffff03 	ldbu	r3,-4(fp)
 1008e9c:	10c00035 	stwio	r3,0(r2)
	return 0;
 1008ea0:	0005883a 	mov	r2,zero
}
 1008ea4:	e037883a 	mov	sp,fp
 1008ea8:	df000017 	ldw	fp,0(sp)
 1008eac:	dec00104 	addi	sp,sp,4
 1008eb0:	f800283a 	ret

01008eb4 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 1008eb4:	defffa04 	addi	sp,sp,-24
 1008eb8:	dfc00515 	stw	ra,20(sp)
 1008ebc:	df000415 	stw	fp,16(sp)
 1008ec0:	df000404 	addi	fp,sp,16
 1008ec4:	e13ffd15 	stw	r4,-12(fp)
 1008ec8:	e17ffe15 	stw	r5,-8(fp)
 1008ecc:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1008ed0:	e0bffd17 	ldw	r2,-12(fp)
 1008ed4:	10800a17 	ldw	r2,40(r2)
 1008ed8:	10800037 	ldwio	r2,0(r2)
 1008edc:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 1008ee0:	e0bffc17 	ldw	r2,-16(fp)
 1008ee4:	1007883a 	mov	r3,r2
 1008ee8:	e0bffe17 	ldw	r2,-8(fp)
 1008eec:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 1008ef0:	e13ffc17 	ldw	r4,-16(fp)
 1008ef4:	1008e1c0 	call	1008e1c <alt_up_rs232_check_parity>
 1008ef8:	1007883a 	mov	r3,r2
 1008efc:	e0bfff17 	ldw	r2,-4(fp)
 1008f00:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 1008f04:	e0bffc17 	ldw	r2,-16(fp)
 1008f08:	10a0000c 	andi	r2,r2,32768
 1008f0c:	1004d3fa 	srli	r2,r2,15
 1008f10:	10bfffc4 	addi	r2,r2,-1
}
 1008f14:	e037883a 	mov	sp,fp
 1008f18:	dfc00117 	ldw	ra,4(sp)
 1008f1c:	df000017 	ldw	fp,0(sp)
 1008f20:	dec00204 	addi	sp,sp,8
 1008f24:	f800283a 	ret

01008f28 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 1008f28:	defff804 	addi	sp,sp,-32
 1008f2c:	dfc00715 	stw	ra,28(sp)
 1008f30:	df000615 	stw	fp,24(sp)
 1008f34:	df000604 	addi	fp,sp,24
 1008f38:	e13ffd15 	stw	r4,-12(fp)
 1008f3c:	e17ffe15 	stw	r5,-8(fp)
 1008f40:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1008f44:	e0bffd17 	ldw	r2,-12(fp)
 1008f48:	10800017 	ldw	r2,0(r2)
 1008f4c:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 1008f50:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 1008f54:	00000c06 	br	1008f88 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 1008f58:	e17ffe17 	ldw	r5,-8(fp)
 1008f5c:	e0bffe17 	ldw	r2,-8(fp)
 1008f60:	10800044 	addi	r2,r2,1
 1008f64:	e0bffe15 	stw	r2,-8(fp)
 1008f68:	e1bffc04 	addi	r6,fp,-16
 1008f6c:	e13ffb17 	ldw	r4,-20(fp)
 1008f70:	1008eb40 	call	1008eb4 <alt_up_rs232_read_data>
 1008f74:	1004c03a 	cmpne	r2,r2,zero
 1008f78:	1000091e 	bne	r2,zero,1008fa0 <alt_up_rs232_read_fd+0x78>
			count++;
 1008f7c:	e0bffa17 	ldw	r2,-24(fp)
 1008f80:	10800044 	addi	r2,r2,1
 1008f84:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 1008f88:	e0bfff17 	ldw	r2,-4(fp)
 1008f8c:	10bfffc4 	addi	r2,r2,-1
 1008f90:	e0bfff15 	stw	r2,-4(fp)
 1008f94:	e0bfff17 	ldw	r2,-4(fp)
 1008f98:	10bfffd8 	cmpnei	r2,r2,-1
 1008f9c:	103fee1e 	bne	r2,zero,1008f58 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 1008fa0:	e0bffa17 	ldw	r2,-24(fp)
}
 1008fa4:	e037883a 	mov	sp,fp
 1008fa8:	dfc00117 	ldw	ra,4(sp)
 1008fac:	df000017 	ldw	fp,0(sp)
 1008fb0:	dec00204 	addi	sp,sp,8
 1008fb4:	f800283a 	ret

01008fb8 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 1008fb8:	defff904 	addi	sp,sp,-28
 1008fbc:	dfc00615 	stw	ra,24(sp)
 1008fc0:	df000515 	stw	fp,20(sp)
 1008fc4:	df000504 	addi	fp,sp,20
 1008fc8:	e13ffd15 	stw	r4,-12(fp)
 1008fcc:	e17ffe15 	stw	r5,-8(fp)
 1008fd0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1008fd4:	e0bffd17 	ldw	r2,-12(fp)
 1008fd8:	10800017 	ldw	r2,0(r2)
 1008fdc:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 1008fe0:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 1008fe4:	00000d06 	br	100901c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 1008fe8:	e0bffe17 	ldw	r2,-8(fp)
 1008fec:	10800003 	ldbu	r2,0(r2)
 1008ff0:	11403fcc 	andi	r5,r2,255
 1008ff4:	e13ffc17 	ldw	r4,-16(fp)
 1008ff8:	1008e6c0 	call	1008e6c <alt_up_rs232_write_data>
 1008ffc:	1004c03a 	cmpne	r2,r2,zero
 1009000:	10000c1e 	bne	r2,zero,1009034 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 1009004:	e0bffb17 	ldw	r2,-20(fp)
 1009008:	10800044 	addi	r2,r2,1
 100900c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 1009010:	e0bffe17 	ldw	r2,-8(fp)
 1009014:	10800044 	addi	r2,r2,1
 1009018:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 100901c:	e0bfff17 	ldw	r2,-4(fp)
 1009020:	10bfffc4 	addi	r2,r2,-1
 1009024:	e0bfff15 	stw	r2,-4(fp)
 1009028:	e0bfff17 	ldw	r2,-4(fp)
 100902c:	10bfffd8 	cmpnei	r2,r2,-1
 1009030:	103fed1e 	bne	r2,zero,1008fe8 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 1009034:	e0bffb17 	ldw	r2,-20(fp)
}
 1009038:	e037883a 	mov	sp,fp
 100903c:	dfc00117 	ldw	ra,4(sp)
 1009040:	df000017 	ldw	fp,0(sp)
 1009044:	dec00204 	addi	sp,sp,8
 1009048:	f800283a 	ret

0100904c <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 100904c:	defffc04 	addi	sp,sp,-16
 1009050:	dfc00315 	stw	ra,12(sp)
 1009054:	df000215 	stw	fp,8(sp)
 1009058:	df000204 	addi	fp,sp,8
 100905c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 1009060:	e13fff17 	ldw	r4,-4(fp)
 1009064:	01404074 	movhi	r5,257
 1009068:	296fb204 	addi	r5,r5,-16696
 100906c:	10094000 	call	1009400 <alt_find_dev>
 1009070:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1009074:	e0bffe17 	ldw	r2,-8(fp)
}
 1009078:	e037883a 	mov	sp,fp
 100907c:	dfc00117 	ldw	ra,4(sp)
 1009080:	df000017 	ldw	fp,0(sp)
 1009084:	dec00204 	addi	sp,sp,8
 1009088:	f800283a 	ret

0100908c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100908c:	defff404 	addi	sp,sp,-48
 1009090:	df000b15 	stw	fp,44(sp)
 1009094:	df000b04 	addi	fp,sp,44
 1009098:	e13ffb15 	stw	r4,-20(fp)
 100909c:	e17ffc15 	stw	r5,-16(fp)
 10090a0:	e1bffd15 	stw	r6,-12(fp)
 10090a4:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 10090a8:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 10090ac:	00804074 	movhi	r2,257
 10090b0:	10b68204 	addi	r2,r2,-9720
 10090b4:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 10090b8:	1005003a 	cmpeq	r2,r2,zero
 10090bc:	1000411e 	bne	r2,zero,10091c4 <alt_alarm_start+0x138>
  {
    if (alarm)
 10090c0:	e0bffb17 	ldw	r2,-20(fp)
 10090c4:	1005003a 	cmpeq	r2,r2,zero
 10090c8:	10003b1e 	bne	r2,zero,10091b8 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 10090cc:	e0fffb17 	ldw	r3,-20(fp)
 10090d0:	e0bffd17 	ldw	r2,-12(fp)
 10090d4:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 10090d8:	e0fffb17 	ldw	r3,-20(fp)
 10090dc:	e0bffe17 	ldw	r2,-8(fp)
 10090e0:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10090e4:	0005303a 	rdctl	r2,status
 10090e8:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10090ec:	e0fff817 	ldw	r3,-32(fp)
 10090f0:	00bfff84 	movi	r2,-2
 10090f4:	1884703a 	and	r2,r3,r2
 10090f8:	1001703a 	wrctl	status,r2
  
  return context;
 10090fc:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1009100:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1009104:	00804074 	movhi	r2,257
 1009108:	10b68304 	addi	r2,r2,-9716
 100910c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1009110:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1009114:	e0fffc17 	ldw	r3,-16(fp)
 1009118:	e0bff917 	ldw	r2,-28(fp)
 100911c:	1885883a 	add	r2,r3,r2
 1009120:	10c00044 	addi	r3,r2,1
 1009124:	e0bffb17 	ldw	r2,-20(fp)
 1009128:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100912c:	e0bffb17 	ldw	r2,-20(fp)
 1009130:	10c00217 	ldw	r3,8(r2)
 1009134:	e0bff917 	ldw	r2,-28(fp)
 1009138:	1880042e 	bgeu	r3,r2,100914c <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 100913c:	e0fffb17 	ldw	r3,-20(fp)
 1009140:	00800044 	movi	r2,1
 1009144:	18800405 	stb	r2,16(r3)
 1009148:	00000206 	br	1009154 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 100914c:	e0bffb17 	ldw	r2,-20(fp)
 1009150:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 1009154:	e0fffb17 	ldw	r3,-20(fp)
 1009158:	00804074 	movhi	r2,257
 100915c:	10afb804 	addi	r2,r2,-16672
 1009160:	e0bff615 	stw	r2,-40(fp)
 1009164:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1009168:	e0fff717 	ldw	r3,-36(fp)
 100916c:	e0bff617 	ldw	r2,-40(fp)
 1009170:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1009174:	e0bff617 	ldw	r2,-40(fp)
 1009178:	10c00017 	ldw	r3,0(r2)
 100917c:	e0bff717 	ldw	r2,-36(fp)
 1009180:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1009184:	e0bff617 	ldw	r2,-40(fp)
 1009188:	10c00017 	ldw	r3,0(r2)
 100918c:	e0bff717 	ldw	r2,-36(fp)
 1009190:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1009194:	e0fff617 	ldw	r3,-40(fp)
 1009198:	e0bff717 	ldw	r2,-36(fp)
 100919c:	18800015 	stw	r2,0(r3)
 10091a0:	e0bffa17 	ldw	r2,-24(fp)
 10091a4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10091a8:	e0bff517 	ldw	r2,-44(fp)
 10091ac:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 10091b0:	e03fff15 	stw	zero,-4(fp)
 10091b4:	00000506 	br	10091cc <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 10091b8:	00bffa84 	movi	r2,-22
 10091bc:	e0bfff15 	stw	r2,-4(fp)
 10091c0:	00000206 	br	10091cc <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 10091c4:	00bfde84 	movi	r2,-134
 10091c8:	e0bfff15 	stw	r2,-4(fp)
 10091cc:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 10091d0:	e037883a 	mov	sp,fp
 10091d4:	df000017 	ldw	fp,0(sp)
 10091d8:	dec00104 	addi	sp,sp,4
 10091dc:	f800283a 	ret

010091e0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 10091e0:	defffe04 	addi	sp,sp,-8
 10091e4:	df000115 	stw	fp,4(sp)
 10091e8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10091ec:	e03fff15 	stw	zero,-4(fp)
 10091f0:	00000506 	br	1009208 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 10091f4:	e0bfff17 	ldw	r2,-4(fp)
 10091f8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 10091fc:	e0bfff17 	ldw	r2,-4(fp)
 1009200:	10800804 	addi	r2,r2,32
 1009204:	e0bfff15 	stw	r2,-4(fp)
 1009208:	e0bfff17 	ldw	r2,-4(fp)
 100920c:	10820030 	cmpltui	r2,r2,2048
 1009210:	103ff81e 	bne	r2,zero,10091f4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 1009214:	e037883a 	mov	sp,fp
 1009218:	df000017 	ldw	fp,0(sp)
 100921c:	dec00104 	addi	sp,sp,4
 1009220:	f800283a 	ret

01009224 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 1009224:	defff904 	addi	sp,sp,-28
 1009228:	dfc00615 	stw	ra,24(sp)
 100922c:	df000515 	stw	fp,20(sp)
 1009230:	df000504 	addi	fp,sp,20
 1009234:	e13ffd15 	stw	r4,-12(fp)
 1009238:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100923c:	e0bffd17 	ldw	r2,-12(fp)
 1009240:	1005003a 	cmpeq	r2,r2,zero
 1009244:	1000041e 	bne	r2,zero,1009258 <alt_dev_llist_insert+0x34>
 1009248:	e0bffd17 	ldw	r2,-12(fp)
 100924c:	10800217 	ldw	r2,8(r2)
 1009250:	1004c03a 	cmpne	r2,r2,zero
 1009254:	1000071e 	bne	r2,zero,1009274 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1009258:	10092d80 	call	10092d8 <alt_get_errno>
 100925c:	1007883a 	mov	r3,r2
 1009260:	00800584 	movi	r2,22
 1009264:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 1009268:	00bffa84 	movi	r2,-22
 100926c:	e0bfff15 	stw	r2,-4(fp)
 1009270:	00001306 	br	10092c0 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 1009274:	e0fffd17 	ldw	r3,-12(fp)
 1009278:	e0bffe17 	ldw	r2,-8(fp)
 100927c:	e0bffb15 	stw	r2,-20(fp)
 1009280:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 1009284:	e0fffc17 	ldw	r3,-16(fp)
 1009288:	e0bffb17 	ldw	r2,-20(fp)
 100928c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1009290:	e0bffb17 	ldw	r2,-20(fp)
 1009294:	10c00017 	ldw	r3,0(r2)
 1009298:	e0bffc17 	ldw	r2,-16(fp)
 100929c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10092a0:	e0bffb17 	ldw	r2,-20(fp)
 10092a4:	10c00017 	ldw	r3,0(r2)
 10092a8:	e0bffc17 	ldw	r2,-16(fp)
 10092ac:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10092b0:	e0fffb17 	ldw	r3,-20(fp)
 10092b4:	e0bffc17 	ldw	r2,-16(fp)
 10092b8:	18800015 	stw	r2,0(r3)

  return 0;  
 10092bc:	e03fff15 	stw	zero,-4(fp)
 10092c0:	e0bfff17 	ldw	r2,-4(fp)
}
 10092c4:	e037883a 	mov	sp,fp
 10092c8:	dfc00117 	ldw	ra,4(sp)
 10092cc:	df000017 	ldw	fp,0(sp)
 10092d0:	dec00204 	addi	sp,sp,8
 10092d4:	f800283a 	ret

010092d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10092d8:	defffd04 	addi	sp,sp,-12
 10092dc:	dfc00215 	stw	ra,8(sp)
 10092e0:	df000115 	stw	fp,4(sp)
 10092e4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10092e8:	00804074 	movhi	r2,257
 10092ec:	10afb504 	addi	r2,r2,-16684
 10092f0:	10800017 	ldw	r2,0(r2)
 10092f4:	1005003a 	cmpeq	r2,r2,zero
 10092f8:	1000061e 	bne	r2,zero,1009314 <alt_get_errno+0x3c>
 10092fc:	00804074 	movhi	r2,257
 1009300:	10afb504 	addi	r2,r2,-16684
 1009304:	10800017 	ldw	r2,0(r2)
 1009308:	103ee83a 	callr	r2
 100930c:	e0bfff15 	stw	r2,-4(fp)
 1009310:	00000306 	br	1009320 <alt_get_errno+0x48>
 1009314:	00804074 	movhi	r2,257
 1009318:	10b67004 	addi	r2,r2,-9792
 100931c:	e0bfff15 	stw	r2,-4(fp)
 1009320:	e0bfff17 	ldw	r2,-4(fp)
}
 1009324:	e037883a 	mov	sp,fp
 1009328:	dfc00117 	ldw	ra,4(sp)
 100932c:	df000017 	ldw	fp,0(sp)
 1009330:	dec00204 	addi	sp,sp,8
 1009334:	f800283a 	ret

01009338 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1009338:	defffd04 	addi	sp,sp,-12
 100933c:	dfc00215 	stw	ra,8(sp)
 1009340:	df000115 	stw	fp,4(sp)
 1009344:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1009348:	00bfff04 	movi	r2,-4
 100934c:	00c04074 	movhi	r3,257
 1009350:	18e8af04 	addi	r3,r3,-23876
 1009354:	1885883a 	add	r2,r3,r2
 1009358:	e0bfff15 	stw	r2,-4(fp)
 100935c:	00000606 	br	1009378 <_do_ctors+0x40>
        (*ctor) (); 
 1009360:	e0bfff17 	ldw	r2,-4(fp)
 1009364:	10800017 	ldw	r2,0(r2)
 1009368:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100936c:	e0bfff17 	ldw	r2,-4(fp)
 1009370:	10bfff04 	addi	r2,r2,-4
 1009374:	e0bfff15 	stw	r2,-4(fp)
 1009378:	e0ffff17 	ldw	r3,-4(fp)
 100937c:	00804074 	movhi	r2,257
 1009380:	10a8ae04 	addi	r2,r2,-23880
 1009384:	18bff62e 	bgeu	r3,r2,1009360 <_do_ctors+0x28>
        (*ctor) (); 
}
 1009388:	e037883a 	mov	sp,fp
 100938c:	dfc00117 	ldw	ra,4(sp)
 1009390:	df000017 	ldw	fp,0(sp)
 1009394:	dec00204 	addi	sp,sp,8
 1009398:	f800283a 	ret

0100939c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100939c:	defffd04 	addi	sp,sp,-12
 10093a0:	dfc00215 	stw	ra,8(sp)
 10093a4:	df000115 	stw	fp,4(sp)
 10093a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10093ac:	00bfff04 	movi	r2,-4
 10093b0:	00c04074 	movhi	r3,257
 10093b4:	18e8af04 	addi	r3,r3,-23876
 10093b8:	1885883a 	add	r2,r3,r2
 10093bc:	e0bfff15 	stw	r2,-4(fp)
 10093c0:	00000606 	br	10093dc <_do_dtors+0x40>
        (*dtor) (); 
 10093c4:	e0bfff17 	ldw	r2,-4(fp)
 10093c8:	10800017 	ldw	r2,0(r2)
 10093cc:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10093d0:	e0bfff17 	ldw	r2,-4(fp)
 10093d4:	10bfff04 	addi	r2,r2,-4
 10093d8:	e0bfff15 	stw	r2,-4(fp)
 10093dc:	e0ffff17 	ldw	r3,-4(fp)
 10093e0:	00804074 	movhi	r2,257
 10093e4:	10a8af04 	addi	r2,r2,-23876
 10093e8:	18bff62e 	bgeu	r3,r2,10093c4 <_do_dtors+0x28>
        (*dtor) (); 
}
 10093ec:	e037883a 	mov	sp,fp
 10093f0:	dfc00117 	ldw	ra,4(sp)
 10093f4:	df000017 	ldw	fp,0(sp)
 10093f8:	dec00204 	addi	sp,sp,8
 10093fc:	f800283a 	ret

01009400 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1009400:	defff904 	addi	sp,sp,-28
 1009404:	dfc00615 	stw	ra,24(sp)
 1009408:	df000515 	stw	fp,20(sp)
 100940c:	df000504 	addi	fp,sp,20
 1009410:	e13ffd15 	stw	r4,-12(fp)
 1009414:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1009418:	e0bffe17 	ldw	r2,-8(fp)
 100941c:	10800017 	ldw	r2,0(r2)
 1009420:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 1009424:	e13ffd17 	ldw	r4,-12(fp)
 1009428:	10003d40 	call	10003d4 <strlen>
 100942c:	10800044 	addi	r2,r2,1
 1009430:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 1009434:	00000d06 	br	100946c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1009438:	e0bffc17 	ldw	r2,-16(fp)
 100943c:	11000217 	ldw	r4,8(r2)
 1009440:	e1bffb17 	ldw	r6,-20(fp)
 1009444:	e17ffd17 	ldw	r5,-12(fp)
 1009448:	1009efc0 	call	1009efc <memcmp>
 100944c:	1004c03a 	cmpne	r2,r2,zero
 1009450:	1000031e 	bne	r2,zero,1009460 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 1009454:	e0bffc17 	ldw	r2,-16(fp)
 1009458:	e0bfff15 	stw	r2,-4(fp)
 100945c:	00000706 	br	100947c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1009460:	e0bffc17 	ldw	r2,-16(fp)
 1009464:	10800017 	ldw	r2,0(r2)
 1009468:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100946c:	e0fffe17 	ldw	r3,-8(fp)
 1009470:	e0bffc17 	ldw	r2,-16(fp)
 1009474:	10fff01e 	bne	r2,r3,1009438 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 1009478:	e03fff15 	stw	zero,-4(fp)
 100947c:	e0bfff17 	ldw	r2,-4(fp)
}
 1009480:	e037883a 	mov	sp,fp
 1009484:	dfc00117 	ldw	ra,4(sp)
 1009488:	df000017 	ldw	fp,0(sp)
 100948c:	dec00204 	addi	sp,sp,8
 1009490:	f800283a 	ret

01009494 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 1009494:	defffe04 	addi	sp,sp,-8
 1009498:	dfc00115 	stw	ra,4(sp)
 100949c:	df000015 	stw	fp,0(sp)
 10094a0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 10094a4:	0009883a 	mov	r4,zero
 10094a8:	01500004 	movi	r5,16384
 10094ac:	1009e200 	call	1009e20 <alt_icache_flush>
#endif
}
 10094b0:	e037883a 	mov	sp,fp
 10094b4:	dfc00117 	ldw	ra,4(sp)
 10094b8:	df000017 	ldw	fp,0(sp)
 10094bc:	dec00204 	addi	sp,sp,8
 10094c0:	f800283a 	ret

010094c4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 10094c4:	defff904 	addi	sp,sp,-28
 10094c8:	dfc00615 	stw	ra,24(sp)
 10094cc:	df000515 	stw	fp,20(sp)
 10094d0:	df000504 	addi	fp,sp,20
 10094d4:	e13ffc15 	stw	r4,-16(fp)
 10094d8:	e17ffd15 	stw	r5,-12(fp)
 10094dc:	e1bffe15 	stw	r6,-8(fp)
 10094e0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 10094e4:	e13ffd17 	ldw	r4,-12(fp)
 10094e8:	e17ffe17 	ldw	r5,-8(fp)
 10094ec:	e1bfff17 	ldw	r6,-4(fp)
 10094f0:	100989c0 	call	100989c <open>
 10094f4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 10094f8:	e0bffb17 	ldw	r2,-20(fp)
 10094fc:	1004803a 	cmplt	r2,r2,zero
 1009500:	10001c1e 	bne	r2,zero,1009574 <alt_open_fd+0xb0>
  {
    fd->dev      = alt_fd_list[old].dev;
 1009504:	e0bffb17 	ldw	r2,-20(fp)
 1009508:	00c04074 	movhi	r3,257
 100950c:	18eb1304 	addi	r3,r3,-21428
 1009510:	10800324 	muli	r2,r2,12
 1009514:	10c5883a 	add	r2,r2,r3
 1009518:	10c00017 	ldw	r3,0(r2)
 100951c:	e0bffc17 	ldw	r2,-16(fp)
 1009520:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 1009524:	e0bffb17 	ldw	r2,-20(fp)
 1009528:	00c04074 	movhi	r3,257
 100952c:	18eb1304 	addi	r3,r3,-21428
 1009530:	10800324 	muli	r2,r2,12
 1009534:	10c5883a 	add	r2,r2,r3
 1009538:	10800104 	addi	r2,r2,4
 100953c:	10c00017 	ldw	r3,0(r2)
 1009540:	e0bffc17 	ldw	r2,-16(fp)
 1009544:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 1009548:	e0bffb17 	ldw	r2,-20(fp)
 100954c:	00c04074 	movhi	r3,257
 1009550:	18eb1304 	addi	r3,r3,-21428
 1009554:	10800324 	muli	r2,r2,12
 1009558:	10c5883a 	add	r2,r2,r3
 100955c:	10800204 	addi	r2,r2,8
 1009560:	10c00017 	ldw	r3,0(r2)
 1009564:	e0bffc17 	ldw	r2,-16(fp)
 1009568:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100956c:	e13ffb17 	ldw	r4,-20(fp)
 1009570:	10034740 	call	1003474 <alt_release_fd>
  }
} 
 1009574:	e037883a 	mov	sp,fp
 1009578:	dfc00117 	ldw	ra,4(sp)
 100957c:	df000017 	ldw	fp,0(sp)
 1009580:	dec00204 	addi	sp,sp,8
 1009584:	f800283a 	ret

01009588 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1009588:	defffb04 	addi	sp,sp,-20
 100958c:	dfc00415 	stw	ra,16(sp)
 1009590:	df000315 	stw	fp,12(sp)
 1009594:	df000304 	addi	fp,sp,12
 1009598:	e13ffd15 	stw	r4,-12(fp)
 100959c:	e17ffe15 	stw	r5,-8(fp)
 10095a0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 10095a4:	01004074 	movhi	r4,257
 10095a8:	212b1604 	addi	r4,r4,-21416
 10095ac:	e17ffd17 	ldw	r5,-12(fp)
 10095b0:	01800044 	movi	r6,1
 10095b4:	01c07fc4 	movi	r7,511
 10095b8:	10094c40 	call	10094c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 10095bc:	01004074 	movhi	r4,257
 10095c0:	212b1304 	addi	r4,r4,-21428
 10095c4:	e17ffe17 	ldw	r5,-8(fp)
 10095c8:	000d883a 	mov	r6,zero
 10095cc:	01c07fc4 	movi	r7,511
 10095d0:	10094c40 	call	10094c4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 10095d4:	01004074 	movhi	r4,257
 10095d8:	212b1904 	addi	r4,r4,-21404
 10095dc:	e17fff17 	ldw	r5,-4(fp)
 10095e0:	01800044 	movi	r6,1
 10095e4:	01c07fc4 	movi	r7,511
 10095e8:	10094c40 	call	10094c4 <alt_open_fd>
}  
 10095ec:	e037883a 	mov	sp,fp
 10095f0:	dfc00117 	ldw	ra,4(sp)
 10095f4:	df000017 	ldw	fp,0(sp)
 10095f8:	dec00204 	addi	sp,sp,8
 10095fc:	f800283a 	ret

01009600 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1009600:	deffef04 	addi	sp,sp,-68
 1009604:	df001015 	stw	fp,64(sp)
 1009608:	df001004 	addi	fp,sp,64
 100960c:	e13ffc15 	stw	r4,-16(fp)
 1009610:	e17ffd15 	stw	r5,-12(fp)
 1009614:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 1009618:	00bffa84 	movi	r2,-22
 100961c:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1009620:	e0bffc17 	ldw	r2,-16(fp)
 1009624:	10800828 	cmpgeui	r2,r2,32
 1009628:	1000601e 	bne	r2,zero,10097ac <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100962c:	0005303a 	rdctl	r2,status
 1009630:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009634:	e0fff917 	ldw	r3,-28(fp)
 1009638:	00bfff84 	movi	r2,-2
 100963c:	1884703a 	and	r2,r3,r2
 1009640:	1001703a 	wrctl	status,r2
  
  return context;
 1009644:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1009648:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 100964c:	e0bffc17 	ldw	r2,-16(fp)
 1009650:	00c04074 	movhi	r3,257
 1009654:	18f7e804 	addi	r3,r3,-8288
 1009658:	100490fa 	slli	r2,r2,3
 100965c:	10c7883a 	add	r3,r2,r3
 1009660:	e0bffe17 	ldw	r2,-8(fp)
 1009664:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 1009668:	e0bffc17 	ldw	r2,-16(fp)
 100966c:	00c04074 	movhi	r3,257
 1009670:	18f7e804 	addi	r3,r3,-8288
 1009674:	100490fa 	slli	r2,r2,3
 1009678:	10c5883a 	add	r2,r2,r3
 100967c:	10c00104 	addi	r3,r2,4
 1009680:	e0bffd17 	ldw	r2,-12(fp)
 1009684:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1009688:	e0bffe17 	ldw	r2,-8(fp)
 100968c:	1005003a 	cmpeq	r2,r2,zero
 1009690:	1000201e 	bne	r2,zero,1009714 <alt_irq_register+0x114>
 1009694:	e0bffc17 	ldw	r2,-16(fp)
 1009698:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100969c:	0005303a 	rdctl	r2,status
 10096a0:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10096a4:	e0fff617 	ldw	r3,-40(fp)
 10096a8:	00bfff84 	movi	r2,-2
 10096ac:	1884703a 	and	r2,r3,r2
 10096b0:	1001703a 	wrctl	status,r2
  
  return context;
 10096b4:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 10096b8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 10096bc:	e0fff717 	ldw	r3,-36(fp)
 10096c0:	00800044 	movi	r2,1
 10096c4:	10c4983a 	sll	r2,r2,r3
 10096c8:	1007883a 	mov	r3,r2
 10096cc:	00804074 	movhi	r2,257
 10096d0:	10b68104 	addi	r2,r2,-9724
 10096d4:	10800017 	ldw	r2,0(r2)
 10096d8:	1886b03a 	or	r3,r3,r2
 10096dc:	00804074 	movhi	r2,257
 10096e0:	10b68104 	addi	r2,r2,-9724
 10096e4:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 10096e8:	00804074 	movhi	r2,257
 10096ec:	10b68104 	addi	r2,r2,-9724
 10096f0:	10800017 	ldw	r2,0(r2)
 10096f4:	100170fa 	wrctl	ienable,r2
 10096f8:	e0bff817 	ldw	r2,-32(fp)
 10096fc:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009700:	e0bff517 	ldw	r2,-44(fp)
 1009704:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1009708:	0005883a 	mov	r2,zero
 100970c:	e0bfff15 	stw	r2,-4(fp)
 1009710:	00002006 	br	1009794 <alt_irq_register+0x194>
 1009714:	e0bffc17 	ldw	r2,-16(fp)
 1009718:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100971c:	0005303a 	rdctl	r2,status
 1009720:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009724:	e0fff217 	ldw	r3,-56(fp)
 1009728:	00bfff84 	movi	r2,-2
 100972c:	1884703a 	and	r2,r3,r2
 1009730:	1001703a 	wrctl	status,r2
  
  return context;
 1009734:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1009738:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 100973c:	e0fff317 	ldw	r3,-52(fp)
 1009740:	00800044 	movi	r2,1
 1009744:	10c4983a 	sll	r2,r2,r3
 1009748:	0084303a 	nor	r2,zero,r2
 100974c:	1007883a 	mov	r3,r2
 1009750:	00804074 	movhi	r2,257
 1009754:	10b68104 	addi	r2,r2,-9724
 1009758:	10800017 	ldw	r2,0(r2)
 100975c:	1886703a 	and	r3,r3,r2
 1009760:	00804074 	movhi	r2,257
 1009764:	10b68104 	addi	r2,r2,-9724
 1009768:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100976c:	00804074 	movhi	r2,257
 1009770:	10b68104 	addi	r2,r2,-9724
 1009774:	10800017 	ldw	r2,0(r2)
 1009778:	100170fa 	wrctl	ienable,r2
 100977c:	e0bff417 	ldw	r2,-48(fp)
 1009780:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009784:	e0bff117 	ldw	r2,-60(fp)
 1009788:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100978c:	0005883a 	mov	r2,zero
 1009790:	e0bfff15 	stw	r2,-4(fp)
 1009794:	e0bfff17 	ldw	r2,-4(fp)
 1009798:	e0bffb15 	stw	r2,-20(fp)
 100979c:	e0bffa17 	ldw	r2,-24(fp)
 10097a0:	e0bff015 	stw	r2,-64(fp)
 10097a4:	e0bff017 	ldw	r2,-64(fp)
 10097a8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 10097ac:	e0bffb17 	ldw	r2,-20(fp)
}
 10097b0:	e037883a 	mov	sp,fp
 10097b4:	df000017 	ldw	fp,0(sp)
 10097b8:	dec00104 	addi	sp,sp,4
 10097bc:	f800283a 	ret

010097c0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10097c0:	defffc04 	addi	sp,sp,-16
 10097c4:	df000315 	stw	fp,12(sp)
 10097c8:	df000304 	addi	fp,sp,12
 10097cc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10097d0:	e0bffe17 	ldw	r2,-8(fp)
 10097d4:	10800217 	ldw	r2,8(r2)
 10097d8:	10d00034 	orhi	r3,r2,16384
 10097dc:	e0bffe17 	ldw	r2,-8(fp)
 10097e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10097e4:	e03ffd15 	stw	zero,-12(fp)
 10097e8:	00002006 	br	100986c <alt_file_locked+0xac>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 10097ec:	e0bffd17 	ldw	r2,-12(fp)
 10097f0:	00c04074 	movhi	r3,257
 10097f4:	18eb1304 	addi	r3,r3,-21428
 10097f8:	10800324 	muli	r2,r2,12
 10097fc:	10c5883a 	add	r2,r2,r3
 1009800:	10c00017 	ldw	r3,0(r2)
 1009804:	e0bffe17 	ldw	r2,-8(fp)
 1009808:	10800017 	ldw	r2,0(r2)
 100980c:	1880141e 	bne	r3,r2,1009860 <alt_file_locked+0xa0>
 1009810:	e0bffd17 	ldw	r2,-12(fp)
 1009814:	00c04074 	movhi	r3,257
 1009818:	18eb1304 	addi	r3,r3,-21428
 100981c:	10800324 	muli	r2,r2,12
 1009820:	10c5883a 	add	r2,r2,r3
 1009824:	10800204 	addi	r2,r2,8
 1009828:	10800017 	ldw	r2,0(r2)
 100982c:	1004403a 	cmpge	r2,r2,zero
 1009830:	10000b1e 	bne	r2,zero,1009860 <alt_file_locked+0xa0>
 1009834:	e0bffd17 	ldw	r2,-12(fp)
 1009838:	10800324 	muli	r2,r2,12
 100983c:	1007883a 	mov	r3,r2
 1009840:	00804074 	movhi	r2,257
 1009844:	10ab1304 	addi	r2,r2,-21428
 1009848:	1887883a 	add	r3,r3,r2
 100984c:	e0bffe17 	ldw	r2,-8(fp)
 1009850:	18800326 	beq	r3,r2,1009860 <alt_file_locked+0xa0>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1009854:	00bffcc4 	movi	r2,-13
 1009858:	e0bfff15 	stw	r2,-4(fp)
 100985c:	00000a06 	br	1009888 <alt_file_locked+0xc8>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1009860:	e0bffd17 	ldw	r2,-12(fp)
 1009864:	10800044 	addi	r2,r2,1
 1009868:	e0bffd15 	stw	r2,-12(fp)
 100986c:	00804074 	movhi	r2,257
 1009870:	10afb404 	addi	r2,r2,-16688
 1009874:	10800017 	ldw	r2,0(r2)
 1009878:	1007883a 	mov	r3,r2
 100987c:	e0bffd17 	ldw	r2,-12(fp)
 1009880:	18bfda2e 	bgeu	r3,r2,10097ec <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 1009884:	e03fff15 	stw	zero,-4(fp)
 1009888:	e0bfff17 	ldw	r2,-4(fp)
}
 100988c:	e037883a 	mov	sp,fp
 1009890:	df000017 	ldw	fp,0(sp)
 1009894:	dec00104 	addi	sp,sp,4
 1009898:	f800283a 	ret

0100989c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100989c:	defff404 	addi	sp,sp,-48
 10098a0:	dfc00b15 	stw	ra,44(sp)
 10098a4:	df000a15 	stw	fp,40(sp)
 10098a8:	df000a04 	addi	fp,sp,40
 10098ac:	e13ffb15 	stw	r4,-20(fp)
 10098b0:	e17ffc15 	stw	r5,-16(fp)
 10098b4:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 10098b8:	00bfffc4 	movi	r2,-1
 10098bc:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 10098c0:	00bffb44 	movi	r2,-19
 10098c4:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 10098c8:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 10098cc:	e13ffb17 	ldw	r4,-20(fp)
 10098d0:	01404074 	movhi	r5,257
 10098d4:	296fb204 	addi	r5,r5,-16696
 10098d8:	10094000 	call	1009400 <alt_find_dev>
 10098dc:	e0bffa15 	stw	r2,-24(fp)
 10098e0:	e0bffa17 	ldw	r2,-24(fp)
 10098e4:	1004c03a 	cmpne	r2,r2,zero
 10098e8:	1000051e 	bne	r2,zero,1009900 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 10098ec:	e13ffb17 	ldw	r4,-20(fp)
 10098f0:	1009c480 	call	1009c48 <alt_find_file>
 10098f4:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 10098f8:	00800044 	movi	r2,1
 10098fc:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1009900:	e0bffa17 	ldw	r2,-24(fp)
 1009904:	1005003a 	cmpeq	r2,r2,zero
 1009908:	1000301e 	bne	r2,zero,10099cc <open+0x130>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100990c:	e13ffa17 	ldw	r4,-24(fp)
 1009910:	1009d680 	call	1009d68 <alt_get_fd>
 1009914:	e0bff815 	stw	r2,-32(fp)
 1009918:	e0bff817 	ldw	r2,-32(fp)
 100991c:	1004403a 	cmpge	r2,r2,zero
 1009920:	1000031e 	bne	r2,zero,1009930 <open+0x94>
    {
      status = index;
 1009924:	e0bff817 	ldw	r2,-32(fp)
 1009928:	e0bff715 	stw	r2,-36(fp)
 100992c:	00002906 	br	10099d4 <open+0x138>
    }
    else
    {
      fd = &alt_fd_list[index];
 1009930:	e0bff817 	ldw	r2,-32(fp)
 1009934:	10800324 	muli	r2,r2,12
 1009938:	1007883a 	mov	r3,r2
 100993c:	00804074 	movhi	r2,257
 1009940:	10ab1304 	addi	r2,r2,-21428
 1009944:	1885883a 	add	r2,r3,r2
 1009948:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100994c:	e0fffc17 	ldw	r3,-16(fp)
 1009950:	00900034 	movhi	r2,16384
 1009954:	10bfffc4 	addi	r2,r2,-1
 1009958:	1886703a 	and	r3,r3,r2
 100995c:	e0bff917 	ldw	r2,-28(fp)
 1009960:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1009964:	e0bff617 	ldw	r2,-40(fp)
 1009968:	1004c03a 	cmpne	r2,r2,zero
 100996c:	1000061e 	bne	r2,zero,1009988 <open+0xec>
 1009970:	e13ff917 	ldw	r4,-28(fp)
 1009974:	10097c00 	call	10097c0 <alt_file_locked>
 1009978:	e0bff715 	stw	r2,-36(fp)
 100997c:	e0bff717 	ldw	r2,-36(fp)
 1009980:	1004803a 	cmplt	r2,r2,zero
 1009984:	1000131e 	bne	r2,zero,10099d4 <open+0x138>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 1009988:	e0bffa17 	ldw	r2,-24(fp)
 100998c:	10800317 	ldw	r2,12(r2)
 1009990:	1005003a 	cmpeq	r2,r2,zero
 1009994:	1000091e 	bne	r2,zero,10099bc <open+0x120>
 1009998:	e0bffa17 	ldw	r2,-24(fp)
 100999c:	10800317 	ldw	r2,12(r2)
 10099a0:	e13ff917 	ldw	r4,-28(fp)
 10099a4:	e17ffb17 	ldw	r5,-20(fp)
 10099a8:	e1bffc17 	ldw	r6,-16(fp)
 10099ac:	e1fffd17 	ldw	r7,-12(fp)
 10099b0:	103ee83a 	callr	r2
 10099b4:	e0bfff15 	stw	r2,-4(fp)
 10099b8:	00000106 	br	10099c0 <open+0x124>
 10099bc:	e03fff15 	stw	zero,-4(fp)
 10099c0:	e0bfff17 	ldw	r2,-4(fp)
 10099c4:	e0bff715 	stw	r2,-36(fp)
 10099c8:	00000206 	br	10099d4 <open+0x138>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10099cc:	00bffb44 	movi	r2,-19
 10099d0:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 10099d4:	e0bff717 	ldw	r2,-36(fp)
 10099d8:	1004403a 	cmpge	r2,r2,zero
 10099dc:	1000091e 	bne	r2,zero,1009a04 <open+0x168>
  {
    alt_release_fd (index);  
 10099e0:	e13ff817 	ldw	r4,-32(fp)
 10099e4:	10034740 	call	1003474 <alt_release_fd>
    ALT_ERRNO = -status;
 10099e8:	1009a240 	call	1009a24 <alt_get_errno>
 10099ec:	e0fff717 	ldw	r3,-36(fp)
 10099f0:	00c7c83a 	sub	r3,zero,r3
 10099f4:	10c00015 	stw	r3,0(r2)
    return -1;
 10099f8:	00bfffc4 	movi	r2,-1
 10099fc:	e0bffe15 	stw	r2,-8(fp)
 1009a00:	00000206 	br	1009a0c <open+0x170>
  }
  
  /* return the reference upon success */

  return index;
 1009a04:	e0bff817 	ldw	r2,-32(fp)
 1009a08:	e0bffe15 	stw	r2,-8(fp)
 1009a0c:	e0bffe17 	ldw	r2,-8(fp)
}
 1009a10:	e037883a 	mov	sp,fp
 1009a14:	dfc00117 	ldw	ra,4(sp)
 1009a18:	df000017 	ldw	fp,0(sp)
 1009a1c:	dec00204 	addi	sp,sp,8
 1009a20:	f800283a 	ret

01009a24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009a24:	defffd04 	addi	sp,sp,-12
 1009a28:	dfc00215 	stw	ra,8(sp)
 1009a2c:	df000115 	stw	fp,4(sp)
 1009a30:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1009a34:	00804074 	movhi	r2,257
 1009a38:	10afb504 	addi	r2,r2,-16684
 1009a3c:	10800017 	ldw	r2,0(r2)
 1009a40:	1005003a 	cmpeq	r2,r2,zero
 1009a44:	1000061e 	bne	r2,zero,1009a60 <alt_get_errno+0x3c>
 1009a48:	00804074 	movhi	r2,257
 1009a4c:	10afb504 	addi	r2,r2,-16684
 1009a50:	10800017 	ldw	r2,0(r2)
 1009a54:	103ee83a 	callr	r2
 1009a58:	e0bfff15 	stw	r2,-4(fp)
 1009a5c:	00000306 	br	1009a6c <alt_get_errno+0x48>
 1009a60:	00804074 	movhi	r2,257
 1009a64:	10b67004 	addi	r2,r2,-9792
 1009a68:	e0bfff15 	stw	r2,-4(fp)
 1009a6c:	e0bfff17 	ldw	r2,-4(fp)
}
 1009a70:	e037883a 	mov	sp,fp
 1009a74:	dfc00117 	ldw	ra,4(sp)
 1009a78:	df000017 	ldw	fp,0(sp)
 1009a7c:	dec00204 	addi	sp,sp,8
 1009a80:	f800283a 	ret

01009a84 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1009a84:	defffa04 	addi	sp,sp,-24
 1009a88:	df000515 	stw	fp,20(sp)
 1009a8c:	df000504 	addi	fp,sp,20
 1009a90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1009a94:	0005303a 	rdctl	r2,status
 1009a98:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1009a9c:	e0fffd17 	ldw	r3,-12(fp)
 1009aa0:	00bfff84 	movi	r2,-2
 1009aa4:	1884703a 	and	r2,r3,r2
 1009aa8:	1001703a 	wrctl	status,r2
  
  return context;
 1009aac:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1009ab0:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1009ab4:	e0bfff17 	ldw	r2,-4(fp)
 1009ab8:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1009abc:	e0bffc17 	ldw	r2,-16(fp)
 1009ac0:	10c00017 	ldw	r3,0(r2)
 1009ac4:	e0bffc17 	ldw	r2,-16(fp)
 1009ac8:	10800117 	ldw	r2,4(r2)
 1009acc:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1009ad0:	e0bffc17 	ldw	r2,-16(fp)
 1009ad4:	10c00117 	ldw	r3,4(r2)
 1009ad8:	e0bffc17 	ldw	r2,-16(fp)
 1009adc:	10800017 	ldw	r2,0(r2)
 1009ae0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1009ae4:	e0fffc17 	ldw	r3,-16(fp)
 1009ae8:	e0bffc17 	ldw	r2,-16(fp)
 1009aec:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1009af0:	e0fffc17 	ldw	r3,-16(fp)
 1009af4:	e0bffc17 	ldw	r2,-16(fp)
 1009af8:	18800015 	stw	r2,0(r3)
 1009afc:	e0bffe17 	ldw	r2,-8(fp)
 1009b00:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1009b04:	e0bffb17 	ldw	r2,-20(fp)
 1009b08:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1009b0c:	e037883a 	mov	sp,fp
 1009b10:	df000017 	ldw	fp,0(sp)
 1009b14:	dec00104 	addi	sp,sp,4
 1009b18:	f800283a 	ret

01009b1c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1009b1c:	defffb04 	addi	sp,sp,-20
 1009b20:	dfc00415 	stw	ra,16(sp)
 1009b24:	df000315 	stw	fp,12(sp)
 1009b28:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1009b2c:	d0a00c17 	ldw	r2,-32720(gp)
 1009b30:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1009b34:	d0a6d717 	ldw	r2,-25764(gp)
 1009b38:	10800044 	addi	r2,r2,1
 1009b3c:	d0a6d715 	stw	r2,-25764(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1009b40:	00003106 	br	1009c08 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1009b44:	e0bffe17 	ldw	r2,-8(fp)
 1009b48:	10800017 	ldw	r2,0(r2)
 1009b4c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1009b50:	e0bffe17 	ldw	r2,-8(fp)
 1009b54:	10800403 	ldbu	r2,16(r2)
 1009b58:	10803fcc 	andi	r2,r2,255
 1009b5c:	1005003a 	cmpeq	r2,r2,zero
 1009b60:	1000051e 	bne	r2,zero,1009b78 <alt_tick+0x5c>
 1009b64:	d0a6d717 	ldw	r2,-25764(gp)
 1009b68:	1004c03a 	cmpne	r2,r2,zero
 1009b6c:	1000021e 	bne	r2,zero,1009b78 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1009b70:	e0bffe17 	ldw	r2,-8(fp)
 1009b74:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1009b78:	e0bffe17 	ldw	r2,-8(fp)
 1009b7c:	10c00217 	ldw	r3,8(r2)
 1009b80:	d0a6d717 	ldw	r2,-25764(gp)
 1009b84:	10c01e36 	bltu	r2,r3,1009c00 <alt_tick+0xe4>
 1009b88:	e0bffe17 	ldw	r2,-8(fp)
 1009b8c:	10800403 	ldbu	r2,16(r2)
 1009b90:	10803fcc 	andi	r2,r2,255
 1009b94:	1004c03a 	cmpne	r2,r2,zero
 1009b98:	1000191e 	bne	r2,zero,1009c00 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1009b9c:	e0bffe17 	ldw	r2,-8(fp)
 1009ba0:	10c00317 	ldw	r3,12(r2)
 1009ba4:	e0bffe17 	ldw	r2,-8(fp)
 1009ba8:	11000517 	ldw	r4,20(r2)
 1009bac:	183ee83a 	callr	r3
 1009bb0:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1009bb4:	e0bffd17 	ldw	r2,-12(fp)
 1009bb8:	1004c03a 	cmpne	r2,r2,zero
 1009bbc:	1000031e 	bne	r2,zero,1009bcc <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1009bc0:	e13ffe17 	ldw	r4,-8(fp)
 1009bc4:	1009a840 	call	1009a84 <alt_alarm_stop>
 1009bc8:	00000d06 	br	1009c00 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1009bcc:	e0bffe17 	ldw	r2,-8(fp)
 1009bd0:	10c00217 	ldw	r3,8(r2)
 1009bd4:	e0bffd17 	ldw	r2,-12(fp)
 1009bd8:	1887883a 	add	r3,r3,r2
 1009bdc:	e0bffe17 	ldw	r2,-8(fp)
 1009be0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1009be4:	e0bffe17 	ldw	r2,-8(fp)
 1009be8:	10c00217 	ldw	r3,8(r2)
 1009bec:	d0a6d717 	ldw	r2,-25764(gp)
 1009bf0:	1880032e 	bgeu	r3,r2,1009c00 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1009bf4:	e0fffe17 	ldw	r3,-8(fp)
 1009bf8:	00800044 	movi	r2,1
 1009bfc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1009c00:	e0bfff17 	ldw	r2,-4(fp)
 1009c04:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1009c08:	d0e00c04 	addi	r3,gp,-32720
 1009c0c:	e0bffe17 	ldw	r2,-8(fp)
 1009c10:	10ffcc1e 	bne	r2,r3,1009b44 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1009c14:	e037883a 	mov	sp,fp
 1009c18:	dfc00117 	ldw	ra,4(sp)
 1009c1c:	df000017 	ldw	fp,0(sp)
 1009c20:	dec00204 	addi	sp,sp,8
 1009c24:	f800283a 	ret

01009c28 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1009c28:	deffff04 	addi	sp,sp,-4
 1009c2c:	df000015 	stw	fp,0(sp)
 1009c30:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1009c34:	000170fa 	wrctl	ienable,zero
}
 1009c38:	e037883a 	mov	sp,fp
 1009c3c:	df000017 	ldw	fp,0(sp)
 1009c40:	dec00104 	addi	sp,sp,4
 1009c44:	f800283a 	ret

01009c48 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 1009c48:	defffa04 	addi	sp,sp,-24
 1009c4c:	dfc00515 	stw	ra,20(sp)
 1009c50:	df000415 	stw	fp,16(sp)
 1009c54:	df000404 	addi	fp,sp,16
 1009c58:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 1009c5c:	00804074 	movhi	r2,257
 1009c60:	10afb004 	addi	r2,r2,-16704
 1009c64:	10800017 	ldw	r2,0(r2)
 1009c68:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1009c6c:	00003306 	br	1009d3c <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 1009c70:	e0bffd17 	ldw	r2,-12(fp)
 1009c74:	11000217 	ldw	r4,8(r2)
 1009c78:	10003d40 	call	10003d4 <strlen>
 1009c7c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1009c80:	e0bffd17 	ldw	r2,-12(fp)
 1009c84:	10c00217 	ldw	r3,8(r2)
 1009c88:	e0bffc17 	ldw	r2,-16(fp)
 1009c8c:	1885883a 	add	r2,r3,r2
 1009c90:	10bfffc4 	addi	r2,r2,-1
 1009c94:	10800003 	ldbu	r2,0(r2)
 1009c98:	10803fcc 	andi	r2,r2,255
 1009c9c:	1080201c 	xori	r2,r2,128
 1009ca0:	10bfe004 	addi	r2,r2,-128
 1009ca4:	10800bd8 	cmpnei	r2,r2,47
 1009ca8:	1000031e 	bne	r2,zero,1009cb8 <alt_find_file+0x70>
    {
      len -= 1;
 1009cac:	e0bffc17 	ldw	r2,-16(fp)
 1009cb0:	10bfffc4 	addi	r2,r2,-1
 1009cb4:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 1009cb8:	e0bffc17 	ldw	r2,-16(fp)
 1009cbc:	1007883a 	mov	r3,r2
 1009cc0:	e0bffe17 	ldw	r2,-8(fp)
 1009cc4:	1885883a 	add	r2,r3,r2
 1009cc8:	10800003 	ldbu	r2,0(r2)
 1009ccc:	10803fcc 	andi	r2,r2,255
 1009cd0:	1080201c 	xori	r2,r2,128
 1009cd4:	10bfe004 	addi	r2,r2,-128
 1009cd8:	10800be0 	cmpeqi	r2,r2,47
 1009cdc:	10000a1e 	bne	r2,zero,1009d08 <alt_find_file+0xc0>
 1009ce0:	e0bffc17 	ldw	r2,-16(fp)
 1009ce4:	1007883a 	mov	r3,r2
 1009ce8:	e0bffe17 	ldw	r2,-8(fp)
 1009cec:	1885883a 	add	r2,r3,r2
 1009cf0:	10800003 	ldbu	r2,0(r2)
 1009cf4:	10803fcc 	andi	r2,r2,255
 1009cf8:	1080201c 	xori	r2,r2,128
 1009cfc:	10bfe004 	addi	r2,r2,-128
 1009d00:	1004c03a 	cmpne	r2,r2,zero
 1009d04:	10000a1e 	bne	r2,zero,1009d30 <alt_find_file+0xe8>
 1009d08:	e0bffd17 	ldw	r2,-12(fp)
 1009d0c:	11000217 	ldw	r4,8(r2)
 1009d10:	e1bffc17 	ldw	r6,-16(fp)
 1009d14:	e17ffe17 	ldw	r5,-8(fp)
 1009d18:	1009efc0 	call	1009efc <memcmp>
 1009d1c:	1004c03a 	cmpne	r2,r2,zero
 1009d20:	1000031e 	bne	r2,zero,1009d30 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 1009d24:	e0bffd17 	ldw	r2,-12(fp)
 1009d28:	e0bfff15 	stw	r2,-4(fp)
 1009d2c:	00000806 	br	1009d50 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 1009d30:	e0bffd17 	ldw	r2,-12(fp)
 1009d34:	10800017 	ldw	r2,0(r2)
 1009d38:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 1009d3c:	00c04074 	movhi	r3,257
 1009d40:	18efb004 	addi	r3,r3,-16704
 1009d44:	e0bffd17 	ldw	r2,-12(fp)
 1009d48:	10ffc91e 	bne	r2,r3,1009c70 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 1009d4c:	e03fff15 	stw	zero,-4(fp)
 1009d50:	e0bfff17 	ldw	r2,-4(fp)
}
 1009d54:	e037883a 	mov	sp,fp
 1009d58:	dfc00117 	ldw	ra,4(sp)
 1009d5c:	df000017 	ldw	fp,0(sp)
 1009d60:	dec00204 	addi	sp,sp,8
 1009d64:	f800283a 	ret

01009d68 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 1009d68:	defffc04 	addi	sp,sp,-16
 1009d6c:	df000315 	stw	fp,12(sp)
 1009d70:	df000304 	addi	fp,sp,12
 1009d74:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1009d78:	00bffa04 	movi	r2,-24
 1009d7c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1009d80:	e03ffe15 	stw	zero,-8(fp)
 1009d84:	00001e06 	br	1009e00 <alt_get_fd+0x98>
  {
    if (!alt_fd_list[i].dev)
 1009d88:	e0bffe17 	ldw	r2,-8(fp)
 1009d8c:	00c04074 	movhi	r3,257
 1009d90:	18eb1304 	addi	r3,r3,-21428
 1009d94:	10800324 	muli	r2,r2,12
 1009d98:	10c5883a 	add	r2,r2,r3
 1009d9c:	10800017 	ldw	r2,0(r2)
 1009da0:	1004c03a 	cmpne	r2,r2,zero
 1009da4:	1000131e 	bne	r2,zero,1009df4 <alt_get_fd+0x8c>
    {
      alt_fd_list[i].dev = dev;
 1009da8:	e0bffe17 	ldw	r2,-8(fp)
 1009dac:	00c04074 	movhi	r3,257
 1009db0:	18eb1304 	addi	r3,r3,-21428
 1009db4:	10800324 	muli	r2,r2,12
 1009db8:	10c7883a 	add	r3,r2,r3
 1009dbc:	e0bfff17 	ldw	r2,-4(fp)
 1009dc0:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 1009dc4:	00804074 	movhi	r2,257
 1009dc8:	10afb404 	addi	r2,r2,-16688
 1009dcc:	10c00017 	ldw	r3,0(r2)
 1009dd0:	e0bffe17 	ldw	r2,-8(fp)
 1009dd4:	1880040e 	bge	r3,r2,1009de8 <alt_get_fd+0x80>
      {
        alt_max_fd = i;
 1009dd8:	00c04074 	movhi	r3,257
 1009ddc:	18efb404 	addi	r3,r3,-16688
 1009de0:	e0bffe17 	ldw	r2,-8(fp)
 1009de4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 1009de8:	e0bffe17 	ldw	r2,-8(fp)
 1009dec:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1009df0:	00000606 	br	1009e0c <alt_get_fd+0xa4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1009df4:	e0bffe17 	ldw	r2,-8(fp)
 1009df8:	10800044 	addi	r2,r2,1
 1009dfc:	e0bffe15 	stw	r2,-8(fp)
 1009e00:	e0bffe17 	ldw	r2,-8(fp)
 1009e04:	10800810 	cmplti	r2,r2,32
 1009e08:	103fdf1e 	bne	r2,zero,1009d88 <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1009e0c:	e0bffd17 	ldw	r2,-12(fp)
}
 1009e10:	e037883a 	mov	sp,fp
 1009e14:	df000017 	ldw	fp,0(sp)
 1009e18:	dec00104 	addi	sp,sp,4
 1009e1c:	f800283a 	ret

01009e20 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 1009e20:	defffb04 	addi	sp,sp,-20
 1009e24:	df000415 	stw	fp,16(sp)
 1009e28:	df000404 	addi	fp,sp,16
 1009e2c:	e13ffe15 	stw	r4,-8(fp)
 1009e30:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 1009e34:	e0bfff17 	ldw	r2,-4(fp)
 1009e38:	10900070 	cmpltui	r2,r2,16385
 1009e3c:	1000021e 	bne	r2,zero,1009e48 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 1009e40:	00900004 	movi	r2,16384
 1009e44:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 1009e48:	e0fffe17 	ldw	r3,-8(fp)
 1009e4c:	e0bfff17 	ldw	r2,-4(fp)
 1009e50:	1885883a 	add	r2,r3,r2
 1009e54:	e0bffc15 	stw	r2,-16(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1009e58:	e0bffe17 	ldw	r2,-8(fp)
 1009e5c:	e0bffd15 	stw	r2,-12(fp)
 1009e60:	00000506 	br	1009e78 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 1009e64:	e0bffd17 	ldw	r2,-12(fp)
 1009e68:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 1009e6c:	e0bffd17 	ldw	r2,-12(fp)
 1009e70:	10800804 	addi	r2,r2,32
 1009e74:	e0bffd15 	stw	r2,-12(fp)
 1009e78:	e0fffd17 	ldw	r3,-12(fp)
 1009e7c:	e0bffc17 	ldw	r2,-16(fp)
 1009e80:	18bff836 	bltu	r3,r2,1009e64 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 1009e84:	e0bffe17 	ldw	r2,-8(fp)
 1009e88:	108007cc 	andi	r2,r2,31
 1009e8c:	1005003a 	cmpeq	r2,r2,zero
 1009e90:	1000021e 	bne	r2,zero,1009e9c <alt_icache_flush+0x7c>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 1009e94:	e0bffd17 	ldw	r2,-12(fp)
 1009e98:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 1009e9c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 1009ea0:	e037883a 	mov	sp,fp
 1009ea4:	df000017 	ldw	fp,0(sp)
 1009ea8:	dec00104 	addi	sp,sp,4
 1009eac:	f800283a 	ret

01009eb0 <atexit>:
 1009eb0:	200b883a 	mov	r5,r4
 1009eb4:	000d883a 	mov	r6,zero
 1009eb8:	0009883a 	mov	r4,zero
 1009ebc:	000f883a 	mov	r7,zero
 1009ec0:	1009f701 	jmpi	1009f70 <__register_exitproc>

01009ec4 <exit>:
 1009ec4:	defffe04 	addi	sp,sp,-8
 1009ec8:	000b883a 	mov	r5,zero
 1009ecc:	dc000015 	stw	r16,0(sp)
 1009ed0:	dfc00115 	stw	ra,4(sp)
 1009ed4:	2021883a 	mov	r16,r4
 1009ed8:	100a0a80 	call	100a0a8 <__call_exitprocs>
 1009edc:	00804074 	movhi	r2,257
 1009ee0:	10afad04 	addi	r2,r2,-16716
 1009ee4:	11000017 	ldw	r4,0(r2)
 1009ee8:	20800f17 	ldw	r2,60(r4)
 1009eec:	10000126 	beq	r2,zero,1009ef4 <exit+0x30>
 1009ef0:	103ee83a 	callr	r2
 1009ef4:	8009883a 	mov	r4,r16
 1009ef8:	100a2980 	call	100a298 <_exit>

01009efc <memcmp>:
 1009efc:	00c000c4 	movi	r3,3
 1009f00:	1980032e 	bgeu	r3,r6,1009f10 <memcmp+0x14>
 1009f04:	2144b03a 	or	r2,r4,r5
 1009f08:	10c4703a 	and	r2,r2,r3
 1009f0c:	10000f26 	beq	r2,zero,1009f4c <memcmp+0x50>
 1009f10:	31ffffc4 	addi	r7,r6,-1
 1009f14:	3000061e 	bne	r6,zero,1009f30 <memcmp+0x34>
 1009f18:	00000a06 	br	1009f44 <memcmp+0x48>
 1009f1c:	39ffffc4 	addi	r7,r7,-1
 1009f20:	00bfffc4 	movi	r2,-1
 1009f24:	21000044 	addi	r4,r4,1
 1009f28:	29400044 	addi	r5,r5,1
 1009f2c:	38800526 	beq	r7,r2,1009f44 <memcmp+0x48>
 1009f30:	20c00003 	ldbu	r3,0(r4)
 1009f34:	28800003 	ldbu	r2,0(r5)
 1009f38:	18bff826 	beq	r3,r2,1009f1c <memcmp+0x20>
 1009f3c:	1885c83a 	sub	r2,r3,r2
 1009f40:	f800283a 	ret
 1009f44:	0005883a 	mov	r2,zero
 1009f48:	f800283a 	ret
 1009f4c:	180f883a 	mov	r7,r3
 1009f50:	20c00017 	ldw	r3,0(r4)
 1009f54:	28800017 	ldw	r2,0(r5)
 1009f58:	18bfed1e 	bne	r3,r2,1009f10 <memcmp+0x14>
 1009f5c:	31bfff04 	addi	r6,r6,-4
 1009f60:	21000104 	addi	r4,r4,4
 1009f64:	29400104 	addi	r5,r5,4
 1009f68:	39bff936 	bltu	r7,r6,1009f50 <memcmp+0x54>
 1009f6c:	003fe806 	br	1009f10 <memcmp+0x14>

01009f70 <__register_exitproc>:
 1009f70:	defffa04 	addi	sp,sp,-24
 1009f74:	00804074 	movhi	r2,257
 1009f78:	10afad04 	addi	r2,r2,-16716
 1009f7c:	dc000015 	stw	r16,0(sp)
 1009f80:	14000017 	ldw	r16,0(r2)
 1009f84:	dd000415 	stw	r20,16(sp)
 1009f88:	2829883a 	mov	r20,r5
 1009f8c:	81405217 	ldw	r5,328(r16)
 1009f90:	dcc00315 	stw	r19,12(sp)
 1009f94:	dc800215 	stw	r18,8(sp)
 1009f98:	dc400115 	stw	r17,4(sp)
 1009f9c:	dfc00515 	stw	ra,20(sp)
 1009fa0:	2023883a 	mov	r17,r4
 1009fa4:	3027883a 	mov	r19,r6
 1009fa8:	3825883a 	mov	r18,r7
 1009fac:	28002526 	beq	r5,zero,100a044 <__register_exitproc+0xd4>
 1009fb0:	29000117 	ldw	r4,4(r5)
 1009fb4:	008007c4 	movi	r2,31
 1009fb8:	11002716 	blt	r2,r4,100a058 <__register_exitproc+0xe8>
 1009fbc:	8800101e 	bne	r17,zero,100a000 <__register_exitproc+0x90>
 1009fc0:	2105883a 	add	r2,r4,r4
 1009fc4:	1085883a 	add	r2,r2,r2
 1009fc8:	20c00044 	addi	r3,r4,1
 1009fcc:	1145883a 	add	r2,r2,r5
 1009fd0:	0009883a 	mov	r4,zero
 1009fd4:	15000215 	stw	r20,8(r2)
 1009fd8:	28c00115 	stw	r3,4(r5)
 1009fdc:	2005883a 	mov	r2,r4
 1009fe0:	dfc00517 	ldw	ra,20(sp)
 1009fe4:	dd000417 	ldw	r20,16(sp)
 1009fe8:	dcc00317 	ldw	r19,12(sp)
 1009fec:	dc800217 	ldw	r18,8(sp)
 1009ff0:	dc400117 	ldw	r17,4(sp)
 1009ff4:	dc000017 	ldw	r16,0(sp)
 1009ff8:	dec00604 	addi	sp,sp,24
 1009ffc:	f800283a 	ret
 100a000:	29802204 	addi	r6,r5,136
 100a004:	00800044 	movi	r2,1
 100a008:	110e983a 	sll	r7,r2,r4
 100a00c:	30c04017 	ldw	r3,256(r6)
 100a010:	2105883a 	add	r2,r4,r4
 100a014:	1085883a 	add	r2,r2,r2
 100a018:	1185883a 	add	r2,r2,r6
 100a01c:	19c6b03a 	or	r3,r3,r7
 100a020:	14802015 	stw	r18,128(r2)
 100a024:	14c00015 	stw	r19,0(r2)
 100a028:	00800084 	movi	r2,2
 100a02c:	30c04015 	stw	r3,256(r6)
 100a030:	88bfe31e 	bne	r17,r2,1009fc0 <__register_exitproc+0x50>
 100a034:	30804117 	ldw	r2,260(r6)
 100a038:	11c4b03a 	or	r2,r2,r7
 100a03c:	30804115 	stw	r2,260(r6)
 100a040:	003fdf06 	br	1009fc0 <__register_exitproc+0x50>
 100a044:	00804074 	movhi	r2,257
 100a048:	10b82804 	addi	r2,r2,-8032
 100a04c:	100b883a 	mov	r5,r2
 100a050:	80805215 	stw	r2,328(r16)
 100a054:	003fd606 	br	1009fb0 <__register_exitproc+0x40>
 100a058:	00800034 	movhi	r2,0
 100a05c:	10800004 	addi	r2,r2,0
 100a060:	1000021e 	bne	r2,zero,100a06c <__register_exitproc+0xfc>
 100a064:	013fffc4 	movi	r4,-1
 100a068:	003fdc06 	br	1009fdc <__register_exitproc+0x6c>
 100a06c:	01006404 	movi	r4,400
 100a070:	103ee83a 	callr	r2
 100a074:	1007883a 	mov	r3,r2
 100a078:	103ffa26 	beq	r2,zero,100a064 <__register_exitproc+0xf4>
 100a07c:	80805217 	ldw	r2,328(r16)
 100a080:	180b883a 	mov	r5,r3
 100a084:	18000115 	stw	zero,4(r3)
 100a088:	18800015 	stw	r2,0(r3)
 100a08c:	80c05215 	stw	r3,328(r16)
 100a090:	18006215 	stw	zero,392(r3)
 100a094:	18006315 	stw	zero,396(r3)
 100a098:	0009883a 	mov	r4,zero
 100a09c:	883fc826 	beq	r17,zero,1009fc0 <__register_exitproc+0x50>
 100a0a0:	003fd706 	br	100a000 <__register_exitproc+0x90>

0100a0a4 <register_fini>:
 100a0a4:	f800283a 	ret

0100a0a8 <__call_exitprocs>:
 100a0a8:	00804074 	movhi	r2,257
 100a0ac:	10afad04 	addi	r2,r2,-16716
 100a0b0:	10800017 	ldw	r2,0(r2)
 100a0b4:	defff304 	addi	sp,sp,-52
 100a0b8:	df000b15 	stw	fp,44(sp)
 100a0bc:	d8800115 	stw	r2,4(sp)
 100a0c0:	00800034 	movhi	r2,0
 100a0c4:	10800004 	addi	r2,r2,0
 100a0c8:	1005003a 	cmpeq	r2,r2,zero
 100a0cc:	d8800215 	stw	r2,8(sp)
 100a0d0:	d8800117 	ldw	r2,4(sp)
 100a0d4:	dd400815 	stw	r21,32(sp)
 100a0d8:	dd000715 	stw	r20,28(sp)
 100a0dc:	10805204 	addi	r2,r2,328
 100a0e0:	dfc00c15 	stw	ra,48(sp)
 100a0e4:	ddc00a15 	stw	r23,40(sp)
 100a0e8:	dd800915 	stw	r22,36(sp)
 100a0ec:	dcc00615 	stw	r19,24(sp)
 100a0f0:	dc800515 	stw	r18,20(sp)
 100a0f4:	dc400415 	stw	r17,16(sp)
 100a0f8:	dc000315 	stw	r16,12(sp)
 100a0fc:	282b883a 	mov	r21,r5
 100a100:	2039883a 	mov	fp,r4
 100a104:	d8800015 	stw	r2,0(sp)
 100a108:	2829003a 	cmpeq	r20,r5,zero
 100a10c:	d8800117 	ldw	r2,4(sp)
 100a110:	14405217 	ldw	r17,328(r2)
 100a114:	88001026 	beq	r17,zero,100a158 <__call_exitprocs+0xb0>
 100a118:	ddc00017 	ldw	r23,0(sp)
 100a11c:	88800117 	ldw	r2,4(r17)
 100a120:	8c802204 	addi	r18,r17,136
 100a124:	143fffc4 	addi	r16,r2,-1
 100a128:	80000916 	blt	r16,zero,100a150 <__call_exitprocs+0xa8>
 100a12c:	05bfffc4 	movi	r22,-1
 100a130:	a000151e 	bne	r20,zero,100a188 <__call_exitprocs+0xe0>
 100a134:	8409883a 	add	r4,r16,r16
 100a138:	2105883a 	add	r2,r4,r4
 100a13c:	1485883a 	add	r2,r2,r18
 100a140:	10c02017 	ldw	r3,128(r2)
 100a144:	a8c01126 	beq	r21,r3,100a18c <__call_exitprocs+0xe4>
 100a148:	843fffc4 	addi	r16,r16,-1
 100a14c:	85bff81e 	bne	r16,r22,100a130 <__call_exitprocs+0x88>
 100a150:	d8800217 	ldw	r2,8(sp)
 100a154:	10003126 	beq	r2,zero,100a21c <__call_exitprocs+0x174>
 100a158:	dfc00c17 	ldw	ra,48(sp)
 100a15c:	df000b17 	ldw	fp,44(sp)
 100a160:	ddc00a17 	ldw	r23,40(sp)
 100a164:	dd800917 	ldw	r22,36(sp)
 100a168:	dd400817 	ldw	r21,32(sp)
 100a16c:	dd000717 	ldw	r20,28(sp)
 100a170:	dcc00617 	ldw	r19,24(sp)
 100a174:	dc800517 	ldw	r18,20(sp)
 100a178:	dc400417 	ldw	r17,16(sp)
 100a17c:	dc000317 	ldw	r16,12(sp)
 100a180:	dec00d04 	addi	sp,sp,52
 100a184:	f800283a 	ret
 100a188:	8409883a 	add	r4,r16,r16
 100a18c:	88c00117 	ldw	r3,4(r17)
 100a190:	2105883a 	add	r2,r4,r4
 100a194:	1445883a 	add	r2,r2,r17
 100a198:	18ffffc4 	addi	r3,r3,-1
 100a19c:	11800217 	ldw	r6,8(r2)
 100a1a0:	1c001526 	beq	r3,r16,100a1f8 <__call_exitprocs+0x150>
 100a1a4:	10000215 	stw	zero,8(r2)
 100a1a8:	303fe726 	beq	r6,zero,100a148 <__call_exitprocs+0xa0>
 100a1ac:	00c00044 	movi	r3,1
 100a1b0:	1c06983a 	sll	r3,r3,r16
 100a1b4:	90804017 	ldw	r2,256(r18)
 100a1b8:	8cc00117 	ldw	r19,4(r17)
 100a1bc:	1884703a 	and	r2,r3,r2
 100a1c0:	10001426 	beq	r2,zero,100a214 <__call_exitprocs+0x16c>
 100a1c4:	90804117 	ldw	r2,260(r18)
 100a1c8:	1884703a 	and	r2,r3,r2
 100a1cc:	10000c1e 	bne	r2,zero,100a200 <__call_exitprocs+0x158>
 100a1d0:	2105883a 	add	r2,r4,r4
 100a1d4:	1485883a 	add	r2,r2,r18
 100a1d8:	11400017 	ldw	r5,0(r2)
 100a1dc:	e009883a 	mov	r4,fp
 100a1e0:	303ee83a 	callr	r6
 100a1e4:	88800117 	ldw	r2,4(r17)
 100a1e8:	98bfc81e 	bne	r19,r2,100a10c <__call_exitprocs+0x64>
 100a1ec:	b8800017 	ldw	r2,0(r23)
 100a1f0:	147fd526 	beq	r2,r17,100a148 <__call_exitprocs+0xa0>
 100a1f4:	003fc506 	br	100a10c <__call_exitprocs+0x64>
 100a1f8:	8c000115 	stw	r16,4(r17)
 100a1fc:	003fea06 	br	100a1a8 <__call_exitprocs+0x100>
 100a200:	2105883a 	add	r2,r4,r4
 100a204:	1485883a 	add	r2,r2,r18
 100a208:	11000017 	ldw	r4,0(r2)
 100a20c:	303ee83a 	callr	r6
 100a210:	003ff406 	br	100a1e4 <__call_exitprocs+0x13c>
 100a214:	303ee83a 	callr	r6
 100a218:	003ff206 	br	100a1e4 <__call_exitprocs+0x13c>
 100a21c:	88800117 	ldw	r2,4(r17)
 100a220:	1000081e 	bne	r2,zero,100a244 <__call_exitprocs+0x19c>
 100a224:	89000017 	ldw	r4,0(r17)
 100a228:	20000726 	beq	r4,zero,100a248 <__call_exitprocs+0x1a0>
 100a22c:	b9000015 	stw	r4,0(r23)
 100a230:	8809883a 	mov	r4,r17
 100a234:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 100a238:	bc400017 	ldw	r17,0(r23)
 100a23c:	883fb71e 	bne	r17,zero,100a11c <__call_exitprocs+0x74>
 100a240:	003fc506 	br	100a158 <__call_exitprocs+0xb0>
 100a244:	89000017 	ldw	r4,0(r17)
 100a248:	882f883a 	mov	r23,r17
 100a24c:	2023883a 	mov	r17,r4
 100a250:	883fb21e 	bne	r17,zero,100a11c <__call_exitprocs+0x74>
 100a254:	003fc006 	br	100a158 <__call_exitprocs+0xb0>

0100a258 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 100a258:	defffd04 	addi	sp,sp,-12
 100a25c:	df000215 	stw	fp,8(sp)
 100a260:	df000204 	addi	fp,sp,8
 100a264:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 100a268:	e0bfff17 	ldw	r2,-4(fp)
 100a26c:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100a270:	e0bffe17 	ldw	r2,-8(fp)
 100a274:	1005003a 	cmpeq	r2,r2,zero
 100a278:	1000021e 	bne	r2,zero,100a284 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 100a27c:	002af070 	cmpltui	zero,zero,43969
 100a280:	00000106 	br	100a288 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 100a284:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 100a288:	e037883a 	mov	sp,fp
 100a28c:	df000017 	ldw	fp,0(sp)
 100a290:	dec00104 	addi	sp,sp,4
 100a294:	f800283a 	ret

0100a298 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100a298:	defffd04 	addi	sp,sp,-12
 100a29c:	dfc00215 	stw	ra,8(sp)
 100a2a0:	df000115 	stw	fp,4(sp)
 100a2a4:	df000104 	addi	fp,sp,4
 100a2a8:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100a2ac:	e13fff17 	ldw	r4,-4(fp)
 100a2b0:	100a2580 	call	100a258 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100a2b4:	003fff06 	br	100a2b4 <_exit+0x1c>
 100a2b8:	0100a0a4 	muli	r4,zero,642
