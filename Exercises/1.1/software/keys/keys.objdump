
keys.elf:     file format elf32-littlenios2
keys.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b4

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x0000cfa4 memsz 0x0000cfa4 flags r-x
    LOAD off    0x0000dfc4 vaddr 0x0100cfc4 paddr 0x0100ea4c align 2**12
         filesz 0x00001a88 memsz 0x00001a88 flags rw-
    LOAD off    0x000104d4 vaddr 0x010104d4 paddr 0x010104d4 align 2**12
         filesz 0x00000000 memsz 0x000002ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000194  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ca50  010001b4  010001b4  000011b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003c0  0100cc04  0100cc04  0000dc04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a88  0100cfc4  0100ea4c  0000dfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002ec  010104d4  010104d4  000104d4  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  0000fa4c  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000c78  00000000  00000000  0000fa78  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 000014c3  00000000  00000000  000106f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00022fae  00000000  00000000  00011bb3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00007971  00000000  00000000  00034b61  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000137d9  00000000  00000000  0003c4d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001968  00000000  00000000  0004fcac  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000022ac  00000000  00000000  00051614  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000bf3f  00000000  00000000  000538c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  0005f800  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000009e0  00000000  00000000  0005f810  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00063225  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00063228  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00063234  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00063235  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00063236  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00063241  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006324c  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00063257  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001d  00000000  00000000  00063262  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00052347  00000000  00000000  0006327f  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b4 l    d  .text	00000000 .text
0100cc04 l    d  .rodata	00000000 .rodata
0100cfc4 l    d  .rwdata	00000000 .rwdata
010104d4 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001ec l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
010004c8 l     F .text	00000058 __sprint_r
0100ccda l     O .rodata	00000010 blanks.3452
0100ccca l     O .rodata	00000010 zeroes.3453
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
01002544 l     F .text	00000244 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
01003f6c l     F .text	00000058 std
01004078 l     F .text	00000008 __fp_lock
01004080 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0100cfc4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 locale.c
0100ea18 l     O .rwdata	00000004 charset
0100cd10 l     O .rodata	00000030 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0100ce58 l     O .rodata	0000000c p05.2458
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_isinfd.c
00000000 l    df *ABS*	00000000 s_isnand.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
0100842c l     F .text	00000410 _fpadd_parts
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01009558 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 dp-bit.c
00000000 l    df *ABS*	00000000 alt_close.c
01009e94 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01009ef4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
01009ff8 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0100a11c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0100a1fc l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0100a35c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0100a58c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0100ea3c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100a844 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0100d980 l     O .rwdata	00001060 jtag_uart_0
0100e9e0 l     O .rwdata	0000002c character_lcd_0
0100a934 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0100ab74 l     F .text	00000228 altera_avalon_jtag_uart_irq
0100ad9c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0100bb6c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0100c010 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0100c160 l     F .text	000000f8 alt_file_locked
0100c3e4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
0100c9ec l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 alt_exit.c
0100cba0 l     F .text	00000040 alt_sim_halt
01005d5c g     F .text	00000094 _mprec_log10
01005e48 g     F .text	00000088 __any_on
01007600 g     F .text	00000070 _isatty_r
0100ce30 g     O .rodata	00000028 __mprec_tinytens
0100a3bc g     F .text	0000006c alt_main
010002cc g     F .text	000000a0 _puts_r
01010530 g     O .bss	00000100 alt_irq
01007670 g     F .text	00000078 _lseek_r
0100ea4c g       *ABS*	00000000 __flash_rwdata_start
0100b494 g     F .text	00000034 alt_up_character_lcd_send_cmd
01008f4c g     F .text	00000088 __eqdf2
010107c0 g       *ABS*	00000000 __alt_heap_start
010070b8 g     F .text	00000068 __sseek
01003fd4 g     F .text	000000a4 __sinit
01004ce0 g     F .text	00000084 _setlocale_r
010040d4 g     F .text	0000009c __sfmoreglue
0100a448 g     F .text	00000020 __malloc_unlock
010057d8 g     F .text	000000e0 memmove
010040c4 g     F .text	00000010 _cleanup
01005ed0 g     F .text	000000bc _Balloc
0100905c g     F .text	00000088 __gtdf2
00000000  w      *UND*	00000000 __errno
0100b418 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000000c __reset
01000020 g       *ABS*	00000000 __flash_exceptions_start
0100758c g     F .text	00000074 _fstat_r
010104ec g     O .bss	00000004 errno
010104f4 g     O .bss	00000004 alt_argv
01016a0c g       *ABS*	00000000 _gp
0100d800 g     O .rwdata	00000180 alt_fd_list
0100bc94 g     F .text	00000094 alt_find_dev
01005738 g     F .text	000000a0 memcpy
0100b62c g     F .text	0000004c alt_up_character_lcd_write_fd
010040b8 g     F .text	0000000c _cleanup_r
010091f4 g     F .text	000000f8 __floatsidf
0100c0e8 g     F .text	00000078 alt_io_redirect
0100916c g     F .text	00000088 __ltdf2
0100cc04 g       *ABS*	00000000 __DTOR_END__
0100036c g     F .text	00000014 puts
01005cac g     F .text	000000b0 __ratio
0100afb4 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
01009694 g     F .text	00000008 __udivsi3
0100a058 g     F .text	000000c4 isatty
0100cd40 g     O .rodata	000000c8 __mprec_tens
01004cbc g     F .text	00000008 __locale_charset
010104e0 g     O .bss	00000004 __malloc_top_pad
0100ea14 g     O .rwdata	00000004 __mb_cur_max
01004cc4 g     F .text	0000000c _localeconv_r
01006634 g     F .text	0000003c __i2b
010046a0 g     F .text	0000049c __sfvwrite_r
01007040 g     F .text	00000070 _sbrk_r
010076e8 g     F .text	00000078 _read_r
0100d3c4 g     O .rwdata	0000000c __lc_ctype
0100ea34 g     O .rwdata	00000004 alt_max_fd
01009b94 g     F .text	00000138 __unpack_d
01007468 g     F .text	00000110 _fclose_r
01003f38 g     F .text	00000034 fflush
010104e4 g     O .bss	00000004 __malloc_max_sbrked_mem
010088bc g     F .text	00000074 __adddf3
01005b8c g     F .text	00000120 __b2d
01007dcc g     F .text	00000660 __umoddi3
0100a268 g     F .text	000000f4 lseek
0100ea10 g     O .rwdata	00000004 _global_impure_ptr
010069dc g     F .text	000005f4 _realloc_r
010107c0 g       *ABS*	00000000 __bss_end
0100bf18 g     F .text	000000f8 alt_iic_isr_register
0100c4dc g     F .text	0000010c alt_tick
01007760 g     F .text	0000066c __udivdi3
0100ce08 g     O .rodata	00000028 __mprec_bigtens
010068bc g     F .text	00000120 __s2b
010093c4 g     F .text	00000194 __floatunsidf
01005aac g     F .text	00000060 __mcmp
010040a0 g     F .text	00000018 __fp_lock_all
0100bed0 g     F .text	00000048 alt_ic_irq_enabled
0100c444 g     F .text	00000098 alt_alarm_stop
010104fc g     O .bss	00000004 alt_irq_active
010000ec g     F .exceptions	000000c8 alt_irq_handler
0100d7d8 g     O .rwdata	00000028 alt_dev_null
0100b914 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
0100ba9c g     F .text	0000001c alt_dcache_flush_all
01005978 g     F .text	00000070 __hi0bits
010092ec g     F .text	000000d8 __fixdfsi
0100ea4c g       *ABS*	00000000 __ram_rwdata_end
0100ea2c g     O .rwdata	00000008 alt_dev_list
0100a720 g     F .text	00000124 write
0100cfc4 g       *ABS*	00000000 __ram_rodata_end
01009f20 g     F .text	000000d8 fstat
0100679c g     F .text	00000120 __pow5mult
010104d4 g     O .bss	00000004 __nlocale_changed
0100969c g     F .text	00000008 __umodsi3
010107c0 g       *ABS*	00000000 end
0100aab4 g     F .text	000000c0 altera_avalon_jtag_uart_init
0100cc00 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
01009800 g     F .text	00000080 __clzsi2
0100b1d8 g     F .text	00000240 altera_avalon_jtag_uart_write
01003fc4 g     F .text	00000004 __sfp_lock_acquire
01005654 g     F .text	000000e4 memchr
0100b53c g     F .text	00000078 alt_up_character_lcd_write
01000520 g     F .text	00001ec4 ___vfprintf_internal_r
010003f4 g     F .text	00000060 _sprintf_r
0100438c g     F .text	00000314 _free_r
0100c9f0 g     F .text	000001b0 __call_exitprocs
010104d8 g     O .bss	00000004 __mlocale_changed
0100ea20 g     O .rwdata	00000004 __malloc_sbrk_base
010001b4 g     F .text	0000003c _start
01010500 g     O .bss	00000004 _alt_tick_rate
01006294 g     F .text	0000014c __lshift
01010504 g     O .bss	00000004 _alt_nticks
0100a468 g     F .text	00000124 read
0100a8d8 g     F .text	0000005c alt_sys_init
0100b7a0 g     F .text	000000b0 alt_up_character_lcd_shift_display
0100c8b8 g     F .text	00000134 __register_exitproc
010063e0 g     F .text	00000254 __multiply
0100b850 g     F .text	00000090 alt_up_character_lcd_erase_pos
0100ae4c g     F .text	00000074 altera_avalon_jtag_uart_close
010096a4 g     F .text	00000038 __mulsi3
0100cfc4 g       *ABS*	00000000 __ram_rwdata_start
0100cc04 g       *ABS*	00000000 __ram_rodata_start
01010508 g     O .bss	00000028 __malloc_current_mallinfo
01005f8c g     F .text	0000017c __d2b
0100a96c g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100c728 g     F .text	000000d0 alt_get_fd
01009ccc g     F .text	000000c8 __fpcmp_parts_d
010073f8 g     F .text	00000070 _close_r
0100c844 g     F .text	00000074 memcmp
0100aa1c g     F .text	00000048 altera_avalon_jtag_uart_close_fd
010107c0 g       *ABS*	00000000 __alt_stack_base
0100aa64 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
01002408 g     F .text	0000013c __swsetup_r
01008cf4 g     F .text	00000258 __divdf3
01004170 g     F .text	000000f0 __sfp
01005df0 g     F .text	00000058 __copybits
0100d3d0 g     O .rwdata	00000408 __malloc_av_
01003fd0 g     F .text	00000004 __sinit_lock_release
01008930 g     F .text	000003c4 __muldf3
0100719c g     F .text	00000060 __sread
0100c608 g     F .text	00000120 alt_find_file
0100bab8 g     F .text	000000b4 alt_dev_llist_insert
0100a428 g     F .text	00000020 __malloc_lock
0100a664 g     F .text	000000bc sbrk
01003d3c g     F .text	000001fc _fflush_r
01007330 g     F .text	000000c8 _calloc_r
010104d4 g       *ABS*	00000000 __bss_start
010058b8 g     F .text	00000098 memset
010001f0 g     F .text	000000dc main
010104f8 g     O .bss	00000004 alt_envp
010104e8 g     O .bss	00000004 __malloc_max_total_mem
0100a9c4 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
0100b6f0 g     F .text	000000b0 alt_up_character_lcd_shift_cursor
010070b0 g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
01007578 g     F .text	00000014 fclose
01010630 g     O .bss	00000190 _atexit0
01002788 g     F .text	000015b4 _dtoa_r
01004f14 g     F .text	00000740 _malloc_r
0100ea38 g     O .rwdata	00000004 alt_errno
01004c04 g     F .text	000000b8 _fwalk
010095d4 g     F .text	00000060 __divsi3
0100ce64 g     O .rodata	00000014 __thenan_df
0100b4fc g     F .text	00000040 alt_up_character_lcd_open_dev
01004260 g     F .text	0000012c _malloc_trim_r
0100cc04 g       *ABS*	00000000 __CTOR_END__
0100b4c8 g     F .text	00000034 alt_up_character_lcd_init
010071fc g     F .text	000000bc strcmp
0100cc04 g       *ABS*	00000000 __flash_rodata_start
0100cc04 g       *ABS*	00000000 __DTOR_LIST__
01008fd4 g     F .text	00000088 __nedf2
0100a8a4 g     F .text	00000034 alt_irq_init
0100a5ec g     F .text	00000078 alt_release_fd
01000380 g     F .text	00000074 sprintf
0100b8e0 g     F .text	00000034 alt_up_character_lcd_cursor_off
0100ce78 g     O .rodata	00000100 __clz_tab
010104dc g     O .bss	00000004 _PathLocale
0100c7f8 g     F .text	00000014 atexit
010072b8 g     F .text	00000078 _write_r
01004d64 g     F .text	0000001c setlocale
0100ea0c g     O .rwdata	00000004 _impure_ptr
010104f0 g     O .bss	00000004 alt_argc
0100bc30 g     F .text	00000064 _do_dtors
01000020 g       .exceptions	00000000 alt_irq_entry
01005b0c g     F .text	00000080 __ulp
01006fd0 g     F .text	00000040 __isinfd
01004088 g     F .text	00000018 __fp_unlock_all
0100ea24 g     O .rwdata	00000008 alt_fs_list
01000020 g       *ABS*	00000000 __ram_exceptions_start
01004cd0 g     F .text	00000010 localeconv
0100bd44 g     F .text	00000050 alt_ic_isr_register
0100ea4c g       *ABS*	00000000 _edata
010107c0 g       *ABS*	00000000 _end
010001b4 g       *ABS*	00000000 __ram_exceptions_end
0100aec0 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0100be30 g     F .text	000000a0 alt_ic_irq_disable
01007120 g     F .text	0000007c __swrite
0100ea1c g     O .rwdata	00000004 __malloc_trim_threshold
0100c5e8 g     F .text	00000020 altera_nios2_qsys_irq_init
0100c80c g     F .text	00000038 exit
01004b3c g     F .text	000000c8 _fwalk_reent
01006108 g     F .text	0000018c __mdiff
01009634 g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01003fc8 g     F .text	00000004 __sfp_lock_release
01000000 g       *ABS*	00000000 __alt_mem_sdram
0100b5b4 g     F .text	00000078 alt_up_character_lcd_string
0100cbe0 g     F .text	00000020 _exit
01007010 g     F .text	00000030 __isnand
0100b948 g     F .text	00000154 alt_alarm_start
010096dc g     F .text	00000124 __muldi3
01004d80 g     F .text	00000194 __smakebuf_r
01000454 g     F .text	00000074 strlen
0100c258 g     F .text	0000018c open
010090e4 g     F .text	00000088 __gedf2
0100bd28 g     F .text	0000001c alt_icache_flush_all
0100b678 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
0100ea40 g     O .rwdata	00000004 alt_priority_mask
0100bd94 g     F .text	0000009c alt_ic_irq_enable
010023e4 g     F .text	00000024 __vfprintf_internal
0100883c g     F .text	00000080 __subdf3
010059e8 g     F .text	000000c4 __lo0bits
0100ea44 g     O .rwdata	00000008 alt_alarm_list
0100bbcc g     F .text	00000064 _do_ctors
01009d94 g     F .text	00000100 close
0100a17c g     F .text	00000080 alt_load
01009880 g     F .text	00000314 __pack_d
00000000  w      *UND*	00000000 free
01003fcc g     F .text	00000004 __sinit_lock_acquire
01006670 g     F .text	0000012c __multadd
01005950 g     F .text	00000028 _Bfree



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406d14 	ori	at,at,436
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000161e 	bne	r2,zero,1000184 <alt_irq_handler+0x98>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18c14c04 	addi	r3,r3,1328
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11400017 	ldw	r5,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18c14c04 	addi	r3,r3,1328
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	283ee83a 	callr	r5
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000164:	0005313a 	rdctl	r2,ipending
 1000168:	e0bffb15 	stw	r2,-20(fp)

  return active;
 100016c:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000170:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000174:	e0bfff17 	ldw	r2,-4(fp)
 1000178:	1004c03a 	cmpne	r2,r2,zero
 100017c:	103fe31e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000180:	00000706 	br	10001a0 <alt_irq_handler+0xb4>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000184:	e0bffe17 	ldw	r2,-8(fp)
 1000188:	1085883a 	add	r2,r2,r2
 100018c:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000190:	e0bffd17 	ldw	r2,-12(fp)
 1000194:	10800044 	addi	r2,r2,1
 1000198:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 100019c:	003fde06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a0:	e037883a 	mov	sp,fp
 10001a4:	dfc00117 	ldw	ra,4(sp)
 10001a8:	df000017 	ldw	fp,0(sp)
 10001ac:	dec00204 	addi	sp,sp,8
 10001b0:	f800283a 	ret

Disassembly of section .text:

010001b4 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b4:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001b8:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001bc:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c0:	d69a8314 	ori	gp,gp,27148
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c4:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001c8:	10813514 	ori	r2,r2,1236

    movhi r3, %hi(__bss_end)
 10001cc:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001d0:	18c1f014 	ori	r3,r3,1984

    beq r2, r3, 1f
 10001d4:	10c00326 	beq	r2,r3,10001e4 <_start+0x30>

0:
    stw zero, (r2)
 10001d8:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001dc:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e0:	10fffd36 	bltu	r2,r3,10001d8 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e4:	100a17c0 	call	100a17c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001e8:	100a3bc0 	call	100a3bc <alt_main>

010001ec <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001ec:	003fff06 	br	10001ec <alt_after_alt_main>

010001f0 <main>:

#define keys (volatile char *) 0x0002000
#define keys_off 15

int main()
{
 10001f0:	defffb04 	addi	sp,sp,-20
 10001f4:	dfc00415 	stw	ra,16(sp)
 10001f8:	df000315 	stw	fp,12(sp)
 10001fc:	df000304 	addi	fp,sp,12
	alt_up_character_lcd_dev * char_lcd_dev;
	// open the Character LCD port
	char_lcd_dev = alt_up_character_lcd_open_dev ("/dev/character_lcd_0");
 1000200:	01004074 	movhi	r4,257
 1000204:	21330104 	addi	r4,r4,-13308
 1000208:	100b4fc0 	call	100b4fc <alt_up_character_lcd_open_dev>
 100020c:	e0bfff15 	stw	r2,-4(fp)
	if ( char_lcd_dev == NULL)
 1000210:	e0bfff17 	ldw	r2,-4(fp)
 1000214:	1004c03a 	cmpne	r2,r2,zero
 1000218:	1000041e 	bne	r2,zero,100022c <main+0x3c>
		printf ("Error: could not open character LCD device\n");
 100021c:	01004074 	movhi	r4,257
 1000220:	21330704 	addi	r4,r4,-13284
 1000224:	100036c0 	call	100036c <puts>
 1000228:	00000306 	br	1000238 <main+0x48>
	else
		printf ("Opened character LCD device\n");
 100022c:	01004074 	movhi	r4,257
 1000230:	21331204 	addi	r4,r4,-13240
 1000234:	100036c0 	call	100036c <puts>
	/* Initialize the character display */
	alt_up_character_lcd_init (char_lcd_dev);
 1000238:	e13fff17 	ldw	r4,-4(fp)
 100023c:	100b4c80 	call	100b4c8 <alt_up_character_lcd_init>
 1000240:	00000006 	br	1000244 <main+0x54>

	while(1){
		int data = IORD_8DIRECT(keys, 0);
 1000244:	00880004 	movi	r2,8192
 1000248:	10800023 	ldbuio	r2,0(r2)
 100024c:	e0bffe15 	stw	r2,-8(fp)
		if (data == keys_off){
 1000250:	e0bffe17 	ldw	r2,-8(fp)
 1000254:	108003e0 	cmpeqi	r2,r2,15
 1000258:	103ffa1e 	bne	r2,zero,1000244 <main+0x54>
			continue;
		}

		alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);
 100025c:	e13fff17 	ldw	r4,-4(fp)
 1000260:	000b883a 	mov	r5,zero
 1000264:	000d883a 	mov	r6,zero
 1000268:	100b6780 	call	100b678 <alt_up_character_lcd_set_cursor_pos>

		int i;
		for (i = 0; i < 4; ++i){
 100026c:	e03ffd15 	stw	zero,-12(fp)
 1000270:	00001206 	br	10002bc <main+0xcc>
			if ((data & (1 << i)) == 0){
 1000274:	e0fffe17 	ldw	r3,-8(fp)
 1000278:	e0bffd17 	ldw	r2,-12(fp)
 100027c:	1885d83a 	sra	r2,r3,r2
 1000280:	1080004c 	andi	r2,r2,1
 1000284:	1004c03a 	cmpne	r2,r2,zero
 1000288:	1000091e 	bne	r2,zero,10002b0 <main+0xc0>
				char str[0];
				sprintf(str, "%d", i);
 100028c:	e009883a 	mov	r4,fp
 1000290:	01404074 	movhi	r5,257
 1000294:	29731904 	addi	r5,r5,-13212
 1000298:	e1bffd17 	ldw	r6,-12(fp)
 100029c:	10003800 	call	1000380 <sprintf>
				alt_up_character_lcd_string(char_lcd_dev, str);
 10002a0:	e00b883a 	mov	r5,fp
 10002a4:	e13fff17 	ldw	r4,-4(fp)
 10002a8:	100b5b40 	call	100b5b4 <alt_up_character_lcd_string>
				break;
 10002ac:	003fe506 	br	1000244 <main+0x54>
		}

		alt_up_character_lcd_set_cursor_pos(char_lcd_dev, 0, 0);

		int i;
		for (i = 0; i < 4; ++i){
 10002b0:	e0bffd17 	ldw	r2,-12(fp)
 10002b4:	10800044 	addi	r2,r2,1
 10002b8:	e0bffd15 	stw	r2,-12(fp)
 10002bc:	e0bffd17 	ldw	r2,-12(fp)
 10002c0:	10800110 	cmplti	r2,r2,4
 10002c4:	103feb1e 	bne	r2,zero,1000274 <main+0x84>
				sprintf(str, "%d", i);
				alt_up_character_lcd_string(char_lcd_dev, str);
				break;
			}
		}
	}
 10002c8:	003fde06 	br	1000244 <main+0x54>

010002cc <_puts_r>:
 10002cc:	defff604 	addi	sp,sp,-40
 10002d0:	dc400715 	stw	r17,28(sp)
 10002d4:	2023883a 	mov	r17,r4
 10002d8:	2809883a 	mov	r4,r5
 10002dc:	dfc00915 	stw	ra,36(sp)
 10002e0:	dcc00815 	stw	r19,32(sp)
 10002e4:	2827883a 	mov	r19,r5
 10002e8:	10004540 	call	1000454 <strlen>
 10002ec:	89400217 	ldw	r5,8(r17)
 10002f0:	00c04074 	movhi	r3,257
 10002f4:	18f31a04 	addi	r3,r3,-13208
 10002f8:	01c00044 	movi	r7,1
 10002fc:	12000044 	addi	r8,r2,1
 1000300:	d8c00515 	stw	r3,20(sp)
 1000304:	d9c00615 	stw	r7,24(sp)
 1000308:	d8c00304 	addi	r3,sp,12
 100030c:	01c00084 	movi	r7,2
 1000310:	8809883a 	mov	r4,r17
 1000314:	d80d883a 	mov	r6,sp
 1000318:	d8c00015 	stw	r3,0(sp)
 100031c:	dcc00315 	stw	r19,12(sp)
 1000320:	da000215 	stw	r8,8(sp)
 1000324:	d9c00115 	stw	r7,4(sp)
 1000328:	d8800415 	stw	r2,16(sp)
 100032c:	10046a00 	call	10046a0 <__sfvwrite_r>
 1000330:	00ffffc4 	movi	r3,-1
 1000334:	10000626 	beq	r2,zero,1000350 <_puts_r+0x84>
 1000338:	1805883a 	mov	r2,r3
 100033c:	dfc00917 	ldw	ra,36(sp)
 1000340:	dcc00817 	ldw	r19,32(sp)
 1000344:	dc400717 	ldw	r17,28(sp)
 1000348:	dec00a04 	addi	sp,sp,40
 100034c:	f800283a 	ret
 1000350:	00c00284 	movi	r3,10
 1000354:	1805883a 	mov	r2,r3
 1000358:	dfc00917 	ldw	ra,36(sp)
 100035c:	dcc00817 	ldw	r19,32(sp)
 1000360:	dc400717 	ldw	r17,28(sp)
 1000364:	dec00a04 	addi	sp,sp,40
 1000368:	f800283a 	ret

0100036c <puts>:
 100036c:	00804074 	movhi	r2,257
 1000370:	10ba8304 	addi	r2,r2,-5620
 1000374:	200b883a 	mov	r5,r4
 1000378:	11000017 	ldw	r4,0(r2)
 100037c:	10002cc1 	jmpi	10002cc <_puts_r>

01000380 <sprintf>:
 1000380:	deffe504 	addi	sp,sp,-108
 1000384:	2013883a 	mov	r9,r4
 1000388:	dfc01815 	stw	ra,96(sp)
 100038c:	d9801915 	stw	r6,100(sp)
 1000390:	d9c01a15 	stw	r7,104(sp)
 1000394:	d8801904 	addi	r2,sp,100
 1000398:	d8800015 	stw	r2,0(sp)
 100039c:	00804074 	movhi	r2,257
 10003a0:	10ba8304 	addi	r2,r2,-5620
 10003a4:	11000017 	ldw	r4,0(r2)
 10003a8:	d9c00017 	ldw	r7,0(sp)
 10003ac:	00808204 	movi	r2,520
 10003b0:	00e00034 	movhi	r3,32768
 10003b4:	18ffffc4 	addi	r3,r3,-1
 10003b8:	280d883a 	mov	r6,r5
 10003bc:	d880040d 	sth	r2,16(sp)
 10003c0:	d9400104 	addi	r5,sp,4
 10003c4:	00bfffc4 	movi	r2,-1
 10003c8:	d8c00615 	stw	r3,24(sp)
 10003cc:	d8c00315 	stw	r3,12(sp)
 10003d0:	da400515 	stw	r9,20(sp)
 10003d4:	d880048d 	sth	r2,18(sp)
 10003d8:	da400115 	stw	r9,4(sp)
 10003dc:	10005200 	call	1000520 <___vfprintf_internal_r>
 10003e0:	d8c00117 	ldw	r3,4(sp)
 10003e4:	18000005 	stb	zero,0(r3)
 10003e8:	dfc01817 	ldw	ra,96(sp)
 10003ec:	dec01b04 	addi	sp,sp,108
 10003f0:	f800283a 	ret

010003f4 <_sprintf_r>:
 10003f4:	deffe604 	addi	sp,sp,-104
 10003f8:	2813883a 	mov	r9,r5
 10003fc:	dfc01815 	stw	ra,96(sp)
 1000400:	d9c01915 	stw	r7,100(sp)
 1000404:	d8801904 	addi	r2,sp,100
 1000408:	d8800015 	stw	r2,0(sp)
 100040c:	100f883a 	mov	r7,r2
 1000410:	00808204 	movi	r2,520
 1000414:	00e00034 	movhi	r3,32768
 1000418:	18ffffc4 	addi	r3,r3,-1
 100041c:	d880040d 	sth	r2,16(sp)
 1000420:	d9400104 	addi	r5,sp,4
 1000424:	00bfffc4 	movi	r2,-1
 1000428:	d8c00615 	stw	r3,24(sp)
 100042c:	d8c00315 	stw	r3,12(sp)
 1000430:	da400515 	stw	r9,20(sp)
 1000434:	d880048d 	sth	r2,18(sp)
 1000438:	da400115 	stw	r9,4(sp)
 100043c:	10005200 	call	1000520 <___vfprintf_internal_r>
 1000440:	d8c00117 	ldw	r3,4(sp)
 1000444:	18000005 	stb	zero,0(r3)
 1000448:	dfc01817 	ldw	ra,96(sp)
 100044c:	dec01a04 	addi	sp,sp,104
 1000450:	f800283a 	ret

01000454 <strlen>:
 1000454:	208000cc 	andi	r2,r4,3
 1000458:	2011883a 	mov	r8,r4
 100045c:	1000161e 	bne	r2,zero,10004b8 <strlen+0x64>
 1000460:	20c00017 	ldw	r3,0(r4)
 1000464:	017fbff4 	movhi	r5,65279
 1000468:	297fbfc4 	addi	r5,r5,-257
 100046c:	01e02074 	movhi	r7,32897
 1000470:	39e02004 	addi	r7,r7,-32640
 1000474:	1945883a 	add	r2,r3,r5
 1000478:	11c4703a 	and	r2,r2,r7
 100047c:	00c6303a 	nor	r3,zero,r3
 1000480:	1886703a 	and	r3,r3,r2
 1000484:	18000c1e 	bne	r3,zero,10004b8 <strlen+0x64>
 1000488:	280d883a 	mov	r6,r5
 100048c:	380b883a 	mov	r5,r7
 1000490:	21000104 	addi	r4,r4,4
 1000494:	20800017 	ldw	r2,0(r4)
 1000498:	1187883a 	add	r3,r2,r6
 100049c:	1946703a 	and	r3,r3,r5
 10004a0:	0084303a 	nor	r2,zero,r2
 10004a4:	10c4703a 	and	r2,r2,r3
 10004a8:	103ff926 	beq	r2,zero,1000490 <strlen+0x3c>
 10004ac:	20800007 	ldb	r2,0(r4)
 10004b0:	10000326 	beq	r2,zero,10004c0 <strlen+0x6c>
 10004b4:	21000044 	addi	r4,r4,1
 10004b8:	20800007 	ldb	r2,0(r4)
 10004bc:	103ffd1e 	bne	r2,zero,10004b4 <strlen+0x60>
 10004c0:	2205c83a 	sub	r2,r4,r8
 10004c4:	f800283a 	ret

010004c8 <__sprint_r>:
 10004c8:	30800217 	ldw	r2,8(r6)
 10004cc:	defffe04 	addi	sp,sp,-8
 10004d0:	dc000015 	stw	r16,0(sp)
 10004d4:	dfc00115 	stw	ra,4(sp)
 10004d8:	3021883a 	mov	r16,r6
 10004dc:	0007883a 	mov	r3,zero
 10004e0:	1000061e 	bne	r2,zero,10004fc <__sprint_r+0x34>
 10004e4:	1805883a 	mov	r2,r3
 10004e8:	30000115 	stw	zero,4(r6)
 10004ec:	dfc00117 	ldw	ra,4(sp)
 10004f0:	dc000017 	ldw	r16,0(sp)
 10004f4:	dec00204 	addi	sp,sp,8
 10004f8:	f800283a 	ret
 10004fc:	10046a00 	call	10046a0 <__sfvwrite_r>
 1000500:	1007883a 	mov	r3,r2
 1000504:	1805883a 	mov	r2,r3
 1000508:	80000115 	stw	zero,4(r16)
 100050c:	80000215 	stw	zero,8(r16)
 1000510:	dfc00117 	ldw	ra,4(sp)
 1000514:	dc000017 	ldw	r16,0(sp)
 1000518:	dec00204 	addi	sp,sp,8
 100051c:	f800283a 	ret

01000520 <___vfprintf_internal_r>:
 1000520:	defea404 	addi	sp,sp,-1392
 1000524:	dd815815 	stw	r22,1376(sp)
 1000528:	dc015215 	stw	r16,1352(sp)
 100052c:	d9c15115 	stw	r7,1348(sp)
 1000530:	dfc15b15 	stw	ra,1388(sp)
 1000534:	df015a15 	stw	fp,1384(sp)
 1000538:	ddc15915 	stw	r23,1380(sp)
 100053c:	dd415715 	stw	r21,1372(sp)
 1000540:	dd015615 	stw	r20,1368(sp)
 1000544:	dcc15515 	stw	r19,1364(sp)
 1000548:	dc815415 	stw	r18,1360(sp)
 100054c:	dc415315 	stw	r17,1356(sp)
 1000550:	282d883a 	mov	r22,r5
 1000554:	3021883a 	mov	r16,r6
 1000558:	d9014f15 	stw	r4,1340(sp)
 100055c:	1004cc40 	call	1004cc4 <_localeconv_r>
 1000560:	10800017 	ldw	r2,0(r2)
 1000564:	d9c15117 	ldw	r7,1348(sp)
 1000568:	d8814915 	stw	r2,1316(sp)
 100056c:	d8814f17 	ldw	r2,1340(sp)
 1000570:	10000226 	beq	r2,zero,100057c <___vfprintf_internal_r+0x5c>
 1000574:	10800e17 	ldw	r2,56(r2)
 1000578:	10020d26 	beq	r2,zero,1000db0 <___vfprintf_internal_r+0x890>
 100057c:	b080030b 	ldhu	r2,12(r22)
 1000580:	1080020c 	andi	r2,r2,8
 1000584:	10020e26 	beq	r2,zero,1000dc0 <___vfprintf_internal_r+0x8a0>
 1000588:	b0800417 	ldw	r2,16(r22)
 100058c:	10020c26 	beq	r2,zero,1000dc0 <___vfprintf_internal_r+0x8a0>
 1000590:	b200030b 	ldhu	r8,12(r22)
 1000594:	00800284 	movi	r2,10
 1000598:	40c0068c 	andi	r3,r8,26
 100059c:	18802f1e 	bne	r3,r2,100065c <___vfprintf_internal_r+0x13c>
 10005a0:	b080038f 	ldh	r2,14(r22)
 10005a4:	10002d16 	blt	r2,zero,100065c <___vfprintf_internal_r+0x13c>
 10005a8:	b240038b 	ldhu	r9,14(r22)
 10005ac:	b2800717 	ldw	r10,28(r22)
 10005b0:	b2c00917 	ldw	r11,36(r22)
 10005b4:	d9014f17 	ldw	r4,1340(sp)
 10005b8:	dc402904 	addi	r17,sp,164
 10005bc:	d8804004 	addi	r2,sp,256
 10005c0:	00c10004 	movi	r3,1024
 10005c4:	423fff4c 	andi	r8,r8,65533
 10005c8:	800d883a 	mov	r6,r16
 10005cc:	880b883a 	mov	r5,r17
 10005d0:	da002c0d 	sth	r8,176(sp)
 10005d4:	da402c8d 	sth	r9,178(sp)
 10005d8:	da803015 	stw	r10,192(sp)
 10005dc:	dac03215 	stw	r11,200(sp)
 10005e0:	d8802d15 	stw	r2,180(sp)
 10005e4:	d8c02e15 	stw	r3,184(sp)
 10005e8:	d8802915 	stw	r2,164(sp)
 10005ec:	d8c02b15 	stw	r3,172(sp)
 10005f0:	d8002f15 	stw	zero,188(sp)
 10005f4:	10005200 	call	1000520 <___vfprintf_internal_r>
 10005f8:	d8814b15 	stw	r2,1324(sp)
 10005fc:	10000416 	blt	r2,zero,1000610 <___vfprintf_internal_r+0xf0>
 1000600:	d9014f17 	ldw	r4,1340(sp)
 1000604:	880b883a 	mov	r5,r17
 1000608:	1003d3c0 	call	1003d3c <_fflush_r>
 100060c:	1002321e 	bne	r2,zero,1000ed8 <___vfprintf_internal_r+0x9b8>
 1000610:	d8802c0b 	ldhu	r2,176(sp)
 1000614:	1080100c 	andi	r2,r2,64
 1000618:	10000326 	beq	r2,zero,1000628 <___vfprintf_internal_r+0x108>
 100061c:	b080030b 	ldhu	r2,12(r22)
 1000620:	10801014 	ori	r2,r2,64
 1000624:	b080030d 	sth	r2,12(r22)
 1000628:	d8814b17 	ldw	r2,1324(sp)
 100062c:	dfc15b17 	ldw	ra,1388(sp)
 1000630:	df015a17 	ldw	fp,1384(sp)
 1000634:	ddc15917 	ldw	r23,1380(sp)
 1000638:	dd815817 	ldw	r22,1376(sp)
 100063c:	dd415717 	ldw	r21,1372(sp)
 1000640:	dd015617 	ldw	r20,1368(sp)
 1000644:	dcc15517 	ldw	r19,1364(sp)
 1000648:	dc815417 	ldw	r18,1360(sp)
 100064c:	dc415317 	ldw	r17,1356(sp)
 1000650:	dc015217 	ldw	r16,1352(sp)
 1000654:	dec15c04 	addi	sp,sp,1392
 1000658:	f800283a 	ret
 100065c:	0005883a 	mov	r2,zero
 1000660:	0007883a 	mov	r3,zero
 1000664:	dd401904 	addi	r21,sp,100
 1000668:	d8814215 	stw	r2,1288(sp)
 100066c:	802f883a 	mov	r23,r16
 1000670:	d8c14315 	stw	r3,1292(sp)
 1000674:	d8014b15 	stw	zero,1324(sp)
 1000678:	d8014815 	stw	zero,1312(sp)
 100067c:	d8014415 	stw	zero,1296(sp)
 1000680:	d8014715 	stw	zero,1308(sp)
 1000684:	dd400c15 	stw	r21,48(sp)
 1000688:	d8000e15 	stw	zero,56(sp)
 100068c:	d8000d15 	stw	zero,52(sp)
 1000690:	b8800007 	ldb	r2,0(r23)
 1000694:	10001926 	beq	r2,zero,10006fc <___vfprintf_internal_r+0x1dc>
 1000698:	00c00944 	movi	r3,37
 100069c:	10c01726 	beq	r2,r3,10006fc <___vfprintf_internal_r+0x1dc>
 10006a0:	b821883a 	mov	r16,r23
 10006a4:	00000106 	br	10006ac <___vfprintf_internal_r+0x18c>
 10006a8:	10c00326 	beq	r2,r3,10006b8 <___vfprintf_internal_r+0x198>
 10006ac:	84000044 	addi	r16,r16,1
 10006b0:	80800007 	ldb	r2,0(r16)
 10006b4:	103ffc1e 	bne	r2,zero,10006a8 <___vfprintf_internal_r+0x188>
 10006b8:	85e7c83a 	sub	r19,r16,r23
 10006bc:	98000e26 	beq	r19,zero,10006f8 <___vfprintf_internal_r+0x1d8>
 10006c0:	dc800e17 	ldw	r18,56(sp)
 10006c4:	dc400d17 	ldw	r17,52(sp)
 10006c8:	008001c4 	movi	r2,7
 10006cc:	94e5883a 	add	r18,r18,r19
 10006d0:	8c400044 	addi	r17,r17,1
 10006d4:	adc00015 	stw	r23,0(r21)
 10006d8:	dc800e15 	stw	r18,56(sp)
 10006dc:	acc00115 	stw	r19,4(r21)
 10006e0:	dc400d15 	stw	r17,52(sp)
 10006e4:	14428b16 	blt	r2,r17,1001114 <___vfprintf_internal_r+0xbf4>
 10006e8:	ad400204 	addi	r21,r21,8
 10006ec:	d9014b17 	ldw	r4,1324(sp)
 10006f0:	24c9883a 	add	r4,r4,r19
 10006f4:	d9014b15 	stw	r4,1324(sp)
 10006f8:	802f883a 	mov	r23,r16
 10006fc:	b8800007 	ldb	r2,0(r23)
 1000700:	10013c26 	beq	r2,zero,1000bf4 <___vfprintf_internal_r+0x6d4>
 1000704:	bdc00044 	addi	r23,r23,1
 1000708:	d8000405 	stb	zero,16(sp)
 100070c:	b8c00007 	ldb	r3,0(r23)
 1000710:	04ffffc4 	movi	r19,-1
 1000714:	d8014c15 	stw	zero,1328(sp)
 1000718:	d8014a15 	stw	zero,1320(sp)
 100071c:	d8c14d15 	stw	r3,1332(sp)
 1000720:	bdc00044 	addi	r23,r23,1
 1000724:	d9414d17 	ldw	r5,1332(sp)
 1000728:	00801604 	movi	r2,88
 100072c:	28fff804 	addi	r3,r5,-32
 1000730:	10c06036 	bltu	r2,r3,10008b4 <___vfprintf_internal_r+0x394>
 1000734:	18c5883a 	add	r2,r3,r3
 1000738:	1085883a 	add	r2,r2,r2
 100073c:	00c04034 	movhi	r3,256
 1000740:	18c1d404 	addi	r3,r3,1872
 1000744:	10c5883a 	add	r2,r2,r3
 1000748:	11000017 	ldw	r4,0(r2)
 100074c:	2000683a 	jmp	r4
 1000750:	010016c4 	movi	r4,91
 1000754:	010008b4 	movhi	r4,34
 1000758:	010008b4 	movhi	r4,34
 100075c:	010016b0 	cmpltui	r4,zero,90
 1000760:	010008b4 	movhi	r4,34
 1000764:	010008b4 	movhi	r4,34
 1000768:	010008b4 	movhi	r4,34
 100076c:	010008b4 	movhi	r4,34
 1000770:	010008b4 	movhi	r4,34
 1000774:	010008b4 	movhi	r4,34
 1000778:	01001490 	cmplti	r4,zero,82
 100077c:	010016a0 	cmpeqi	r4,zero,90
 1000780:	010008b4 	movhi	r4,34
 1000784:	010014a8 	cmpgeui	r4,zero,82
 1000788:	01001748 	cmpgei	r4,zero,93
 100078c:	010008b4 	movhi	r4,34
 1000790:	01001734 	movhi	r4,92
 1000794:	010016f0 	cmpltui	r4,zero,91
 1000798:	010016f0 	cmpltui	r4,zero,91
 100079c:	010016f0 	cmpltui	r4,zero,91
 10007a0:	010016f0 	cmpltui	r4,zero,91
 10007a4:	010016f0 	cmpltui	r4,zero,91
 10007a8:	010016f0 	cmpltui	r4,zero,91
 10007ac:	010016f0 	cmpltui	r4,zero,91
 10007b0:	010016f0 	cmpltui	r4,zero,91
 10007b4:	010016f0 	cmpltui	r4,zero,91
 10007b8:	010008b4 	movhi	r4,34
 10007bc:	010008b4 	movhi	r4,34
 10007c0:	010008b4 	movhi	r4,34
 10007c4:	010008b4 	movhi	r4,34
 10007c8:	010008b4 	movhi	r4,34
 10007cc:	010008b4 	movhi	r4,34
 10007d0:	010008b4 	movhi	r4,34
 10007d4:	010008b4 	movhi	r4,34
 10007d8:	010008b4 	movhi	r4,34
 10007dc:	010008b4 	movhi	r4,34
 10007e0:	01000f0c 	andi	r4,zero,60
 10007e4:	01001578 	rdprs	r4,zero,85
 10007e8:	010008b4 	movhi	r4,34
 10007ec:	01001578 	rdprs	r4,zero,85
 10007f0:	010008b4 	movhi	r4,34
 10007f4:	010008b4 	movhi	r4,34
 10007f8:	010008b4 	movhi	r4,34
 10007fc:	010008b4 	movhi	r4,34
 1000800:	010016dc 	xori	r4,zero,91
 1000804:	010008b4 	movhi	r4,34
 1000808:	010008b4 	movhi	r4,34
 100080c:	01000fc0 	call	1000fc <__alt_mem_onchip_memory2_0+0x1000fc>
 1000810:	010008b4 	movhi	r4,34
 1000814:	010008b4 	movhi	r4,34
 1000818:	010008b4 	movhi	r4,34
 100081c:	010008b4 	movhi	r4,34
 1000820:	010008b4 	movhi	r4,34
 1000824:	0100100c 	andi	r4,zero,64
 1000828:	010008b4 	movhi	r4,34
 100082c:	010008b4 	movhi	r4,34
 1000830:	0100162c 	andhi	r4,zero,88
 1000834:	010008b4 	movhi	r4,34
 1000838:	010008b4 	movhi	r4,34
 100083c:	010008b4 	movhi	r4,34
 1000840:	010008b4 	movhi	r4,34
 1000844:	010008b4 	movhi	r4,34
 1000848:	010008b4 	movhi	r4,34
 100084c:	010008b4 	movhi	r4,34
 1000850:	010008b4 	movhi	r4,34
 1000854:	010008b4 	movhi	r4,34
 1000858:	010008b4 	movhi	r4,34
 100085c:	01001600 	call	100160 <__alt_mem_onchip_memory2_0+0x100160>
 1000860:	01000f18 	cmpnei	r4,zero,60
 1000864:	01001578 	rdprs	r4,zero,85
 1000868:	01001578 	rdprs	r4,zero,85
 100086c:	01001578 	rdprs	r4,zero,85
 1000870:	01001564 	muli	r4,zero,85
 1000874:	01000f18 	cmpnei	r4,zero,60
 1000878:	010008b4 	movhi	r4,34
 100087c:	010008b4 	movhi	r4,34
 1000880:	010014ec 	andhi	r4,zero,83
 1000884:	010008b4 	movhi	r4,34
 1000888:	010014bc 	xorhi	r4,zero,82
 100088c:	01000fcc 	andi	r4,zero,63
 1000890:	0100151c 	xori	r4,zero,84
 1000894:	01001508 	cmpgei	r4,zero,84
 1000898:	010008b4 	movhi	r4,34
 100089c:	010017b0 	cmpltui	r4,zero,94
 10008a0:	010008b4 	movhi	r4,34
 10008a4:	01001018 	cmpnei	r4,zero,64
 10008a8:	010008b4 	movhi	r4,34
 10008ac:	010008b4 	movhi	r4,34
 10008b0:	01001690 	cmplti	r4,zero,90
 10008b4:	d9014d17 	ldw	r4,1332(sp)
 10008b8:	2000ce26 	beq	r4,zero,1000bf4 <___vfprintf_internal_r+0x6d4>
 10008bc:	01400044 	movi	r5,1
 10008c0:	d9800f04 	addi	r6,sp,60
 10008c4:	d9c14015 	stw	r7,1280(sp)
 10008c8:	d9414515 	stw	r5,1300(sp)
 10008cc:	d9814115 	stw	r6,1284(sp)
 10008d0:	280f883a 	mov	r7,r5
 10008d4:	d9000f05 	stb	r4,60(sp)
 10008d8:	d8000405 	stb	zero,16(sp)
 10008dc:	d8014615 	stw	zero,1304(sp)
 10008e0:	d8c14c17 	ldw	r3,1328(sp)
 10008e4:	1880008c 	andi	r2,r3,2
 10008e8:	1005003a 	cmpeq	r2,r2,zero
 10008ec:	d8815015 	stw	r2,1344(sp)
 10008f0:	1000031e 	bne	r2,zero,1000900 <___vfprintf_internal_r+0x3e0>
 10008f4:	d9014517 	ldw	r4,1300(sp)
 10008f8:	21000084 	addi	r4,r4,2
 10008fc:	d9014515 	stw	r4,1300(sp)
 1000900:	d9414c17 	ldw	r5,1328(sp)
 1000904:	2940210c 	andi	r5,r5,132
 1000908:	d9414e15 	stw	r5,1336(sp)
 100090c:	28002d1e 	bne	r5,zero,10009c4 <___vfprintf_internal_r+0x4a4>
 1000910:	d9814a17 	ldw	r6,1320(sp)
 1000914:	d8814517 	ldw	r2,1300(sp)
 1000918:	30a1c83a 	sub	r16,r6,r2
 100091c:	0400290e 	bge	zero,r16,10009c4 <___vfprintf_internal_r+0x4a4>
 1000920:	00800404 	movi	r2,16
 1000924:	14045e0e 	bge	r2,r16,1001aa0 <___vfprintf_internal_r+0x1580>
 1000928:	dc800e17 	ldw	r18,56(sp)
 100092c:	dc400d17 	ldw	r17,52(sp)
 1000930:	1027883a 	mov	r19,r2
 1000934:	07004074 	movhi	fp,257
 1000938:	e7333684 	addi	fp,fp,-13094
 100093c:	050001c4 	movi	r20,7
 1000940:	00000306 	br	1000950 <___vfprintf_internal_r+0x430>
 1000944:	843ffc04 	addi	r16,r16,-16
 1000948:	ad400204 	addi	r21,r21,8
 100094c:	9c00130e 	bge	r19,r16,100099c <___vfprintf_internal_r+0x47c>
 1000950:	94800404 	addi	r18,r18,16
 1000954:	8c400044 	addi	r17,r17,1
 1000958:	af000015 	stw	fp,0(r21)
 100095c:	acc00115 	stw	r19,4(r21)
 1000960:	dc800e15 	stw	r18,56(sp)
 1000964:	dc400d15 	stw	r17,52(sp)
 1000968:	a47ff60e 	bge	r20,r17,1000944 <___vfprintf_internal_r+0x424>
 100096c:	d9014f17 	ldw	r4,1340(sp)
 1000970:	b00b883a 	mov	r5,r22
 1000974:	d9800c04 	addi	r6,sp,48
 1000978:	d9c15115 	stw	r7,1348(sp)
 100097c:	10004c80 	call	10004c8 <__sprint_r>
 1000980:	d9c15117 	ldw	r7,1348(sp)
 1000984:	10009e1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1000988:	843ffc04 	addi	r16,r16,-16
 100098c:	dc800e17 	ldw	r18,56(sp)
 1000990:	dc400d17 	ldw	r17,52(sp)
 1000994:	dd401904 	addi	r21,sp,100
 1000998:	9c3fed16 	blt	r19,r16,1000950 <___vfprintf_internal_r+0x430>
 100099c:	9425883a 	add	r18,r18,r16
 10009a0:	8c400044 	addi	r17,r17,1
 10009a4:	008001c4 	movi	r2,7
 10009a8:	af000015 	stw	fp,0(r21)
 10009ac:	ac000115 	stw	r16,4(r21)
 10009b0:	dc800e15 	stw	r18,56(sp)
 10009b4:	dc400d15 	stw	r17,52(sp)
 10009b8:	1441f516 	blt	r2,r17,1001190 <___vfprintf_internal_r+0xc70>
 10009bc:	ad400204 	addi	r21,r21,8
 10009c0:	00000206 	br	10009cc <___vfprintf_internal_r+0x4ac>
 10009c4:	dc800e17 	ldw	r18,56(sp)
 10009c8:	dc400d17 	ldw	r17,52(sp)
 10009cc:	d8800407 	ldb	r2,16(sp)
 10009d0:	10000b26 	beq	r2,zero,1000a00 <___vfprintf_internal_r+0x4e0>
 10009d4:	00800044 	movi	r2,1
 10009d8:	94800044 	addi	r18,r18,1
 10009dc:	8c400044 	addi	r17,r17,1
 10009e0:	a8800115 	stw	r2,4(r21)
 10009e4:	d8c00404 	addi	r3,sp,16
 10009e8:	008001c4 	movi	r2,7
 10009ec:	a8c00015 	stw	r3,0(r21)
 10009f0:	dc800e15 	stw	r18,56(sp)
 10009f4:	dc400d15 	stw	r17,52(sp)
 10009f8:	1441da16 	blt	r2,r17,1001164 <___vfprintf_internal_r+0xc44>
 10009fc:	ad400204 	addi	r21,r21,8
 1000a00:	d9015017 	ldw	r4,1344(sp)
 1000a04:	20000b1e 	bne	r4,zero,1000a34 <___vfprintf_internal_r+0x514>
 1000a08:	d8800444 	addi	r2,sp,17
 1000a0c:	94800084 	addi	r18,r18,2
 1000a10:	8c400044 	addi	r17,r17,1
 1000a14:	a8800015 	stw	r2,0(r21)
 1000a18:	00c00084 	movi	r3,2
 1000a1c:	008001c4 	movi	r2,7
 1000a20:	a8c00115 	stw	r3,4(r21)
 1000a24:	dc800e15 	stw	r18,56(sp)
 1000a28:	dc400d15 	stw	r17,52(sp)
 1000a2c:	1441c216 	blt	r2,r17,1001138 <___vfprintf_internal_r+0xc18>
 1000a30:	ad400204 	addi	r21,r21,8
 1000a34:	d9414e17 	ldw	r5,1336(sp)
 1000a38:	00802004 	movi	r2,128
 1000a3c:	2880b126 	beq	r5,r2,1000d04 <___vfprintf_internal_r+0x7e4>
 1000a40:	d8c14617 	ldw	r3,1304(sp)
 1000a44:	19e1c83a 	sub	r16,r3,r7
 1000a48:	0400260e 	bge	zero,r16,1000ae4 <___vfprintf_internal_r+0x5c4>
 1000a4c:	00800404 	movi	r2,16
 1000a50:	1403cf0e 	bge	r2,r16,1001990 <___vfprintf_internal_r+0x1470>
 1000a54:	1027883a 	mov	r19,r2
 1000a58:	07004074 	movhi	fp,257
 1000a5c:	e7333284 	addi	fp,fp,-13110
 1000a60:	050001c4 	movi	r20,7
 1000a64:	00000306 	br	1000a74 <___vfprintf_internal_r+0x554>
 1000a68:	843ffc04 	addi	r16,r16,-16
 1000a6c:	ad400204 	addi	r21,r21,8
 1000a70:	9c00130e 	bge	r19,r16,1000ac0 <___vfprintf_internal_r+0x5a0>
 1000a74:	94800404 	addi	r18,r18,16
 1000a78:	8c400044 	addi	r17,r17,1
 1000a7c:	af000015 	stw	fp,0(r21)
 1000a80:	acc00115 	stw	r19,4(r21)
 1000a84:	dc800e15 	stw	r18,56(sp)
 1000a88:	dc400d15 	stw	r17,52(sp)
 1000a8c:	a47ff60e 	bge	r20,r17,1000a68 <___vfprintf_internal_r+0x548>
 1000a90:	d9014f17 	ldw	r4,1340(sp)
 1000a94:	b00b883a 	mov	r5,r22
 1000a98:	d9800c04 	addi	r6,sp,48
 1000a9c:	d9c15115 	stw	r7,1348(sp)
 1000aa0:	10004c80 	call	10004c8 <__sprint_r>
 1000aa4:	d9c15117 	ldw	r7,1348(sp)
 1000aa8:	1000551e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1000aac:	843ffc04 	addi	r16,r16,-16
 1000ab0:	dc800e17 	ldw	r18,56(sp)
 1000ab4:	dc400d17 	ldw	r17,52(sp)
 1000ab8:	dd401904 	addi	r21,sp,100
 1000abc:	9c3fed16 	blt	r19,r16,1000a74 <___vfprintf_internal_r+0x554>
 1000ac0:	9425883a 	add	r18,r18,r16
 1000ac4:	8c400044 	addi	r17,r17,1
 1000ac8:	008001c4 	movi	r2,7
 1000acc:	af000015 	stw	fp,0(r21)
 1000ad0:	ac000115 	stw	r16,4(r21)
 1000ad4:	dc800e15 	stw	r18,56(sp)
 1000ad8:	dc400d15 	stw	r17,52(sp)
 1000adc:	14418216 	blt	r2,r17,10010e8 <___vfprintf_internal_r+0xbc8>
 1000ae0:	ad400204 	addi	r21,r21,8
 1000ae4:	d9014c17 	ldw	r4,1328(sp)
 1000ae8:	2080400c 	andi	r2,r4,256
 1000aec:	10004a1e 	bne	r2,zero,1000c18 <___vfprintf_internal_r+0x6f8>
 1000af0:	d9414117 	ldw	r5,1284(sp)
 1000af4:	91e5883a 	add	r18,r18,r7
 1000af8:	8c400044 	addi	r17,r17,1
 1000afc:	008001c4 	movi	r2,7
 1000b00:	a9400015 	stw	r5,0(r21)
 1000b04:	a9c00115 	stw	r7,4(r21)
 1000b08:	dc800e15 	stw	r18,56(sp)
 1000b0c:	dc400d15 	stw	r17,52(sp)
 1000b10:	14416716 	blt	r2,r17,10010b0 <___vfprintf_internal_r+0xb90>
 1000b14:	a8c00204 	addi	r3,r21,8
 1000b18:	d9814c17 	ldw	r6,1328(sp)
 1000b1c:	3080010c 	andi	r2,r6,4
 1000b20:	10002826 	beq	r2,zero,1000bc4 <___vfprintf_internal_r+0x6a4>
 1000b24:	d8814a17 	ldw	r2,1320(sp)
 1000b28:	d9014517 	ldw	r4,1300(sp)
 1000b2c:	1121c83a 	sub	r16,r2,r4
 1000b30:	0400240e 	bge	zero,r16,1000bc4 <___vfprintf_internal_r+0x6a4>
 1000b34:	00800404 	movi	r2,16
 1000b38:	1404550e 	bge	r2,r16,1001c90 <___vfprintf_internal_r+0x1770>
 1000b3c:	dc400d17 	ldw	r17,52(sp)
 1000b40:	1027883a 	mov	r19,r2
 1000b44:	07004074 	movhi	fp,257
 1000b48:	e7333684 	addi	fp,fp,-13094
 1000b4c:	050001c4 	movi	r20,7
 1000b50:	00000306 	br	1000b60 <___vfprintf_internal_r+0x640>
 1000b54:	843ffc04 	addi	r16,r16,-16
 1000b58:	18c00204 	addi	r3,r3,8
 1000b5c:	9c00110e 	bge	r19,r16,1000ba4 <___vfprintf_internal_r+0x684>
 1000b60:	94800404 	addi	r18,r18,16
 1000b64:	8c400044 	addi	r17,r17,1
 1000b68:	1f000015 	stw	fp,0(r3)
 1000b6c:	1cc00115 	stw	r19,4(r3)
 1000b70:	dc800e15 	stw	r18,56(sp)
 1000b74:	dc400d15 	stw	r17,52(sp)
 1000b78:	a47ff60e 	bge	r20,r17,1000b54 <___vfprintf_internal_r+0x634>
 1000b7c:	d9014f17 	ldw	r4,1340(sp)
 1000b80:	b00b883a 	mov	r5,r22
 1000b84:	d9800c04 	addi	r6,sp,48
 1000b88:	10004c80 	call	10004c8 <__sprint_r>
 1000b8c:	10001c1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1000b90:	843ffc04 	addi	r16,r16,-16
 1000b94:	dc800e17 	ldw	r18,56(sp)
 1000b98:	dc400d17 	ldw	r17,52(sp)
 1000b9c:	d8c01904 	addi	r3,sp,100
 1000ba0:	9c3fef16 	blt	r19,r16,1000b60 <___vfprintf_internal_r+0x640>
 1000ba4:	9425883a 	add	r18,r18,r16
 1000ba8:	8c400044 	addi	r17,r17,1
 1000bac:	008001c4 	movi	r2,7
 1000bb0:	1f000015 	stw	fp,0(r3)
 1000bb4:	1c000115 	stw	r16,4(r3)
 1000bb8:	dc800e15 	stw	r18,56(sp)
 1000bbc:	dc400d15 	stw	r17,52(sp)
 1000bc0:	1440cb16 	blt	r2,r17,1000ef0 <___vfprintf_internal_r+0x9d0>
 1000bc4:	d8814a17 	ldw	r2,1320(sp)
 1000bc8:	d9414517 	ldw	r5,1300(sp)
 1000bcc:	1140010e 	bge	r2,r5,1000bd4 <___vfprintf_internal_r+0x6b4>
 1000bd0:	2805883a 	mov	r2,r5
 1000bd4:	d9814b17 	ldw	r6,1324(sp)
 1000bd8:	308d883a 	add	r6,r6,r2
 1000bdc:	d9814b15 	stw	r6,1324(sp)
 1000be0:	90013b1e 	bne	r18,zero,10010d0 <___vfprintf_internal_r+0xbb0>
 1000be4:	d9c14017 	ldw	r7,1280(sp)
 1000be8:	dd401904 	addi	r21,sp,100
 1000bec:	d8000d15 	stw	zero,52(sp)
 1000bf0:	003ea706 	br	1000690 <___vfprintf_internal_r+0x170>
 1000bf4:	d8800e17 	ldw	r2,56(sp)
 1000bf8:	1005451e 	bne	r2,zero,1002110 <___vfprintf_internal_r+0x1bf0>
 1000bfc:	d8000d15 	stw	zero,52(sp)
 1000c00:	b080030b 	ldhu	r2,12(r22)
 1000c04:	1080100c 	andi	r2,r2,64
 1000c08:	103e8726 	beq	r2,zero,1000628 <___vfprintf_internal_r+0x108>
 1000c0c:	00bfffc4 	movi	r2,-1
 1000c10:	d8814b15 	stw	r2,1324(sp)
 1000c14:	003e8406 	br	1000628 <___vfprintf_internal_r+0x108>
 1000c18:	d9814d17 	ldw	r6,1332(sp)
 1000c1c:	00801944 	movi	r2,101
 1000c20:	11806e16 	blt	r2,r6,1000ddc <___vfprintf_internal_r+0x8bc>
 1000c24:	d9414717 	ldw	r5,1308(sp)
 1000c28:	00c00044 	movi	r3,1
 1000c2c:	1943490e 	bge	r3,r5,1001954 <___vfprintf_internal_r+0x1434>
 1000c30:	d8814117 	ldw	r2,1284(sp)
 1000c34:	94800044 	addi	r18,r18,1
 1000c38:	8c400044 	addi	r17,r17,1
 1000c3c:	a8800015 	stw	r2,0(r21)
 1000c40:	008001c4 	movi	r2,7
 1000c44:	a8c00115 	stw	r3,4(r21)
 1000c48:	dc800e15 	stw	r18,56(sp)
 1000c4c:	dc400d15 	stw	r17,52(sp)
 1000c50:	1441ca16 	blt	r2,r17,100137c <___vfprintf_internal_r+0xe5c>
 1000c54:	a8c00204 	addi	r3,r21,8
 1000c58:	d9014917 	ldw	r4,1316(sp)
 1000c5c:	00800044 	movi	r2,1
 1000c60:	94800044 	addi	r18,r18,1
 1000c64:	8c400044 	addi	r17,r17,1
 1000c68:	18800115 	stw	r2,4(r3)
 1000c6c:	008001c4 	movi	r2,7
 1000c70:	19000015 	stw	r4,0(r3)
 1000c74:	dc800e15 	stw	r18,56(sp)
 1000c78:	dc400d15 	stw	r17,52(sp)
 1000c7c:	1441b616 	blt	r2,r17,1001358 <___vfprintf_internal_r+0xe38>
 1000c80:	1cc00204 	addi	r19,r3,8
 1000c84:	d9014217 	ldw	r4,1288(sp)
 1000c88:	d9414317 	ldw	r5,1292(sp)
 1000c8c:	000d883a 	mov	r6,zero
 1000c90:	000f883a 	mov	r7,zero
 1000c94:	1008fd40 	call	1008fd4 <__nedf2>
 1000c98:	10017426 	beq	r2,zero,100126c <___vfprintf_internal_r+0xd4c>
 1000c9c:	d9414717 	ldw	r5,1308(sp)
 1000ca0:	d9814117 	ldw	r6,1284(sp)
 1000ca4:	8c400044 	addi	r17,r17,1
 1000ca8:	2c85883a 	add	r2,r5,r18
 1000cac:	14bfffc4 	addi	r18,r2,-1
 1000cb0:	28bfffc4 	addi	r2,r5,-1
 1000cb4:	30c00044 	addi	r3,r6,1
 1000cb8:	98800115 	stw	r2,4(r19)
 1000cbc:	008001c4 	movi	r2,7
 1000cc0:	98c00015 	stw	r3,0(r19)
 1000cc4:	dc800e15 	stw	r18,56(sp)
 1000cc8:	dc400d15 	stw	r17,52(sp)
 1000ccc:	14418e16 	blt	r2,r17,1001308 <___vfprintf_internal_r+0xde8>
 1000cd0:	9cc00204 	addi	r19,r19,8
 1000cd4:	d9414817 	ldw	r5,1312(sp)
 1000cd8:	d8800804 	addi	r2,sp,32
 1000cdc:	8c400044 	addi	r17,r17,1
 1000ce0:	9165883a 	add	r18,r18,r5
 1000ce4:	98800015 	stw	r2,0(r19)
 1000ce8:	008001c4 	movi	r2,7
 1000cec:	99400115 	stw	r5,4(r19)
 1000cf0:	dc800e15 	stw	r18,56(sp)
 1000cf4:	dc400d15 	stw	r17,52(sp)
 1000cf8:	1440ed16 	blt	r2,r17,10010b0 <___vfprintf_internal_r+0xb90>
 1000cfc:	98c00204 	addi	r3,r19,8
 1000d00:	003f8506 	br	1000b18 <___vfprintf_internal_r+0x5f8>
 1000d04:	d9814a17 	ldw	r6,1320(sp)
 1000d08:	d8814517 	ldw	r2,1300(sp)
 1000d0c:	30a1c83a 	sub	r16,r6,r2
 1000d10:	043f4b0e 	bge	zero,r16,1000a40 <___vfprintf_internal_r+0x520>
 1000d14:	00800404 	movi	r2,16
 1000d18:	14043a0e 	bge	r2,r16,1001e04 <___vfprintf_internal_r+0x18e4>
 1000d1c:	1027883a 	mov	r19,r2
 1000d20:	07004074 	movhi	fp,257
 1000d24:	e7333284 	addi	fp,fp,-13110
 1000d28:	050001c4 	movi	r20,7
 1000d2c:	00000306 	br	1000d3c <___vfprintf_internal_r+0x81c>
 1000d30:	843ffc04 	addi	r16,r16,-16
 1000d34:	ad400204 	addi	r21,r21,8
 1000d38:	9c00130e 	bge	r19,r16,1000d88 <___vfprintf_internal_r+0x868>
 1000d3c:	94800404 	addi	r18,r18,16
 1000d40:	8c400044 	addi	r17,r17,1
 1000d44:	af000015 	stw	fp,0(r21)
 1000d48:	acc00115 	stw	r19,4(r21)
 1000d4c:	dc800e15 	stw	r18,56(sp)
 1000d50:	dc400d15 	stw	r17,52(sp)
 1000d54:	a47ff60e 	bge	r20,r17,1000d30 <___vfprintf_internal_r+0x810>
 1000d58:	d9014f17 	ldw	r4,1340(sp)
 1000d5c:	b00b883a 	mov	r5,r22
 1000d60:	d9800c04 	addi	r6,sp,48
 1000d64:	d9c15115 	stw	r7,1348(sp)
 1000d68:	10004c80 	call	10004c8 <__sprint_r>
 1000d6c:	d9c15117 	ldw	r7,1348(sp)
 1000d70:	103fa31e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1000d74:	843ffc04 	addi	r16,r16,-16
 1000d78:	dc800e17 	ldw	r18,56(sp)
 1000d7c:	dc400d17 	ldw	r17,52(sp)
 1000d80:	dd401904 	addi	r21,sp,100
 1000d84:	9c3fed16 	blt	r19,r16,1000d3c <___vfprintf_internal_r+0x81c>
 1000d88:	9425883a 	add	r18,r18,r16
 1000d8c:	8c400044 	addi	r17,r17,1
 1000d90:	008001c4 	movi	r2,7
 1000d94:	af000015 	stw	fp,0(r21)
 1000d98:	ac000115 	stw	r16,4(r21)
 1000d9c:	dc800e15 	stw	r18,56(sp)
 1000da0:	dc400d15 	stw	r17,52(sp)
 1000da4:	14416116 	blt	r2,r17,100132c <___vfprintf_internal_r+0xe0c>
 1000da8:	ad400204 	addi	r21,r21,8
 1000dac:	003f2406 	br	1000a40 <___vfprintf_internal_r+0x520>
 1000db0:	d9014f17 	ldw	r4,1340(sp)
 1000db4:	1003fd40 	call	1003fd4 <__sinit>
 1000db8:	d9c15117 	ldw	r7,1348(sp)
 1000dbc:	003def06 	br	100057c <___vfprintf_internal_r+0x5c>
 1000dc0:	d9014f17 	ldw	r4,1340(sp)
 1000dc4:	b00b883a 	mov	r5,r22
 1000dc8:	d9c15115 	stw	r7,1348(sp)
 1000dcc:	10024080 	call	1002408 <__swsetup_r>
 1000dd0:	d9c15117 	ldw	r7,1348(sp)
 1000dd4:	103dee26 	beq	r2,zero,1000590 <___vfprintf_internal_r+0x70>
 1000dd8:	003f8c06 	br	1000c0c <___vfprintf_internal_r+0x6ec>
 1000ddc:	d9014217 	ldw	r4,1288(sp)
 1000de0:	d9414317 	ldw	r5,1292(sp)
 1000de4:	000d883a 	mov	r6,zero
 1000de8:	000f883a 	mov	r7,zero
 1000dec:	1008f4c0 	call	1008f4c <__eqdf2>
 1000df0:	1000f21e 	bne	r2,zero,10011bc <___vfprintf_internal_r+0xc9c>
 1000df4:	00804074 	movhi	r2,257
 1000df8:	10b33204 	addi	r2,r2,-13112
 1000dfc:	94800044 	addi	r18,r18,1
 1000e00:	8c400044 	addi	r17,r17,1
 1000e04:	a8800015 	stw	r2,0(r21)
 1000e08:	00c00044 	movi	r3,1
 1000e0c:	008001c4 	movi	r2,7
 1000e10:	a8c00115 	stw	r3,4(r21)
 1000e14:	dc800e15 	stw	r18,56(sp)
 1000e18:	dc400d15 	stw	r17,52(sp)
 1000e1c:	14430016 	blt	r2,r17,1001a20 <___vfprintf_internal_r+0x1500>
 1000e20:	a8c00204 	addi	r3,r21,8
 1000e24:	d8800517 	ldw	r2,20(sp)
 1000e28:	d9014717 	ldw	r4,1308(sp)
 1000e2c:	11015c0e 	bge	r2,r4,10013a0 <___vfprintf_internal_r+0xe80>
 1000e30:	dc400d17 	ldw	r17,52(sp)
 1000e34:	d9814917 	ldw	r6,1316(sp)
 1000e38:	00800044 	movi	r2,1
 1000e3c:	94800044 	addi	r18,r18,1
 1000e40:	8c400044 	addi	r17,r17,1
 1000e44:	18800115 	stw	r2,4(r3)
 1000e48:	008001c4 	movi	r2,7
 1000e4c:	19800015 	stw	r6,0(r3)
 1000e50:	dc800e15 	stw	r18,56(sp)
 1000e54:	dc400d15 	stw	r17,52(sp)
 1000e58:	14431616 	blt	r2,r17,1001ab4 <___vfprintf_internal_r+0x1594>
 1000e5c:	18c00204 	addi	r3,r3,8
 1000e60:	d8814717 	ldw	r2,1308(sp)
 1000e64:	143fffc4 	addi	r16,r2,-1
 1000e68:	043f2b0e 	bge	zero,r16,1000b18 <___vfprintf_internal_r+0x5f8>
 1000e6c:	00800404 	movi	r2,16
 1000e70:	1402a80e 	bge	r2,r16,1001914 <___vfprintf_internal_r+0x13f4>
 1000e74:	dc400d17 	ldw	r17,52(sp)
 1000e78:	1027883a 	mov	r19,r2
 1000e7c:	07004074 	movhi	fp,257
 1000e80:	e7333284 	addi	fp,fp,-13110
 1000e84:	050001c4 	movi	r20,7
 1000e88:	00000306 	br	1000e98 <___vfprintf_internal_r+0x978>
 1000e8c:	18c00204 	addi	r3,r3,8
 1000e90:	843ffc04 	addi	r16,r16,-16
 1000e94:	9c02a20e 	bge	r19,r16,1001920 <___vfprintf_internal_r+0x1400>
 1000e98:	94800404 	addi	r18,r18,16
 1000e9c:	8c400044 	addi	r17,r17,1
 1000ea0:	1f000015 	stw	fp,0(r3)
 1000ea4:	1cc00115 	stw	r19,4(r3)
 1000ea8:	dc800e15 	stw	r18,56(sp)
 1000eac:	dc400d15 	stw	r17,52(sp)
 1000eb0:	a47ff60e 	bge	r20,r17,1000e8c <___vfprintf_internal_r+0x96c>
 1000eb4:	d9014f17 	ldw	r4,1340(sp)
 1000eb8:	b00b883a 	mov	r5,r22
 1000ebc:	d9800c04 	addi	r6,sp,48
 1000ec0:	10004c80 	call	10004c8 <__sprint_r>
 1000ec4:	103f4e1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1000ec8:	dc800e17 	ldw	r18,56(sp)
 1000ecc:	dc400d17 	ldw	r17,52(sp)
 1000ed0:	d8c01904 	addi	r3,sp,100
 1000ed4:	003fee06 	br	1000e90 <___vfprintf_internal_r+0x970>
 1000ed8:	d8802c0b 	ldhu	r2,176(sp)
 1000edc:	00ffffc4 	movi	r3,-1
 1000ee0:	d8c14b15 	stw	r3,1324(sp)
 1000ee4:	1080100c 	andi	r2,r2,64
 1000ee8:	103dcc1e 	bne	r2,zero,100061c <___vfprintf_internal_r+0xfc>
 1000eec:	003dce06 	br	1000628 <___vfprintf_internal_r+0x108>
 1000ef0:	d9014f17 	ldw	r4,1340(sp)
 1000ef4:	b00b883a 	mov	r5,r22
 1000ef8:	d9800c04 	addi	r6,sp,48
 1000efc:	10004c80 	call	10004c8 <__sprint_r>
 1000f00:	103f3f1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1000f04:	dc800e17 	ldw	r18,56(sp)
 1000f08:	003f2e06 	br	1000bc4 <___vfprintf_internal_r+0x6a4>
 1000f0c:	d9414c17 	ldw	r5,1328(sp)
 1000f10:	29400414 	ori	r5,r5,16
 1000f14:	d9414c15 	stw	r5,1328(sp)
 1000f18:	d9814c17 	ldw	r6,1328(sp)
 1000f1c:	3080080c 	andi	r2,r6,32
 1000f20:	10014f1e 	bne	r2,zero,1001460 <___vfprintf_internal_r+0xf40>
 1000f24:	d8c14c17 	ldw	r3,1328(sp)
 1000f28:	1880040c 	andi	r2,r3,16
 1000f2c:	1002f01e 	bne	r2,zero,1001af0 <___vfprintf_internal_r+0x15d0>
 1000f30:	d9014c17 	ldw	r4,1328(sp)
 1000f34:	2080100c 	andi	r2,r4,64
 1000f38:	1002ed26 	beq	r2,zero,1001af0 <___vfprintf_internal_r+0x15d0>
 1000f3c:	3880000f 	ldh	r2,0(r7)
 1000f40:	39c00104 	addi	r7,r7,4
 1000f44:	d9c14015 	stw	r7,1280(sp)
 1000f48:	1023d7fa 	srai	r17,r2,31
 1000f4c:	1021883a 	mov	r16,r2
 1000f50:	88037816 	blt	r17,zero,1001d34 <___vfprintf_internal_r+0x1814>
 1000f54:	01000044 	movi	r4,1
 1000f58:	98000416 	blt	r19,zero,1000f6c <___vfprintf_internal_r+0xa4c>
 1000f5c:	d8c14c17 	ldw	r3,1328(sp)
 1000f60:	00bfdfc4 	movi	r2,-129
 1000f64:	1886703a 	and	r3,r3,r2
 1000f68:	d8c14c15 	stw	r3,1328(sp)
 1000f6c:	8444b03a 	or	r2,r16,r17
 1000f70:	10022c1e 	bne	r2,zero,1001824 <___vfprintf_internal_r+0x1304>
 1000f74:	98022b1e 	bne	r19,zero,1001824 <___vfprintf_internal_r+0x1304>
 1000f78:	20803fcc 	andi	r2,r4,255
 1000f7c:	1002a126 	beq	r2,zero,1001a04 <___vfprintf_internal_r+0x14e4>
 1000f80:	d8c01904 	addi	r3,sp,100
 1000f84:	dd000f04 	addi	r20,sp,60
 1000f88:	d8c14115 	stw	r3,1284(sp)
 1000f8c:	d8c14117 	ldw	r3,1284(sp)
 1000f90:	dcc14515 	stw	r19,1300(sp)
 1000f94:	a0c5c83a 	sub	r2,r20,r3
 1000f98:	11c00a04 	addi	r7,r2,40
 1000f9c:	99c0010e 	bge	r19,r7,1000fa4 <___vfprintf_internal_r+0xa84>
 1000fa0:	d9c14515 	stw	r7,1300(sp)
 1000fa4:	dcc14615 	stw	r19,1304(sp)
 1000fa8:	d8800407 	ldb	r2,16(sp)
 1000fac:	103e4c26 	beq	r2,zero,10008e0 <___vfprintf_internal_r+0x3c0>
 1000fb0:	d8814517 	ldw	r2,1300(sp)
 1000fb4:	10800044 	addi	r2,r2,1
 1000fb8:	d8814515 	stw	r2,1300(sp)
 1000fbc:	003e4806 	br	10008e0 <___vfprintf_internal_r+0x3c0>
 1000fc0:	d9814c17 	ldw	r6,1328(sp)
 1000fc4:	31800414 	ori	r6,r6,16
 1000fc8:	d9814c15 	stw	r6,1328(sp)
 1000fcc:	d8c14c17 	ldw	r3,1328(sp)
 1000fd0:	1880080c 	andi	r2,r3,32
 1000fd4:	1001271e 	bne	r2,zero,1001474 <___vfprintf_internal_r+0xf54>
 1000fd8:	d9414c17 	ldw	r5,1328(sp)
 1000fdc:	2880040c 	andi	r2,r5,16
 1000fe0:	1002bc1e 	bne	r2,zero,1001ad4 <___vfprintf_internal_r+0x15b4>
 1000fe4:	d9814c17 	ldw	r6,1328(sp)
 1000fe8:	3080100c 	andi	r2,r6,64
 1000fec:	1002b926 	beq	r2,zero,1001ad4 <___vfprintf_internal_r+0x15b4>
 1000ff0:	3c00000b 	ldhu	r16,0(r7)
 1000ff4:	0009883a 	mov	r4,zero
 1000ff8:	39c00104 	addi	r7,r7,4
 1000ffc:	0023883a 	mov	r17,zero
 1001000:	d9c14015 	stw	r7,1280(sp)
 1001004:	d8000405 	stb	zero,16(sp)
 1001008:	003fd306 	br	1000f58 <___vfprintf_internal_r+0xa38>
 100100c:	d9014c17 	ldw	r4,1328(sp)
 1001010:	21000414 	ori	r4,r4,16
 1001014:	d9014c15 	stw	r4,1328(sp)
 1001018:	d9414c17 	ldw	r5,1328(sp)
 100101c:	2880080c 	andi	r2,r5,32
 1001020:	1001081e 	bne	r2,zero,1001444 <___vfprintf_internal_r+0xf24>
 1001024:	d8c14c17 	ldw	r3,1328(sp)
 1001028:	1880040c 	andi	r2,r3,16
 100102c:	1002b61e 	bne	r2,zero,1001b08 <___vfprintf_internal_r+0x15e8>
 1001030:	d9014c17 	ldw	r4,1328(sp)
 1001034:	2080100c 	andi	r2,r4,64
 1001038:	1002b326 	beq	r2,zero,1001b08 <___vfprintf_internal_r+0x15e8>
 100103c:	3c00000b 	ldhu	r16,0(r7)
 1001040:	01000044 	movi	r4,1
 1001044:	39c00104 	addi	r7,r7,4
 1001048:	0023883a 	mov	r17,zero
 100104c:	d9c14015 	stw	r7,1280(sp)
 1001050:	d8000405 	stb	zero,16(sp)
 1001054:	003fc006 	br	1000f58 <___vfprintf_internal_r+0xa38>
 1001058:	d9014f17 	ldw	r4,1340(sp)
 100105c:	b00b883a 	mov	r5,r22
 1001060:	d9800c04 	addi	r6,sp,48
 1001064:	10004c80 	call	10004c8 <__sprint_r>
 1001068:	103ee51e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 100106c:	dc800e17 	ldw	r18,56(sp)
 1001070:	d8c01904 	addi	r3,sp,100
 1001074:	d9814c17 	ldw	r6,1328(sp)
 1001078:	3080004c 	andi	r2,r6,1
 100107c:	1005003a 	cmpeq	r2,r2,zero
 1001080:	103ea51e 	bne	r2,zero,1000b18 <___vfprintf_internal_r+0x5f8>
 1001084:	00800044 	movi	r2,1
 1001088:	dc400d17 	ldw	r17,52(sp)
 100108c:	18800115 	stw	r2,4(r3)
 1001090:	d8814917 	ldw	r2,1316(sp)
 1001094:	94800044 	addi	r18,r18,1
 1001098:	8c400044 	addi	r17,r17,1
 100109c:	18800015 	stw	r2,0(r3)
 10010a0:	008001c4 	movi	r2,7
 10010a4:	dc800e15 	stw	r18,56(sp)
 10010a8:	dc400d15 	stw	r17,52(sp)
 10010ac:	1442240e 	bge	r2,r17,1001940 <___vfprintf_internal_r+0x1420>
 10010b0:	d9014f17 	ldw	r4,1340(sp)
 10010b4:	b00b883a 	mov	r5,r22
 10010b8:	d9800c04 	addi	r6,sp,48
 10010bc:	10004c80 	call	10004c8 <__sprint_r>
 10010c0:	103ecf1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 10010c4:	dc800e17 	ldw	r18,56(sp)
 10010c8:	d8c01904 	addi	r3,sp,100
 10010cc:	003e9206 	br	1000b18 <___vfprintf_internal_r+0x5f8>
 10010d0:	d9014f17 	ldw	r4,1340(sp)
 10010d4:	b00b883a 	mov	r5,r22
 10010d8:	d9800c04 	addi	r6,sp,48
 10010dc:	10004c80 	call	10004c8 <__sprint_r>
 10010e0:	103ec026 	beq	r2,zero,1000be4 <___vfprintf_internal_r+0x6c4>
 10010e4:	003ec606 	br	1000c00 <___vfprintf_internal_r+0x6e0>
 10010e8:	d9014f17 	ldw	r4,1340(sp)
 10010ec:	b00b883a 	mov	r5,r22
 10010f0:	d9800c04 	addi	r6,sp,48
 10010f4:	d9c15115 	stw	r7,1348(sp)
 10010f8:	10004c80 	call	10004c8 <__sprint_r>
 10010fc:	d9c15117 	ldw	r7,1348(sp)
 1001100:	103ebf1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001104:	dc800e17 	ldw	r18,56(sp)
 1001108:	dc400d17 	ldw	r17,52(sp)
 100110c:	dd401904 	addi	r21,sp,100
 1001110:	003e7406 	br	1000ae4 <___vfprintf_internal_r+0x5c4>
 1001114:	d9014f17 	ldw	r4,1340(sp)
 1001118:	b00b883a 	mov	r5,r22
 100111c:	d9800c04 	addi	r6,sp,48
 1001120:	d9c15115 	stw	r7,1348(sp)
 1001124:	10004c80 	call	10004c8 <__sprint_r>
 1001128:	d9c15117 	ldw	r7,1348(sp)
 100112c:	103eb41e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001130:	dd401904 	addi	r21,sp,100
 1001134:	003d6d06 	br	10006ec <___vfprintf_internal_r+0x1cc>
 1001138:	d9014f17 	ldw	r4,1340(sp)
 100113c:	b00b883a 	mov	r5,r22
 1001140:	d9800c04 	addi	r6,sp,48
 1001144:	d9c15115 	stw	r7,1348(sp)
 1001148:	10004c80 	call	10004c8 <__sprint_r>
 100114c:	d9c15117 	ldw	r7,1348(sp)
 1001150:	103eab1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001154:	dc800e17 	ldw	r18,56(sp)
 1001158:	dc400d17 	ldw	r17,52(sp)
 100115c:	dd401904 	addi	r21,sp,100
 1001160:	003e3406 	br	1000a34 <___vfprintf_internal_r+0x514>
 1001164:	d9014f17 	ldw	r4,1340(sp)
 1001168:	b00b883a 	mov	r5,r22
 100116c:	d9800c04 	addi	r6,sp,48
 1001170:	d9c15115 	stw	r7,1348(sp)
 1001174:	10004c80 	call	10004c8 <__sprint_r>
 1001178:	d9c15117 	ldw	r7,1348(sp)
 100117c:	103ea01e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001180:	dc800e17 	ldw	r18,56(sp)
 1001184:	dc400d17 	ldw	r17,52(sp)
 1001188:	dd401904 	addi	r21,sp,100
 100118c:	003e1c06 	br	1000a00 <___vfprintf_internal_r+0x4e0>
 1001190:	d9014f17 	ldw	r4,1340(sp)
 1001194:	b00b883a 	mov	r5,r22
 1001198:	d9800c04 	addi	r6,sp,48
 100119c:	d9c15115 	stw	r7,1348(sp)
 10011a0:	10004c80 	call	10004c8 <__sprint_r>
 10011a4:	d9c15117 	ldw	r7,1348(sp)
 10011a8:	103e951e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 10011ac:	dc800e17 	ldw	r18,56(sp)
 10011b0:	dc400d17 	ldw	r17,52(sp)
 10011b4:	dd401904 	addi	r21,sp,100
 10011b8:	003e0406 	br	10009cc <___vfprintf_internal_r+0x4ac>
 10011bc:	d9000517 	ldw	r4,20(sp)
 10011c0:	0102580e 	bge	zero,r4,1001b24 <___vfprintf_internal_r+0x1604>
 10011c4:	d9814717 	ldw	r6,1308(sp)
 10011c8:	21807a16 	blt	r4,r6,10013b4 <___vfprintf_internal_r+0xe94>
 10011cc:	d8814117 	ldw	r2,1284(sp)
 10011d0:	91a5883a 	add	r18,r18,r6
 10011d4:	8c400044 	addi	r17,r17,1
 10011d8:	a8800015 	stw	r2,0(r21)
 10011dc:	008001c4 	movi	r2,7
 10011e0:	a9800115 	stw	r6,4(r21)
 10011e4:	dc800e15 	stw	r18,56(sp)
 10011e8:	dc400d15 	stw	r17,52(sp)
 10011ec:	1442fc16 	blt	r2,r17,1001de0 <___vfprintf_internal_r+0x18c0>
 10011f0:	a8c00204 	addi	r3,r21,8
 10011f4:	d9414717 	ldw	r5,1308(sp)
 10011f8:	2161c83a 	sub	r16,r4,r5
 10011fc:	043f9d0e 	bge	zero,r16,1001074 <___vfprintf_internal_r+0xb54>
 1001200:	00800404 	movi	r2,16
 1001204:	1402190e 	bge	r2,r16,1001a6c <___vfprintf_internal_r+0x154c>
 1001208:	dc400d17 	ldw	r17,52(sp)
 100120c:	1027883a 	mov	r19,r2
 1001210:	07004074 	movhi	fp,257
 1001214:	e7333284 	addi	fp,fp,-13110
 1001218:	050001c4 	movi	r20,7
 100121c:	00000306 	br	100122c <___vfprintf_internal_r+0xd0c>
 1001220:	18c00204 	addi	r3,r3,8
 1001224:	843ffc04 	addi	r16,r16,-16
 1001228:	9c02130e 	bge	r19,r16,1001a78 <___vfprintf_internal_r+0x1558>
 100122c:	94800404 	addi	r18,r18,16
 1001230:	8c400044 	addi	r17,r17,1
 1001234:	1f000015 	stw	fp,0(r3)
 1001238:	1cc00115 	stw	r19,4(r3)
 100123c:	dc800e15 	stw	r18,56(sp)
 1001240:	dc400d15 	stw	r17,52(sp)
 1001244:	a47ff60e 	bge	r20,r17,1001220 <___vfprintf_internal_r+0xd00>
 1001248:	d9014f17 	ldw	r4,1340(sp)
 100124c:	b00b883a 	mov	r5,r22
 1001250:	d9800c04 	addi	r6,sp,48
 1001254:	10004c80 	call	10004c8 <__sprint_r>
 1001258:	103e691e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 100125c:	dc800e17 	ldw	r18,56(sp)
 1001260:	dc400d17 	ldw	r17,52(sp)
 1001264:	d8c01904 	addi	r3,sp,100
 1001268:	003fee06 	br	1001224 <___vfprintf_internal_r+0xd04>
 100126c:	d8814717 	ldw	r2,1308(sp)
 1001270:	143fffc4 	addi	r16,r2,-1
 1001274:	043e970e 	bge	zero,r16,1000cd4 <___vfprintf_internal_r+0x7b4>
 1001278:	00800404 	movi	r2,16
 100127c:	1400180e 	bge	r2,r16,10012e0 <___vfprintf_internal_r+0xdc0>
 1001280:	1029883a 	mov	r20,r2
 1001284:	07004074 	movhi	fp,257
 1001288:	e7333284 	addi	fp,fp,-13110
 100128c:	054001c4 	movi	r21,7
 1001290:	00000306 	br	10012a0 <___vfprintf_internal_r+0xd80>
 1001294:	9cc00204 	addi	r19,r19,8
 1001298:	843ffc04 	addi	r16,r16,-16
 100129c:	a400120e 	bge	r20,r16,10012e8 <___vfprintf_internal_r+0xdc8>
 10012a0:	94800404 	addi	r18,r18,16
 10012a4:	8c400044 	addi	r17,r17,1
 10012a8:	9f000015 	stw	fp,0(r19)
 10012ac:	9d000115 	stw	r20,4(r19)
 10012b0:	dc800e15 	stw	r18,56(sp)
 10012b4:	dc400d15 	stw	r17,52(sp)
 10012b8:	ac7ff60e 	bge	r21,r17,1001294 <___vfprintf_internal_r+0xd74>
 10012bc:	d9014f17 	ldw	r4,1340(sp)
 10012c0:	b00b883a 	mov	r5,r22
 10012c4:	d9800c04 	addi	r6,sp,48
 10012c8:	10004c80 	call	10004c8 <__sprint_r>
 10012cc:	103e4c1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 10012d0:	dc800e17 	ldw	r18,56(sp)
 10012d4:	dc400d17 	ldw	r17,52(sp)
 10012d8:	dcc01904 	addi	r19,sp,100
 10012dc:	003fee06 	br	1001298 <___vfprintf_internal_r+0xd78>
 10012e0:	07004074 	movhi	fp,257
 10012e4:	e7333284 	addi	fp,fp,-13110
 10012e8:	9425883a 	add	r18,r18,r16
 10012ec:	8c400044 	addi	r17,r17,1
 10012f0:	008001c4 	movi	r2,7
 10012f4:	9f000015 	stw	fp,0(r19)
 10012f8:	9c000115 	stw	r16,4(r19)
 10012fc:	dc800e15 	stw	r18,56(sp)
 1001300:	dc400d15 	stw	r17,52(sp)
 1001304:	147e720e 	bge	r2,r17,1000cd0 <___vfprintf_internal_r+0x7b0>
 1001308:	d9014f17 	ldw	r4,1340(sp)
 100130c:	b00b883a 	mov	r5,r22
 1001310:	d9800c04 	addi	r6,sp,48
 1001314:	10004c80 	call	10004c8 <__sprint_r>
 1001318:	103e391e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 100131c:	dc800e17 	ldw	r18,56(sp)
 1001320:	dc400d17 	ldw	r17,52(sp)
 1001324:	dcc01904 	addi	r19,sp,100
 1001328:	003e6a06 	br	1000cd4 <___vfprintf_internal_r+0x7b4>
 100132c:	d9014f17 	ldw	r4,1340(sp)
 1001330:	b00b883a 	mov	r5,r22
 1001334:	d9800c04 	addi	r6,sp,48
 1001338:	d9c15115 	stw	r7,1348(sp)
 100133c:	10004c80 	call	10004c8 <__sprint_r>
 1001340:	d9c15117 	ldw	r7,1348(sp)
 1001344:	103e2e1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001348:	dc800e17 	ldw	r18,56(sp)
 100134c:	dc400d17 	ldw	r17,52(sp)
 1001350:	dd401904 	addi	r21,sp,100
 1001354:	003dba06 	br	1000a40 <___vfprintf_internal_r+0x520>
 1001358:	d9014f17 	ldw	r4,1340(sp)
 100135c:	b00b883a 	mov	r5,r22
 1001360:	d9800c04 	addi	r6,sp,48
 1001364:	10004c80 	call	10004c8 <__sprint_r>
 1001368:	103e251e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 100136c:	dc800e17 	ldw	r18,56(sp)
 1001370:	dc400d17 	ldw	r17,52(sp)
 1001374:	dcc01904 	addi	r19,sp,100
 1001378:	003e4206 	br	1000c84 <___vfprintf_internal_r+0x764>
 100137c:	d9014f17 	ldw	r4,1340(sp)
 1001380:	b00b883a 	mov	r5,r22
 1001384:	d9800c04 	addi	r6,sp,48
 1001388:	10004c80 	call	10004c8 <__sprint_r>
 100138c:	103e1c1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001390:	dc800e17 	ldw	r18,56(sp)
 1001394:	dc400d17 	ldw	r17,52(sp)
 1001398:	d8c01904 	addi	r3,sp,100
 100139c:	003e2e06 	br	1000c58 <___vfprintf_internal_r+0x738>
 10013a0:	d9414c17 	ldw	r5,1328(sp)
 10013a4:	2880004c 	andi	r2,r5,1
 10013a8:	1005003a 	cmpeq	r2,r2,zero
 10013ac:	103dda1e 	bne	r2,zero,1000b18 <___vfprintf_internal_r+0x5f8>
 10013b0:	003e9f06 	br	1000e30 <___vfprintf_internal_r+0x910>
 10013b4:	d8c14117 	ldw	r3,1284(sp)
 10013b8:	9125883a 	add	r18,r18,r4
 10013bc:	8c400044 	addi	r17,r17,1
 10013c0:	008001c4 	movi	r2,7
 10013c4:	a8c00015 	stw	r3,0(r21)
 10013c8:	a9000115 	stw	r4,4(r21)
 10013cc:	dc800e15 	stw	r18,56(sp)
 10013d0:	dc400d15 	stw	r17,52(sp)
 10013d4:	14426c16 	blt	r2,r17,1001d88 <___vfprintf_internal_r+0x1868>
 10013d8:	a8c00204 	addi	r3,r21,8
 10013dc:	d9414917 	ldw	r5,1316(sp)
 10013e0:	00800044 	movi	r2,1
 10013e4:	94800044 	addi	r18,r18,1
 10013e8:	8c400044 	addi	r17,r17,1
 10013ec:	18800115 	stw	r2,4(r3)
 10013f0:	008001c4 	movi	r2,7
 10013f4:	19400015 	stw	r5,0(r3)
 10013f8:	dc800e15 	stw	r18,56(sp)
 10013fc:	dc400d15 	stw	r17,52(sp)
 1001400:	2021883a 	mov	r16,r4
 1001404:	14425616 	blt	r2,r17,1001d60 <___vfprintf_internal_r+0x1840>
 1001408:	19400204 	addi	r5,r3,8
 100140c:	d9814717 	ldw	r6,1308(sp)
 1001410:	8c400044 	addi	r17,r17,1
 1001414:	dc400d15 	stw	r17,52(sp)
 1001418:	3107c83a 	sub	r3,r6,r4
 100141c:	d9014117 	ldw	r4,1284(sp)
 1001420:	90e5883a 	add	r18,r18,r3
 1001424:	28c00115 	stw	r3,4(r5)
 1001428:	8105883a 	add	r2,r16,r4
 100142c:	28800015 	stw	r2,0(r5)
 1001430:	008001c4 	movi	r2,7
 1001434:	dc800e15 	stw	r18,56(sp)
 1001438:	147f1d16 	blt	r2,r17,10010b0 <___vfprintf_internal_r+0xb90>
 100143c:	28c00204 	addi	r3,r5,8
 1001440:	003db506 	br	1000b18 <___vfprintf_internal_r+0x5f8>
 1001444:	3c000017 	ldw	r16,0(r7)
 1001448:	3c400117 	ldw	r17,4(r7)
 100144c:	39800204 	addi	r6,r7,8
 1001450:	01000044 	movi	r4,1
 1001454:	d9814015 	stw	r6,1280(sp)
 1001458:	d8000405 	stb	zero,16(sp)
 100145c:	003ebe06 	br	1000f58 <___vfprintf_internal_r+0xa38>
 1001460:	3c000017 	ldw	r16,0(r7)
 1001464:	3c400117 	ldw	r17,4(r7)
 1001468:	38800204 	addi	r2,r7,8
 100146c:	d8814015 	stw	r2,1280(sp)
 1001470:	003eb706 	br	1000f50 <___vfprintf_internal_r+0xa30>
 1001474:	3c000017 	ldw	r16,0(r7)
 1001478:	3c400117 	ldw	r17,4(r7)
 100147c:	39000204 	addi	r4,r7,8
 1001480:	d9014015 	stw	r4,1280(sp)
 1001484:	0009883a 	mov	r4,zero
 1001488:	d8000405 	stb	zero,16(sp)
 100148c:	003eb206 	br	1000f58 <___vfprintf_internal_r+0xa38>
 1001490:	38c00017 	ldw	r3,0(r7)
 1001494:	39c00104 	addi	r7,r7,4
 1001498:	d8c14a15 	stw	r3,1320(sp)
 100149c:	1800d70e 	bge	r3,zero,10017fc <___vfprintf_internal_r+0x12dc>
 10014a0:	00c7c83a 	sub	r3,zero,r3
 10014a4:	d8c14a15 	stw	r3,1320(sp)
 10014a8:	d9014c17 	ldw	r4,1328(sp)
 10014ac:	b8c00007 	ldb	r3,0(r23)
 10014b0:	21000114 	ori	r4,r4,4
 10014b4:	d9014c15 	stw	r4,1328(sp)
 10014b8:	003c9806 	br	100071c <___vfprintf_internal_r+0x1fc>
 10014bc:	d9814c17 	ldw	r6,1328(sp)
 10014c0:	3080080c 	andi	r2,r6,32
 10014c4:	1001f626 	beq	r2,zero,1001ca0 <___vfprintf_internal_r+0x1780>
 10014c8:	d9014b17 	ldw	r4,1324(sp)
 10014cc:	38800017 	ldw	r2,0(r7)
 10014d0:	39c00104 	addi	r7,r7,4
 10014d4:	d9c14015 	stw	r7,1280(sp)
 10014d8:	2007d7fa 	srai	r3,r4,31
 10014dc:	d9c14017 	ldw	r7,1280(sp)
 10014e0:	11000015 	stw	r4,0(r2)
 10014e4:	10c00115 	stw	r3,4(r2)
 10014e8:	003c6906 	br	1000690 <___vfprintf_internal_r+0x170>
 10014ec:	b8c00007 	ldb	r3,0(r23)
 10014f0:	00801b04 	movi	r2,108
 10014f4:	18825526 	beq	r3,r2,1001e4c <___vfprintf_internal_r+0x192c>
 10014f8:	d9414c17 	ldw	r5,1328(sp)
 10014fc:	29400414 	ori	r5,r5,16
 1001500:	d9414c15 	stw	r5,1328(sp)
 1001504:	003c8506 	br	100071c <___vfprintf_internal_r+0x1fc>
 1001508:	d9814c17 	ldw	r6,1328(sp)
 100150c:	b8c00007 	ldb	r3,0(r23)
 1001510:	31800814 	ori	r6,r6,32
 1001514:	d9814c15 	stw	r6,1328(sp)
 1001518:	003c8006 	br	100071c <___vfprintf_internal_r+0x1fc>
 100151c:	d8814c17 	ldw	r2,1328(sp)
 1001520:	3c000017 	ldw	r16,0(r7)
 1001524:	00c01e04 	movi	r3,120
 1001528:	10800094 	ori	r2,r2,2
 100152c:	d8814c15 	stw	r2,1328(sp)
 1001530:	39c00104 	addi	r7,r7,4
 1001534:	01404074 	movhi	r5,257
 1001538:	29731b04 	addi	r5,r5,-13204
 100153c:	00800c04 	movi	r2,48
 1001540:	0023883a 	mov	r17,zero
 1001544:	01000084 	movi	r4,2
 1001548:	d9c14015 	stw	r7,1280(sp)
 100154c:	d8c14d15 	stw	r3,1332(sp)
 1001550:	d9414415 	stw	r5,1296(sp)
 1001554:	d8800445 	stb	r2,17(sp)
 1001558:	d8c00485 	stb	r3,18(sp)
 100155c:	d8000405 	stb	zero,16(sp)
 1001560:	003e7d06 	br	1000f58 <___vfprintf_internal_r+0xa38>
 1001564:	d8814c17 	ldw	r2,1328(sp)
 1001568:	b8c00007 	ldb	r3,0(r23)
 100156c:	10801014 	ori	r2,r2,64
 1001570:	d8814c15 	stw	r2,1328(sp)
 1001574:	003c6906 	br	100071c <___vfprintf_internal_r+0x1fc>
 1001578:	d9414c17 	ldw	r5,1328(sp)
 100157c:	2880020c 	andi	r2,r5,8
 1001580:	1001e526 	beq	r2,zero,1001d18 <___vfprintf_internal_r+0x17f8>
 1001584:	39800017 	ldw	r6,0(r7)
 1001588:	38800204 	addi	r2,r7,8
 100158c:	d8814015 	stw	r2,1280(sp)
 1001590:	d9814215 	stw	r6,1288(sp)
 1001594:	39c00117 	ldw	r7,4(r7)
 1001598:	d9c14315 	stw	r7,1292(sp)
 100159c:	d9014217 	ldw	r4,1288(sp)
 10015a0:	d9414317 	ldw	r5,1292(sp)
 10015a4:	1006fd00 	call	1006fd0 <__isinfd>
 10015a8:	10021d26 	beq	r2,zero,1001e20 <___vfprintf_internal_r+0x1900>
 10015ac:	d9014217 	ldw	r4,1288(sp)
 10015b0:	d9414317 	ldw	r5,1292(sp)
 10015b4:	000d883a 	mov	r6,zero
 10015b8:	000f883a 	mov	r7,zero
 10015bc:	100916c0 	call	100916c <__ltdf2>
 10015c0:	1002d016 	blt	r2,zero,1002104 <___vfprintf_internal_r+0x1be4>
 10015c4:	d9414d17 	ldw	r5,1332(sp)
 10015c8:	008011c4 	movi	r2,71
 10015cc:	11421016 	blt	r2,r5,1001e10 <___vfprintf_internal_r+0x18f0>
 10015d0:	01804074 	movhi	r6,257
 10015d4:	31b32004 	addi	r6,r6,-13184
 10015d8:	d9814115 	stw	r6,1284(sp)
 10015dc:	d9014c17 	ldw	r4,1328(sp)
 10015e0:	00c000c4 	movi	r3,3
 10015e4:	00bfdfc4 	movi	r2,-129
 10015e8:	2088703a 	and	r4,r4,r2
 10015ec:	180f883a 	mov	r7,r3
 10015f0:	d8c14515 	stw	r3,1300(sp)
 10015f4:	d9014c15 	stw	r4,1328(sp)
 10015f8:	d8014615 	stw	zero,1304(sp)
 10015fc:	003e6a06 	br	1000fa8 <___vfprintf_internal_r+0xa88>
 1001600:	38800017 	ldw	r2,0(r7)
 1001604:	00c00044 	movi	r3,1
 1001608:	39c00104 	addi	r7,r7,4
 100160c:	d9c14015 	stw	r7,1280(sp)
 1001610:	d9000f04 	addi	r4,sp,60
 1001614:	180f883a 	mov	r7,r3
 1001618:	d8c14515 	stw	r3,1300(sp)
 100161c:	d9014115 	stw	r4,1284(sp)
 1001620:	d8800f05 	stb	r2,60(sp)
 1001624:	d8000405 	stb	zero,16(sp)
 1001628:	003cac06 	br	10008dc <___vfprintf_internal_r+0x3bc>
 100162c:	01404074 	movhi	r5,257
 1001630:	29732604 	addi	r5,r5,-13160
 1001634:	d9414415 	stw	r5,1296(sp)
 1001638:	d9814c17 	ldw	r6,1328(sp)
 100163c:	3080080c 	andi	r2,r6,32
 1001640:	1000ff26 	beq	r2,zero,1001a40 <___vfprintf_internal_r+0x1520>
 1001644:	3c000017 	ldw	r16,0(r7)
 1001648:	3c400117 	ldw	r17,4(r7)
 100164c:	38800204 	addi	r2,r7,8
 1001650:	d8814015 	stw	r2,1280(sp)
 1001654:	d9414c17 	ldw	r5,1328(sp)
 1001658:	2880004c 	andi	r2,r5,1
 100165c:	1005003a 	cmpeq	r2,r2,zero
 1001660:	1000b91e 	bne	r2,zero,1001948 <___vfprintf_internal_r+0x1428>
 1001664:	8444b03a 	or	r2,r16,r17
 1001668:	1000b726 	beq	r2,zero,1001948 <___vfprintf_internal_r+0x1428>
 100166c:	d9814d17 	ldw	r6,1332(sp)
 1001670:	29400094 	ori	r5,r5,2
 1001674:	00800c04 	movi	r2,48
 1001678:	01000084 	movi	r4,2
 100167c:	d9414c15 	stw	r5,1328(sp)
 1001680:	d8800445 	stb	r2,17(sp)
 1001684:	d9800485 	stb	r6,18(sp)
 1001688:	d8000405 	stb	zero,16(sp)
 100168c:	003e3206 	br	1000f58 <___vfprintf_internal_r+0xa38>
 1001690:	01804074 	movhi	r6,257
 1001694:	31b31b04 	addi	r6,r6,-13204
 1001698:	d9814415 	stw	r6,1296(sp)
 100169c:	003fe606 	br	1001638 <___vfprintf_internal_r+0x1118>
 10016a0:	00800ac4 	movi	r2,43
 10016a4:	d8800405 	stb	r2,16(sp)
 10016a8:	b8c00007 	ldb	r3,0(r23)
 10016ac:	003c1b06 	br	100071c <___vfprintf_internal_r+0x1fc>
 10016b0:	d8814c17 	ldw	r2,1328(sp)
 10016b4:	b8c00007 	ldb	r3,0(r23)
 10016b8:	10800054 	ori	r2,r2,1
 10016bc:	d8814c15 	stw	r2,1328(sp)
 10016c0:	003c1606 	br	100071c <___vfprintf_internal_r+0x1fc>
 10016c4:	d8800407 	ldb	r2,16(sp)
 10016c8:	10004c1e 	bne	r2,zero,10017fc <___vfprintf_internal_r+0x12dc>
 10016cc:	00800804 	movi	r2,32
 10016d0:	d8800405 	stb	r2,16(sp)
 10016d4:	b8c00007 	ldb	r3,0(r23)
 10016d8:	003c1006 	br	100071c <___vfprintf_internal_r+0x1fc>
 10016dc:	d9814c17 	ldw	r6,1328(sp)
 10016e0:	b8c00007 	ldb	r3,0(r23)
 10016e4:	31800214 	ori	r6,r6,8
 10016e8:	d9814c15 	stw	r6,1328(sp)
 10016ec:	003c0b06 	br	100071c <___vfprintf_internal_r+0x1fc>
 10016f0:	0009883a 	mov	r4,zero
 10016f4:	04000244 	movi	r16,9
 10016f8:	01400284 	movi	r5,10
 10016fc:	d9c15115 	stw	r7,1348(sp)
 1001700:	10096a40 	call	10096a4 <__mulsi3>
 1001704:	b9000007 	ldb	r4,0(r23)
 1001708:	d8c14d17 	ldw	r3,1332(sp)
 100170c:	bdc00044 	addi	r23,r23,1
 1001710:	d9014d15 	stw	r4,1332(sp)
 1001714:	d9414d17 	ldw	r5,1332(sp)
 1001718:	1885883a 	add	r2,r3,r2
 100171c:	113ff404 	addi	r4,r2,-48
 1001720:	28bff404 	addi	r2,r5,-48
 1001724:	d9c15117 	ldw	r7,1348(sp)
 1001728:	80bff32e 	bgeu	r16,r2,10016f8 <___vfprintf_internal_r+0x11d8>
 100172c:	d9014a15 	stw	r4,1320(sp)
 1001730:	003bfc06 	br	1000724 <___vfprintf_internal_r+0x204>
 1001734:	d8814c17 	ldw	r2,1328(sp)
 1001738:	b8c00007 	ldb	r3,0(r23)
 100173c:	10802014 	ori	r2,r2,128
 1001740:	d8814c15 	stw	r2,1328(sp)
 1001744:	003bf506 	br	100071c <___vfprintf_internal_r+0x1fc>
 1001748:	b8c00007 	ldb	r3,0(r23)
 100174c:	00800a84 	movi	r2,42
 1001750:	bdc00044 	addi	r23,r23,1
 1001754:	18831826 	beq	r3,r2,10023b8 <___vfprintf_internal_r+0x1e98>
 1001758:	d8c14d15 	stw	r3,1332(sp)
 100175c:	18bff404 	addi	r2,r3,-48
 1001760:	00c00244 	movi	r3,9
 1001764:	18827b36 	bltu	r3,r2,1002154 <___vfprintf_internal_r+0x1c34>
 1001768:	1821883a 	mov	r16,r3
 100176c:	0009883a 	mov	r4,zero
 1001770:	01400284 	movi	r5,10
 1001774:	d9c15115 	stw	r7,1348(sp)
 1001778:	10096a40 	call	10096a4 <__mulsi3>
 100177c:	d9414d17 	ldw	r5,1332(sp)
 1001780:	b9800007 	ldb	r6,0(r23)
 1001784:	d9c15117 	ldw	r7,1348(sp)
 1001788:	1145883a 	add	r2,r2,r5
 100178c:	113ff404 	addi	r4,r2,-48
 1001790:	30bff404 	addi	r2,r6,-48
 1001794:	d9814d15 	stw	r6,1332(sp)
 1001798:	bdc00044 	addi	r23,r23,1
 100179c:	80bff42e 	bgeu	r16,r2,1001770 <___vfprintf_internal_r+0x1250>
 10017a0:	2027883a 	mov	r19,r4
 10017a4:	203bdf0e 	bge	r4,zero,1000724 <___vfprintf_internal_r+0x204>
 10017a8:	04ffffc4 	movi	r19,-1
 10017ac:	003bdd06 	br	1000724 <___vfprintf_internal_r+0x204>
 10017b0:	d8000405 	stb	zero,16(sp)
 10017b4:	39800017 	ldw	r6,0(r7)
 10017b8:	39c00104 	addi	r7,r7,4
 10017bc:	d9c14015 	stw	r7,1280(sp)
 10017c0:	d9814115 	stw	r6,1284(sp)
 10017c4:	3001c926 	beq	r6,zero,1001eec <___vfprintf_internal_r+0x19cc>
 10017c8:	98000e16 	blt	r19,zero,1001804 <___vfprintf_internal_r+0x12e4>
 10017cc:	d9014117 	ldw	r4,1284(sp)
 10017d0:	000b883a 	mov	r5,zero
 10017d4:	980d883a 	mov	r6,r19
 10017d8:	10056540 	call	1005654 <memchr>
 10017dc:	10025926 	beq	r2,zero,1002144 <___vfprintf_internal_r+0x1c24>
 10017e0:	d8c14117 	ldw	r3,1284(sp)
 10017e4:	10cfc83a 	sub	r7,r2,r3
 10017e8:	99c19e16 	blt	r19,r7,1001e64 <___vfprintf_internal_r+0x1944>
 10017ec:	d9c14515 	stw	r7,1300(sp)
 10017f0:	38000916 	blt	r7,zero,1001818 <___vfprintf_internal_r+0x12f8>
 10017f4:	d8014615 	stw	zero,1304(sp)
 10017f8:	003deb06 	br	1000fa8 <___vfprintf_internal_r+0xa88>
 10017fc:	b8c00007 	ldb	r3,0(r23)
 1001800:	003bc606 	br	100071c <___vfprintf_internal_r+0x1fc>
 1001804:	d9014117 	ldw	r4,1284(sp)
 1001808:	10004540 	call	1000454 <strlen>
 100180c:	d8814515 	stw	r2,1300(sp)
 1001810:	100f883a 	mov	r7,r2
 1001814:	103ff70e 	bge	r2,zero,10017f4 <___vfprintf_internal_r+0x12d4>
 1001818:	d8014515 	stw	zero,1300(sp)
 100181c:	d8014615 	stw	zero,1304(sp)
 1001820:	003de106 	br	1000fa8 <___vfprintf_internal_r+0xa88>
 1001824:	20c03fcc 	andi	r3,r4,255
 1001828:	00800044 	movi	r2,1
 100182c:	18802d26 	beq	r3,r2,10018e4 <___vfprintf_internal_r+0x13c4>
 1001830:	18800e36 	bltu	r3,r2,100186c <___vfprintf_internal_r+0x134c>
 1001834:	00800084 	movi	r2,2
 1001838:	1880fa26 	beq	r3,r2,1001c24 <___vfprintf_internal_r+0x1704>
 100183c:	01004074 	movhi	r4,257
 1001840:	21332b04 	addi	r4,r4,-13140
 1001844:	10004540 	call	1000454 <strlen>
 1001848:	100f883a 	mov	r7,r2
 100184c:	dcc14515 	stw	r19,1300(sp)
 1001850:	9880010e 	bge	r19,r2,1001858 <___vfprintf_internal_r+0x1338>
 1001854:	d8814515 	stw	r2,1300(sp)
 1001858:	00804074 	movhi	r2,257
 100185c:	10b32b04 	addi	r2,r2,-13140
 1001860:	dcc14615 	stw	r19,1304(sp)
 1001864:	d8814115 	stw	r2,1284(sp)
 1001868:	003dcf06 	br	1000fa8 <___vfprintf_internal_r+0xa88>
 100186c:	d9401904 	addi	r5,sp,100
 1001870:	dd000f04 	addi	r20,sp,60
 1001874:	d9414115 	stw	r5,1284(sp)
 1001878:	880a977a 	slli	r5,r17,29
 100187c:	d9814117 	ldw	r6,1284(sp)
 1001880:	8004d0fa 	srli	r2,r16,3
 1001884:	8806d0fa 	srli	r3,r17,3
 1001888:	810001cc 	andi	r4,r16,7
 100188c:	2884b03a 	or	r2,r5,r2
 1001890:	31bfffc4 	addi	r6,r6,-1
 1001894:	21000c04 	addi	r4,r4,48
 1001898:	d9814115 	stw	r6,1284(sp)
 100189c:	10cab03a 	or	r5,r2,r3
 10018a0:	31000005 	stb	r4,0(r6)
 10018a4:	1021883a 	mov	r16,r2
 10018a8:	1823883a 	mov	r17,r3
 10018ac:	283ff21e 	bne	r5,zero,1001878 <___vfprintf_internal_r+0x1358>
 10018b0:	d8c14c17 	ldw	r3,1328(sp)
 10018b4:	1880004c 	andi	r2,r3,1
 10018b8:	1005003a 	cmpeq	r2,r2,zero
 10018bc:	103db31e 	bne	r2,zero,1000f8c <___vfprintf_internal_r+0xa6c>
 10018c0:	20803fcc 	andi	r2,r4,255
 10018c4:	1080201c 	xori	r2,r2,128
 10018c8:	10bfe004 	addi	r2,r2,-128
 10018cc:	00c00c04 	movi	r3,48
 10018d0:	10fdae26 	beq	r2,r3,1000f8c <___vfprintf_internal_r+0xa6c>
 10018d4:	31bfffc4 	addi	r6,r6,-1
 10018d8:	d9814115 	stw	r6,1284(sp)
 10018dc:	30c00005 	stb	r3,0(r6)
 10018e0:	003daa06 	br	1000f8c <___vfprintf_internal_r+0xa6c>
 10018e4:	88800068 	cmpgeui	r2,r17,1
 10018e8:	10002c1e 	bne	r2,zero,100199c <___vfprintf_internal_r+0x147c>
 10018ec:	8800021e 	bne	r17,zero,10018f8 <___vfprintf_internal_r+0x13d8>
 10018f0:	00800244 	movi	r2,9
 10018f4:	14002936 	bltu	r2,r16,100199c <___vfprintf_internal_r+0x147c>
 10018f8:	d90018c4 	addi	r4,sp,99
 10018fc:	dd000f04 	addi	r20,sp,60
 1001900:	d9014115 	stw	r4,1284(sp)
 1001904:	d9014117 	ldw	r4,1284(sp)
 1001908:	80800c04 	addi	r2,r16,48
 100190c:	20800005 	stb	r2,0(r4)
 1001910:	003d9e06 	br	1000f8c <___vfprintf_internal_r+0xa6c>
 1001914:	dc400d17 	ldw	r17,52(sp)
 1001918:	07004074 	movhi	fp,257
 100191c:	e7333284 	addi	fp,fp,-13110
 1001920:	9425883a 	add	r18,r18,r16
 1001924:	8c400044 	addi	r17,r17,1
 1001928:	008001c4 	movi	r2,7
 100192c:	1f000015 	stw	fp,0(r3)
 1001930:	1c000115 	stw	r16,4(r3)
 1001934:	dc800e15 	stw	r18,56(sp)
 1001938:	dc400d15 	stw	r17,52(sp)
 100193c:	147ddc16 	blt	r2,r17,10010b0 <___vfprintf_internal_r+0xb90>
 1001940:	18c00204 	addi	r3,r3,8
 1001944:	003c7406 	br	1000b18 <___vfprintf_internal_r+0x5f8>
 1001948:	01000084 	movi	r4,2
 100194c:	d8000405 	stb	zero,16(sp)
 1001950:	003d8106 	br	1000f58 <___vfprintf_internal_r+0xa38>
 1001954:	d9814c17 	ldw	r6,1328(sp)
 1001958:	30c4703a 	and	r2,r6,r3
 100195c:	1005003a 	cmpeq	r2,r2,zero
 1001960:	103cb326 	beq	r2,zero,1000c30 <___vfprintf_internal_r+0x710>
 1001964:	d9014117 	ldw	r4,1284(sp)
 1001968:	94800044 	addi	r18,r18,1
 100196c:	8c400044 	addi	r17,r17,1
 1001970:	008001c4 	movi	r2,7
 1001974:	a9000015 	stw	r4,0(r21)
 1001978:	a8c00115 	stw	r3,4(r21)
 100197c:	dc800e15 	stw	r18,56(sp)
 1001980:	dc400d15 	stw	r17,52(sp)
 1001984:	147e6016 	blt	r2,r17,1001308 <___vfprintf_internal_r+0xde8>
 1001988:	acc00204 	addi	r19,r21,8
 100198c:	003cd106 	br	1000cd4 <___vfprintf_internal_r+0x7b4>
 1001990:	07004074 	movhi	fp,257
 1001994:	e7333284 	addi	fp,fp,-13110
 1001998:	003c4906 	br	1000ac0 <___vfprintf_internal_r+0x5a0>
 100199c:	dd000f04 	addi	r20,sp,60
 10019a0:	dc801904 	addi	r18,sp,100
 10019a4:	8009883a 	mov	r4,r16
 10019a8:	880b883a 	mov	r5,r17
 10019ac:	01800284 	movi	r6,10
 10019b0:	000f883a 	mov	r7,zero
 10019b4:	1007dcc0 	call	1007dcc <__umoddi3>
 10019b8:	12000c04 	addi	r8,r2,48
 10019bc:	94bfffc4 	addi	r18,r18,-1
 10019c0:	8009883a 	mov	r4,r16
 10019c4:	880b883a 	mov	r5,r17
 10019c8:	01800284 	movi	r6,10
 10019cc:	000f883a 	mov	r7,zero
 10019d0:	92000005 	stb	r8,0(r18)
 10019d4:	10077600 	call	1007760 <__udivdi3>
 10019d8:	1009883a 	mov	r4,r2
 10019dc:	1021883a 	mov	r16,r2
 10019e0:	18800068 	cmpgeui	r2,r3,1
 10019e4:	1823883a 	mov	r17,r3
 10019e8:	103fee1e 	bne	r2,zero,10019a4 <___vfprintf_internal_r+0x1484>
 10019ec:	1800021e 	bne	r3,zero,10019f8 <___vfprintf_internal_r+0x14d8>
 10019f0:	00800244 	movi	r2,9
 10019f4:	113feb36 	bltu	r2,r4,10019a4 <___vfprintf_internal_r+0x1484>
 10019f8:	94bfffc4 	addi	r18,r18,-1
 10019fc:	dc814115 	stw	r18,1284(sp)
 1001a00:	003fc006 	br	1001904 <___vfprintf_internal_r+0x13e4>
 1001a04:	d9014c17 	ldw	r4,1328(sp)
 1001a08:	2080004c 	andi	r2,r4,1
 1001a0c:	10009a1e 	bne	r2,zero,1001c78 <___vfprintf_internal_r+0x1758>
 1001a10:	d9401904 	addi	r5,sp,100
 1001a14:	dd000f04 	addi	r20,sp,60
 1001a18:	d9414115 	stw	r5,1284(sp)
 1001a1c:	003d5b06 	br	1000f8c <___vfprintf_internal_r+0xa6c>
 1001a20:	d9014f17 	ldw	r4,1340(sp)
 1001a24:	b00b883a 	mov	r5,r22
 1001a28:	d9800c04 	addi	r6,sp,48
 1001a2c:	10004c80 	call	10004c8 <__sprint_r>
 1001a30:	103c731e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001a34:	dc800e17 	ldw	r18,56(sp)
 1001a38:	d8c01904 	addi	r3,sp,100
 1001a3c:	003cf906 	br	1000e24 <___vfprintf_internal_r+0x904>
 1001a40:	d8c14c17 	ldw	r3,1328(sp)
 1001a44:	1880040c 	andi	r2,r3,16
 1001a48:	1000711e 	bne	r2,zero,1001c10 <___vfprintf_internal_r+0x16f0>
 1001a4c:	d9014c17 	ldw	r4,1328(sp)
 1001a50:	2080100c 	andi	r2,r4,64
 1001a54:	10006e26 	beq	r2,zero,1001c10 <___vfprintf_internal_r+0x16f0>
 1001a58:	3c00000b 	ldhu	r16,0(r7)
 1001a5c:	0023883a 	mov	r17,zero
 1001a60:	39c00104 	addi	r7,r7,4
 1001a64:	d9c14015 	stw	r7,1280(sp)
 1001a68:	003efa06 	br	1001654 <___vfprintf_internal_r+0x1134>
 1001a6c:	dc400d17 	ldw	r17,52(sp)
 1001a70:	07004074 	movhi	fp,257
 1001a74:	e7333284 	addi	fp,fp,-13110
 1001a78:	9425883a 	add	r18,r18,r16
 1001a7c:	8c400044 	addi	r17,r17,1
 1001a80:	008001c4 	movi	r2,7
 1001a84:	1f000015 	stw	fp,0(r3)
 1001a88:	1c000115 	stw	r16,4(r3)
 1001a8c:	dc800e15 	stw	r18,56(sp)
 1001a90:	dc400d15 	stw	r17,52(sp)
 1001a94:	147d7016 	blt	r2,r17,1001058 <___vfprintf_internal_r+0xb38>
 1001a98:	18c00204 	addi	r3,r3,8
 1001a9c:	003d7506 	br	1001074 <___vfprintf_internal_r+0xb54>
 1001aa0:	dc800e17 	ldw	r18,56(sp)
 1001aa4:	dc400d17 	ldw	r17,52(sp)
 1001aa8:	07004074 	movhi	fp,257
 1001aac:	e7333684 	addi	fp,fp,-13094
 1001ab0:	003bba06 	br	100099c <___vfprintf_internal_r+0x47c>
 1001ab4:	d9014f17 	ldw	r4,1340(sp)
 1001ab8:	b00b883a 	mov	r5,r22
 1001abc:	d9800c04 	addi	r6,sp,48
 1001ac0:	10004c80 	call	10004c8 <__sprint_r>
 1001ac4:	103c4e1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001ac8:	dc800e17 	ldw	r18,56(sp)
 1001acc:	d8c01904 	addi	r3,sp,100
 1001ad0:	003ce306 	br	1000e60 <___vfprintf_internal_r+0x940>
 1001ad4:	3c000017 	ldw	r16,0(r7)
 1001ad8:	0009883a 	mov	r4,zero
 1001adc:	39c00104 	addi	r7,r7,4
 1001ae0:	0023883a 	mov	r17,zero
 1001ae4:	d9c14015 	stw	r7,1280(sp)
 1001ae8:	d8000405 	stb	zero,16(sp)
 1001aec:	003d1a06 	br	1000f58 <___vfprintf_internal_r+0xa38>
 1001af0:	38800017 	ldw	r2,0(r7)
 1001af4:	39c00104 	addi	r7,r7,4
 1001af8:	d9c14015 	stw	r7,1280(sp)
 1001afc:	1023d7fa 	srai	r17,r2,31
 1001b00:	1021883a 	mov	r16,r2
 1001b04:	003d1206 	br	1000f50 <___vfprintf_internal_r+0xa30>
 1001b08:	3c000017 	ldw	r16,0(r7)
 1001b0c:	01000044 	movi	r4,1
 1001b10:	39c00104 	addi	r7,r7,4
 1001b14:	0023883a 	mov	r17,zero
 1001b18:	d9c14015 	stw	r7,1280(sp)
 1001b1c:	d8000405 	stb	zero,16(sp)
 1001b20:	003d0d06 	br	1000f58 <___vfprintf_internal_r+0xa38>
 1001b24:	00804074 	movhi	r2,257
 1001b28:	10b33204 	addi	r2,r2,-13112
 1001b2c:	94800044 	addi	r18,r18,1
 1001b30:	8c400044 	addi	r17,r17,1
 1001b34:	a8800015 	stw	r2,0(r21)
 1001b38:	00c00044 	movi	r3,1
 1001b3c:	008001c4 	movi	r2,7
 1001b40:	a8c00115 	stw	r3,4(r21)
 1001b44:	dc800e15 	stw	r18,56(sp)
 1001b48:	dc400d15 	stw	r17,52(sp)
 1001b4c:	1440ca16 	blt	r2,r17,1001e78 <___vfprintf_internal_r+0x1958>
 1001b50:	a8c00204 	addi	r3,r21,8
 1001b54:	2000061e 	bne	r4,zero,1001b70 <___vfprintf_internal_r+0x1650>
 1001b58:	d9414717 	ldw	r5,1308(sp)
 1001b5c:	2800041e 	bne	r5,zero,1001b70 <___vfprintf_internal_r+0x1650>
 1001b60:	d9814c17 	ldw	r6,1328(sp)
 1001b64:	3080004c 	andi	r2,r6,1
 1001b68:	1005003a 	cmpeq	r2,r2,zero
 1001b6c:	103bea1e 	bne	r2,zero,1000b18 <___vfprintf_internal_r+0x5f8>
 1001b70:	00800044 	movi	r2,1
 1001b74:	dc400d17 	ldw	r17,52(sp)
 1001b78:	18800115 	stw	r2,4(r3)
 1001b7c:	d8814917 	ldw	r2,1316(sp)
 1001b80:	94800044 	addi	r18,r18,1
 1001b84:	8c400044 	addi	r17,r17,1
 1001b88:	18800015 	stw	r2,0(r3)
 1001b8c:	008001c4 	movi	r2,7
 1001b90:	dc800e15 	stw	r18,56(sp)
 1001b94:	dc400d15 	stw	r17,52(sp)
 1001b98:	1440ca16 	blt	r2,r17,1001ec4 <___vfprintf_internal_r+0x19a4>
 1001b9c:	18c00204 	addi	r3,r3,8
 1001ba0:	0121c83a 	sub	r16,zero,r4
 1001ba4:	0400500e 	bge	zero,r16,1001ce8 <___vfprintf_internal_r+0x17c8>
 1001ba8:	00800404 	movi	r2,16
 1001bac:	1400800e 	bge	r2,r16,1001db0 <___vfprintf_internal_r+0x1890>
 1001bb0:	1027883a 	mov	r19,r2
 1001bb4:	07004074 	movhi	fp,257
 1001bb8:	e7333284 	addi	fp,fp,-13110
 1001bbc:	050001c4 	movi	r20,7
 1001bc0:	00000306 	br	1001bd0 <___vfprintf_internal_r+0x16b0>
 1001bc4:	18c00204 	addi	r3,r3,8
 1001bc8:	843ffc04 	addi	r16,r16,-16
 1001bcc:	9c007a0e 	bge	r19,r16,1001db8 <___vfprintf_internal_r+0x1898>
 1001bd0:	94800404 	addi	r18,r18,16
 1001bd4:	8c400044 	addi	r17,r17,1
 1001bd8:	1f000015 	stw	fp,0(r3)
 1001bdc:	1cc00115 	stw	r19,4(r3)
 1001be0:	dc800e15 	stw	r18,56(sp)
 1001be4:	dc400d15 	stw	r17,52(sp)
 1001be8:	a47ff60e 	bge	r20,r17,1001bc4 <___vfprintf_internal_r+0x16a4>
 1001bec:	d9014f17 	ldw	r4,1340(sp)
 1001bf0:	b00b883a 	mov	r5,r22
 1001bf4:	d9800c04 	addi	r6,sp,48
 1001bf8:	10004c80 	call	10004c8 <__sprint_r>
 1001bfc:	103c001e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001c00:	dc800e17 	ldw	r18,56(sp)
 1001c04:	dc400d17 	ldw	r17,52(sp)
 1001c08:	d8c01904 	addi	r3,sp,100
 1001c0c:	003fee06 	br	1001bc8 <___vfprintf_internal_r+0x16a8>
 1001c10:	3c000017 	ldw	r16,0(r7)
 1001c14:	0023883a 	mov	r17,zero
 1001c18:	39c00104 	addi	r7,r7,4
 1001c1c:	d9c14015 	stw	r7,1280(sp)
 1001c20:	003e8c06 	br	1001654 <___vfprintf_internal_r+0x1134>
 1001c24:	d9401904 	addi	r5,sp,100
 1001c28:	dd000f04 	addi	r20,sp,60
 1001c2c:	d9414115 	stw	r5,1284(sp)
 1001c30:	d9814417 	ldw	r6,1296(sp)
 1001c34:	880a973a 	slli	r5,r17,28
 1001c38:	8004d13a 	srli	r2,r16,4
 1001c3c:	810003cc 	andi	r4,r16,15
 1001c40:	3109883a 	add	r4,r6,r4
 1001c44:	2884b03a 	or	r2,r5,r2
 1001c48:	21400003 	ldbu	r5,0(r4)
 1001c4c:	d9014117 	ldw	r4,1284(sp)
 1001c50:	8806d13a 	srli	r3,r17,4
 1001c54:	1021883a 	mov	r16,r2
 1001c58:	213fffc4 	addi	r4,r4,-1
 1001c5c:	d9014115 	stw	r4,1284(sp)
 1001c60:	d9814117 	ldw	r6,1284(sp)
 1001c64:	10c8b03a 	or	r4,r2,r3
 1001c68:	1823883a 	mov	r17,r3
 1001c6c:	31400005 	stb	r5,0(r6)
 1001c70:	203fef1e 	bne	r4,zero,1001c30 <___vfprintf_internal_r+0x1710>
 1001c74:	003cc506 	br	1000f8c <___vfprintf_internal_r+0xa6c>
 1001c78:	00800c04 	movi	r2,48
 1001c7c:	d98018c4 	addi	r6,sp,99
 1001c80:	dd000f04 	addi	r20,sp,60
 1001c84:	d88018c5 	stb	r2,99(sp)
 1001c88:	d9814115 	stw	r6,1284(sp)
 1001c8c:	003cbf06 	br	1000f8c <___vfprintf_internal_r+0xa6c>
 1001c90:	dc400d17 	ldw	r17,52(sp)
 1001c94:	07004074 	movhi	fp,257
 1001c98:	e7333684 	addi	fp,fp,-13094
 1001c9c:	003bc106 	br	1000ba4 <___vfprintf_internal_r+0x684>
 1001ca0:	d9414c17 	ldw	r5,1328(sp)
 1001ca4:	2880040c 	andi	r2,r5,16
 1001ca8:	10007c26 	beq	r2,zero,1001e9c <___vfprintf_internal_r+0x197c>
 1001cac:	38800017 	ldw	r2,0(r7)
 1001cb0:	39c00104 	addi	r7,r7,4
 1001cb4:	d9c14015 	stw	r7,1280(sp)
 1001cb8:	d9814b17 	ldw	r6,1324(sp)
 1001cbc:	d9c14017 	ldw	r7,1280(sp)
 1001cc0:	11800015 	stw	r6,0(r2)
 1001cc4:	003a7206 	br	1000690 <___vfprintf_internal_r+0x170>
 1001cc8:	d9014f17 	ldw	r4,1340(sp)
 1001ccc:	b00b883a 	mov	r5,r22
 1001cd0:	d9800c04 	addi	r6,sp,48
 1001cd4:	10004c80 	call	10004c8 <__sprint_r>
 1001cd8:	103bc91e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001cdc:	dc800e17 	ldw	r18,56(sp)
 1001ce0:	dc400d17 	ldw	r17,52(sp)
 1001ce4:	d8c01904 	addi	r3,sp,100
 1001ce8:	d9014717 	ldw	r4,1308(sp)
 1001cec:	d9414117 	ldw	r5,1284(sp)
 1001cf0:	8c400044 	addi	r17,r17,1
 1001cf4:	9125883a 	add	r18,r18,r4
 1001cf8:	008001c4 	movi	r2,7
 1001cfc:	19400015 	stw	r5,0(r3)
 1001d00:	19000115 	stw	r4,4(r3)
 1001d04:	dc800e15 	stw	r18,56(sp)
 1001d08:	dc400d15 	stw	r17,52(sp)
 1001d0c:	147ce816 	blt	r2,r17,10010b0 <___vfprintf_internal_r+0xb90>
 1001d10:	18c00204 	addi	r3,r3,8
 1001d14:	003b8006 	br	1000b18 <___vfprintf_internal_r+0x5f8>
 1001d18:	38c00017 	ldw	r3,0(r7)
 1001d1c:	39000204 	addi	r4,r7,8
 1001d20:	d9014015 	stw	r4,1280(sp)
 1001d24:	d8c14215 	stw	r3,1288(sp)
 1001d28:	39c00117 	ldw	r7,4(r7)
 1001d2c:	d9c14315 	stw	r7,1292(sp)
 1001d30:	003e1a06 	br	100159c <___vfprintf_internal_r+0x107c>
 1001d34:	0005883a 	mov	r2,zero
 1001d38:	1409c83a 	sub	r4,r2,r16
 1001d3c:	1105803a 	cmpltu	r2,r2,r4
 1001d40:	044bc83a 	sub	r5,zero,r17
 1001d44:	2885c83a 	sub	r2,r5,r2
 1001d48:	2021883a 	mov	r16,r4
 1001d4c:	1023883a 	mov	r17,r2
 1001d50:	01000044 	movi	r4,1
 1001d54:	00800b44 	movi	r2,45
 1001d58:	d8800405 	stb	r2,16(sp)
 1001d5c:	003c7e06 	br	1000f58 <___vfprintf_internal_r+0xa38>
 1001d60:	d9014f17 	ldw	r4,1340(sp)
 1001d64:	b00b883a 	mov	r5,r22
 1001d68:	d9800c04 	addi	r6,sp,48
 1001d6c:	10004c80 	call	10004c8 <__sprint_r>
 1001d70:	103ba31e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001d74:	dc800e17 	ldw	r18,56(sp)
 1001d78:	dc400d17 	ldw	r17,52(sp)
 1001d7c:	d9000517 	ldw	r4,20(sp)
 1001d80:	d9401904 	addi	r5,sp,100
 1001d84:	003da106 	br	100140c <___vfprintf_internal_r+0xeec>
 1001d88:	d9014f17 	ldw	r4,1340(sp)
 1001d8c:	b00b883a 	mov	r5,r22
 1001d90:	d9800c04 	addi	r6,sp,48
 1001d94:	10004c80 	call	10004c8 <__sprint_r>
 1001d98:	103b991e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001d9c:	dc800e17 	ldw	r18,56(sp)
 1001da0:	dc400d17 	ldw	r17,52(sp)
 1001da4:	d9000517 	ldw	r4,20(sp)
 1001da8:	d8c01904 	addi	r3,sp,100
 1001dac:	003d8b06 	br	10013dc <___vfprintf_internal_r+0xebc>
 1001db0:	07004074 	movhi	fp,257
 1001db4:	e7333284 	addi	fp,fp,-13110
 1001db8:	9425883a 	add	r18,r18,r16
 1001dbc:	8c400044 	addi	r17,r17,1
 1001dc0:	008001c4 	movi	r2,7
 1001dc4:	1f000015 	stw	fp,0(r3)
 1001dc8:	1c000115 	stw	r16,4(r3)
 1001dcc:	dc800e15 	stw	r18,56(sp)
 1001dd0:	dc400d15 	stw	r17,52(sp)
 1001dd4:	147fbc16 	blt	r2,r17,1001cc8 <___vfprintf_internal_r+0x17a8>
 1001dd8:	18c00204 	addi	r3,r3,8
 1001ddc:	003fc206 	br	1001ce8 <___vfprintf_internal_r+0x17c8>
 1001de0:	d9014f17 	ldw	r4,1340(sp)
 1001de4:	b00b883a 	mov	r5,r22
 1001de8:	d9800c04 	addi	r6,sp,48
 1001dec:	10004c80 	call	10004c8 <__sprint_r>
 1001df0:	103b831e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001df4:	dc800e17 	ldw	r18,56(sp)
 1001df8:	d9000517 	ldw	r4,20(sp)
 1001dfc:	d8c01904 	addi	r3,sp,100
 1001e00:	003cfc06 	br	10011f4 <___vfprintf_internal_r+0xcd4>
 1001e04:	07004074 	movhi	fp,257
 1001e08:	e7333284 	addi	fp,fp,-13110
 1001e0c:	003bde06 	br	1000d88 <___vfprintf_internal_r+0x868>
 1001e10:	00804074 	movhi	r2,257
 1001e14:	10b32104 	addi	r2,r2,-13180
 1001e18:	d8814115 	stw	r2,1284(sp)
 1001e1c:	003def06 	br	10015dc <___vfprintf_internal_r+0x10bc>
 1001e20:	d9014217 	ldw	r4,1288(sp)
 1001e24:	d9414317 	ldw	r5,1292(sp)
 1001e28:	10070100 	call	1007010 <__isnand>
 1001e2c:	10003926 	beq	r2,zero,1001f14 <___vfprintf_internal_r+0x19f4>
 1001e30:	d9414d17 	ldw	r5,1332(sp)
 1001e34:	008011c4 	movi	r2,71
 1001e38:	1140ce16 	blt	r2,r5,1002174 <___vfprintf_internal_r+0x1c54>
 1001e3c:	01804074 	movhi	r6,257
 1001e40:	31b32204 	addi	r6,r6,-13176
 1001e44:	d9814115 	stw	r6,1284(sp)
 1001e48:	003de406 	br	10015dc <___vfprintf_internal_r+0x10bc>
 1001e4c:	d9014c17 	ldw	r4,1328(sp)
 1001e50:	bdc00044 	addi	r23,r23,1
 1001e54:	b8c00007 	ldb	r3,0(r23)
 1001e58:	21000814 	ori	r4,r4,32
 1001e5c:	d9014c15 	stw	r4,1328(sp)
 1001e60:	003a2e06 	br	100071c <___vfprintf_internal_r+0x1fc>
 1001e64:	dcc14515 	stw	r19,1300(sp)
 1001e68:	98011016 	blt	r19,zero,10022ac <___vfprintf_internal_r+0x1d8c>
 1001e6c:	980f883a 	mov	r7,r19
 1001e70:	d8014615 	stw	zero,1304(sp)
 1001e74:	003c4c06 	br	1000fa8 <___vfprintf_internal_r+0xa88>
 1001e78:	d9014f17 	ldw	r4,1340(sp)
 1001e7c:	b00b883a 	mov	r5,r22
 1001e80:	d9800c04 	addi	r6,sp,48
 1001e84:	10004c80 	call	10004c8 <__sprint_r>
 1001e88:	103b5d1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001e8c:	dc800e17 	ldw	r18,56(sp)
 1001e90:	d9000517 	ldw	r4,20(sp)
 1001e94:	d8c01904 	addi	r3,sp,100
 1001e98:	003f2e06 	br	1001b54 <___vfprintf_internal_r+0x1634>
 1001e9c:	d8c14c17 	ldw	r3,1328(sp)
 1001ea0:	1880100c 	andi	r2,r3,64
 1001ea4:	1000a026 	beq	r2,zero,1002128 <___vfprintf_internal_r+0x1c08>
 1001ea8:	38800017 	ldw	r2,0(r7)
 1001eac:	39c00104 	addi	r7,r7,4
 1001eb0:	d9c14015 	stw	r7,1280(sp)
 1001eb4:	d9014b17 	ldw	r4,1324(sp)
 1001eb8:	d9c14017 	ldw	r7,1280(sp)
 1001ebc:	1100000d 	sth	r4,0(r2)
 1001ec0:	0039f306 	br	1000690 <___vfprintf_internal_r+0x170>
 1001ec4:	d9014f17 	ldw	r4,1340(sp)
 1001ec8:	b00b883a 	mov	r5,r22
 1001ecc:	d9800c04 	addi	r6,sp,48
 1001ed0:	10004c80 	call	10004c8 <__sprint_r>
 1001ed4:	103b4a1e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1001ed8:	dc800e17 	ldw	r18,56(sp)
 1001edc:	dc400d17 	ldw	r17,52(sp)
 1001ee0:	d9000517 	ldw	r4,20(sp)
 1001ee4:	d8c01904 	addi	r3,sp,100
 1001ee8:	003f2d06 	br	1001ba0 <___vfprintf_internal_r+0x1680>
 1001eec:	00800184 	movi	r2,6
 1001ef0:	14c09a36 	bltu	r2,r19,100215c <___vfprintf_internal_r+0x1c3c>
 1001ef4:	dcc14515 	stw	r19,1300(sp)
 1001ef8:	9800010e 	bge	r19,zero,1001f00 <___vfprintf_internal_r+0x19e0>
 1001efc:	d8014515 	stw	zero,1300(sp)
 1001f00:	00804074 	movhi	r2,257
 1001f04:	10b32404 	addi	r2,r2,-13168
 1001f08:	980f883a 	mov	r7,r19
 1001f0c:	d8814115 	stw	r2,1284(sp)
 1001f10:	003a7206 	br	10008dc <___vfprintf_internal_r+0x3bc>
 1001f14:	00bfffc4 	movi	r2,-1
 1001f18:	9880e226 	beq	r19,r2,10022a4 <___vfprintf_internal_r+0x1d84>
 1001f1c:	d9414d17 	ldw	r5,1332(sp)
 1001f20:	008019c4 	movi	r2,103
 1001f24:	2880dc26 	beq	r5,r2,1002298 <___vfprintf_internal_r+0x1d78>
 1001f28:	008011c4 	movi	r2,71
 1001f2c:	2880da26 	beq	r5,r2,1002298 <___vfprintf_internal_r+0x1d78>
 1001f30:	d9414c17 	ldw	r5,1328(sp)
 1001f34:	d9014317 	ldw	r4,1292(sp)
 1001f38:	d9814217 	ldw	r6,1288(sp)
 1001f3c:	29404014 	ori	r5,r5,256
 1001f40:	d9414c15 	stw	r5,1328(sp)
 1001f44:	2000cc16 	blt	r4,zero,1002278 <___vfprintf_internal_r+0x1d58>
 1001f48:	3021883a 	mov	r16,r6
 1001f4c:	2023883a 	mov	r17,r4
 1001f50:	0039883a 	mov	fp,zero
 1001f54:	d9414d17 	ldw	r5,1332(sp)
 1001f58:	00801984 	movi	r2,102
 1001f5c:	2880b726 	beq	r5,r2,100223c <___vfprintf_internal_r+0x1d1c>
 1001f60:	00801184 	movi	r2,70
 1001f64:	2880b526 	beq	r5,r2,100223c <___vfprintf_internal_r+0x1d1c>
 1001f68:	00801944 	movi	r2,101
 1001f6c:	2880c826 	beq	r5,r2,1002290 <___vfprintf_internal_r+0x1d70>
 1001f70:	00801144 	movi	r2,69
 1001f74:	2880c626 	beq	r5,r2,1002290 <___vfprintf_internal_r+0x1d70>
 1001f78:	9829883a 	mov	r20,r19
 1001f7c:	d9014f17 	ldw	r4,1340(sp)
 1001f80:	d8800504 	addi	r2,sp,20
 1001f84:	880d883a 	mov	r6,r17
 1001f88:	d8800115 	stw	r2,4(sp)
 1001f8c:	d8c00604 	addi	r3,sp,24
 1001f90:	d8800704 	addi	r2,sp,28
 1001f94:	800b883a 	mov	r5,r16
 1001f98:	01c00084 	movi	r7,2
 1001f9c:	d8c00215 	stw	r3,8(sp)
 1001fa0:	d8800315 	stw	r2,12(sp)
 1001fa4:	dd000015 	stw	r20,0(sp)
 1001fa8:	10027880 	call	1002788 <_dtoa_r>
 1001fac:	d9814d17 	ldw	r6,1332(sp)
 1001fb0:	d8814115 	stw	r2,1284(sp)
 1001fb4:	008019c4 	movi	r2,103
 1001fb8:	30809526 	beq	r6,r2,1002210 <___vfprintf_internal_r+0x1cf0>
 1001fbc:	d8c14d17 	ldw	r3,1332(sp)
 1001fc0:	008011c4 	movi	r2,71
 1001fc4:	18809226 	beq	r3,r2,1002210 <___vfprintf_internal_r+0x1cf0>
 1001fc8:	d9414117 	ldw	r5,1284(sp)
 1001fcc:	d9814d17 	ldw	r6,1332(sp)
 1001fd0:	00801984 	movi	r2,102
 1001fd4:	2d25883a 	add	r18,r5,r20
 1001fd8:	30808626 	beq	r6,r2,10021f4 <___vfprintf_internal_r+0x1cd4>
 1001fdc:	00801184 	movi	r2,70
 1001fe0:	30808426 	beq	r6,r2,10021f4 <___vfprintf_internal_r+0x1cd4>
 1001fe4:	000d883a 	mov	r6,zero
 1001fe8:	000f883a 	mov	r7,zero
 1001fec:	880b883a 	mov	r5,r17
 1001ff0:	8009883a 	mov	r4,r16
 1001ff4:	1008f4c0 	call	1008f4c <__eqdf2>
 1001ff8:	1000751e 	bne	r2,zero,10021d0 <___vfprintf_internal_r+0x1cb0>
 1001ffc:	9005883a 	mov	r2,r18
 1002000:	dc800715 	stw	r18,28(sp)
 1002004:	d9014117 	ldw	r4,1284(sp)
 1002008:	d9414d17 	ldw	r5,1332(sp)
 100200c:	00c019c4 	movi	r3,103
 1002010:	1125c83a 	sub	r18,r2,r4
 1002014:	28c06826 	beq	r5,r3,10021b8 <___vfprintf_internal_r+0x1c98>
 1002018:	008011c4 	movi	r2,71
 100201c:	28806626 	beq	r5,r2,10021b8 <___vfprintf_internal_r+0x1c98>
 1002020:	d9000517 	ldw	r4,20(sp)
 1002024:	d8c14d17 	ldw	r3,1332(sp)
 1002028:	00801944 	movi	r2,101
 100202c:	10c05516 	blt	r2,r3,1002184 <___vfprintf_internal_r+0x1c64>
 1002030:	213fffc4 	addi	r4,r4,-1
 1002034:	d9000515 	stw	r4,20(sp)
 1002038:	d8c00805 	stb	r3,32(sp)
 100203c:	2021883a 	mov	r16,r4
 1002040:	2000c116 	blt	r4,zero,1002348 <___vfprintf_internal_r+0x1e28>
 1002044:	00800ac4 	movi	r2,43
 1002048:	d8800845 	stb	r2,33(sp)
 100204c:	00800244 	movi	r2,9
 1002050:	1400af0e 	bge	r2,r16,1002310 <___vfprintf_internal_r+0x1df0>
 1002054:	1027883a 	mov	r19,r2
 1002058:	dc400b84 	addi	r17,sp,46
 100205c:	8009883a 	mov	r4,r16
 1002060:	01400284 	movi	r5,10
 1002064:	10096340 	call	1009634 <__modsi3>
 1002068:	10800c04 	addi	r2,r2,48
 100206c:	8c7fffc4 	addi	r17,r17,-1
 1002070:	8009883a 	mov	r4,r16
 1002074:	01400284 	movi	r5,10
 1002078:	88800005 	stb	r2,0(r17)
 100207c:	10095d40 	call	10095d4 <__divsi3>
 1002080:	1021883a 	mov	r16,r2
 1002084:	98bff516 	blt	r19,r2,100205c <___vfprintf_internal_r+0x1b3c>
 1002088:	10c00c04 	addi	r3,r2,48
 100208c:	d88009c4 	addi	r2,sp,39
 1002090:	108001c4 	addi	r2,r2,7
 1002094:	897fffc4 	addi	r5,r17,-1
 1002098:	88ffffc5 	stb	r3,-1(r17)
 100209c:	2880a72e 	bgeu	r5,r2,100233c <___vfprintf_internal_r+0x1e1c>
 10020a0:	1009883a 	mov	r4,r2
 10020a4:	d9800804 	addi	r6,sp,32
 10020a8:	d8c00884 	addi	r3,sp,34
 10020ac:	28800003 	ldbu	r2,0(r5)
 10020b0:	29400044 	addi	r5,r5,1
 10020b4:	18800005 	stb	r2,0(r3)
 10020b8:	18c00044 	addi	r3,r3,1
 10020bc:	293ffb36 	bltu	r5,r4,10020ac <___vfprintf_internal_r+0x1b8c>
 10020c0:	1987c83a 	sub	r3,r3,r6
 10020c4:	00800044 	movi	r2,1
 10020c8:	d8c14815 	stw	r3,1312(sp)
 10020cc:	90cf883a 	add	r7,r18,r3
 10020d0:	1480960e 	bge	r2,r18,100232c <___vfprintf_internal_r+0x1e0c>
 10020d4:	39c00044 	addi	r7,r7,1
 10020d8:	d9c14515 	stw	r7,1300(sp)
 10020dc:	38003416 	blt	r7,zero,10021b0 <___vfprintf_internal_r+0x1c90>
 10020e0:	e0803fcc 	andi	r2,fp,255
 10020e4:	1080201c 	xori	r2,r2,128
 10020e8:	10bfe004 	addi	r2,r2,-128
 10020ec:	10004e26 	beq	r2,zero,1002228 <___vfprintf_internal_r+0x1d08>
 10020f0:	00800b44 	movi	r2,45
 10020f4:	dc814715 	stw	r18,1308(sp)
 10020f8:	d8014615 	stw	zero,1304(sp)
 10020fc:	d8800405 	stb	r2,16(sp)
 1002100:	003bab06 	br	1000fb0 <___vfprintf_internal_r+0xa90>
 1002104:	00800b44 	movi	r2,45
 1002108:	d8800405 	stb	r2,16(sp)
 100210c:	003d2d06 	br	10015c4 <___vfprintf_internal_r+0x10a4>
 1002110:	d9014f17 	ldw	r4,1340(sp)
 1002114:	b00b883a 	mov	r5,r22
 1002118:	d9800c04 	addi	r6,sp,48
 100211c:	10004c80 	call	10004c8 <__sprint_r>
 1002120:	103ab71e 	bne	r2,zero,1000c00 <___vfprintf_internal_r+0x6e0>
 1002124:	003ab506 	br	1000bfc <___vfprintf_internal_r+0x6dc>
 1002128:	38800017 	ldw	r2,0(r7)
 100212c:	39c00104 	addi	r7,r7,4
 1002130:	d9c14015 	stw	r7,1280(sp)
 1002134:	d9414b17 	ldw	r5,1324(sp)
 1002138:	d9c14017 	ldw	r7,1280(sp)
 100213c:	11400015 	stw	r5,0(r2)
 1002140:	00395306 	br	1000690 <___vfprintf_internal_r+0x170>
 1002144:	980f883a 	mov	r7,r19
 1002148:	dcc14515 	stw	r19,1300(sp)
 100214c:	d8014615 	stw	zero,1304(sp)
 1002150:	003b9506 	br	1000fa8 <___vfprintf_internal_r+0xa88>
 1002154:	0027883a 	mov	r19,zero
 1002158:	00397206 	br	1000724 <___vfprintf_internal_r+0x204>
 100215c:	00c04074 	movhi	r3,257
 1002160:	18f32404 	addi	r3,r3,-13168
 1002164:	100f883a 	mov	r7,r2
 1002168:	d8814515 	stw	r2,1300(sp)
 100216c:	d8c14115 	stw	r3,1284(sp)
 1002170:	0039da06 	br	10008dc <___vfprintf_internal_r+0x3bc>
 1002174:	00804074 	movhi	r2,257
 1002178:	10b32304 	addi	r2,r2,-13172
 100217c:	d8814115 	stw	r2,1284(sp)
 1002180:	003d1606 	br	10015dc <___vfprintf_internal_r+0x10bc>
 1002184:	d9414d17 	ldw	r5,1332(sp)
 1002188:	00801984 	movi	r2,102
 100218c:	28804926 	beq	r5,r2,10022b4 <___vfprintf_internal_r+0x1d94>
 1002190:	200f883a 	mov	r7,r4
 1002194:	24805716 	blt	r4,r18,10022f4 <___vfprintf_internal_r+0x1dd4>
 1002198:	d9414c17 	ldw	r5,1328(sp)
 100219c:	2880004c 	andi	r2,r5,1
 10021a0:	10000126 	beq	r2,zero,10021a8 <___vfprintf_internal_r+0x1c88>
 10021a4:	21c00044 	addi	r7,r4,1
 10021a8:	d9c14515 	stw	r7,1300(sp)
 10021ac:	383fcc0e 	bge	r7,zero,10020e0 <___vfprintf_internal_r+0x1bc0>
 10021b0:	d8014515 	stw	zero,1300(sp)
 10021b4:	003fca06 	br	10020e0 <___vfprintf_internal_r+0x1bc0>
 10021b8:	d9000517 	ldw	r4,20(sp)
 10021bc:	00bfff04 	movi	r2,-4
 10021c0:	1100480e 	bge	r2,r4,10022e4 <___vfprintf_internal_r+0x1dc4>
 10021c4:	99004716 	blt	r19,r4,10022e4 <___vfprintf_internal_r+0x1dc4>
 10021c8:	d8c14d15 	stw	r3,1332(sp)
 10021cc:	003ff006 	br	1002190 <___vfprintf_internal_r+0x1c70>
 10021d0:	d8800717 	ldw	r2,28(sp)
 10021d4:	14bf8b2e 	bgeu	r2,r18,1002004 <___vfprintf_internal_r+0x1ae4>
 10021d8:	9007883a 	mov	r3,r18
 10021dc:	01000c04 	movi	r4,48
 10021e0:	11000005 	stb	r4,0(r2)
 10021e4:	10800044 	addi	r2,r2,1
 10021e8:	d8800715 	stw	r2,28(sp)
 10021ec:	18bffc1e 	bne	r3,r2,10021e0 <___vfprintf_internal_r+0x1cc0>
 10021f0:	003f8406 	br	1002004 <___vfprintf_internal_r+0x1ae4>
 10021f4:	d8814117 	ldw	r2,1284(sp)
 10021f8:	10c00007 	ldb	r3,0(r2)
 10021fc:	00800c04 	movi	r2,48
 1002200:	18805b26 	beq	r3,r2,1002370 <___vfprintf_internal_r+0x1e50>
 1002204:	d9000517 	ldw	r4,20(sp)
 1002208:	9125883a 	add	r18,r18,r4
 100220c:	003f7506 	br	1001fe4 <___vfprintf_internal_r+0x1ac4>
 1002210:	d9014c17 	ldw	r4,1328(sp)
 1002214:	2080004c 	andi	r2,r4,1
 1002218:	1005003a 	cmpeq	r2,r2,zero
 100221c:	103f6a26 	beq	r2,zero,1001fc8 <___vfprintf_internal_r+0x1aa8>
 1002220:	d8800717 	ldw	r2,28(sp)
 1002224:	003f7706 	br	1002004 <___vfprintf_internal_r+0x1ae4>
 1002228:	d9c14515 	stw	r7,1300(sp)
 100222c:	38004d16 	blt	r7,zero,1002364 <___vfprintf_internal_r+0x1e44>
 1002230:	dc814715 	stw	r18,1308(sp)
 1002234:	d8014615 	stw	zero,1304(sp)
 1002238:	003b5b06 	br	1000fa8 <___vfprintf_internal_r+0xa88>
 100223c:	d9014f17 	ldw	r4,1340(sp)
 1002240:	d8800504 	addi	r2,sp,20
 1002244:	d8800115 	stw	r2,4(sp)
 1002248:	d8c00604 	addi	r3,sp,24
 100224c:	d8800704 	addi	r2,sp,28
 1002250:	800b883a 	mov	r5,r16
 1002254:	880d883a 	mov	r6,r17
 1002258:	01c000c4 	movi	r7,3
 100225c:	d8c00215 	stw	r3,8(sp)
 1002260:	d8800315 	stw	r2,12(sp)
 1002264:	dcc00015 	stw	r19,0(sp)
 1002268:	9829883a 	mov	r20,r19
 100226c:	10027880 	call	1002788 <_dtoa_r>
 1002270:	d8814115 	stw	r2,1284(sp)
 1002274:	003f5106 	br	1001fbc <___vfprintf_internal_r+0x1a9c>
 1002278:	d8c14217 	ldw	r3,1288(sp)
 100227c:	d9014317 	ldw	r4,1292(sp)
 1002280:	07000b44 	movi	fp,45
 1002284:	1821883a 	mov	r16,r3
 1002288:	2460003c 	xorhi	r17,r4,32768
 100228c:	003f3106 	br	1001f54 <___vfprintf_internal_r+0x1a34>
 1002290:	9d000044 	addi	r20,r19,1
 1002294:	003f3906 	br	1001f7c <___vfprintf_internal_r+0x1a5c>
 1002298:	983f251e 	bne	r19,zero,1001f30 <___vfprintf_internal_r+0x1a10>
 100229c:	04c00044 	movi	r19,1
 10022a0:	003f2306 	br	1001f30 <___vfprintf_internal_r+0x1a10>
 10022a4:	04c00184 	movi	r19,6
 10022a8:	003f2106 	br	1001f30 <___vfprintf_internal_r+0x1a10>
 10022ac:	d8014515 	stw	zero,1300(sp)
 10022b0:	003eee06 	br	1001e6c <___vfprintf_internal_r+0x194c>
 10022b4:	200f883a 	mov	r7,r4
 10022b8:	0100370e 	bge	zero,r4,1002398 <___vfprintf_internal_r+0x1e78>
 10022bc:	9800031e 	bne	r19,zero,10022cc <___vfprintf_internal_r+0x1dac>
 10022c0:	d9814c17 	ldw	r6,1328(sp)
 10022c4:	3080004c 	andi	r2,r6,1
 10022c8:	103fb726 	beq	r2,zero,10021a8 <___vfprintf_internal_r+0x1c88>
 10022cc:	20800044 	addi	r2,r4,1
 10022d0:	98a7883a 	add	r19,r19,r2
 10022d4:	dcc14515 	stw	r19,1300(sp)
 10022d8:	980f883a 	mov	r7,r19
 10022dc:	983f800e 	bge	r19,zero,10020e0 <___vfprintf_internal_r+0x1bc0>
 10022e0:	003fb306 	br	10021b0 <___vfprintf_internal_r+0x1c90>
 10022e4:	d9814d17 	ldw	r6,1332(sp)
 10022e8:	31bfff84 	addi	r6,r6,-2
 10022ec:	d9814d15 	stw	r6,1332(sp)
 10022f0:	003f4c06 	br	1002024 <___vfprintf_internal_r+0x1b04>
 10022f4:	0100180e 	bge	zero,r4,1002358 <___vfprintf_internal_r+0x1e38>
 10022f8:	00800044 	movi	r2,1
 10022fc:	1485883a 	add	r2,r2,r18
 1002300:	d8814515 	stw	r2,1300(sp)
 1002304:	100f883a 	mov	r7,r2
 1002308:	103f750e 	bge	r2,zero,10020e0 <___vfprintf_internal_r+0x1bc0>
 100230c:	003fa806 	br	10021b0 <___vfprintf_internal_r+0x1c90>
 1002310:	80c00c04 	addi	r3,r16,48
 1002314:	00800c04 	movi	r2,48
 1002318:	d8c008c5 	stb	r3,35(sp)
 100231c:	d9800804 	addi	r6,sp,32
 1002320:	d8c00904 	addi	r3,sp,36
 1002324:	d8800885 	stb	r2,34(sp)
 1002328:	003f6506 	br	10020c0 <___vfprintf_internal_r+0x1ba0>
 100232c:	d9014c17 	ldw	r4,1328(sp)
 1002330:	2084703a 	and	r2,r4,r2
 1002334:	103f9c26 	beq	r2,zero,10021a8 <___vfprintf_internal_r+0x1c88>
 1002338:	003f6606 	br	10020d4 <___vfprintf_internal_r+0x1bb4>
 100233c:	d9800804 	addi	r6,sp,32
 1002340:	d8c00884 	addi	r3,sp,34
 1002344:	003f5e06 	br	10020c0 <___vfprintf_internal_r+0x1ba0>
 1002348:	00800b44 	movi	r2,45
 100234c:	0121c83a 	sub	r16,zero,r4
 1002350:	d8800845 	stb	r2,33(sp)
 1002354:	003f3d06 	br	100204c <___vfprintf_internal_r+0x1b2c>
 1002358:	00800084 	movi	r2,2
 100235c:	1105c83a 	sub	r2,r2,r4
 1002360:	003fe606 	br	10022fc <___vfprintf_internal_r+0x1ddc>
 1002364:	d8014515 	stw	zero,1300(sp)
 1002368:	dc814715 	stw	r18,1308(sp)
 100236c:	003fb106 	br	1002234 <___vfprintf_internal_r+0x1d14>
 1002370:	000d883a 	mov	r6,zero
 1002374:	000f883a 	mov	r7,zero
 1002378:	8009883a 	mov	r4,r16
 100237c:	880b883a 	mov	r5,r17
 1002380:	1008fd40 	call	1008fd4 <__nedf2>
 1002384:	103f9f26 	beq	r2,zero,1002204 <___vfprintf_internal_r+0x1ce4>
 1002388:	00800044 	movi	r2,1
 100238c:	1509c83a 	sub	r4,r2,r20
 1002390:	d9000515 	stw	r4,20(sp)
 1002394:	003f9b06 	br	1002204 <___vfprintf_internal_r+0x1ce4>
 1002398:	98000d1e 	bne	r19,zero,10023d0 <___vfprintf_internal_r+0x1eb0>
 100239c:	d8c14c17 	ldw	r3,1328(sp)
 10023a0:	1880004c 	andi	r2,r3,1
 10023a4:	10000a1e 	bne	r2,zero,10023d0 <___vfprintf_internal_r+0x1eb0>
 10023a8:	01000044 	movi	r4,1
 10023ac:	200f883a 	mov	r7,r4
 10023b0:	d9014515 	stw	r4,1300(sp)
 10023b4:	003f4a06 	br	10020e0 <___vfprintf_internal_r+0x1bc0>
 10023b8:	3cc00017 	ldw	r19,0(r7)
 10023bc:	39c00104 	addi	r7,r7,4
 10023c0:	983d0e0e 	bge	r19,zero,10017fc <___vfprintf_internal_r+0x12dc>
 10023c4:	b8c00007 	ldb	r3,0(r23)
 10023c8:	04ffffc4 	movi	r19,-1
 10023cc:	0038d306 	br	100071c <___vfprintf_internal_r+0x1fc>
 10023d0:	9cc00084 	addi	r19,r19,2
 10023d4:	dcc14515 	stw	r19,1300(sp)
 10023d8:	980f883a 	mov	r7,r19
 10023dc:	983f400e 	bge	r19,zero,10020e0 <___vfprintf_internal_r+0x1bc0>
 10023e0:	003f7306 	br	10021b0 <___vfprintf_internal_r+0x1c90>

010023e4 <__vfprintf_internal>:
 10023e4:	00804074 	movhi	r2,257
 10023e8:	10ba8304 	addi	r2,r2,-5620
 10023ec:	2013883a 	mov	r9,r4
 10023f0:	11000017 	ldw	r4,0(r2)
 10023f4:	2805883a 	mov	r2,r5
 10023f8:	300f883a 	mov	r7,r6
 10023fc:	480b883a 	mov	r5,r9
 1002400:	100d883a 	mov	r6,r2
 1002404:	10005201 	jmpi	1000520 <___vfprintf_internal_r>

01002408 <__swsetup_r>:
 1002408:	00804074 	movhi	r2,257
 100240c:	10ba8304 	addi	r2,r2,-5620
 1002410:	10c00017 	ldw	r3,0(r2)
 1002414:	defffd04 	addi	sp,sp,-12
 1002418:	dc400115 	stw	r17,4(sp)
 100241c:	dc000015 	stw	r16,0(sp)
 1002420:	dfc00215 	stw	ra,8(sp)
 1002424:	2023883a 	mov	r17,r4
 1002428:	2821883a 	mov	r16,r5
 100242c:	18000226 	beq	r3,zero,1002438 <__swsetup_r+0x30>
 1002430:	18800e17 	ldw	r2,56(r3)
 1002434:	10001f26 	beq	r2,zero,10024b4 <__swsetup_r+0xac>
 1002438:	8100030b 	ldhu	r4,12(r16)
 100243c:	2080020c 	andi	r2,r4,8
 1002440:	10002826 	beq	r2,zero,10024e4 <__swsetup_r+0xdc>
 1002444:	81400417 	ldw	r5,16(r16)
 1002448:	28001d26 	beq	r5,zero,10024c0 <__swsetup_r+0xb8>
 100244c:	2080004c 	andi	r2,r4,1
 1002450:	1005003a 	cmpeq	r2,r2,zero
 1002454:	10000b26 	beq	r2,zero,1002484 <__swsetup_r+0x7c>
 1002458:	2080008c 	andi	r2,r4,2
 100245c:	10001226 	beq	r2,zero,10024a8 <__swsetup_r+0xa0>
 1002460:	0005883a 	mov	r2,zero
 1002464:	80800215 	stw	r2,8(r16)
 1002468:	28000b26 	beq	r5,zero,1002498 <__swsetup_r+0x90>
 100246c:	0005883a 	mov	r2,zero
 1002470:	dfc00217 	ldw	ra,8(sp)
 1002474:	dc400117 	ldw	r17,4(sp)
 1002478:	dc000017 	ldw	r16,0(sp)
 100247c:	dec00304 	addi	sp,sp,12
 1002480:	f800283a 	ret
 1002484:	80800517 	ldw	r2,20(r16)
 1002488:	80000215 	stw	zero,8(r16)
 100248c:	0085c83a 	sub	r2,zero,r2
 1002490:	80800615 	stw	r2,24(r16)
 1002494:	283ff51e 	bne	r5,zero,100246c <__swsetup_r+0x64>
 1002498:	2080200c 	andi	r2,r4,128
 100249c:	103ff326 	beq	r2,zero,100246c <__swsetup_r+0x64>
 10024a0:	00bfffc4 	movi	r2,-1
 10024a4:	003ff206 	br	1002470 <__swsetup_r+0x68>
 10024a8:	80800517 	ldw	r2,20(r16)
 10024ac:	80800215 	stw	r2,8(r16)
 10024b0:	003fed06 	br	1002468 <__swsetup_r+0x60>
 10024b4:	1809883a 	mov	r4,r3
 10024b8:	1003fd40 	call	1003fd4 <__sinit>
 10024bc:	003fde06 	br	1002438 <__swsetup_r+0x30>
 10024c0:	20c0a00c 	andi	r3,r4,640
 10024c4:	00808004 	movi	r2,512
 10024c8:	18bfe026 	beq	r3,r2,100244c <__swsetup_r+0x44>
 10024cc:	8809883a 	mov	r4,r17
 10024d0:	800b883a 	mov	r5,r16
 10024d4:	1004d800 	call	1004d80 <__smakebuf_r>
 10024d8:	8100030b 	ldhu	r4,12(r16)
 10024dc:	81400417 	ldw	r5,16(r16)
 10024e0:	003fda06 	br	100244c <__swsetup_r+0x44>
 10024e4:	2080040c 	andi	r2,r4,16
 10024e8:	103fed26 	beq	r2,zero,10024a0 <__swsetup_r+0x98>
 10024ec:	2080010c 	andi	r2,r4,4
 10024f0:	10001226 	beq	r2,zero,100253c <__swsetup_r+0x134>
 10024f4:	81400c17 	ldw	r5,48(r16)
 10024f8:	28000526 	beq	r5,zero,1002510 <__swsetup_r+0x108>
 10024fc:	80801004 	addi	r2,r16,64
 1002500:	28800226 	beq	r5,r2,100250c <__swsetup_r+0x104>
 1002504:	8809883a 	mov	r4,r17
 1002508:	100438c0 	call	100438c <_free_r>
 100250c:	80000c15 	stw	zero,48(r16)
 1002510:	8080030b 	ldhu	r2,12(r16)
 1002514:	81400417 	ldw	r5,16(r16)
 1002518:	80000115 	stw	zero,4(r16)
 100251c:	10bff6cc 	andi	r2,r2,65499
 1002520:	8080030d 	sth	r2,12(r16)
 1002524:	81400015 	stw	r5,0(r16)
 1002528:	8080030b 	ldhu	r2,12(r16)
 100252c:	10800214 	ori	r2,r2,8
 1002530:	113fffcc 	andi	r4,r2,65535
 1002534:	8080030d 	sth	r2,12(r16)
 1002538:	003fc306 	br	1002448 <__swsetup_r+0x40>
 100253c:	81400417 	ldw	r5,16(r16)
 1002540:	003ff906 	br	1002528 <__swsetup_r+0x120>

01002544 <quorem>:
 1002544:	28c00417 	ldw	r3,16(r5)
 1002548:	20800417 	ldw	r2,16(r4)
 100254c:	defff104 	addi	sp,sp,-60
 1002550:	dfc00e15 	stw	ra,56(sp)
 1002554:	df000d15 	stw	fp,52(sp)
 1002558:	ddc00c15 	stw	r23,48(sp)
 100255c:	dd800b15 	stw	r22,44(sp)
 1002560:	dd400a15 	stw	r21,40(sp)
 1002564:	dd000915 	stw	r20,36(sp)
 1002568:	dcc00815 	stw	r19,32(sp)
 100256c:	dc800715 	stw	r18,28(sp)
 1002570:	dc400615 	stw	r17,24(sp)
 1002574:	dc000515 	stw	r16,20(sp)
 1002578:	d9000315 	stw	r4,12(sp)
 100257c:	d9400415 	stw	r5,16(sp)
 1002580:	10c07f16 	blt	r2,r3,1002780 <quorem+0x23c>
 1002584:	1d3fffc4 	addi	r20,r3,-1
 1002588:	d8c00417 	ldw	r3,16(sp)
 100258c:	d9000317 	ldw	r4,12(sp)
 1002590:	a505883a 	add	r2,r20,r20
 1002594:	1085883a 	add	r2,r2,r2
 1002598:	1cc00504 	addi	r19,r3,20
 100259c:	25c00504 	addi	r23,r4,20
 10025a0:	98ad883a 	add	r22,r19,r2
 10025a4:	15c7883a 	add	r3,r2,r23
 10025a8:	b1400017 	ldw	r5,0(r22)
 10025ac:	19000017 	ldw	r4,0(r3)
 10025b0:	d8c00015 	stw	r3,0(sp)
 10025b4:	29400044 	addi	r5,r5,1
 10025b8:	d9000215 	stw	r4,8(sp)
 10025bc:	10096940 	call	1009694 <__udivsi3>
 10025c0:	1039883a 	mov	fp,r2
 10025c4:	10003d1e 	bne	r2,zero,10026bc <quorem+0x178>
 10025c8:	d9400417 	ldw	r5,16(sp)
 10025cc:	d9000317 	ldw	r4,12(sp)
 10025d0:	1005aac0 	call	1005aac <__mcmp>
 10025d4:	10002c16 	blt	r2,zero,1002688 <quorem+0x144>
 10025d8:	e7000044 	addi	fp,fp,1
 10025dc:	b80f883a 	mov	r7,r23
 10025e0:	0011883a 	mov	r8,zero
 10025e4:	0009883a 	mov	r4,zero
 10025e8:	99400017 	ldw	r5,0(r19)
 10025ec:	38c00017 	ldw	r3,0(r7)
 10025f0:	9cc00104 	addi	r19,r19,4
 10025f4:	28bfffcc 	andi	r2,r5,65535
 10025f8:	2085883a 	add	r2,r4,r2
 10025fc:	11bfffcc 	andi	r6,r2,65535
 1002600:	193fffcc 	andi	r4,r3,65535
 1002604:	1004d43a 	srli	r2,r2,16
 1002608:	280ad43a 	srli	r5,r5,16
 100260c:	2189c83a 	sub	r4,r4,r6
 1002610:	2209883a 	add	r4,r4,r8
 1002614:	1806d43a 	srli	r3,r3,16
 1002618:	288b883a 	add	r5,r5,r2
 100261c:	200dd43a 	srai	r6,r4,16
 1002620:	28bfffcc 	andi	r2,r5,65535
 1002624:	1887c83a 	sub	r3,r3,r2
 1002628:	1987883a 	add	r3,r3,r6
 100262c:	3900000d 	sth	r4,0(r7)
 1002630:	38c0008d 	sth	r3,2(r7)
 1002634:	2808d43a 	srli	r4,r5,16
 1002638:	39c00104 	addi	r7,r7,4
 100263c:	1811d43a 	srai	r8,r3,16
 1002640:	b4ffe92e 	bgeu	r22,r19,10025e8 <quorem+0xa4>
 1002644:	a505883a 	add	r2,r20,r20
 1002648:	1085883a 	add	r2,r2,r2
 100264c:	b885883a 	add	r2,r23,r2
 1002650:	10c00017 	ldw	r3,0(r2)
 1002654:	18000c1e 	bne	r3,zero,1002688 <quorem+0x144>
 1002658:	113fff04 	addi	r4,r2,-4
 100265c:	b900082e 	bgeu	r23,r4,1002680 <quorem+0x13c>
 1002660:	10bfff17 	ldw	r2,-4(r2)
 1002664:	10000326 	beq	r2,zero,1002674 <quorem+0x130>
 1002668:	00000506 	br	1002680 <quorem+0x13c>
 100266c:	20800017 	ldw	r2,0(r4)
 1002670:	1000031e 	bne	r2,zero,1002680 <quorem+0x13c>
 1002674:	213fff04 	addi	r4,r4,-4
 1002678:	a53fffc4 	addi	r20,r20,-1
 100267c:	b93ffb36 	bltu	r23,r4,100266c <quorem+0x128>
 1002680:	d9000317 	ldw	r4,12(sp)
 1002684:	25000415 	stw	r20,16(r4)
 1002688:	e005883a 	mov	r2,fp
 100268c:	dfc00e17 	ldw	ra,56(sp)
 1002690:	df000d17 	ldw	fp,52(sp)
 1002694:	ddc00c17 	ldw	r23,48(sp)
 1002698:	dd800b17 	ldw	r22,44(sp)
 100269c:	dd400a17 	ldw	r21,40(sp)
 10026a0:	dd000917 	ldw	r20,36(sp)
 10026a4:	dcc00817 	ldw	r19,32(sp)
 10026a8:	dc800717 	ldw	r18,28(sp)
 10026ac:	dc400617 	ldw	r17,24(sp)
 10026b0:	dc000517 	ldw	r16,20(sp)
 10026b4:	dec00f04 	addi	sp,sp,60
 10026b8:	f800283a 	ret
 10026bc:	b823883a 	mov	r17,r23
 10026c0:	9825883a 	mov	r18,r19
 10026c4:	d8000115 	stw	zero,4(sp)
 10026c8:	002b883a 	mov	r21,zero
 10026cc:	94000017 	ldw	r16,0(r18)
 10026d0:	e009883a 	mov	r4,fp
 10026d4:	94800104 	addi	r18,r18,4
 10026d8:	817fffcc 	andi	r5,r16,65535
 10026dc:	10096a40 	call	10096a4 <__mulsi3>
 10026e0:	800ad43a 	srli	r5,r16,16
 10026e4:	e009883a 	mov	r4,fp
 10026e8:	a8a1883a 	add	r16,r21,r2
 10026ec:	10096a40 	call	10096a4 <__mulsi3>
 10026f0:	89000017 	ldw	r4,0(r17)
 10026f4:	80ffffcc 	andi	r3,r16,65535
 10026f8:	8020d43a 	srli	r16,r16,16
 10026fc:	217fffcc 	andi	r5,r4,65535
 1002700:	28cbc83a 	sub	r5,r5,r3
 1002704:	d8c00117 	ldw	r3,4(sp)
 1002708:	2008d43a 	srli	r4,r4,16
 100270c:	1405883a 	add	r2,r2,r16
 1002710:	28cb883a 	add	r5,r5,r3
 1002714:	280dd43a 	srai	r6,r5,16
 1002718:	10ffffcc 	andi	r3,r2,65535
 100271c:	20c9c83a 	sub	r4,r4,r3
 1002720:	2189883a 	add	r4,r4,r6
 1002724:	8900008d 	sth	r4,2(r17)
 1002728:	2009d43a 	srai	r4,r4,16
 100272c:	8940000d 	sth	r5,0(r17)
 1002730:	102ad43a 	srli	r21,r2,16
 1002734:	8c400104 	addi	r17,r17,4
 1002738:	d9000115 	stw	r4,4(sp)
 100273c:	b4bfe32e 	bgeu	r22,r18,10026cc <quorem+0x188>
 1002740:	d9000217 	ldw	r4,8(sp)
 1002744:	203fa01e 	bne	r4,zero,10025c8 <quorem+0x84>
 1002748:	d8800017 	ldw	r2,0(sp)
 100274c:	10ffff04 	addi	r3,r2,-4
 1002750:	b8c0082e 	bgeu	r23,r3,1002774 <quorem+0x230>
 1002754:	10bfff17 	ldw	r2,-4(r2)
 1002758:	10000326 	beq	r2,zero,1002768 <quorem+0x224>
 100275c:	00000506 	br	1002774 <quorem+0x230>
 1002760:	18800017 	ldw	r2,0(r3)
 1002764:	1000031e 	bne	r2,zero,1002774 <quorem+0x230>
 1002768:	18ffff04 	addi	r3,r3,-4
 100276c:	a53fffc4 	addi	r20,r20,-1
 1002770:	b8fffb36 	bltu	r23,r3,1002760 <quorem+0x21c>
 1002774:	d8c00317 	ldw	r3,12(sp)
 1002778:	1d000415 	stw	r20,16(r3)
 100277c:	003f9206 	br	10025c8 <quorem+0x84>
 1002780:	0005883a 	mov	r2,zero
 1002784:	003fc106 	br	100268c <quorem+0x148>

01002788 <_dtoa_r>:
 1002788:	22001017 	ldw	r8,64(r4)
 100278c:	deffda04 	addi	sp,sp,-152
 1002790:	dd402115 	stw	r21,132(sp)
 1002794:	dd002015 	stw	r20,128(sp)
 1002798:	dc801e15 	stw	r18,120(sp)
 100279c:	dc401d15 	stw	r17,116(sp)
 10027a0:	dfc02515 	stw	ra,148(sp)
 10027a4:	df002415 	stw	fp,144(sp)
 10027a8:	ddc02315 	stw	r23,140(sp)
 10027ac:	dd802215 	stw	r22,136(sp)
 10027b0:	dcc01f15 	stw	r19,124(sp)
 10027b4:	dc001c15 	stw	r16,112(sp)
 10027b8:	d9001615 	stw	r4,88(sp)
 10027bc:	3023883a 	mov	r17,r6
 10027c0:	2829883a 	mov	r20,r5
 10027c4:	d9c01715 	stw	r7,92(sp)
 10027c8:	dc802817 	ldw	r18,160(sp)
 10027cc:	302b883a 	mov	r21,r6
 10027d0:	40000a26 	beq	r8,zero,10027fc <_dtoa_r+0x74>
 10027d4:	20801117 	ldw	r2,68(r4)
 10027d8:	400b883a 	mov	r5,r8
 10027dc:	40800115 	stw	r2,4(r8)
 10027e0:	20c01117 	ldw	r3,68(r4)
 10027e4:	00800044 	movi	r2,1
 10027e8:	10c4983a 	sll	r2,r2,r3
 10027ec:	40800215 	stw	r2,8(r8)
 10027f0:	10059500 	call	1005950 <_Bfree>
 10027f4:	d8c01617 	ldw	r3,88(sp)
 10027f8:	18001015 	stw	zero,64(r3)
 10027fc:	8800a316 	blt	r17,zero,1002a8c <_dtoa_r+0x304>
 1002800:	90000015 	stw	zero,0(r18)
 1002804:	a8dffc2c 	andhi	r3,r21,32752
 1002808:	009ffc34 	movhi	r2,32752
 100280c:	18809126 	beq	r3,r2,1002a54 <_dtoa_r+0x2cc>
 1002810:	000d883a 	mov	r6,zero
 1002814:	000f883a 	mov	r7,zero
 1002818:	a009883a 	mov	r4,r20
 100281c:	a80b883a 	mov	r5,r21
 1002820:	dd001215 	stw	r20,72(sp)
 1002824:	dd401315 	stw	r21,76(sp)
 1002828:	1008fd40 	call	1008fd4 <__nedf2>
 100282c:	1000171e 	bne	r2,zero,100288c <_dtoa_r+0x104>
 1002830:	d9802717 	ldw	r6,156(sp)
 1002834:	00800044 	movi	r2,1
 1002838:	30800015 	stw	r2,0(r6)
 100283c:	d8802917 	ldw	r2,164(sp)
 1002840:	10029b26 	beq	r2,zero,10032b0 <_dtoa_r+0xb28>
 1002844:	d9002917 	ldw	r4,164(sp)
 1002848:	00804074 	movhi	r2,257
 100284c:	10b33244 	addi	r2,r2,-13111
 1002850:	10ffffc4 	addi	r3,r2,-1
 1002854:	20800015 	stw	r2,0(r4)
 1002858:	1805883a 	mov	r2,r3
 100285c:	dfc02517 	ldw	ra,148(sp)
 1002860:	df002417 	ldw	fp,144(sp)
 1002864:	ddc02317 	ldw	r23,140(sp)
 1002868:	dd802217 	ldw	r22,136(sp)
 100286c:	dd402117 	ldw	r21,132(sp)
 1002870:	dd002017 	ldw	r20,128(sp)
 1002874:	dcc01f17 	ldw	r19,124(sp)
 1002878:	dc801e17 	ldw	r18,120(sp)
 100287c:	dc401d17 	ldw	r17,116(sp)
 1002880:	dc001c17 	ldw	r16,112(sp)
 1002884:	dec02604 	addi	sp,sp,152
 1002888:	f800283a 	ret
 100288c:	d9001617 	ldw	r4,88(sp)
 1002890:	d9401217 	ldw	r5,72(sp)
 1002894:	d8800104 	addi	r2,sp,4
 1002898:	a80d883a 	mov	r6,r21
 100289c:	d9c00204 	addi	r7,sp,8
 10028a0:	d8800015 	stw	r2,0(sp)
 10028a4:	1005f8c0 	call	1005f8c <__d2b>
 10028a8:	d8800715 	stw	r2,28(sp)
 10028ac:	a804d53a 	srli	r2,r21,20
 10028b0:	1101ffcc 	andi	r4,r2,2047
 10028b4:	20008626 	beq	r4,zero,1002ad0 <_dtoa_r+0x348>
 10028b8:	d8c01217 	ldw	r3,72(sp)
 10028bc:	00800434 	movhi	r2,16
 10028c0:	10bfffc4 	addi	r2,r2,-1
 10028c4:	ddc00117 	ldw	r23,4(sp)
 10028c8:	a884703a 	and	r2,r21,r2
 10028cc:	1811883a 	mov	r8,r3
 10028d0:	124ffc34 	orhi	r9,r2,16368
 10028d4:	25bf0044 	addi	r22,r4,-1023
 10028d8:	d8000815 	stw	zero,32(sp)
 10028dc:	0005883a 	mov	r2,zero
 10028e0:	00cffe34 	movhi	r3,16376
 10028e4:	480b883a 	mov	r5,r9
 10028e8:	4009883a 	mov	r4,r8
 10028ec:	180f883a 	mov	r7,r3
 10028f0:	100d883a 	mov	r6,r2
 10028f4:	100883c0 	call	100883c <__subdf3>
 10028f8:	0218dbf4 	movhi	r8,25455
 10028fc:	4210d844 	addi	r8,r8,17249
 1002900:	024ff4f4 	movhi	r9,16339
 1002904:	4a61e9c4 	addi	r9,r9,-30809
 1002908:	480f883a 	mov	r7,r9
 100290c:	400d883a 	mov	r6,r8
 1002910:	180b883a 	mov	r5,r3
 1002914:	1009883a 	mov	r4,r2
 1002918:	10089300 	call	1008930 <__muldf3>
 100291c:	0222d874 	movhi	r8,35681
 1002920:	42322cc4 	addi	r8,r8,-14157
 1002924:	024ff1f4 	movhi	r9,16327
 1002928:	4a628a04 	addi	r9,r9,-30168
 100292c:	480f883a 	mov	r7,r9
 1002930:	400d883a 	mov	r6,r8
 1002934:	180b883a 	mov	r5,r3
 1002938:	1009883a 	mov	r4,r2
 100293c:	10088bc0 	call	10088bc <__adddf3>
 1002940:	b009883a 	mov	r4,r22
 1002944:	1021883a 	mov	r16,r2
 1002948:	1823883a 	mov	r17,r3
 100294c:	10091f40 	call	10091f4 <__floatsidf>
 1002950:	021427f4 	movhi	r8,20639
 1002954:	421e7ec4 	addi	r8,r8,31227
 1002958:	024ff4f4 	movhi	r9,16339
 100295c:	4a5104c4 	addi	r9,r9,17427
 1002960:	480f883a 	mov	r7,r9
 1002964:	400d883a 	mov	r6,r8
 1002968:	180b883a 	mov	r5,r3
 100296c:	1009883a 	mov	r4,r2
 1002970:	10089300 	call	1008930 <__muldf3>
 1002974:	180f883a 	mov	r7,r3
 1002978:	880b883a 	mov	r5,r17
 100297c:	100d883a 	mov	r6,r2
 1002980:	8009883a 	mov	r4,r16
 1002984:	10088bc0 	call	10088bc <__adddf3>
 1002988:	1009883a 	mov	r4,r2
 100298c:	180b883a 	mov	r5,r3
 1002990:	1021883a 	mov	r16,r2
 1002994:	1823883a 	mov	r17,r3
 1002998:	10092ec0 	call	10092ec <__fixdfsi>
 100299c:	000d883a 	mov	r6,zero
 10029a0:	000f883a 	mov	r7,zero
 10029a4:	8009883a 	mov	r4,r16
 10029a8:	880b883a 	mov	r5,r17
 10029ac:	d8800d15 	stw	r2,52(sp)
 10029b0:	100916c0 	call	100916c <__ltdf2>
 10029b4:	10031716 	blt	r2,zero,1003614 <_dtoa_r+0xe8c>
 10029b8:	d8c00d17 	ldw	r3,52(sp)
 10029bc:	00800584 	movi	r2,22
 10029c0:	10c1482e 	bgeu	r2,r3,1002ee4 <_dtoa_r+0x75c>
 10029c4:	01000044 	movi	r4,1
 10029c8:	d9000c15 	stw	r4,48(sp)
 10029cc:	bd85c83a 	sub	r2,r23,r22
 10029d0:	11bfffc4 	addi	r6,r2,-1
 10029d4:	30030b16 	blt	r6,zero,1003604 <_dtoa_r+0xe7c>
 10029d8:	d9800a15 	stw	r6,40(sp)
 10029dc:	d8001115 	stw	zero,68(sp)
 10029e0:	d8c00d17 	ldw	r3,52(sp)
 10029e4:	1802ff16 	blt	r3,zero,10035e4 <_dtoa_r+0xe5c>
 10029e8:	d9000a17 	ldw	r4,40(sp)
 10029ec:	d8c00915 	stw	r3,36(sp)
 10029f0:	d8001015 	stw	zero,64(sp)
 10029f4:	20c9883a 	add	r4,r4,r3
 10029f8:	d9000a15 	stw	r4,40(sp)
 10029fc:	d9001717 	ldw	r4,92(sp)
 1002a00:	00800244 	movi	r2,9
 1002a04:	11004636 	bltu	r2,r4,1002b20 <_dtoa_r+0x398>
 1002a08:	00800144 	movi	r2,5
 1002a0c:	11020416 	blt	r2,r4,1003220 <_dtoa_r+0xa98>
 1002a10:	04400044 	movi	r17,1
 1002a14:	d8c01717 	ldw	r3,92(sp)
 1002a18:	00800144 	movi	r2,5
 1002a1c:	10c1ed36 	bltu	r2,r3,10031d4 <_dtoa_r+0xa4c>
 1002a20:	18c5883a 	add	r2,r3,r3
 1002a24:	1085883a 	add	r2,r2,r2
 1002a28:	00c04034 	movhi	r3,256
 1002a2c:	18ca8f04 	addi	r3,r3,10812
 1002a30:	10c5883a 	add	r2,r2,r3
 1002a34:	11000017 	ldw	r4,0(r2)
 1002a38:	2000683a 	jmp	r4
 1002a3c:	01002b28 	cmpgeui	r4,zero,172
 1002a40:	01002b28 	cmpgeui	r4,zero,172
 1002a44:	01003528 	cmpgeui	r4,zero,212
 1002a48:	01003500 	call	100350 <__alt_mem_onchip_memory2_0+0x100350>
 1002a4c:	01003544 	movi	r4,213
 1002a50:	01003550 	cmplti	r4,zero,213
 1002a54:	d9002717 	ldw	r4,156(sp)
 1002a58:	0089c3c4 	movi	r2,9999
 1002a5c:	20800015 	stw	r2,0(r4)
 1002a60:	a0001026 	beq	r20,zero,1002aa4 <_dtoa_r+0x31c>
 1002a64:	00c04074 	movhi	r3,257
 1002a68:	18f33e04 	addi	r3,r3,-13064
 1002a6c:	d9802917 	ldw	r6,164(sp)
 1002a70:	303f7926 	beq	r6,zero,1002858 <_dtoa_r+0xd0>
 1002a74:	188000c7 	ldb	r2,3(r3)
 1002a78:	190000c4 	addi	r4,r3,3
 1002a7c:	1000101e 	bne	r2,zero,1002ac0 <_dtoa_r+0x338>
 1002a80:	d8802917 	ldw	r2,164(sp)
 1002a84:	11000015 	stw	r4,0(r2)
 1002a88:	003f7306 	br	1002858 <_dtoa_r+0xd0>
 1002a8c:	00a00034 	movhi	r2,32768
 1002a90:	10bfffc4 	addi	r2,r2,-1
 1002a94:	00c00044 	movi	r3,1
 1002a98:	88aa703a 	and	r21,r17,r2
 1002a9c:	90c00015 	stw	r3,0(r18)
 1002aa0:	003f5806 	br	1002804 <_dtoa_r+0x7c>
 1002aa4:	00800434 	movhi	r2,16
 1002aa8:	10bfffc4 	addi	r2,r2,-1
 1002aac:	a884703a 	and	r2,r21,r2
 1002ab0:	103fec1e 	bne	r2,zero,1002a64 <_dtoa_r+0x2dc>
 1002ab4:	00c04074 	movhi	r3,257
 1002ab8:	18f33b04 	addi	r3,r3,-13076
 1002abc:	003feb06 	br	1002a6c <_dtoa_r+0x2e4>
 1002ac0:	d8802917 	ldw	r2,164(sp)
 1002ac4:	19000204 	addi	r4,r3,8
 1002ac8:	11000015 	stw	r4,0(r2)
 1002acc:	003f6206 	br	1002858 <_dtoa_r+0xd0>
 1002ad0:	ddc00117 	ldw	r23,4(sp)
 1002ad4:	d8800217 	ldw	r2,8(sp)
 1002ad8:	01000804 	movi	r4,32
 1002adc:	b8c10c84 	addi	r3,r23,1074
 1002ae0:	18a3883a 	add	r17,r3,r2
 1002ae4:	2441b80e 	bge	r4,r17,10031c8 <_dtoa_r+0xa40>
 1002ae8:	00c01004 	movi	r3,64
 1002aec:	1c47c83a 	sub	r3,r3,r17
 1002af0:	88bff804 	addi	r2,r17,-32
 1002af4:	a8c6983a 	sll	r3,r21,r3
 1002af8:	a084d83a 	srl	r2,r20,r2
 1002afc:	1888b03a 	or	r4,r3,r2
 1002b00:	10093c40 	call	10093c4 <__floatunsidf>
 1002b04:	1011883a 	mov	r8,r2
 1002b08:	00bf8434 	movhi	r2,65040
 1002b0c:	01000044 	movi	r4,1
 1002b10:	10d3883a 	add	r9,r2,r3
 1002b14:	8dbef344 	addi	r22,r17,-1075
 1002b18:	d9000815 	stw	r4,32(sp)
 1002b1c:	003f6f06 	br	10028dc <_dtoa_r+0x154>
 1002b20:	d8001715 	stw	zero,92(sp)
 1002b24:	04400044 	movi	r17,1
 1002b28:	00bfffc4 	movi	r2,-1
 1002b2c:	00c00044 	movi	r3,1
 1002b30:	d8800e15 	stw	r2,56(sp)
 1002b34:	d8002615 	stw	zero,152(sp)
 1002b38:	d8800f15 	stw	r2,60(sp)
 1002b3c:	d8c00b15 	stw	r3,44(sp)
 1002b40:	1021883a 	mov	r16,r2
 1002b44:	d8801617 	ldw	r2,88(sp)
 1002b48:	10001115 	stw	zero,68(r2)
 1002b4c:	d8801617 	ldw	r2,88(sp)
 1002b50:	11401117 	ldw	r5,68(r2)
 1002b54:	1009883a 	mov	r4,r2
 1002b58:	1005ed00 	call	1005ed0 <_Balloc>
 1002b5c:	d8c01617 	ldw	r3,88(sp)
 1002b60:	d8800515 	stw	r2,20(sp)
 1002b64:	18801015 	stw	r2,64(r3)
 1002b68:	00800384 	movi	r2,14
 1002b6c:	14006836 	bltu	r2,r16,1002d10 <_dtoa_r+0x588>
 1002b70:	8805003a 	cmpeq	r2,r17,zero
 1002b74:	1000661e 	bne	r2,zero,1002d10 <_dtoa_r+0x588>
 1002b78:	d9000d17 	ldw	r4,52(sp)
 1002b7c:	0102300e 	bge	zero,r4,1003440 <_dtoa_r+0xcb8>
 1002b80:	208003cc 	andi	r2,r4,15
 1002b84:	100490fa 	slli	r2,r2,3
 1002b88:	2025d13a 	srai	r18,r4,4
 1002b8c:	00c04074 	movhi	r3,257
 1002b90:	18f35004 	addi	r3,r3,-12992
 1002b94:	10c5883a 	add	r2,r2,r3
 1002b98:	90c0040c 	andi	r3,r18,16
 1002b9c:	14000017 	ldw	r16,0(r2)
 1002ba0:	14400117 	ldw	r17,4(r2)
 1002ba4:	18036a1e 	bne	r3,zero,1003950 <_dtoa_r+0x11c8>
 1002ba8:	05800084 	movi	r22,2
 1002bac:	90001026 	beq	r18,zero,1002bf0 <_dtoa_r+0x468>
 1002bb0:	04c04074 	movhi	r19,257
 1002bb4:	9cf38204 	addi	r19,r19,-12792
 1002bb8:	9080004c 	andi	r2,r18,1
 1002bbc:	1005003a 	cmpeq	r2,r2,zero
 1002bc0:	1000081e 	bne	r2,zero,1002be4 <_dtoa_r+0x45c>
 1002bc4:	99800017 	ldw	r6,0(r19)
 1002bc8:	99c00117 	ldw	r7,4(r19)
 1002bcc:	880b883a 	mov	r5,r17
 1002bd0:	8009883a 	mov	r4,r16
 1002bd4:	10089300 	call	1008930 <__muldf3>
 1002bd8:	1021883a 	mov	r16,r2
 1002bdc:	b5800044 	addi	r22,r22,1
 1002be0:	1823883a 	mov	r17,r3
 1002be4:	9025d07a 	srai	r18,r18,1
 1002be8:	9cc00204 	addi	r19,r19,8
 1002bec:	903ff21e 	bne	r18,zero,1002bb8 <_dtoa_r+0x430>
 1002bf0:	a80b883a 	mov	r5,r21
 1002bf4:	a009883a 	mov	r4,r20
 1002bf8:	880f883a 	mov	r7,r17
 1002bfc:	800d883a 	mov	r6,r16
 1002c00:	1008cf40 	call	1008cf4 <__divdf3>
 1002c04:	1029883a 	mov	r20,r2
 1002c08:	182b883a 	mov	r21,r3
 1002c0c:	d8c00c17 	ldw	r3,48(sp)
 1002c10:	1805003a 	cmpeq	r2,r3,zero
 1002c14:	1000081e 	bne	r2,zero,1002c38 <_dtoa_r+0x4b0>
 1002c18:	0005883a 	mov	r2,zero
 1002c1c:	00cffc34 	movhi	r3,16368
 1002c20:	180f883a 	mov	r7,r3
 1002c24:	a009883a 	mov	r4,r20
 1002c28:	a80b883a 	mov	r5,r21
 1002c2c:	100d883a 	mov	r6,r2
 1002c30:	100916c0 	call	100916c <__ltdf2>
 1002c34:	1003fe16 	blt	r2,zero,1003c30 <_dtoa_r+0x14a8>
 1002c38:	b009883a 	mov	r4,r22
 1002c3c:	10091f40 	call	10091f4 <__floatsidf>
 1002c40:	180b883a 	mov	r5,r3
 1002c44:	1009883a 	mov	r4,r2
 1002c48:	a00d883a 	mov	r6,r20
 1002c4c:	a80f883a 	mov	r7,r21
 1002c50:	10089300 	call	1008930 <__muldf3>
 1002c54:	0011883a 	mov	r8,zero
 1002c58:	02500734 	movhi	r9,16412
 1002c5c:	1009883a 	mov	r4,r2
 1002c60:	180b883a 	mov	r5,r3
 1002c64:	480f883a 	mov	r7,r9
 1002c68:	400d883a 	mov	r6,r8
 1002c6c:	10088bc0 	call	10088bc <__adddf3>
 1002c70:	d9000f17 	ldw	r4,60(sp)
 1002c74:	102d883a 	mov	r22,r2
 1002c78:	00bf3034 	movhi	r2,64704
 1002c7c:	18b9883a 	add	fp,r3,r2
 1002c80:	e02f883a 	mov	r23,fp
 1002c84:	20028f1e 	bne	r4,zero,10036c4 <_dtoa_r+0xf3c>
 1002c88:	0005883a 	mov	r2,zero
 1002c8c:	00d00534 	movhi	r3,16404
 1002c90:	a009883a 	mov	r4,r20
 1002c94:	a80b883a 	mov	r5,r21
 1002c98:	180f883a 	mov	r7,r3
 1002c9c:	100d883a 	mov	r6,r2
 1002ca0:	100883c0 	call	100883c <__subdf3>
 1002ca4:	1009883a 	mov	r4,r2
 1002ca8:	e00f883a 	mov	r7,fp
 1002cac:	180b883a 	mov	r5,r3
 1002cb0:	b00d883a 	mov	r6,r22
 1002cb4:	1025883a 	mov	r18,r2
 1002cb8:	1827883a 	mov	r19,r3
 1002cbc:	100905c0 	call	100905c <__gtdf2>
 1002cc0:	00834f16 	blt	zero,r2,1003a00 <_dtoa_r+0x1278>
 1002cc4:	e0e0003c 	xorhi	r3,fp,32768
 1002cc8:	9009883a 	mov	r4,r18
 1002ccc:	980b883a 	mov	r5,r19
 1002cd0:	180f883a 	mov	r7,r3
 1002cd4:	b00d883a 	mov	r6,r22
 1002cd8:	100916c0 	call	100916c <__ltdf2>
 1002cdc:	1000080e 	bge	r2,zero,1002d00 <_dtoa_r+0x578>
 1002ce0:	0027883a 	mov	r19,zero
 1002ce4:	0025883a 	mov	r18,zero
 1002ce8:	d8802617 	ldw	r2,152(sp)
 1002cec:	df000517 	ldw	fp,20(sp)
 1002cf0:	d8000615 	stw	zero,24(sp)
 1002cf4:	0084303a 	nor	r2,zero,r2
 1002cf8:	d8800d15 	stw	r2,52(sp)
 1002cfc:	00019b06 	br	100336c <_dtoa_r+0xbe4>
 1002d00:	d9801217 	ldw	r6,72(sp)
 1002d04:	d8801317 	ldw	r2,76(sp)
 1002d08:	3029883a 	mov	r20,r6
 1002d0c:	102b883a 	mov	r21,r2
 1002d10:	d8c00217 	ldw	r3,8(sp)
 1002d14:	18008516 	blt	r3,zero,1002f2c <_dtoa_r+0x7a4>
 1002d18:	d9000d17 	ldw	r4,52(sp)
 1002d1c:	00800384 	movi	r2,14
 1002d20:	11008216 	blt	r2,r4,1002f2c <_dtoa_r+0x7a4>
 1002d24:	200490fa 	slli	r2,r4,3
 1002d28:	d9802617 	ldw	r6,152(sp)
 1002d2c:	00c04074 	movhi	r3,257
 1002d30:	18f35004 	addi	r3,r3,-12992
 1002d34:	10c5883a 	add	r2,r2,r3
 1002d38:	14800017 	ldw	r18,0(r2)
 1002d3c:	14c00117 	ldw	r19,4(r2)
 1002d40:	30031e16 	blt	r6,zero,10039bc <_dtoa_r+0x1234>
 1002d44:	d9000517 	ldw	r4,20(sp)
 1002d48:	d8c00f17 	ldw	r3,60(sp)
 1002d4c:	a823883a 	mov	r17,r21
 1002d50:	a021883a 	mov	r16,r20
 1002d54:	192b883a 	add	r21,r3,r4
 1002d58:	2039883a 	mov	fp,r4
 1002d5c:	00000f06 	br	1002d9c <_dtoa_r+0x614>
 1002d60:	0005883a 	mov	r2,zero
 1002d64:	00d00934 	movhi	r3,16420
 1002d68:	5009883a 	mov	r4,r10
 1002d6c:	580b883a 	mov	r5,r11
 1002d70:	180f883a 	mov	r7,r3
 1002d74:	100d883a 	mov	r6,r2
 1002d78:	10089300 	call	1008930 <__muldf3>
 1002d7c:	180b883a 	mov	r5,r3
 1002d80:	000d883a 	mov	r6,zero
 1002d84:	000f883a 	mov	r7,zero
 1002d88:	1009883a 	mov	r4,r2
 1002d8c:	1021883a 	mov	r16,r2
 1002d90:	1823883a 	mov	r17,r3
 1002d94:	1008fd40 	call	1008fd4 <__nedf2>
 1002d98:	10004526 	beq	r2,zero,1002eb0 <_dtoa_r+0x728>
 1002d9c:	900d883a 	mov	r6,r18
 1002da0:	980f883a 	mov	r7,r19
 1002da4:	8009883a 	mov	r4,r16
 1002da8:	880b883a 	mov	r5,r17
 1002dac:	1008cf40 	call	1008cf4 <__divdf3>
 1002db0:	180b883a 	mov	r5,r3
 1002db4:	1009883a 	mov	r4,r2
 1002db8:	10092ec0 	call	10092ec <__fixdfsi>
 1002dbc:	1009883a 	mov	r4,r2
 1002dc0:	1029883a 	mov	r20,r2
 1002dc4:	10091f40 	call	10091f4 <__floatsidf>
 1002dc8:	180f883a 	mov	r7,r3
 1002dcc:	9009883a 	mov	r4,r18
 1002dd0:	980b883a 	mov	r5,r19
 1002dd4:	100d883a 	mov	r6,r2
 1002dd8:	10089300 	call	1008930 <__muldf3>
 1002ddc:	180f883a 	mov	r7,r3
 1002de0:	880b883a 	mov	r5,r17
 1002de4:	8009883a 	mov	r4,r16
 1002de8:	100d883a 	mov	r6,r2
 1002dec:	100883c0 	call	100883c <__subdf3>
 1002df0:	1015883a 	mov	r10,r2
 1002df4:	a0800c04 	addi	r2,r20,48
 1002df8:	e0800005 	stb	r2,0(fp)
 1002dfc:	e7000044 	addi	fp,fp,1
 1002e00:	1817883a 	mov	r11,r3
 1002e04:	e57fd61e 	bne	fp,r21,1002d60 <_dtoa_r+0x5d8>
 1002e08:	500d883a 	mov	r6,r10
 1002e0c:	180f883a 	mov	r7,r3
 1002e10:	5009883a 	mov	r4,r10
 1002e14:	180b883a 	mov	r5,r3
 1002e18:	10088bc0 	call	10088bc <__adddf3>
 1002e1c:	100d883a 	mov	r6,r2
 1002e20:	9009883a 	mov	r4,r18
 1002e24:	980b883a 	mov	r5,r19
 1002e28:	180f883a 	mov	r7,r3
 1002e2c:	1021883a 	mov	r16,r2
 1002e30:	1823883a 	mov	r17,r3
 1002e34:	100916c0 	call	100916c <__ltdf2>
 1002e38:	10000816 	blt	r2,zero,1002e5c <_dtoa_r+0x6d4>
 1002e3c:	980b883a 	mov	r5,r19
 1002e40:	800d883a 	mov	r6,r16
 1002e44:	880f883a 	mov	r7,r17
 1002e48:	9009883a 	mov	r4,r18
 1002e4c:	1008f4c0 	call	1008f4c <__eqdf2>
 1002e50:	1000171e 	bne	r2,zero,1002eb0 <_dtoa_r+0x728>
 1002e54:	a080004c 	andi	r2,r20,1
 1002e58:	10001526 	beq	r2,zero,1002eb0 <_dtoa_r+0x728>
 1002e5c:	d8800d17 	ldw	r2,52(sp)
 1002e60:	d8800415 	stw	r2,16(sp)
 1002e64:	e009883a 	mov	r4,fp
 1002e68:	213fffc4 	addi	r4,r4,-1
 1002e6c:	20c00007 	ldb	r3,0(r4)
 1002e70:	00800e44 	movi	r2,57
 1002e74:	1880081e 	bne	r3,r2,1002e98 <_dtoa_r+0x710>
 1002e78:	d8800517 	ldw	r2,20(sp)
 1002e7c:	113ffa1e 	bne	r2,r4,1002e68 <_dtoa_r+0x6e0>
 1002e80:	d8c00417 	ldw	r3,16(sp)
 1002e84:	d9800517 	ldw	r6,20(sp)
 1002e88:	00800c04 	movi	r2,48
 1002e8c:	18c00044 	addi	r3,r3,1
 1002e90:	d8c00415 	stw	r3,16(sp)
 1002e94:	30800005 	stb	r2,0(r6)
 1002e98:	20800003 	ldbu	r2,0(r4)
 1002e9c:	d8c00417 	ldw	r3,16(sp)
 1002ea0:	27000044 	addi	fp,r4,1
 1002ea4:	10800044 	addi	r2,r2,1
 1002ea8:	d8c00d15 	stw	r3,52(sp)
 1002eac:	20800005 	stb	r2,0(r4)
 1002eb0:	d9001617 	ldw	r4,88(sp)
 1002eb4:	d9400717 	ldw	r5,28(sp)
 1002eb8:	10059500 	call	1005950 <_Bfree>
 1002ebc:	e0000005 	stb	zero,0(fp)
 1002ec0:	d9800d17 	ldw	r6,52(sp)
 1002ec4:	d8c02717 	ldw	r3,156(sp)
 1002ec8:	d9002917 	ldw	r4,164(sp)
 1002ecc:	30800044 	addi	r2,r6,1
 1002ed0:	18800015 	stw	r2,0(r3)
 1002ed4:	20029c26 	beq	r4,zero,1003948 <_dtoa_r+0x11c0>
 1002ed8:	d8c00517 	ldw	r3,20(sp)
 1002edc:	27000015 	stw	fp,0(r4)
 1002ee0:	003e5d06 	br	1002858 <_dtoa_r+0xd0>
 1002ee4:	d9800d17 	ldw	r6,52(sp)
 1002ee8:	00c04074 	movhi	r3,257
 1002eec:	18f35004 	addi	r3,r3,-12992
 1002ef0:	d9001217 	ldw	r4,72(sp)
 1002ef4:	300490fa 	slli	r2,r6,3
 1002ef8:	d9401317 	ldw	r5,76(sp)
 1002efc:	10c5883a 	add	r2,r2,r3
 1002f00:	12000017 	ldw	r8,0(r2)
 1002f04:	12400117 	ldw	r9,4(r2)
 1002f08:	400d883a 	mov	r6,r8
 1002f0c:	480f883a 	mov	r7,r9
 1002f10:	100916c0 	call	100916c <__ltdf2>
 1002f14:	1000030e 	bge	r2,zero,1002f24 <_dtoa_r+0x79c>
 1002f18:	d8800d17 	ldw	r2,52(sp)
 1002f1c:	10bfffc4 	addi	r2,r2,-1
 1002f20:	d8800d15 	stw	r2,52(sp)
 1002f24:	d8000c15 	stw	zero,48(sp)
 1002f28:	003ea806 	br	10029cc <_dtoa_r+0x244>
 1002f2c:	d9000b17 	ldw	r4,44(sp)
 1002f30:	202cc03a 	cmpne	r22,r4,zero
 1002f34:	b000c71e 	bne	r22,zero,1003254 <_dtoa_r+0xacc>
 1002f38:	dc001117 	ldw	r16,68(sp)
 1002f3c:	dc801017 	ldw	r18,64(sp)
 1002f40:	0027883a 	mov	r19,zero
 1002f44:	04000b0e 	bge	zero,r16,1002f74 <_dtoa_r+0x7ec>
 1002f48:	d8c00a17 	ldw	r3,40(sp)
 1002f4c:	00c0090e 	bge	zero,r3,1002f74 <_dtoa_r+0x7ec>
 1002f50:	8005883a 	mov	r2,r16
 1002f54:	1c011316 	blt	r3,r16,10033a4 <_dtoa_r+0xc1c>
 1002f58:	d9000a17 	ldw	r4,40(sp)
 1002f5c:	d9801117 	ldw	r6,68(sp)
 1002f60:	80a1c83a 	sub	r16,r16,r2
 1002f64:	2089c83a 	sub	r4,r4,r2
 1002f68:	308dc83a 	sub	r6,r6,r2
 1002f6c:	d9000a15 	stw	r4,40(sp)
 1002f70:	d9801115 	stw	r6,68(sp)
 1002f74:	d8801017 	ldw	r2,64(sp)
 1002f78:	0080150e 	bge	zero,r2,1002fd0 <_dtoa_r+0x848>
 1002f7c:	d8c00b17 	ldw	r3,44(sp)
 1002f80:	1805003a 	cmpeq	r2,r3,zero
 1002f84:	1001c91e 	bne	r2,zero,10036ac <_dtoa_r+0xf24>
 1002f88:	04800e0e 	bge	zero,r18,1002fc4 <_dtoa_r+0x83c>
 1002f8c:	d9001617 	ldw	r4,88(sp)
 1002f90:	980b883a 	mov	r5,r19
 1002f94:	900d883a 	mov	r6,r18
 1002f98:	100679c0 	call	100679c <__pow5mult>
 1002f9c:	d9001617 	ldw	r4,88(sp)
 1002fa0:	d9800717 	ldw	r6,28(sp)
 1002fa4:	100b883a 	mov	r5,r2
 1002fa8:	1027883a 	mov	r19,r2
 1002fac:	10063e00 	call	10063e0 <__multiply>
 1002fb0:	d9001617 	ldw	r4,88(sp)
 1002fb4:	d9400717 	ldw	r5,28(sp)
 1002fb8:	1023883a 	mov	r17,r2
 1002fbc:	10059500 	call	1005950 <_Bfree>
 1002fc0:	dc400715 	stw	r17,28(sp)
 1002fc4:	d9001017 	ldw	r4,64(sp)
 1002fc8:	248dc83a 	sub	r6,r4,r18
 1002fcc:	30010e1e 	bne	r6,zero,1003408 <_dtoa_r+0xc80>
 1002fd0:	d9001617 	ldw	r4,88(sp)
 1002fd4:	04400044 	movi	r17,1
 1002fd8:	880b883a 	mov	r5,r17
 1002fdc:	10066340 	call	1006634 <__i2b>
 1002fe0:	d9800917 	ldw	r6,36(sp)
 1002fe4:	1025883a 	mov	r18,r2
 1002fe8:	0180040e 	bge	zero,r6,1002ffc <_dtoa_r+0x874>
 1002fec:	d9001617 	ldw	r4,88(sp)
 1002ff0:	100b883a 	mov	r5,r2
 1002ff4:	100679c0 	call	100679c <__pow5mult>
 1002ff8:	1025883a 	mov	r18,r2
 1002ffc:	d8801717 	ldw	r2,92(sp)
 1003000:	8880f30e 	bge	r17,r2,10033d0 <_dtoa_r+0xc48>
 1003004:	0023883a 	mov	r17,zero
 1003008:	d9800917 	ldw	r6,36(sp)
 100300c:	30019e1e 	bne	r6,zero,1003688 <_dtoa_r+0xf00>
 1003010:	00c00044 	movi	r3,1
 1003014:	d9000a17 	ldw	r4,40(sp)
 1003018:	20c5883a 	add	r2,r4,r3
 100301c:	10c007cc 	andi	r3,r2,31
 1003020:	1800841e 	bne	r3,zero,1003234 <_dtoa_r+0xaac>
 1003024:	00800704 	movi	r2,28
 1003028:	d9000a17 	ldw	r4,40(sp)
 100302c:	d9801117 	ldw	r6,68(sp)
 1003030:	80a1883a 	add	r16,r16,r2
 1003034:	2089883a 	add	r4,r4,r2
 1003038:	308d883a 	add	r6,r6,r2
 100303c:	d9000a15 	stw	r4,40(sp)
 1003040:	d9801115 	stw	r6,68(sp)
 1003044:	d8801117 	ldw	r2,68(sp)
 1003048:	0080050e 	bge	zero,r2,1003060 <_dtoa_r+0x8d8>
 100304c:	d9400717 	ldw	r5,28(sp)
 1003050:	d9001617 	ldw	r4,88(sp)
 1003054:	100d883a 	mov	r6,r2
 1003058:	10062940 	call	1006294 <__lshift>
 100305c:	d8800715 	stw	r2,28(sp)
 1003060:	d8c00a17 	ldw	r3,40(sp)
 1003064:	00c0050e 	bge	zero,r3,100307c <_dtoa_r+0x8f4>
 1003068:	d9001617 	ldw	r4,88(sp)
 100306c:	900b883a 	mov	r5,r18
 1003070:	180d883a 	mov	r6,r3
 1003074:	10062940 	call	1006294 <__lshift>
 1003078:	1025883a 	mov	r18,r2
 100307c:	d9000c17 	ldw	r4,48(sp)
 1003080:	2005003a 	cmpeq	r2,r4,zero
 1003084:	10016f26 	beq	r2,zero,1003644 <_dtoa_r+0xebc>
 1003088:	d9000f17 	ldw	r4,60(sp)
 100308c:	0102170e 	bge	zero,r4,10038ec <_dtoa_r+0x1164>
 1003090:	d9800b17 	ldw	r6,44(sp)
 1003094:	3005003a 	cmpeq	r2,r6,zero
 1003098:	1000881e 	bne	r2,zero,10032bc <_dtoa_r+0xb34>
 100309c:	0400050e 	bge	zero,r16,10030b4 <_dtoa_r+0x92c>
 10030a0:	d9001617 	ldw	r4,88(sp)
 10030a4:	980b883a 	mov	r5,r19
 10030a8:	800d883a 	mov	r6,r16
 10030ac:	10062940 	call	1006294 <__lshift>
 10030b0:	1027883a 	mov	r19,r2
 10030b4:	8804c03a 	cmpne	r2,r17,zero
 10030b8:	1002541e 	bne	r2,zero,1003a0c <_dtoa_r+0x1284>
 10030bc:	980b883a 	mov	r5,r19
 10030c0:	dd800517 	ldw	r22,20(sp)
 10030c4:	dcc00615 	stw	r19,24(sp)
 10030c8:	a700004c 	andi	fp,r20,1
 10030cc:	2827883a 	mov	r19,r5
 10030d0:	d9000717 	ldw	r4,28(sp)
 10030d4:	900b883a 	mov	r5,r18
 10030d8:	10025440 	call	1002544 <quorem>
 10030dc:	d9000717 	ldw	r4,28(sp)
 10030e0:	d9400617 	ldw	r5,24(sp)
 10030e4:	1023883a 	mov	r17,r2
 10030e8:	8dc00c04 	addi	r23,r17,48
 10030ec:	1005aac0 	call	1005aac <__mcmp>
 10030f0:	d9001617 	ldw	r4,88(sp)
 10030f4:	900b883a 	mov	r5,r18
 10030f8:	980d883a 	mov	r6,r19
 10030fc:	1029883a 	mov	r20,r2
 1003100:	10061080 	call	1006108 <__mdiff>
 1003104:	102b883a 	mov	r21,r2
 1003108:	10800317 	ldw	r2,12(r2)
 100310c:	1001281e 	bne	r2,zero,10035b0 <_dtoa_r+0xe28>
 1003110:	d9000717 	ldw	r4,28(sp)
 1003114:	a80b883a 	mov	r5,r21
 1003118:	1005aac0 	call	1005aac <__mcmp>
 100311c:	d9001617 	ldw	r4,88(sp)
 1003120:	1021883a 	mov	r16,r2
 1003124:	a80b883a 	mov	r5,r21
 1003128:	10059500 	call	1005950 <_Bfree>
 100312c:	8000041e 	bne	r16,zero,1003140 <_dtoa_r+0x9b8>
 1003130:	d8801717 	ldw	r2,92(sp)
 1003134:	1000021e 	bne	r2,zero,1003140 <_dtoa_r+0x9b8>
 1003138:	e004c03a 	cmpne	r2,fp,zero
 100313c:	10011726 	beq	r2,zero,100359c <_dtoa_r+0xe14>
 1003140:	a0010616 	blt	r20,zero,100355c <_dtoa_r+0xdd4>
 1003144:	a000041e 	bne	r20,zero,1003158 <_dtoa_r+0x9d0>
 1003148:	d8c01717 	ldw	r3,92(sp)
 100314c:	1800021e 	bne	r3,zero,1003158 <_dtoa_r+0x9d0>
 1003150:	e004c03a 	cmpne	r2,fp,zero
 1003154:	10010126 	beq	r2,zero,100355c <_dtoa_r+0xdd4>
 1003158:	04023d16 	blt	zero,r16,1003a50 <_dtoa_r+0x12c8>
 100315c:	b5c00005 	stb	r23,0(r22)
 1003160:	d9800517 	ldw	r6,20(sp)
 1003164:	d9000f17 	ldw	r4,60(sp)
 1003168:	b5800044 	addi	r22,r22,1
 100316c:	3105883a 	add	r2,r6,r4
 1003170:	b0806526 	beq	r22,r2,1003308 <_dtoa_r+0xb80>
 1003174:	d9400717 	ldw	r5,28(sp)
 1003178:	d9001617 	ldw	r4,88(sp)
 100317c:	01800284 	movi	r6,10
 1003180:	000f883a 	mov	r7,zero
 1003184:	10066700 	call	1006670 <__multadd>
 1003188:	d8800715 	stw	r2,28(sp)
 100318c:	d8800617 	ldw	r2,24(sp)
 1003190:	14c10c26 	beq	r2,r19,10035c4 <_dtoa_r+0xe3c>
 1003194:	d9400617 	ldw	r5,24(sp)
 1003198:	d9001617 	ldw	r4,88(sp)
 100319c:	01800284 	movi	r6,10
 10031a0:	000f883a 	mov	r7,zero
 10031a4:	10066700 	call	1006670 <__multadd>
 10031a8:	d9001617 	ldw	r4,88(sp)
 10031ac:	980b883a 	mov	r5,r19
 10031b0:	01800284 	movi	r6,10
 10031b4:	000f883a 	mov	r7,zero
 10031b8:	d8800615 	stw	r2,24(sp)
 10031bc:	10066700 	call	1006670 <__multadd>
 10031c0:	1027883a 	mov	r19,r2
 10031c4:	003fc206 	br	10030d0 <_dtoa_r+0x948>
 10031c8:	2445c83a 	sub	r2,r4,r17
 10031cc:	a088983a 	sll	r4,r20,r2
 10031d0:	003e4b06 	br	1002b00 <_dtoa_r+0x378>
 10031d4:	01bfffc4 	movi	r6,-1
 10031d8:	00800044 	movi	r2,1
 10031dc:	d9800e15 	stw	r6,56(sp)
 10031e0:	d9800f15 	stw	r6,60(sp)
 10031e4:	d8800b15 	stw	r2,44(sp)
 10031e8:	d8c01617 	ldw	r3,88(sp)
 10031ec:	008005c4 	movi	r2,23
 10031f0:	18001115 	stw	zero,68(r3)
 10031f4:	1580082e 	bgeu	r2,r22,1003218 <_dtoa_r+0xa90>
 10031f8:	00c00104 	movi	r3,4
 10031fc:	0009883a 	mov	r4,zero
 1003200:	18c7883a 	add	r3,r3,r3
 1003204:	18800504 	addi	r2,r3,20
 1003208:	21000044 	addi	r4,r4,1
 100320c:	b0bffc2e 	bgeu	r22,r2,1003200 <_dtoa_r+0xa78>
 1003210:	d9801617 	ldw	r6,88(sp)
 1003214:	31001115 	stw	r4,68(r6)
 1003218:	dc000f17 	ldw	r16,60(sp)
 100321c:	003e4b06 	br	1002b4c <_dtoa_r+0x3c4>
 1003220:	d9801717 	ldw	r6,92(sp)
 1003224:	0023883a 	mov	r17,zero
 1003228:	31bfff04 	addi	r6,r6,-4
 100322c:	d9801715 	stw	r6,92(sp)
 1003230:	003df806 	br	1002a14 <_dtoa_r+0x28c>
 1003234:	00800804 	movi	r2,32
 1003238:	10c9c83a 	sub	r4,r2,r3
 100323c:	00c00104 	movi	r3,4
 1003240:	19005a16 	blt	r3,r4,10033ac <_dtoa_r+0xc24>
 1003244:	008000c4 	movi	r2,3
 1003248:	113f7e16 	blt	r2,r4,1003044 <_dtoa_r+0x8bc>
 100324c:	20800704 	addi	r2,r4,28
 1003250:	003f7506 	br	1003028 <_dtoa_r+0x8a0>
 1003254:	d9801717 	ldw	r6,92(sp)
 1003258:	00800044 	movi	r2,1
 100325c:	1180a10e 	bge	r2,r6,10034e4 <_dtoa_r+0xd5c>
 1003260:	d9800f17 	ldw	r6,60(sp)
 1003264:	d8c01017 	ldw	r3,64(sp)
 1003268:	30bfffc4 	addi	r2,r6,-1
 100326c:	1881c616 	blt	r3,r2,1003988 <_dtoa_r+0x1200>
 1003270:	18a5c83a 	sub	r18,r3,r2
 1003274:	d8800f17 	ldw	r2,60(sp)
 1003278:	10026216 	blt	r2,zero,1003c04 <_dtoa_r+0x147c>
 100327c:	dc001117 	ldw	r16,68(sp)
 1003280:	1007883a 	mov	r3,r2
 1003284:	d9800a17 	ldw	r6,40(sp)
 1003288:	d8801117 	ldw	r2,68(sp)
 100328c:	d9001617 	ldw	r4,88(sp)
 1003290:	30cd883a 	add	r6,r6,r3
 1003294:	10c5883a 	add	r2,r2,r3
 1003298:	01400044 	movi	r5,1
 100329c:	d9800a15 	stw	r6,40(sp)
 10032a0:	d8801115 	stw	r2,68(sp)
 10032a4:	10066340 	call	1006634 <__i2b>
 10032a8:	1027883a 	mov	r19,r2
 10032ac:	003f2506 	br	1002f44 <_dtoa_r+0x7bc>
 10032b0:	00c04074 	movhi	r3,257
 10032b4:	18f33204 	addi	r3,r3,-13112
 10032b8:	003d6706 	br	1002858 <_dtoa_r+0xd0>
 10032bc:	dd800517 	ldw	r22,20(sp)
 10032c0:	04000044 	movi	r16,1
 10032c4:	00000706 	br	10032e4 <_dtoa_r+0xb5c>
 10032c8:	d9400717 	ldw	r5,28(sp)
 10032cc:	d9001617 	ldw	r4,88(sp)
 10032d0:	01800284 	movi	r6,10
 10032d4:	000f883a 	mov	r7,zero
 10032d8:	10066700 	call	1006670 <__multadd>
 10032dc:	d8800715 	stw	r2,28(sp)
 10032e0:	84000044 	addi	r16,r16,1
 10032e4:	d9000717 	ldw	r4,28(sp)
 10032e8:	900b883a 	mov	r5,r18
 10032ec:	10025440 	call	1002544 <quorem>
 10032f0:	15c00c04 	addi	r23,r2,48
 10032f4:	b5c00005 	stb	r23,0(r22)
 10032f8:	d8c00f17 	ldw	r3,60(sp)
 10032fc:	b5800044 	addi	r22,r22,1
 1003300:	80fff116 	blt	r16,r3,10032c8 <_dtoa_r+0xb40>
 1003304:	d8000615 	stw	zero,24(sp)
 1003308:	d9400717 	ldw	r5,28(sp)
 100330c:	d9001617 	ldw	r4,88(sp)
 1003310:	01800044 	movi	r6,1
 1003314:	10062940 	call	1006294 <__lshift>
 1003318:	1009883a 	mov	r4,r2
 100331c:	900b883a 	mov	r5,r18
 1003320:	d8800715 	stw	r2,28(sp)
 1003324:	1005aac0 	call	1005aac <__mcmp>
 1003328:	00803c0e 	bge	zero,r2,100341c <_dtoa_r+0xc94>
 100332c:	b009883a 	mov	r4,r22
 1003330:	213fffc4 	addi	r4,r4,-1
 1003334:	21400003 	ldbu	r5,0(r4)
 1003338:	00800e44 	movi	r2,57
 100333c:	28c03fcc 	andi	r3,r5,255
 1003340:	18c0201c 	xori	r3,r3,128
 1003344:	18ffe004 	addi	r3,r3,-128
 1003348:	1881981e 	bne	r3,r2,10039ac <_dtoa_r+0x1224>
 100334c:	d9800517 	ldw	r6,20(sp)
 1003350:	21bff71e 	bne	r4,r6,1003330 <_dtoa_r+0xba8>
 1003354:	d8800d17 	ldw	r2,52(sp)
 1003358:	37000044 	addi	fp,r6,1
 100335c:	10800044 	addi	r2,r2,1
 1003360:	d8800d15 	stw	r2,52(sp)
 1003364:	00800c44 	movi	r2,49
 1003368:	30800005 	stb	r2,0(r6)
 100336c:	d9001617 	ldw	r4,88(sp)
 1003370:	900b883a 	mov	r5,r18
 1003374:	10059500 	call	1005950 <_Bfree>
 1003378:	983ecd26 	beq	r19,zero,1002eb0 <_dtoa_r+0x728>
 100337c:	d8c00617 	ldw	r3,24(sp)
 1003380:	18000426 	beq	r3,zero,1003394 <_dtoa_r+0xc0c>
 1003384:	1cc00326 	beq	r3,r19,1003394 <_dtoa_r+0xc0c>
 1003388:	d9001617 	ldw	r4,88(sp)
 100338c:	180b883a 	mov	r5,r3
 1003390:	10059500 	call	1005950 <_Bfree>
 1003394:	d9001617 	ldw	r4,88(sp)
 1003398:	980b883a 	mov	r5,r19
 100339c:	10059500 	call	1005950 <_Bfree>
 10033a0:	003ec306 	br	1002eb0 <_dtoa_r+0x728>
 10033a4:	1805883a 	mov	r2,r3
 10033a8:	003eeb06 	br	1002f58 <_dtoa_r+0x7d0>
 10033ac:	d9800a17 	ldw	r6,40(sp)
 10033b0:	d8c01117 	ldw	r3,68(sp)
 10033b4:	20bfff04 	addi	r2,r4,-4
 10033b8:	308d883a 	add	r6,r6,r2
 10033bc:	1887883a 	add	r3,r3,r2
 10033c0:	80a1883a 	add	r16,r16,r2
 10033c4:	d9800a15 	stw	r6,40(sp)
 10033c8:	d8c01115 	stw	r3,68(sp)
 10033cc:	003f1d06 	br	1003044 <_dtoa_r+0x8bc>
 10033d0:	a03f0c1e 	bne	r20,zero,1003004 <_dtoa_r+0x87c>
 10033d4:	00800434 	movhi	r2,16
 10033d8:	10bfffc4 	addi	r2,r2,-1
 10033dc:	a884703a 	and	r2,r21,r2
 10033e0:	103f081e 	bne	r2,zero,1003004 <_dtoa_r+0x87c>
 10033e4:	a89ffc2c 	andhi	r2,r21,32752
 10033e8:	103f0626 	beq	r2,zero,1003004 <_dtoa_r+0x87c>
 10033ec:	d8c01117 	ldw	r3,68(sp)
 10033f0:	d9000a17 	ldw	r4,40(sp)
 10033f4:	18c00044 	addi	r3,r3,1
 10033f8:	21000044 	addi	r4,r4,1
 10033fc:	d8c01115 	stw	r3,68(sp)
 1003400:	d9000a15 	stw	r4,40(sp)
 1003404:	003f0006 	br	1003008 <_dtoa_r+0x880>
 1003408:	d9400717 	ldw	r5,28(sp)
 100340c:	d9001617 	ldw	r4,88(sp)
 1003410:	100679c0 	call	100679c <__pow5mult>
 1003414:	d8800715 	stw	r2,28(sp)
 1003418:	003eed06 	br	1002fd0 <_dtoa_r+0x848>
 100341c:	1000021e 	bne	r2,zero,1003428 <_dtoa_r+0xca0>
 1003420:	b880004c 	andi	r2,r23,1
 1003424:	103fc11e 	bne	r2,zero,100332c <_dtoa_r+0xba4>
 1003428:	b5bfffc4 	addi	r22,r22,-1
 100342c:	b0c00007 	ldb	r3,0(r22)
 1003430:	00800c04 	movi	r2,48
 1003434:	18bffc26 	beq	r3,r2,1003428 <_dtoa_r+0xca0>
 1003438:	b7000044 	addi	fp,r22,1
 100343c:	003fcb06 	br	100336c <_dtoa_r+0xbe4>
 1003440:	d9800d17 	ldw	r6,52(sp)
 1003444:	018fc83a 	sub	r7,zero,r6
 1003448:	3801f726 	beq	r7,zero,1003c28 <_dtoa_r+0x14a0>
 100344c:	398003cc 	andi	r6,r7,15
 1003450:	300c90fa 	slli	r6,r6,3
 1003454:	01404074 	movhi	r5,257
 1003458:	29735004 	addi	r5,r5,-12992
 100345c:	d9001217 	ldw	r4,72(sp)
 1003460:	314d883a 	add	r6,r6,r5
 1003464:	30c00117 	ldw	r3,4(r6)
 1003468:	30800017 	ldw	r2,0(r6)
 100346c:	d9401317 	ldw	r5,76(sp)
 1003470:	3821d13a 	srai	r16,r7,4
 1003474:	100d883a 	mov	r6,r2
 1003478:	180f883a 	mov	r7,r3
 100347c:	10089300 	call	1008930 <__muldf3>
 1003480:	1011883a 	mov	r8,r2
 1003484:	1813883a 	mov	r9,r3
 1003488:	1029883a 	mov	r20,r2
 100348c:	182b883a 	mov	r21,r3
 1003490:	8001e526 	beq	r16,zero,1003c28 <_dtoa_r+0x14a0>
 1003494:	05800084 	movi	r22,2
 1003498:	04404074 	movhi	r17,257
 100349c:	8c738204 	addi	r17,r17,-12792
 10034a0:	8080004c 	andi	r2,r16,1
 10034a4:	1005003a 	cmpeq	r2,r2,zero
 10034a8:	1000081e 	bne	r2,zero,10034cc <_dtoa_r+0xd44>
 10034ac:	89800017 	ldw	r6,0(r17)
 10034b0:	89c00117 	ldw	r7,4(r17)
 10034b4:	480b883a 	mov	r5,r9
 10034b8:	4009883a 	mov	r4,r8
 10034bc:	10089300 	call	1008930 <__muldf3>
 10034c0:	1011883a 	mov	r8,r2
 10034c4:	b5800044 	addi	r22,r22,1
 10034c8:	1813883a 	mov	r9,r3
 10034cc:	8021d07a 	srai	r16,r16,1
 10034d0:	8c400204 	addi	r17,r17,8
 10034d4:	803ff21e 	bne	r16,zero,10034a0 <_dtoa_r+0xd18>
 10034d8:	4029883a 	mov	r20,r8
 10034dc:	482b883a 	mov	r21,r9
 10034e0:	003dca06 	br	1002c0c <_dtoa_r+0x484>
 10034e4:	d9000817 	ldw	r4,32(sp)
 10034e8:	2005003a 	cmpeq	r2,r4,zero
 10034ec:	1001f61e 	bne	r2,zero,1003cc8 <_dtoa_r+0x1540>
 10034f0:	dc001117 	ldw	r16,68(sp)
 10034f4:	dc801017 	ldw	r18,64(sp)
 10034f8:	18c10cc4 	addi	r3,r3,1075
 10034fc:	003f6106 	br	1003284 <_dtoa_r+0xafc>
 1003500:	d8000b15 	stw	zero,44(sp)
 1003504:	d9802617 	ldw	r6,152(sp)
 1003508:	d8c00d17 	ldw	r3,52(sp)
 100350c:	30800044 	addi	r2,r6,1
 1003510:	18ad883a 	add	r22,r3,r2
 1003514:	b13fffc4 	addi	r4,r22,-1
 1003518:	d9000e15 	stw	r4,56(sp)
 100351c:	0581f60e 	bge	zero,r22,1003cf8 <_dtoa_r+0x1570>
 1003520:	dd800f15 	stw	r22,60(sp)
 1003524:	003f3006 	br	10031e8 <_dtoa_r+0xa60>
 1003528:	d8000b15 	stw	zero,44(sp)
 100352c:	d9002617 	ldw	r4,152(sp)
 1003530:	0101eb0e 	bge	zero,r4,1003ce0 <_dtoa_r+0x1558>
 1003534:	202d883a 	mov	r22,r4
 1003538:	d9000e15 	stw	r4,56(sp)
 100353c:	d9000f15 	stw	r4,60(sp)
 1003540:	003f2906 	br	10031e8 <_dtoa_r+0xa60>
 1003544:	01800044 	movi	r6,1
 1003548:	d9800b15 	stw	r6,44(sp)
 100354c:	003ff706 	br	100352c <_dtoa_r+0xda4>
 1003550:	01000044 	movi	r4,1
 1003554:	d9000b15 	stw	r4,44(sp)
 1003558:	003fea06 	br	1003504 <_dtoa_r+0xd7c>
 100355c:	04000c0e 	bge	zero,r16,1003590 <_dtoa_r+0xe08>
 1003560:	d9400717 	ldw	r5,28(sp)
 1003564:	d9001617 	ldw	r4,88(sp)
 1003568:	01800044 	movi	r6,1
 100356c:	10062940 	call	1006294 <__lshift>
 1003570:	1009883a 	mov	r4,r2
 1003574:	900b883a 	mov	r5,r18
 1003578:	d8800715 	stw	r2,28(sp)
 100357c:	1005aac0 	call	1005aac <__mcmp>
 1003580:	0081e00e 	bge	zero,r2,1003d04 <_dtoa_r+0x157c>
 1003584:	bdc00044 	addi	r23,r23,1
 1003588:	00800e84 	movi	r2,58
 100358c:	b881a226 	beq	r23,r2,1003c18 <_dtoa_r+0x1490>
 1003590:	b7000044 	addi	fp,r22,1
 1003594:	b5c00005 	stb	r23,0(r22)
 1003598:	003f7406 	br	100336c <_dtoa_r+0xbe4>
 100359c:	00800e44 	movi	r2,57
 10035a0:	b8819d26 	beq	r23,r2,1003c18 <_dtoa_r+0x1490>
 10035a4:	053ffa0e 	bge	zero,r20,1003590 <_dtoa_r+0xe08>
 10035a8:	8dc00c44 	addi	r23,r17,49
 10035ac:	003ff806 	br	1003590 <_dtoa_r+0xe08>
 10035b0:	d9001617 	ldw	r4,88(sp)
 10035b4:	a80b883a 	mov	r5,r21
 10035b8:	04000044 	movi	r16,1
 10035bc:	10059500 	call	1005950 <_Bfree>
 10035c0:	003edf06 	br	1003140 <_dtoa_r+0x9b8>
 10035c4:	d9001617 	ldw	r4,88(sp)
 10035c8:	980b883a 	mov	r5,r19
 10035cc:	01800284 	movi	r6,10
 10035d0:	000f883a 	mov	r7,zero
 10035d4:	10066700 	call	1006670 <__multadd>
 10035d8:	1027883a 	mov	r19,r2
 10035dc:	d8800615 	stw	r2,24(sp)
 10035e0:	003ebb06 	br	10030d0 <_dtoa_r+0x948>
 10035e4:	d9801117 	ldw	r6,68(sp)
 10035e8:	d8800d17 	ldw	r2,52(sp)
 10035ec:	d8000915 	stw	zero,36(sp)
 10035f0:	308dc83a 	sub	r6,r6,r2
 10035f4:	0087c83a 	sub	r3,zero,r2
 10035f8:	d9801115 	stw	r6,68(sp)
 10035fc:	d8c01015 	stw	r3,64(sp)
 1003600:	003cfe06 	br	10029fc <_dtoa_r+0x274>
 1003604:	018dc83a 	sub	r6,zero,r6
 1003608:	d9801115 	stw	r6,68(sp)
 100360c:	d8000a15 	stw	zero,40(sp)
 1003610:	003cf306 	br	10029e0 <_dtoa_r+0x258>
 1003614:	d9000d17 	ldw	r4,52(sp)
 1003618:	10091f40 	call	10091f4 <__floatsidf>
 100361c:	880b883a 	mov	r5,r17
 1003620:	8009883a 	mov	r4,r16
 1003624:	180f883a 	mov	r7,r3
 1003628:	100d883a 	mov	r6,r2
 100362c:	1008fd40 	call	1008fd4 <__nedf2>
 1003630:	103ce126 	beq	r2,zero,10029b8 <_dtoa_r+0x230>
 1003634:	d9800d17 	ldw	r6,52(sp)
 1003638:	31bfffc4 	addi	r6,r6,-1
 100363c:	d9800d15 	stw	r6,52(sp)
 1003640:	003cdd06 	br	10029b8 <_dtoa_r+0x230>
 1003644:	d9000717 	ldw	r4,28(sp)
 1003648:	900b883a 	mov	r5,r18
 100364c:	1005aac0 	call	1005aac <__mcmp>
 1003650:	103e8d0e 	bge	r2,zero,1003088 <_dtoa_r+0x900>
 1003654:	d9400717 	ldw	r5,28(sp)
 1003658:	d9001617 	ldw	r4,88(sp)
 100365c:	01800284 	movi	r6,10
 1003660:	000f883a 	mov	r7,zero
 1003664:	10066700 	call	1006670 <__multadd>
 1003668:	d9800d17 	ldw	r6,52(sp)
 100366c:	d8800715 	stw	r2,28(sp)
 1003670:	31bfffc4 	addi	r6,r6,-1
 1003674:	d9800d15 	stw	r6,52(sp)
 1003678:	b001a71e 	bne	r22,zero,1003d18 <_dtoa_r+0x1590>
 100367c:	d8800e17 	ldw	r2,56(sp)
 1003680:	d8800f15 	stw	r2,60(sp)
 1003684:	003e8006 	br	1003088 <_dtoa_r+0x900>
 1003688:	90800417 	ldw	r2,16(r18)
 100368c:	1085883a 	add	r2,r2,r2
 1003690:	1085883a 	add	r2,r2,r2
 1003694:	1485883a 	add	r2,r2,r18
 1003698:	11000417 	ldw	r4,16(r2)
 100369c:	10059780 	call	1005978 <__hi0bits>
 10036a0:	00c00804 	movi	r3,32
 10036a4:	1887c83a 	sub	r3,r3,r2
 10036a8:	003e5a06 	br	1003014 <_dtoa_r+0x88c>
 10036ac:	d9400717 	ldw	r5,28(sp)
 10036b0:	d9801017 	ldw	r6,64(sp)
 10036b4:	d9001617 	ldw	r4,88(sp)
 10036b8:	100679c0 	call	100679c <__pow5mult>
 10036bc:	d8800715 	stw	r2,28(sp)
 10036c0:	003e4306 	br	1002fd0 <_dtoa_r+0x848>
 10036c4:	d9800f17 	ldw	r6,60(sp)
 10036c8:	d8800d17 	ldw	r2,52(sp)
 10036cc:	d9800315 	stw	r6,12(sp)
 10036d0:	d8800415 	stw	r2,16(sp)
 10036d4:	d8c00b17 	ldw	r3,44(sp)
 10036d8:	1805003a 	cmpeq	r2,r3,zero
 10036dc:	1000e21e 	bne	r2,zero,1003a68 <_dtoa_r+0x12e0>
 10036e0:	d9000317 	ldw	r4,12(sp)
 10036e4:	0005883a 	mov	r2,zero
 10036e8:	00cff834 	movhi	r3,16352
 10036ec:	200c90fa 	slli	r6,r4,3
 10036f0:	01004074 	movhi	r4,257
 10036f4:	21335004 	addi	r4,r4,-12992
 10036f8:	180b883a 	mov	r5,r3
 10036fc:	310d883a 	add	r6,r6,r4
 1003700:	327fff17 	ldw	r9,-4(r6)
 1003704:	323ffe17 	ldw	r8,-8(r6)
 1003708:	1009883a 	mov	r4,r2
 100370c:	480f883a 	mov	r7,r9
 1003710:	400d883a 	mov	r6,r8
 1003714:	1008cf40 	call	1008cf4 <__divdf3>
 1003718:	180b883a 	mov	r5,r3
 100371c:	b00d883a 	mov	r6,r22
 1003720:	b80f883a 	mov	r7,r23
 1003724:	1009883a 	mov	r4,r2
 1003728:	100883c0 	call	100883c <__subdf3>
 100372c:	a80b883a 	mov	r5,r21
 1003730:	a009883a 	mov	r4,r20
 1003734:	d8c01915 	stw	r3,100(sp)
 1003738:	d8801815 	stw	r2,96(sp)
 100373c:	10092ec0 	call	10092ec <__fixdfsi>
 1003740:	1009883a 	mov	r4,r2
 1003744:	1027883a 	mov	r19,r2
 1003748:	10091f40 	call	10091f4 <__floatsidf>
 100374c:	a80b883a 	mov	r5,r21
 1003750:	a009883a 	mov	r4,r20
 1003754:	180f883a 	mov	r7,r3
 1003758:	100d883a 	mov	r6,r2
 100375c:	100883c0 	call	100883c <__subdf3>
 1003760:	d9801817 	ldw	r6,96(sp)
 1003764:	1823883a 	mov	r17,r3
 1003768:	d8801415 	stw	r2,80(sp)
 100376c:	302d883a 	mov	r22,r6
 1003770:	d9800517 	ldw	r6,20(sp)
 1003774:	9cc00c04 	addi	r19,r19,48
 1003778:	dc401515 	stw	r17,84(sp)
 100377c:	d8c01917 	ldw	r3,100(sp)
 1003780:	34c00005 	stb	r19,0(r6)
 1003784:	d8800517 	ldw	r2,20(sp)
 1003788:	d9401917 	ldw	r5,100(sp)
 100378c:	d9801417 	ldw	r6,80(sp)
 1003790:	b009883a 	mov	r4,r22
 1003794:	880f883a 	mov	r7,r17
 1003798:	182f883a 	mov	r23,r3
 100379c:	17000044 	addi	fp,r2,1
 10037a0:	100905c0 	call	100905c <__gtdf2>
 10037a4:	00804e16 	blt	zero,r2,10038e0 <_dtoa_r+0x1158>
 10037a8:	d9801417 	ldw	r6,80(sp)
 10037ac:	0005883a 	mov	r2,zero
 10037b0:	00cffc34 	movhi	r3,16368
 10037b4:	180b883a 	mov	r5,r3
 10037b8:	880f883a 	mov	r7,r17
 10037bc:	1009883a 	mov	r4,r2
 10037c0:	100883c0 	call	100883c <__subdf3>
 10037c4:	d9401917 	ldw	r5,100(sp)
 10037c8:	180f883a 	mov	r7,r3
 10037cc:	b009883a 	mov	r4,r22
 10037d0:	100d883a 	mov	r6,r2
 10037d4:	100905c0 	call	100905c <__gtdf2>
 10037d8:	00bda216 	blt	zero,r2,1002e64 <_dtoa_r+0x6dc>
 10037dc:	d8c00317 	ldw	r3,12(sp)
 10037e0:	00800044 	movi	r2,1
 10037e4:	10c01216 	blt	r2,r3,1003830 <_dtoa_r+0x10a8>
 10037e8:	003d4506 	br	1002d00 <_dtoa_r+0x578>
 10037ec:	d9801417 	ldw	r6,80(sp)
 10037f0:	0005883a 	mov	r2,zero
 10037f4:	00cffc34 	movhi	r3,16368
 10037f8:	180b883a 	mov	r5,r3
 10037fc:	880f883a 	mov	r7,r17
 1003800:	1009883a 	mov	r4,r2
 1003804:	100883c0 	call	100883c <__subdf3>
 1003808:	d9c01b17 	ldw	r7,108(sp)
 100380c:	180b883a 	mov	r5,r3
 1003810:	1009883a 	mov	r4,r2
 1003814:	b00d883a 	mov	r6,r22
 1003818:	100916c0 	call	100916c <__ltdf2>
 100381c:	103d9116 	blt	r2,zero,1002e64 <_dtoa_r+0x6dc>
 1003820:	d9800517 	ldw	r6,20(sp)
 1003824:	d9000317 	ldw	r4,12(sp)
 1003828:	3105883a 	add	r2,r6,r4
 100382c:	e0bd3426 	beq	fp,r2,1002d00 <_dtoa_r+0x578>
 1003830:	04500934 	movhi	r17,16420
 1003834:	0021883a 	mov	r16,zero
 1003838:	b80b883a 	mov	r5,r23
 100383c:	b009883a 	mov	r4,r22
 1003840:	800d883a 	mov	r6,r16
 1003844:	880f883a 	mov	r7,r17
 1003848:	10089300 	call	1008930 <__muldf3>
 100384c:	d9401517 	ldw	r5,84(sp)
 1003850:	d9001417 	ldw	r4,80(sp)
 1003854:	880f883a 	mov	r7,r17
 1003858:	000d883a 	mov	r6,zero
 100385c:	d8801a15 	stw	r2,104(sp)
 1003860:	d8c01b15 	stw	r3,108(sp)
 1003864:	10089300 	call	1008930 <__muldf3>
 1003868:	180b883a 	mov	r5,r3
 100386c:	1009883a 	mov	r4,r2
 1003870:	1823883a 	mov	r17,r3
 1003874:	1021883a 	mov	r16,r2
 1003878:	10092ec0 	call	10092ec <__fixdfsi>
 100387c:	1009883a 	mov	r4,r2
 1003880:	102b883a 	mov	r21,r2
 1003884:	10091f40 	call	10091f4 <__floatsidf>
 1003888:	880b883a 	mov	r5,r17
 100388c:	8009883a 	mov	r4,r16
 1003890:	180f883a 	mov	r7,r3
 1003894:	100d883a 	mov	r6,r2
 1003898:	100883c0 	call	100883c <__subdf3>
 100389c:	1021883a 	mov	r16,r2
 10038a0:	d9001b17 	ldw	r4,108(sp)
 10038a4:	1823883a 	mov	r17,r3
 10038a8:	dc001415 	stw	r16,80(sp)
 10038ac:	ad400c04 	addi	r21,r21,48
 10038b0:	dc401515 	stw	r17,84(sp)
 10038b4:	d8801a17 	ldw	r2,104(sp)
 10038b8:	e5400005 	stb	r21,0(fp)
 10038bc:	202f883a 	mov	r23,r4
 10038c0:	d9c01b17 	ldw	r7,108(sp)
 10038c4:	d9001417 	ldw	r4,80(sp)
 10038c8:	880b883a 	mov	r5,r17
 10038cc:	100d883a 	mov	r6,r2
 10038d0:	102d883a 	mov	r22,r2
 10038d4:	e7000044 	addi	fp,fp,1
 10038d8:	100916c0 	call	100916c <__ltdf2>
 10038dc:	103fc30e 	bge	r2,zero,10037ec <_dtoa_r+0x1064>
 10038e0:	d9000417 	ldw	r4,16(sp)
 10038e4:	d9000d15 	stw	r4,52(sp)
 10038e8:	003d7106 	br	1002eb0 <_dtoa_r+0x728>
 10038ec:	d9801717 	ldw	r6,92(sp)
 10038f0:	00800084 	movi	r2,2
 10038f4:	11bde60e 	bge	r2,r6,1003090 <_dtoa_r+0x908>
 10038f8:	203cfb1e 	bne	r4,zero,1002ce8 <_dtoa_r+0x560>
 10038fc:	d9001617 	ldw	r4,88(sp)
 1003900:	900b883a 	mov	r5,r18
 1003904:	01800144 	movi	r6,5
 1003908:	000f883a 	mov	r7,zero
 100390c:	10066700 	call	1006670 <__multadd>
 1003910:	d9000717 	ldw	r4,28(sp)
 1003914:	100b883a 	mov	r5,r2
 1003918:	1025883a 	mov	r18,r2
 100391c:	1005aac0 	call	1005aac <__mcmp>
 1003920:	00bcf10e 	bge	zero,r2,1002ce8 <_dtoa_r+0x560>
 1003924:	d8c00d17 	ldw	r3,52(sp)
 1003928:	d9000517 	ldw	r4,20(sp)
 100392c:	d8000615 	stw	zero,24(sp)
 1003930:	18c00044 	addi	r3,r3,1
 1003934:	d8c00d15 	stw	r3,52(sp)
 1003938:	00800c44 	movi	r2,49
 100393c:	27000044 	addi	fp,r4,1
 1003940:	20800005 	stb	r2,0(r4)
 1003944:	003e8906 	br	100336c <_dtoa_r+0xbe4>
 1003948:	d8c00517 	ldw	r3,20(sp)
 100394c:	003bc206 	br	1002858 <_dtoa_r+0xd0>
 1003950:	01804074 	movhi	r6,257
 1003954:	31b38204 	addi	r6,r6,-12792
 1003958:	30c00917 	ldw	r3,36(r6)
 100395c:	30800817 	ldw	r2,32(r6)
 1003960:	d9001217 	ldw	r4,72(sp)
 1003964:	d9401317 	ldw	r5,76(sp)
 1003968:	180f883a 	mov	r7,r3
 100396c:	100d883a 	mov	r6,r2
 1003970:	1008cf40 	call	1008cf4 <__divdf3>
 1003974:	948003cc 	andi	r18,r18,15
 1003978:	058000c4 	movi	r22,3
 100397c:	1029883a 	mov	r20,r2
 1003980:	182b883a 	mov	r21,r3
 1003984:	003c8906 	br	1002bac <_dtoa_r+0x424>
 1003988:	d9001017 	ldw	r4,64(sp)
 100398c:	d9800917 	ldw	r6,36(sp)
 1003990:	0025883a 	mov	r18,zero
 1003994:	1105c83a 	sub	r2,r2,r4
 1003998:	2089883a 	add	r4,r4,r2
 100399c:	308d883a 	add	r6,r6,r2
 10039a0:	d9001015 	stw	r4,64(sp)
 10039a4:	d9800915 	stw	r6,36(sp)
 10039a8:	003e3206 	br	1003274 <_dtoa_r+0xaec>
 10039ac:	28800044 	addi	r2,r5,1
 10039b0:	27000044 	addi	fp,r4,1
 10039b4:	20800005 	stb	r2,0(r4)
 10039b8:	003e6c06 	br	100336c <_dtoa_r+0xbe4>
 10039bc:	d8800f17 	ldw	r2,60(sp)
 10039c0:	00bce016 	blt	zero,r2,1002d44 <_dtoa_r+0x5bc>
 10039c4:	d9800f17 	ldw	r6,60(sp)
 10039c8:	303cc51e 	bne	r6,zero,1002ce0 <_dtoa_r+0x558>
 10039cc:	0005883a 	mov	r2,zero
 10039d0:	00d00534 	movhi	r3,16404
 10039d4:	980b883a 	mov	r5,r19
 10039d8:	180f883a 	mov	r7,r3
 10039dc:	9009883a 	mov	r4,r18
 10039e0:	100d883a 	mov	r6,r2
 10039e4:	10089300 	call	1008930 <__muldf3>
 10039e8:	180b883a 	mov	r5,r3
 10039ec:	a80f883a 	mov	r7,r21
 10039f0:	1009883a 	mov	r4,r2
 10039f4:	a00d883a 	mov	r6,r20
 10039f8:	10090e40 	call	10090e4 <__gedf2>
 10039fc:	103cb80e 	bge	r2,zero,1002ce0 <_dtoa_r+0x558>
 1003a00:	0027883a 	mov	r19,zero
 1003a04:	0025883a 	mov	r18,zero
 1003a08:	003fc606 	br	1003924 <_dtoa_r+0x119c>
 1003a0c:	99400117 	ldw	r5,4(r19)
 1003a10:	d9001617 	ldw	r4,88(sp)
 1003a14:	1005ed00 	call	1005ed0 <_Balloc>
 1003a18:	99800417 	ldw	r6,16(r19)
 1003a1c:	11000304 	addi	r4,r2,12
 1003a20:	99400304 	addi	r5,r19,12
 1003a24:	318d883a 	add	r6,r6,r6
 1003a28:	318d883a 	add	r6,r6,r6
 1003a2c:	31800204 	addi	r6,r6,8
 1003a30:	1023883a 	mov	r17,r2
 1003a34:	10057380 	call	1005738 <memcpy>
 1003a38:	d9001617 	ldw	r4,88(sp)
 1003a3c:	880b883a 	mov	r5,r17
 1003a40:	01800044 	movi	r6,1
 1003a44:	10062940 	call	1006294 <__lshift>
 1003a48:	100b883a 	mov	r5,r2
 1003a4c:	003d9c06 	br	10030c0 <_dtoa_r+0x938>
 1003a50:	00800e44 	movi	r2,57
 1003a54:	b8807026 	beq	r23,r2,1003c18 <_dtoa_r+0x1490>
 1003a58:	b8800044 	addi	r2,r23,1
 1003a5c:	b7000044 	addi	fp,r22,1
 1003a60:	b0800005 	stb	r2,0(r22)
 1003a64:	003e4106 	br	100336c <_dtoa_r+0xbe4>
 1003a68:	d8800317 	ldw	r2,12(sp)
 1003a6c:	01804074 	movhi	r6,257
 1003a70:	31b35004 	addi	r6,r6,-12992
 1003a74:	b009883a 	mov	r4,r22
 1003a78:	100e90fa 	slli	r7,r2,3
 1003a7c:	b80b883a 	mov	r5,r23
 1003a80:	398f883a 	add	r7,r7,r6
 1003a84:	38bffe17 	ldw	r2,-8(r7)
 1003a88:	d9800517 	ldw	r6,20(sp)
 1003a8c:	38ffff17 	ldw	r3,-4(r7)
 1003a90:	37000044 	addi	fp,r6,1
 1003a94:	180f883a 	mov	r7,r3
 1003a98:	100d883a 	mov	r6,r2
 1003a9c:	10089300 	call	1008930 <__muldf3>
 1003aa0:	a80b883a 	mov	r5,r21
 1003aa4:	a009883a 	mov	r4,r20
 1003aa8:	182f883a 	mov	r23,r3
 1003aac:	102d883a 	mov	r22,r2
 1003ab0:	10092ec0 	call	10092ec <__fixdfsi>
 1003ab4:	1009883a 	mov	r4,r2
 1003ab8:	1027883a 	mov	r19,r2
 1003abc:	10091f40 	call	10091f4 <__floatsidf>
 1003ac0:	a80b883a 	mov	r5,r21
 1003ac4:	a009883a 	mov	r4,r20
 1003ac8:	180f883a 	mov	r7,r3
 1003acc:	100d883a 	mov	r6,r2
 1003ad0:	100883c0 	call	100883c <__subdf3>
 1003ad4:	180b883a 	mov	r5,r3
 1003ad8:	d8c00517 	ldw	r3,20(sp)
 1003adc:	9cc00c04 	addi	r19,r19,48
 1003ae0:	1009883a 	mov	r4,r2
 1003ae4:	1cc00005 	stb	r19,0(r3)
 1003ae8:	2021883a 	mov	r16,r4
 1003aec:	d9000317 	ldw	r4,12(sp)
 1003af0:	00800044 	movi	r2,1
 1003af4:	2823883a 	mov	r17,r5
 1003af8:	20802226 	beq	r4,r2,1003b84 <_dtoa_r+0x13fc>
 1003afc:	1029883a 	mov	r20,r2
 1003b00:	0005883a 	mov	r2,zero
 1003b04:	00d00934 	movhi	r3,16420
 1003b08:	180f883a 	mov	r7,r3
 1003b0c:	100d883a 	mov	r6,r2
 1003b10:	880b883a 	mov	r5,r17
 1003b14:	8009883a 	mov	r4,r16
 1003b18:	10089300 	call	1008930 <__muldf3>
 1003b1c:	180b883a 	mov	r5,r3
 1003b20:	1009883a 	mov	r4,r2
 1003b24:	1823883a 	mov	r17,r3
 1003b28:	1021883a 	mov	r16,r2
 1003b2c:	10092ec0 	call	10092ec <__fixdfsi>
 1003b30:	1009883a 	mov	r4,r2
 1003b34:	102b883a 	mov	r21,r2
 1003b38:	10091f40 	call	10091f4 <__floatsidf>
 1003b3c:	880b883a 	mov	r5,r17
 1003b40:	8009883a 	mov	r4,r16
 1003b44:	180f883a 	mov	r7,r3
 1003b48:	100d883a 	mov	r6,r2
 1003b4c:	100883c0 	call	100883c <__subdf3>
 1003b50:	180b883a 	mov	r5,r3
 1003b54:	d8c00517 	ldw	r3,20(sp)
 1003b58:	1009883a 	mov	r4,r2
 1003b5c:	ad400c04 	addi	r21,r21,48
 1003b60:	1d05883a 	add	r2,r3,r20
 1003b64:	15400005 	stb	r21,0(r2)
 1003b68:	2021883a 	mov	r16,r4
 1003b6c:	d9000317 	ldw	r4,12(sp)
 1003b70:	a5000044 	addi	r20,r20,1
 1003b74:	2823883a 	mov	r17,r5
 1003b78:	a13fe11e 	bne	r20,r4,1003b00 <_dtoa_r+0x1378>
 1003b7c:	e505883a 	add	r2,fp,r20
 1003b80:	173fffc4 	addi	fp,r2,-1
 1003b84:	0025883a 	mov	r18,zero
 1003b88:	04cff834 	movhi	r19,16352
 1003b8c:	b009883a 	mov	r4,r22
 1003b90:	b80b883a 	mov	r5,r23
 1003b94:	900d883a 	mov	r6,r18
 1003b98:	980f883a 	mov	r7,r19
 1003b9c:	10088bc0 	call	10088bc <__adddf3>
 1003ba0:	180b883a 	mov	r5,r3
 1003ba4:	1009883a 	mov	r4,r2
 1003ba8:	800d883a 	mov	r6,r16
 1003bac:	880f883a 	mov	r7,r17
 1003bb0:	100916c0 	call	100916c <__ltdf2>
 1003bb4:	103cab16 	blt	r2,zero,1002e64 <_dtoa_r+0x6dc>
 1003bb8:	0009883a 	mov	r4,zero
 1003bbc:	980b883a 	mov	r5,r19
 1003bc0:	b80f883a 	mov	r7,r23
 1003bc4:	b00d883a 	mov	r6,r22
 1003bc8:	100883c0 	call	100883c <__subdf3>
 1003bcc:	180b883a 	mov	r5,r3
 1003bd0:	880f883a 	mov	r7,r17
 1003bd4:	1009883a 	mov	r4,r2
 1003bd8:	800d883a 	mov	r6,r16
 1003bdc:	100905c0 	call	100905c <__gtdf2>
 1003be0:	00bc470e 	bge	zero,r2,1002d00 <_dtoa_r+0x578>
 1003be4:	00c00c04 	movi	r3,48
 1003be8:	e73fffc4 	addi	fp,fp,-1
 1003bec:	e0800007 	ldb	r2,0(fp)
 1003bf0:	10fffd26 	beq	r2,r3,1003be8 <_dtoa_r+0x1460>
 1003bf4:	d9800417 	ldw	r6,16(sp)
 1003bf8:	e7000044 	addi	fp,fp,1
 1003bfc:	d9800d15 	stw	r6,52(sp)
 1003c00:	003cab06 	br	1002eb0 <_dtoa_r+0x728>
 1003c04:	d8c00f17 	ldw	r3,60(sp)
 1003c08:	d9001117 	ldw	r4,68(sp)
 1003c0c:	20e1c83a 	sub	r16,r4,r3
 1003c10:	0007883a 	mov	r3,zero
 1003c14:	003d9b06 	br	1003284 <_dtoa_r+0xafc>
 1003c18:	00800e44 	movi	r2,57
 1003c1c:	b0800005 	stb	r2,0(r22)
 1003c20:	b5800044 	addi	r22,r22,1
 1003c24:	003dc106 	br	100332c <_dtoa_r+0xba4>
 1003c28:	05800084 	movi	r22,2
 1003c2c:	003bf706 	br	1002c0c <_dtoa_r+0x484>
 1003c30:	d9000f17 	ldw	r4,60(sp)
 1003c34:	013c000e 	bge	zero,r4,1002c38 <_dtoa_r+0x4b0>
 1003c38:	d9800e17 	ldw	r6,56(sp)
 1003c3c:	01bc300e 	bge	zero,r6,1002d00 <_dtoa_r+0x578>
 1003c40:	0005883a 	mov	r2,zero
 1003c44:	00d00934 	movhi	r3,16420
 1003c48:	a80b883a 	mov	r5,r21
 1003c4c:	180f883a 	mov	r7,r3
 1003c50:	a009883a 	mov	r4,r20
 1003c54:	100d883a 	mov	r6,r2
 1003c58:	10089300 	call	1008930 <__muldf3>
 1003c5c:	b1000044 	addi	r4,r22,1
 1003c60:	1021883a 	mov	r16,r2
 1003c64:	1823883a 	mov	r17,r3
 1003c68:	10091f40 	call	10091f4 <__floatsidf>
 1003c6c:	880b883a 	mov	r5,r17
 1003c70:	8009883a 	mov	r4,r16
 1003c74:	180f883a 	mov	r7,r3
 1003c78:	100d883a 	mov	r6,r2
 1003c7c:	10089300 	call	1008930 <__muldf3>
 1003c80:	0011883a 	mov	r8,zero
 1003c84:	02500734 	movhi	r9,16412
 1003c88:	180b883a 	mov	r5,r3
 1003c8c:	480f883a 	mov	r7,r9
 1003c90:	1009883a 	mov	r4,r2
 1003c94:	400d883a 	mov	r6,r8
 1003c98:	10088bc0 	call	10088bc <__adddf3>
 1003c9c:	102d883a 	mov	r22,r2
 1003ca0:	00bf3034 	movhi	r2,64704
 1003ca4:	10ef883a 	add	r23,r2,r3
 1003ca8:	d8800d17 	ldw	r2,52(sp)
 1003cac:	d8c00e17 	ldw	r3,56(sp)
 1003cb0:	8029883a 	mov	r20,r16
 1003cb4:	10bfffc4 	addi	r2,r2,-1
 1003cb8:	882b883a 	mov	r21,r17
 1003cbc:	d8800415 	stw	r2,16(sp)
 1003cc0:	d8c00315 	stw	r3,12(sp)
 1003cc4:	003e8306 	br	10036d4 <_dtoa_r+0xf4c>
 1003cc8:	d8800117 	ldw	r2,4(sp)
 1003ccc:	dc001117 	ldw	r16,68(sp)
 1003cd0:	dc801017 	ldw	r18,64(sp)
 1003cd4:	00c00d84 	movi	r3,54
 1003cd8:	1887c83a 	sub	r3,r3,r2
 1003cdc:	003d6906 	br	1003284 <_dtoa_r+0xafc>
 1003ce0:	01800044 	movi	r6,1
 1003ce4:	3021883a 	mov	r16,r6
 1003ce8:	d9800f15 	stw	r6,60(sp)
 1003cec:	d9802615 	stw	r6,152(sp)
 1003cf0:	d9800e15 	stw	r6,56(sp)
 1003cf4:	003b9306 	br	1002b44 <_dtoa_r+0x3bc>
 1003cf8:	b021883a 	mov	r16,r22
 1003cfc:	dd800f15 	stw	r22,60(sp)
 1003d00:	003b9006 	br	1002b44 <_dtoa_r+0x3bc>
 1003d04:	103e221e 	bne	r2,zero,1003590 <_dtoa_r+0xe08>
 1003d08:	b880004c 	andi	r2,r23,1
 1003d0c:	1005003a 	cmpeq	r2,r2,zero
 1003d10:	103e1f1e 	bne	r2,zero,1003590 <_dtoa_r+0xe08>
 1003d14:	003e1b06 	br	1003584 <_dtoa_r+0xdfc>
 1003d18:	d9001617 	ldw	r4,88(sp)
 1003d1c:	980b883a 	mov	r5,r19
 1003d20:	01800284 	movi	r6,10
 1003d24:	000f883a 	mov	r7,zero
 1003d28:	10066700 	call	1006670 <__multadd>
 1003d2c:	d8c00e17 	ldw	r3,56(sp)
 1003d30:	1027883a 	mov	r19,r2
 1003d34:	d8c00f15 	stw	r3,60(sp)
 1003d38:	003cd306 	br	1003088 <_dtoa_r+0x900>

01003d3c <_fflush_r>:
 1003d3c:	defffb04 	addi	sp,sp,-20
 1003d40:	dcc00315 	stw	r19,12(sp)
 1003d44:	dc800215 	stw	r18,8(sp)
 1003d48:	dfc00415 	stw	ra,16(sp)
 1003d4c:	dc400115 	stw	r17,4(sp)
 1003d50:	dc000015 	stw	r16,0(sp)
 1003d54:	2027883a 	mov	r19,r4
 1003d58:	2825883a 	mov	r18,r5
 1003d5c:	20000226 	beq	r4,zero,1003d68 <_fflush_r+0x2c>
 1003d60:	20800e17 	ldw	r2,56(r4)
 1003d64:	10005626 	beq	r2,zero,1003ec0 <_fflush_r+0x184>
 1003d68:	9100030b 	ldhu	r4,12(r18)
 1003d6c:	20ffffcc 	andi	r3,r4,65535
 1003d70:	18e0001c 	xori	r3,r3,32768
 1003d74:	18e00004 	addi	r3,r3,-32768
 1003d78:	1880020c 	andi	r2,r3,8
 1003d7c:	1000261e 	bne	r2,zero,1003e18 <_fflush_r+0xdc>
 1003d80:	90c00117 	ldw	r3,4(r18)
 1003d84:	20820014 	ori	r2,r4,2048
 1003d88:	9080030d 	sth	r2,12(r18)
 1003d8c:	1009883a 	mov	r4,r2
 1003d90:	00c0400e 	bge	zero,r3,1003e94 <_fflush_r+0x158>
 1003d94:	92000a17 	ldw	r8,40(r18)
 1003d98:	40004026 	beq	r8,zero,1003e9c <_fflush_r+0x160>
 1003d9c:	2084000c 	andi	r2,r4,4096
 1003da0:	10005326 	beq	r2,zero,1003ef0 <_fflush_r+0x1b4>
 1003da4:	94001417 	ldw	r16,80(r18)
 1003da8:	9080030b 	ldhu	r2,12(r18)
 1003dac:	1080010c 	andi	r2,r2,4
 1003db0:	1000481e 	bne	r2,zero,1003ed4 <_fflush_r+0x198>
 1003db4:	91400717 	ldw	r5,28(r18)
 1003db8:	9809883a 	mov	r4,r19
 1003dbc:	800d883a 	mov	r6,r16
 1003dc0:	000f883a 	mov	r7,zero
 1003dc4:	403ee83a 	callr	r8
 1003dc8:	8080261e 	bne	r16,r2,1003e64 <_fflush_r+0x128>
 1003dcc:	9080030b 	ldhu	r2,12(r18)
 1003dd0:	91000417 	ldw	r4,16(r18)
 1003dd4:	90000115 	stw	zero,4(r18)
 1003dd8:	10bdffcc 	andi	r2,r2,63487
 1003ddc:	10ffffcc 	andi	r3,r2,65535
 1003de0:	18c4000c 	andi	r3,r3,4096
 1003de4:	9080030d 	sth	r2,12(r18)
 1003de8:	91000015 	stw	r4,0(r18)
 1003dec:	18002b26 	beq	r3,zero,1003e9c <_fflush_r+0x160>
 1003df0:	0007883a 	mov	r3,zero
 1003df4:	1805883a 	mov	r2,r3
 1003df8:	94001415 	stw	r16,80(r18)
 1003dfc:	dfc00417 	ldw	ra,16(sp)
 1003e00:	dcc00317 	ldw	r19,12(sp)
 1003e04:	dc800217 	ldw	r18,8(sp)
 1003e08:	dc400117 	ldw	r17,4(sp)
 1003e0c:	dc000017 	ldw	r16,0(sp)
 1003e10:	dec00504 	addi	sp,sp,20
 1003e14:	f800283a 	ret
 1003e18:	94400417 	ldw	r17,16(r18)
 1003e1c:	88001f26 	beq	r17,zero,1003e9c <_fflush_r+0x160>
 1003e20:	90800017 	ldw	r2,0(r18)
 1003e24:	18c000cc 	andi	r3,r3,3
 1003e28:	94400015 	stw	r17,0(r18)
 1003e2c:	1461c83a 	sub	r16,r2,r17
 1003e30:	18002526 	beq	r3,zero,1003ec8 <_fflush_r+0x18c>
 1003e34:	0005883a 	mov	r2,zero
 1003e38:	90800215 	stw	r2,8(r18)
 1003e3c:	0400170e 	bge	zero,r16,1003e9c <_fflush_r+0x160>
 1003e40:	90c00917 	ldw	r3,36(r18)
 1003e44:	91400717 	ldw	r5,28(r18)
 1003e48:	880d883a 	mov	r6,r17
 1003e4c:	800f883a 	mov	r7,r16
 1003e50:	9809883a 	mov	r4,r19
 1003e54:	183ee83a 	callr	r3
 1003e58:	88a3883a 	add	r17,r17,r2
 1003e5c:	80a1c83a 	sub	r16,r16,r2
 1003e60:	00bff616 	blt	zero,r2,1003e3c <_fflush_r+0x100>
 1003e64:	9080030b 	ldhu	r2,12(r18)
 1003e68:	00ffffc4 	movi	r3,-1
 1003e6c:	10801014 	ori	r2,r2,64
 1003e70:	9080030d 	sth	r2,12(r18)
 1003e74:	1805883a 	mov	r2,r3
 1003e78:	dfc00417 	ldw	ra,16(sp)
 1003e7c:	dcc00317 	ldw	r19,12(sp)
 1003e80:	dc800217 	ldw	r18,8(sp)
 1003e84:	dc400117 	ldw	r17,4(sp)
 1003e88:	dc000017 	ldw	r16,0(sp)
 1003e8c:	dec00504 	addi	sp,sp,20
 1003e90:	f800283a 	ret
 1003e94:	90800f17 	ldw	r2,60(r18)
 1003e98:	00bfbe16 	blt	zero,r2,1003d94 <_fflush_r+0x58>
 1003e9c:	0007883a 	mov	r3,zero
 1003ea0:	1805883a 	mov	r2,r3
 1003ea4:	dfc00417 	ldw	ra,16(sp)
 1003ea8:	dcc00317 	ldw	r19,12(sp)
 1003eac:	dc800217 	ldw	r18,8(sp)
 1003eb0:	dc400117 	ldw	r17,4(sp)
 1003eb4:	dc000017 	ldw	r16,0(sp)
 1003eb8:	dec00504 	addi	sp,sp,20
 1003ebc:	f800283a 	ret
 1003ec0:	1003fd40 	call	1003fd4 <__sinit>
 1003ec4:	003fa806 	br	1003d68 <_fflush_r+0x2c>
 1003ec8:	90800517 	ldw	r2,20(r18)
 1003ecc:	90800215 	stw	r2,8(r18)
 1003ed0:	003fda06 	br	1003e3c <_fflush_r+0x100>
 1003ed4:	90800117 	ldw	r2,4(r18)
 1003ed8:	90c00c17 	ldw	r3,48(r18)
 1003edc:	80a1c83a 	sub	r16,r16,r2
 1003ee0:	183fb426 	beq	r3,zero,1003db4 <_fflush_r+0x78>
 1003ee4:	90800f17 	ldw	r2,60(r18)
 1003ee8:	80a1c83a 	sub	r16,r16,r2
 1003eec:	003fb106 	br	1003db4 <_fflush_r+0x78>
 1003ef0:	91400717 	ldw	r5,28(r18)
 1003ef4:	9809883a 	mov	r4,r19
 1003ef8:	000d883a 	mov	r6,zero
 1003efc:	01c00044 	movi	r7,1
 1003f00:	403ee83a 	callr	r8
 1003f04:	1021883a 	mov	r16,r2
 1003f08:	00bfffc4 	movi	r2,-1
 1003f0c:	80800226 	beq	r16,r2,1003f18 <_fflush_r+0x1dc>
 1003f10:	92000a17 	ldw	r8,40(r18)
 1003f14:	003fa406 	br	1003da8 <_fflush_r+0x6c>
 1003f18:	98c00017 	ldw	r3,0(r19)
 1003f1c:	00800744 	movi	r2,29
 1003f20:	18bfde26 	beq	r3,r2,1003e9c <_fflush_r+0x160>
 1003f24:	9080030b 	ldhu	r2,12(r18)
 1003f28:	8007883a 	mov	r3,r16
 1003f2c:	10801014 	ori	r2,r2,64
 1003f30:	9080030d 	sth	r2,12(r18)
 1003f34:	003fcf06 	br	1003e74 <_fflush_r+0x138>

01003f38 <fflush>:
 1003f38:	01404034 	movhi	r5,256
 1003f3c:	294f4f04 	addi	r5,r5,15676
 1003f40:	2007883a 	mov	r3,r4
 1003f44:	20000526 	beq	r4,zero,1003f5c <fflush+0x24>
 1003f48:	00804074 	movhi	r2,257
 1003f4c:	10ba8304 	addi	r2,r2,-5620
 1003f50:	11000017 	ldw	r4,0(r2)
 1003f54:	180b883a 	mov	r5,r3
 1003f58:	1003d3c1 	jmpi	1003d3c <_fflush_r>
 1003f5c:	00804074 	movhi	r2,257
 1003f60:	10ba8404 	addi	r2,r2,-5616
 1003f64:	11000017 	ldw	r4,0(r2)
 1003f68:	1004b3c1 	jmpi	1004b3c <_fwalk_reent>

01003f6c <std>:
 1003f6c:	00804034 	movhi	r2,256
 1003f70:	109c2c04 	addi	r2,r2,28848
 1003f74:	20800b15 	stw	r2,44(r4)
 1003f78:	00804034 	movhi	r2,256
 1003f7c:	109c6704 	addi	r2,r2,29084
 1003f80:	20800815 	stw	r2,32(r4)
 1003f84:	00c04034 	movhi	r3,256
 1003f88:	18dc4804 	addi	r3,r3,28960
 1003f8c:	00804034 	movhi	r2,256
 1003f90:	109c2e04 	addi	r2,r2,28856
 1003f94:	2140030d 	sth	r5,12(r4)
 1003f98:	2180038d 	sth	r6,14(r4)
 1003f9c:	20c00915 	stw	r3,36(r4)
 1003fa0:	20800a15 	stw	r2,40(r4)
 1003fa4:	20000015 	stw	zero,0(r4)
 1003fa8:	20000115 	stw	zero,4(r4)
 1003fac:	20000215 	stw	zero,8(r4)
 1003fb0:	20000415 	stw	zero,16(r4)
 1003fb4:	20000515 	stw	zero,20(r4)
 1003fb8:	20000615 	stw	zero,24(r4)
 1003fbc:	21000715 	stw	r4,28(r4)
 1003fc0:	f800283a 	ret

01003fc4 <__sfp_lock_acquire>:
 1003fc4:	f800283a 	ret

01003fc8 <__sfp_lock_release>:
 1003fc8:	f800283a 	ret

01003fcc <__sinit_lock_acquire>:
 1003fcc:	f800283a 	ret

01003fd0 <__sinit_lock_release>:
 1003fd0:	f800283a 	ret

01003fd4 <__sinit>:
 1003fd4:	20800e17 	ldw	r2,56(r4)
 1003fd8:	defffd04 	addi	sp,sp,-12
 1003fdc:	dc400115 	stw	r17,4(sp)
 1003fe0:	dc000015 	stw	r16,0(sp)
 1003fe4:	dfc00215 	stw	ra,8(sp)
 1003fe8:	04400044 	movi	r17,1
 1003fec:	01400104 	movi	r5,4
 1003ff0:	000d883a 	mov	r6,zero
 1003ff4:	2021883a 	mov	r16,r4
 1003ff8:	2200bb04 	addi	r8,r4,748
 1003ffc:	200f883a 	mov	r7,r4
 1004000:	10000526 	beq	r2,zero,1004018 <__sinit+0x44>
 1004004:	dfc00217 	ldw	ra,8(sp)
 1004008:	dc400117 	ldw	r17,4(sp)
 100400c:	dc000017 	ldw	r16,0(sp)
 1004010:	dec00304 	addi	sp,sp,12
 1004014:	f800283a 	ret
 1004018:	21000117 	ldw	r4,4(r4)
 100401c:	00804034 	movhi	r2,256
 1004020:	10902e04 	addi	r2,r2,16568
 1004024:	00c000c4 	movi	r3,3
 1004028:	80800f15 	stw	r2,60(r16)
 100402c:	80c0b915 	stw	r3,740(r16)
 1004030:	8200ba15 	stw	r8,744(r16)
 1004034:	84400e15 	stw	r17,56(r16)
 1004038:	8000b815 	stw	zero,736(r16)
 100403c:	1003f6c0 	call	1003f6c <std>
 1004040:	81000217 	ldw	r4,8(r16)
 1004044:	880d883a 	mov	r6,r17
 1004048:	800f883a 	mov	r7,r16
 100404c:	01400284 	movi	r5,10
 1004050:	1003f6c0 	call	1003f6c <std>
 1004054:	81000317 	ldw	r4,12(r16)
 1004058:	800f883a 	mov	r7,r16
 100405c:	01400484 	movi	r5,18
 1004060:	01800084 	movi	r6,2
 1004064:	dfc00217 	ldw	ra,8(sp)
 1004068:	dc400117 	ldw	r17,4(sp)
 100406c:	dc000017 	ldw	r16,0(sp)
 1004070:	dec00304 	addi	sp,sp,12
 1004074:	1003f6c1 	jmpi	1003f6c <std>

01004078 <__fp_lock>:
 1004078:	0005883a 	mov	r2,zero
 100407c:	f800283a 	ret

01004080 <__fp_unlock>:
 1004080:	0005883a 	mov	r2,zero
 1004084:	f800283a 	ret

01004088 <__fp_unlock_all>:
 1004088:	00804074 	movhi	r2,257
 100408c:	10ba8304 	addi	r2,r2,-5620
 1004090:	11000017 	ldw	r4,0(r2)
 1004094:	01404034 	movhi	r5,256
 1004098:	29502004 	addi	r5,r5,16512
 100409c:	1004c041 	jmpi	1004c04 <_fwalk>

010040a0 <__fp_lock_all>:
 10040a0:	00804074 	movhi	r2,257
 10040a4:	10ba8304 	addi	r2,r2,-5620
 10040a8:	11000017 	ldw	r4,0(r2)
 10040ac:	01404034 	movhi	r5,256
 10040b0:	29501e04 	addi	r5,r5,16504
 10040b4:	1004c041 	jmpi	1004c04 <_fwalk>

010040b8 <_cleanup_r>:
 10040b8:	01404034 	movhi	r5,256
 10040bc:	295d5e04 	addi	r5,r5,30072
 10040c0:	1004c041 	jmpi	1004c04 <_fwalk>

010040c4 <_cleanup>:
 10040c4:	00804074 	movhi	r2,257
 10040c8:	10ba8404 	addi	r2,r2,-5616
 10040cc:	11000017 	ldw	r4,0(r2)
 10040d0:	10040b81 	jmpi	10040b8 <_cleanup_r>

010040d4 <__sfmoreglue>:
 10040d4:	defffc04 	addi	sp,sp,-16
 10040d8:	dc000015 	stw	r16,0(sp)
 10040dc:	2821883a 	mov	r16,r5
 10040e0:	dc400115 	stw	r17,4(sp)
 10040e4:	01401704 	movi	r5,92
 10040e8:	2023883a 	mov	r17,r4
 10040ec:	8009883a 	mov	r4,r16
 10040f0:	dfc00315 	stw	ra,12(sp)
 10040f4:	dcc00215 	stw	r19,8(sp)
 10040f8:	10096a40 	call	10096a4 <__mulsi3>
 10040fc:	11400304 	addi	r5,r2,12
 1004100:	8809883a 	mov	r4,r17
 1004104:	1027883a 	mov	r19,r2
 1004108:	1004f140 	call	1004f14 <_malloc_r>
 100410c:	10c00304 	addi	r3,r2,12
 1004110:	1023883a 	mov	r17,r2
 1004114:	1809883a 	mov	r4,r3
 1004118:	980d883a 	mov	r6,r19
 100411c:	000b883a 	mov	r5,zero
 1004120:	10000b26 	beq	r2,zero,1004150 <__sfmoreglue+0x7c>
 1004124:	14000115 	stw	r16,4(r2)
 1004128:	10c00215 	stw	r3,8(r2)
 100412c:	10000015 	stw	zero,0(r2)
 1004130:	10058b80 	call	10058b8 <memset>
 1004134:	8805883a 	mov	r2,r17
 1004138:	dfc00317 	ldw	ra,12(sp)
 100413c:	dcc00217 	ldw	r19,8(sp)
 1004140:	dc400117 	ldw	r17,4(sp)
 1004144:	dc000017 	ldw	r16,0(sp)
 1004148:	dec00404 	addi	sp,sp,16
 100414c:	f800283a 	ret
 1004150:	0023883a 	mov	r17,zero
 1004154:	8805883a 	mov	r2,r17
 1004158:	dfc00317 	ldw	ra,12(sp)
 100415c:	dcc00217 	ldw	r19,8(sp)
 1004160:	dc400117 	ldw	r17,4(sp)
 1004164:	dc000017 	ldw	r16,0(sp)
 1004168:	dec00404 	addi	sp,sp,16
 100416c:	f800283a 	ret

01004170 <__sfp>:
 1004170:	defffd04 	addi	sp,sp,-12
 1004174:	00804074 	movhi	r2,257
 1004178:	10ba8404 	addi	r2,r2,-5616
 100417c:	dc000015 	stw	r16,0(sp)
 1004180:	14000017 	ldw	r16,0(r2)
 1004184:	dc400115 	stw	r17,4(sp)
 1004188:	dfc00215 	stw	ra,8(sp)
 100418c:	80800e17 	ldw	r2,56(r16)
 1004190:	2023883a 	mov	r17,r4
 1004194:	10002626 	beq	r2,zero,1004230 <__sfp+0xc0>
 1004198:	8400b804 	addi	r16,r16,736
 100419c:	80800117 	ldw	r2,4(r16)
 10041a0:	81000217 	ldw	r4,8(r16)
 10041a4:	10ffffc4 	addi	r3,r2,-1
 10041a8:	18000916 	blt	r3,zero,10041d0 <__sfp+0x60>
 10041ac:	2080030f 	ldh	r2,12(r4)
 10041b0:	10000b26 	beq	r2,zero,10041e0 <__sfp+0x70>
 10041b4:	017fffc4 	movi	r5,-1
 10041b8:	00000206 	br	10041c4 <__sfp+0x54>
 10041bc:	2080030f 	ldh	r2,12(r4)
 10041c0:	10000726 	beq	r2,zero,10041e0 <__sfp+0x70>
 10041c4:	18ffffc4 	addi	r3,r3,-1
 10041c8:	21001704 	addi	r4,r4,92
 10041cc:	197ffb1e 	bne	r3,r5,10041bc <__sfp+0x4c>
 10041d0:	80800017 	ldw	r2,0(r16)
 10041d4:	10001926 	beq	r2,zero,100423c <__sfp+0xcc>
 10041d8:	1021883a 	mov	r16,r2
 10041dc:	003fef06 	br	100419c <__sfp+0x2c>
 10041e0:	00bfffc4 	movi	r2,-1
 10041e4:	00c00044 	movi	r3,1
 10041e8:	2080038d 	sth	r2,14(r4)
 10041ec:	20c0030d 	sth	r3,12(r4)
 10041f0:	20000015 	stw	zero,0(r4)
 10041f4:	20000215 	stw	zero,8(r4)
 10041f8:	20000115 	stw	zero,4(r4)
 10041fc:	20000415 	stw	zero,16(r4)
 1004200:	20000515 	stw	zero,20(r4)
 1004204:	20000615 	stw	zero,24(r4)
 1004208:	20000c15 	stw	zero,48(r4)
 100420c:	20000d15 	stw	zero,52(r4)
 1004210:	20001115 	stw	zero,68(r4)
 1004214:	20001215 	stw	zero,72(r4)
 1004218:	2005883a 	mov	r2,r4
 100421c:	dfc00217 	ldw	ra,8(sp)
 1004220:	dc400117 	ldw	r17,4(sp)
 1004224:	dc000017 	ldw	r16,0(sp)
 1004228:	dec00304 	addi	sp,sp,12
 100422c:	f800283a 	ret
 1004230:	8009883a 	mov	r4,r16
 1004234:	1003fd40 	call	1003fd4 <__sinit>
 1004238:	003fd706 	br	1004198 <__sfp+0x28>
 100423c:	8809883a 	mov	r4,r17
 1004240:	01400104 	movi	r5,4
 1004244:	10040d40 	call	10040d4 <__sfmoreglue>
 1004248:	80800015 	stw	r2,0(r16)
 100424c:	103fe21e 	bne	r2,zero,10041d8 <__sfp+0x68>
 1004250:	00800304 	movi	r2,12
 1004254:	0009883a 	mov	r4,zero
 1004258:	88800015 	stw	r2,0(r17)
 100425c:	003fee06 	br	1004218 <__sfp+0xa8>

01004260 <_malloc_trim_r>:
 1004260:	defffb04 	addi	sp,sp,-20
 1004264:	dcc00315 	stw	r19,12(sp)
 1004268:	04c04074 	movhi	r19,257
 100426c:	9cf4f404 	addi	r19,r19,-11312
 1004270:	dc800215 	stw	r18,8(sp)
 1004274:	dc400115 	stw	r17,4(sp)
 1004278:	dc000015 	stw	r16,0(sp)
 100427c:	2823883a 	mov	r17,r5
 1004280:	2025883a 	mov	r18,r4
 1004284:	dfc00415 	stw	ra,16(sp)
 1004288:	100a4280 	call	100a428 <__malloc_lock>
 100428c:	98800217 	ldw	r2,8(r19)
 1004290:	9009883a 	mov	r4,r18
 1004294:	000b883a 	mov	r5,zero
 1004298:	10c00117 	ldw	r3,4(r2)
 100429c:	00bfff04 	movi	r2,-4
 10042a0:	18a0703a 	and	r16,r3,r2
 10042a4:	8463c83a 	sub	r17,r16,r17
 10042a8:	8c43fbc4 	addi	r17,r17,4079
 10042ac:	8822d33a 	srli	r17,r17,12
 10042b0:	0083ffc4 	movi	r2,4095
 10042b4:	8c7fffc4 	addi	r17,r17,-1
 10042b8:	8822933a 	slli	r17,r17,12
 10042bc:	1440060e 	bge	r2,r17,10042d8 <_malloc_trim_r+0x78>
 10042c0:	10070400 	call	1007040 <_sbrk_r>
 10042c4:	98c00217 	ldw	r3,8(r19)
 10042c8:	9009883a 	mov	r4,r18
 10042cc:	044bc83a 	sub	r5,zero,r17
 10042d0:	80c7883a 	add	r3,r16,r3
 10042d4:	10c00926 	beq	r2,r3,10042fc <_malloc_trim_r+0x9c>
 10042d8:	100a4480 	call	100a448 <__malloc_unlock>
 10042dc:	0005883a 	mov	r2,zero
 10042e0:	dfc00417 	ldw	ra,16(sp)
 10042e4:	dcc00317 	ldw	r19,12(sp)
 10042e8:	dc800217 	ldw	r18,8(sp)
 10042ec:	dc400117 	ldw	r17,4(sp)
 10042f0:	dc000017 	ldw	r16,0(sp)
 10042f4:	dec00504 	addi	sp,sp,20
 10042f8:	f800283a 	ret
 10042fc:	9009883a 	mov	r4,r18
 1004300:	10070400 	call	1007040 <_sbrk_r>
 1004304:	844dc83a 	sub	r6,r16,r17
 1004308:	00ffffc4 	movi	r3,-1
 100430c:	9009883a 	mov	r4,r18
 1004310:	000b883a 	mov	r5,zero
 1004314:	01c04074 	movhi	r7,257
 1004318:	39c14204 	addi	r7,r7,1288
 100431c:	31800054 	ori	r6,r6,1
 1004320:	10c00926 	beq	r2,r3,1004348 <_malloc_trim_r+0xe8>
 1004324:	38800017 	ldw	r2,0(r7)
 1004328:	98c00217 	ldw	r3,8(r19)
 100432c:	9009883a 	mov	r4,r18
 1004330:	1445c83a 	sub	r2,r2,r17
 1004334:	38800015 	stw	r2,0(r7)
 1004338:	19800115 	stw	r6,4(r3)
 100433c:	100a4480 	call	100a448 <__malloc_unlock>
 1004340:	00800044 	movi	r2,1
 1004344:	003fe606 	br	10042e0 <_malloc_trim_r+0x80>
 1004348:	10070400 	call	1007040 <_sbrk_r>
 100434c:	99800217 	ldw	r6,8(r19)
 1004350:	100f883a 	mov	r7,r2
 1004354:	9009883a 	mov	r4,r18
 1004358:	1187c83a 	sub	r3,r2,r6
 100435c:	008003c4 	movi	r2,15
 1004360:	19400054 	ori	r5,r3,1
 1004364:	10ffdc0e 	bge	r2,r3,10042d8 <_malloc_trim_r+0x78>
 1004368:	00804074 	movhi	r2,257
 100436c:	10ba8804 	addi	r2,r2,-5600
 1004370:	10c00017 	ldw	r3,0(r2)
 1004374:	00804074 	movhi	r2,257
 1004378:	10814204 	addi	r2,r2,1288
 100437c:	31400115 	stw	r5,4(r6)
 1004380:	38c7c83a 	sub	r3,r7,r3
 1004384:	10c00015 	stw	r3,0(r2)
 1004388:	003fd306 	br	10042d8 <_malloc_trim_r+0x78>

0100438c <_free_r>:
 100438c:	defffd04 	addi	sp,sp,-12
 1004390:	dc400115 	stw	r17,4(sp)
 1004394:	dc000015 	stw	r16,0(sp)
 1004398:	dfc00215 	stw	ra,8(sp)
 100439c:	2821883a 	mov	r16,r5
 10043a0:	2023883a 	mov	r17,r4
 10043a4:	28005a26 	beq	r5,zero,1004510 <_free_r+0x184>
 10043a8:	100a4280 	call	100a428 <__malloc_lock>
 10043ac:	823ffe04 	addi	r8,r16,-8
 10043b0:	41400117 	ldw	r5,4(r8)
 10043b4:	00bfff84 	movi	r2,-2
 10043b8:	02804074 	movhi	r10,257
 10043bc:	52b4f404 	addi	r10,r10,-11312
 10043c0:	288e703a 	and	r7,r5,r2
 10043c4:	41cd883a 	add	r6,r8,r7
 10043c8:	30c00117 	ldw	r3,4(r6)
 10043cc:	51000217 	ldw	r4,8(r10)
 10043d0:	00bfff04 	movi	r2,-4
 10043d4:	1892703a 	and	r9,r3,r2
 10043d8:	5017883a 	mov	r11,r10
 10043dc:	31006726 	beq	r6,r4,100457c <_free_r+0x1f0>
 10043e0:	2880004c 	andi	r2,r5,1
 10043e4:	1005003a 	cmpeq	r2,r2,zero
 10043e8:	32400115 	stw	r9,4(r6)
 10043ec:	10001a1e 	bne	r2,zero,1004458 <_free_r+0xcc>
 10043f0:	000b883a 	mov	r5,zero
 10043f4:	3247883a 	add	r3,r6,r9
 10043f8:	18800117 	ldw	r2,4(r3)
 10043fc:	1080004c 	andi	r2,r2,1
 1004400:	1000231e 	bne	r2,zero,1004490 <_free_r+0x104>
 1004404:	280ac03a 	cmpne	r5,r5,zero
 1004408:	3a4f883a 	add	r7,r7,r9
 100440c:	2800451e 	bne	r5,zero,1004524 <_free_r+0x198>
 1004410:	31000217 	ldw	r4,8(r6)
 1004414:	00804074 	movhi	r2,257
 1004418:	10b4f604 	addi	r2,r2,-11304
 100441c:	20807b26 	beq	r4,r2,100460c <_free_r+0x280>
 1004420:	30800317 	ldw	r2,12(r6)
 1004424:	3a07883a 	add	r3,r7,r8
 1004428:	19c00015 	stw	r7,0(r3)
 100442c:	11000215 	stw	r4,8(r2)
 1004430:	20800315 	stw	r2,12(r4)
 1004434:	38800054 	ori	r2,r7,1
 1004438:	40800115 	stw	r2,4(r8)
 100443c:	28001a26 	beq	r5,zero,10044a8 <_free_r+0x11c>
 1004440:	8809883a 	mov	r4,r17
 1004444:	dfc00217 	ldw	ra,8(sp)
 1004448:	dc400117 	ldw	r17,4(sp)
 100444c:	dc000017 	ldw	r16,0(sp)
 1004450:	dec00304 	addi	sp,sp,12
 1004454:	100a4481 	jmpi	100a448 <__malloc_unlock>
 1004458:	80bffe17 	ldw	r2,-8(r16)
 100445c:	50c00204 	addi	r3,r10,8
 1004460:	4091c83a 	sub	r8,r8,r2
 1004464:	41000217 	ldw	r4,8(r8)
 1004468:	388f883a 	add	r7,r7,r2
 100446c:	20c06126 	beq	r4,r3,10045f4 <_free_r+0x268>
 1004470:	40800317 	ldw	r2,12(r8)
 1004474:	3247883a 	add	r3,r6,r9
 1004478:	000b883a 	mov	r5,zero
 100447c:	11000215 	stw	r4,8(r2)
 1004480:	20800315 	stw	r2,12(r4)
 1004484:	18800117 	ldw	r2,4(r3)
 1004488:	1080004c 	andi	r2,r2,1
 100448c:	103fdd26 	beq	r2,zero,1004404 <_free_r+0x78>
 1004490:	38800054 	ori	r2,r7,1
 1004494:	3a07883a 	add	r3,r7,r8
 1004498:	280ac03a 	cmpne	r5,r5,zero
 100449c:	40800115 	stw	r2,4(r8)
 10044a0:	19c00015 	stw	r7,0(r3)
 10044a4:	283fe61e 	bne	r5,zero,1004440 <_free_r+0xb4>
 10044a8:	00807fc4 	movi	r2,511
 10044ac:	11c01f2e 	bgeu	r2,r7,100452c <_free_r+0x1a0>
 10044b0:	3806d27a 	srli	r3,r7,9
 10044b4:	1800481e 	bne	r3,zero,10045d8 <_free_r+0x24c>
 10044b8:	3804d0fa 	srli	r2,r7,3
 10044bc:	100690fa 	slli	r3,r2,3
 10044c0:	1acd883a 	add	r6,r3,r11
 10044c4:	31400217 	ldw	r5,8(r6)
 10044c8:	31405926 	beq	r6,r5,1004630 <_free_r+0x2a4>
 10044cc:	28800117 	ldw	r2,4(r5)
 10044d0:	00ffff04 	movi	r3,-4
 10044d4:	10c4703a 	and	r2,r2,r3
 10044d8:	3880022e 	bgeu	r7,r2,10044e4 <_free_r+0x158>
 10044dc:	29400217 	ldw	r5,8(r5)
 10044e0:	317ffa1e 	bne	r6,r5,10044cc <_free_r+0x140>
 10044e4:	29800317 	ldw	r6,12(r5)
 10044e8:	41800315 	stw	r6,12(r8)
 10044ec:	41400215 	stw	r5,8(r8)
 10044f0:	8809883a 	mov	r4,r17
 10044f4:	2a000315 	stw	r8,12(r5)
 10044f8:	32000215 	stw	r8,8(r6)
 10044fc:	dfc00217 	ldw	ra,8(sp)
 1004500:	dc400117 	ldw	r17,4(sp)
 1004504:	dc000017 	ldw	r16,0(sp)
 1004508:	dec00304 	addi	sp,sp,12
 100450c:	100a4481 	jmpi	100a448 <__malloc_unlock>
 1004510:	dfc00217 	ldw	ra,8(sp)
 1004514:	dc400117 	ldw	r17,4(sp)
 1004518:	dc000017 	ldw	r16,0(sp)
 100451c:	dec00304 	addi	sp,sp,12
 1004520:	f800283a 	ret
 1004524:	31000217 	ldw	r4,8(r6)
 1004528:	003fbd06 	br	1004420 <_free_r+0x94>
 100452c:	3806d0fa 	srli	r3,r7,3
 1004530:	00800044 	movi	r2,1
 1004534:	51400117 	ldw	r5,4(r10)
 1004538:	180890fa 	slli	r4,r3,3
 100453c:	1807d0ba 	srai	r3,r3,2
 1004540:	22c9883a 	add	r4,r4,r11
 1004544:	21800217 	ldw	r6,8(r4)
 1004548:	10c4983a 	sll	r2,r2,r3
 100454c:	41000315 	stw	r4,12(r8)
 1004550:	41800215 	stw	r6,8(r8)
 1004554:	288ab03a 	or	r5,r5,r2
 1004558:	22000215 	stw	r8,8(r4)
 100455c:	8809883a 	mov	r4,r17
 1004560:	51400115 	stw	r5,4(r10)
 1004564:	32000315 	stw	r8,12(r6)
 1004568:	dfc00217 	ldw	ra,8(sp)
 100456c:	dc400117 	ldw	r17,4(sp)
 1004570:	dc000017 	ldw	r16,0(sp)
 1004574:	dec00304 	addi	sp,sp,12
 1004578:	100a4481 	jmpi	100a448 <__malloc_unlock>
 100457c:	2880004c 	andi	r2,r5,1
 1004580:	3a4d883a 	add	r6,r7,r9
 1004584:	1000071e 	bne	r2,zero,10045a4 <_free_r+0x218>
 1004588:	80bffe17 	ldw	r2,-8(r16)
 100458c:	4091c83a 	sub	r8,r8,r2
 1004590:	41000317 	ldw	r4,12(r8)
 1004594:	40c00217 	ldw	r3,8(r8)
 1004598:	308d883a 	add	r6,r6,r2
 100459c:	20c00215 	stw	r3,8(r4)
 10045a0:	19000315 	stw	r4,12(r3)
 10045a4:	00804074 	movhi	r2,257
 10045a8:	10ba8704 	addi	r2,r2,-5604
 10045ac:	11000017 	ldw	r4,0(r2)
 10045b0:	30c00054 	ori	r3,r6,1
 10045b4:	52000215 	stw	r8,8(r10)
 10045b8:	40c00115 	stw	r3,4(r8)
 10045bc:	313fa036 	bltu	r6,r4,1004440 <_free_r+0xb4>
 10045c0:	00804074 	movhi	r2,257
 10045c4:	10813804 	addi	r2,r2,1248
 10045c8:	11400017 	ldw	r5,0(r2)
 10045cc:	8809883a 	mov	r4,r17
 10045d0:	10042600 	call	1004260 <_malloc_trim_r>
 10045d4:	003f9a06 	br	1004440 <_free_r+0xb4>
 10045d8:	00800104 	movi	r2,4
 10045dc:	10c0072e 	bgeu	r2,r3,10045fc <_free_r+0x270>
 10045e0:	00800504 	movi	r2,20
 10045e4:	10c01936 	bltu	r2,r3,100464c <_free_r+0x2c0>
 10045e8:	188016c4 	addi	r2,r3,91
 10045ec:	100690fa 	slli	r3,r2,3
 10045f0:	003fb306 	br	10044c0 <_free_r+0x134>
 10045f4:	01400044 	movi	r5,1
 10045f8:	003f7e06 	br	10043f4 <_free_r+0x68>
 10045fc:	3804d1ba 	srli	r2,r7,6
 1004600:	10800e04 	addi	r2,r2,56
 1004604:	100690fa 	slli	r3,r2,3
 1004608:	003fad06 	br	10044c0 <_free_r+0x134>
 100460c:	22000315 	stw	r8,12(r4)
 1004610:	22000215 	stw	r8,8(r4)
 1004614:	3a05883a 	add	r2,r7,r8
 1004618:	38c00054 	ori	r3,r7,1
 100461c:	11c00015 	stw	r7,0(r2)
 1004620:	41000215 	stw	r4,8(r8)
 1004624:	40c00115 	stw	r3,4(r8)
 1004628:	41000315 	stw	r4,12(r8)
 100462c:	003f8406 	br	1004440 <_free_r+0xb4>
 1004630:	1005d0ba 	srai	r2,r2,2
 1004634:	00c00044 	movi	r3,1
 1004638:	51000117 	ldw	r4,4(r10)
 100463c:	1886983a 	sll	r3,r3,r2
 1004640:	20c8b03a 	or	r4,r4,r3
 1004644:	51000115 	stw	r4,4(r10)
 1004648:	003fa706 	br	10044e8 <_free_r+0x15c>
 100464c:	00801504 	movi	r2,84
 1004650:	10c00436 	bltu	r2,r3,1004664 <_free_r+0x2d8>
 1004654:	3804d33a 	srli	r2,r7,12
 1004658:	10801b84 	addi	r2,r2,110
 100465c:	100690fa 	slli	r3,r2,3
 1004660:	003f9706 	br	10044c0 <_free_r+0x134>
 1004664:	00805504 	movi	r2,340
 1004668:	10c00436 	bltu	r2,r3,100467c <_free_r+0x2f0>
 100466c:	3804d3fa 	srli	r2,r7,15
 1004670:	10801dc4 	addi	r2,r2,119
 1004674:	100690fa 	slli	r3,r2,3
 1004678:	003f9106 	br	10044c0 <_free_r+0x134>
 100467c:	00815504 	movi	r2,1364
 1004680:	10c0032e 	bgeu	r2,r3,1004690 <_free_r+0x304>
 1004684:	00801f84 	movi	r2,126
 1004688:	00c0fc04 	movi	r3,1008
 100468c:	003f8c06 	br	10044c0 <_free_r+0x134>
 1004690:	3804d4ba 	srli	r2,r7,18
 1004694:	10801f04 	addi	r2,r2,124
 1004698:	100690fa 	slli	r3,r2,3
 100469c:	003f8806 	br	10044c0 <_free_r+0x134>

010046a0 <__sfvwrite_r>:
 10046a0:	30800217 	ldw	r2,8(r6)
 10046a4:	defff504 	addi	sp,sp,-44
 10046a8:	df000915 	stw	fp,36(sp)
 10046ac:	dd800715 	stw	r22,28(sp)
 10046b0:	dc800315 	stw	r18,12(sp)
 10046b4:	dfc00a15 	stw	ra,40(sp)
 10046b8:	ddc00815 	stw	r23,32(sp)
 10046bc:	dd400615 	stw	r21,24(sp)
 10046c0:	dd000515 	stw	r20,20(sp)
 10046c4:	dcc00415 	stw	r19,16(sp)
 10046c8:	dc400215 	stw	r17,8(sp)
 10046cc:	dc000115 	stw	r16,4(sp)
 10046d0:	302d883a 	mov	r22,r6
 10046d4:	2039883a 	mov	fp,r4
 10046d8:	2825883a 	mov	r18,r5
 10046dc:	10001c26 	beq	r2,zero,1004750 <__sfvwrite_r+0xb0>
 10046e0:	29c0030b 	ldhu	r7,12(r5)
 10046e4:	3880020c 	andi	r2,r7,8
 10046e8:	10002726 	beq	r2,zero,1004788 <__sfvwrite_r+0xe8>
 10046ec:	28800417 	ldw	r2,16(r5)
 10046f0:	10002526 	beq	r2,zero,1004788 <__sfvwrite_r+0xe8>
 10046f4:	3880008c 	andi	r2,r7,2
 10046f8:	b5400017 	ldw	r21,0(r22)
 10046fc:	10002826 	beq	r2,zero,10047a0 <__sfvwrite_r+0x100>
 1004700:	0021883a 	mov	r16,zero
 1004704:	0023883a 	mov	r17,zero
 1004708:	880d883a 	mov	r6,r17
 100470c:	e009883a 	mov	r4,fp
 1004710:	00810004 	movi	r2,1024
 1004714:	80006e26 	beq	r16,zero,10048d0 <__sfvwrite_r+0x230>
 1004718:	800f883a 	mov	r7,r16
 100471c:	91400717 	ldw	r5,28(r18)
 1004720:	1400012e 	bgeu	r2,r16,1004728 <__sfvwrite_r+0x88>
 1004724:	100f883a 	mov	r7,r2
 1004728:	90c00917 	ldw	r3,36(r18)
 100472c:	183ee83a 	callr	r3
 1004730:	1007883a 	mov	r3,r2
 1004734:	80a1c83a 	sub	r16,r16,r2
 1004738:	88a3883a 	add	r17,r17,r2
 100473c:	00806d0e 	bge	zero,r2,10048f4 <__sfvwrite_r+0x254>
 1004740:	b0800217 	ldw	r2,8(r22)
 1004744:	10c5c83a 	sub	r2,r2,r3
 1004748:	b0800215 	stw	r2,8(r22)
 100474c:	103fee1e 	bne	r2,zero,1004708 <__sfvwrite_r+0x68>
 1004750:	0009883a 	mov	r4,zero
 1004754:	2005883a 	mov	r2,r4
 1004758:	dfc00a17 	ldw	ra,40(sp)
 100475c:	df000917 	ldw	fp,36(sp)
 1004760:	ddc00817 	ldw	r23,32(sp)
 1004764:	dd800717 	ldw	r22,28(sp)
 1004768:	dd400617 	ldw	r21,24(sp)
 100476c:	dd000517 	ldw	r20,20(sp)
 1004770:	dcc00417 	ldw	r19,16(sp)
 1004774:	dc800317 	ldw	r18,12(sp)
 1004778:	dc400217 	ldw	r17,8(sp)
 100477c:	dc000117 	ldw	r16,4(sp)
 1004780:	dec00b04 	addi	sp,sp,44
 1004784:	f800283a 	ret
 1004788:	10024080 	call	1002408 <__swsetup_r>
 100478c:	1000e41e 	bne	r2,zero,1004b20 <__sfvwrite_r+0x480>
 1004790:	91c0030b 	ldhu	r7,12(r18)
 1004794:	b5400017 	ldw	r21,0(r22)
 1004798:	3880008c 	andi	r2,r7,2
 100479c:	103fd81e 	bne	r2,zero,1004700 <__sfvwrite_r+0x60>
 10047a0:	3880004c 	andi	r2,r7,1
 10047a4:	1005003a 	cmpeq	r2,r2,zero
 10047a8:	10005726 	beq	r2,zero,1004908 <__sfvwrite_r+0x268>
 10047ac:	0029883a 	mov	r20,zero
 10047b0:	002f883a 	mov	r23,zero
 10047b4:	a0004226 	beq	r20,zero,10048c0 <__sfvwrite_r+0x220>
 10047b8:	3880800c 	andi	r2,r7,512
 10047bc:	94000217 	ldw	r16,8(r18)
 10047c0:	10008b26 	beq	r2,zero,10049f0 <__sfvwrite_r+0x350>
 10047c4:	800d883a 	mov	r6,r16
 10047c8:	a400a536 	bltu	r20,r16,1004a60 <__sfvwrite_r+0x3c0>
 10047cc:	3881200c 	andi	r2,r7,1152
 10047d0:	10002726 	beq	r2,zero,1004870 <__sfvwrite_r+0x1d0>
 10047d4:	90800517 	ldw	r2,20(r18)
 10047d8:	92000417 	ldw	r8,16(r18)
 10047dc:	91400017 	ldw	r5,0(r18)
 10047e0:	1087883a 	add	r3,r2,r2
 10047e4:	1887883a 	add	r3,r3,r2
 10047e8:	1808d7fa 	srli	r4,r3,31
 10047ec:	2a21c83a 	sub	r16,r5,r8
 10047f0:	80800044 	addi	r2,r16,1
 10047f4:	20c9883a 	add	r4,r4,r3
 10047f8:	2027d07a 	srai	r19,r4,1
 10047fc:	a085883a 	add	r2,r20,r2
 1004800:	980d883a 	mov	r6,r19
 1004804:	9880022e 	bgeu	r19,r2,1004810 <__sfvwrite_r+0x170>
 1004808:	1027883a 	mov	r19,r2
 100480c:	100d883a 	mov	r6,r2
 1004810:	3881000c 	andi	r2,r7,1024
 1004814:	1000b826 	beq	r2,zero,1004af8 <__sfvwrite_r+0x458>
 1004818:	300b883a 	mov	r5,r6
 100481c:	e009883a 	mov	r4,fp
 1004820:	1004f140 	call	1004f14 <_malloc_r>
 1004824:	10003126 	beq	r2,zero,10048ec <__sfvwrite_r+0x24c>
 1004828:	91400417 	ldw	r5,16(r18)
 100482c:	1009883a 	mov	r4,r2
 1004830:	800d883a 	mov	r6,r16
 1004834:	1023883a 	mov	r17,r2
 1004838:	10057380 	call	1005738 <memcpy>
 100483c:	90c0030b 	ldhu	r3,12(r18)
 1004840:	00beffc4 	movi	r2,-1025
 1004844:	1886703a 	and	r3,r3,r2
 1004848:	18c02014 	ori	r3,r3,128
 100484c:	90c0030d 	sth	r3,12(r18)
 1004850:	9c07c83a 	sub	r3,r19,r16
 1004854:	8c05883a 	add	r2,r17,r16
 1004858:	a00d883a 	mov	r6,r20
 100485c:	a021883a 	mov	r16,r20
 1004860:	90800015 	stw	r2,0(r18)
 1004864:	90c00215 	stw	r3,8(r18)
 1004868:	94400415 	stw	r17,16(r18)
 100486c:	94c00515 	stw	r19,20(r18)
 1004870:	91000017 	ldw	r4,0(r18)
 1004874:	b80b883a 	mov	r5,r23
 1004878:	a023883a 	mov	r17,r20
 100487c:	10057d80 	call	10057d8 <memmove>
 1004880:	90c00217 	ldw	r3,8(r18)
 1004884:	90800017 	ldw	r2,0(r18)
 1004888:	a027883a 	mov	r19,r20
 100488c:	1c07c83a 	sub	r3,r3,r16
 1004890:	1405883a 	add	r2,r2,r16
 1004894:	90c00215 	stw	r3,8(r18)
 1004898:	a021883a 	mov	r16,r20
 100489c:	90800015 	stw	r2,0(r18)
 10048a0:	b0800217 	ldw	r2,8(r22)
 10048a4:	1405c83a 	sub	r2,r2,r16
 10048a8:	b0800215 	stw	r2,8(r22)
 10048ac:	103fa826 	beq	r2,zero,1004750 <__sfvwrite_r+0xb0>
 10048b0:	a469c83a 	sub	r20,r20,r17
 10048b4:	91c0030b 	ldhu	r7,12(r18)
 10048b8:	bcef883a 	add	r23,r23,r19
 10048bc:	a03fbe1e 	bne	r20,zero,10047b8 <__sfvwrite_r+0x118>
 10048c0:	adc00017 	ldw	r23,0(r21)
 10048c4:	ad000117 	ldw	r20,4(r21)
 10048c8:	ad400204 	addi	r21,r21,8
 10048cc:	003fb906 	br	10047b4 <__sfvwrite_r+0x114>
 10048d0:	ac400017 	ldw	r17,0(r21)
 10048d4:	ac000117 	ldw	r16,4(r21)
 10048d8:	ad400204 	addi	r21,r21,8
 10048dc:	003f8a06 	br	1004708 <__sfvwrite_r+0x68>
 10048e0:	91400417 	ldw	r5,16(r18)
 10048e4:	e009883a 	mov	r4,fp
 10048e8:	100438c0 	call	100438c <_free_r>
 10048ec:	00800304 	movi	r2,12
 10048f0:	e0800015 	stw	r2,0(fp)
 10048f4:	9080030b 	ldhu	r2,12(r18)
 10048f8:	013fffc4 	movi	r4,-1
 10048fc:	10801014 	ori	r2,r2,64
 1004900:	9080030d 	sth	r2,12(r18)
 1004904:	003f9306 	br	1004754 <__sfvwrite_r+0xb4>
 1004908:	0027883a 	mov	r19,zero
 100490c:	002f883a 	mov	r23,zero
 1004910:	d8000015 	stw	zero,0(sp)
 1004914:	0029883a 	mov	r20,zero
 1004918:	98001e26 	beq	r19,zero,1004994 <__sfvwrite_r+0x2f4>
 100491c:	d8c00017 	ldw	r3,0(sp)
 1004920:	1804c03a 	cmpne	r2,r3,zero
 1004924:	10005e26 	beq	r2,zero,1004aa0 <__sfvwrite_r+0x400>
 1004928:	9821883a 	mov	r16,r19
 100492c:	a4c0012e 	bgeu	r20,r19,1004934 <__sfvwrite_r+0x294>
 1004930:	a021883a 	mov	r16,r20
 1004934:	91000017 	ldw	r4,0(r18)
 1004938:	90800417 	ldw	r2,16(r18)
 100493c:	91800217 	ldw	r6,8(r18)
 1004940:	91c00517 	ldw	r7,20(r18)
 1004944:	1100022e 	bgeu	r2,r4,1004950 <__sfvwrite_r+0x2b0>
 1004948:	31e3883a 	add	r17,r6,r7
 100494c:	8c001616 	blt	r17,r16,10049a8 <__sfvwrite_r+0x308>
 1004950:	81c03816 	blt	r16,r7,1004a34 <__sfvwrite_r+0x394>
 1004954:	90c00917 	ldw	r3,36(r18)
 1004958:	91400717 	ldw	r5,28(r18)
 100495c:	e009883a 	mov	r4,fp
 1004960:	b80d883a 	mov	r6,r23
 1004964:	183ee83a 	callr	r3
 1004968:	1023883a 	mov	r17,r2
 100496c:	00bfe10e 	bge	zero,r2,10048f4 <__sfvwrite_r+0x254>
 1004970:	a469c83a 	sub	r20,r20,r17
 1004974:	a0001826 	beq	r20,zero,10049d8 <__sfvwrite_r+0x338>
 1004978:	b0800217 	ldw	r2,8(r22)
 100497c:	1445c83a 	sub	r2,r2,r17
 1004980:	b0800215 	stw	r2,8(r22)
 1004984:	103f7226 	beq	r2,zero,1004750 <__sfvwrite_r+0xb0>
 1004988:	9c67c83a 	sub	r19,r19,r17
 100498c:	bc6f883a 	add	r23,r23,r17
 1004990:	983fe21e 	bne	r19,zero,100491c <__sfvwrite_r+0x27c>
 1004994:	adc00017 	ldw	r23,0(r21)
 1004998:	acc00117 	ldw	r19,4(r21)
 100499c:	ad400204 	addi	r21,r21,8
 10049a0:	d8000015 	stw	zero,0(sp)
 10049a4:	003fdc06 	br	1004918 <__sfvwrite_r+0x278>
 10049a8:	b80b883a 	mov	r5,r23
 10049ac:	880d883a 	mov	r6,r17
 10049b0:	10057d80 	call	10057d8 <memmove>
 10049b4:	90c00017 	ldw	r3,0(r18)
 10049b8:	e009883a 	mov	r4,fp
 10049bc:	900b883a 	mov	r5,r18
 10049c0:	1c47883a 	add	r3,r3,r17
 10049c4:	90c00015 	stw	r3,0(r18)
 10049c8:	1003d3c0 	call	1003d3c <_fflush_r>
 10049cc:	103fc91e 	bne	r2,zero,10048f4 <__sfvwrite_r+0x254>
 10049d0:	a469c83a 	sub	r20,r20,r17
 10049d4:	a03fe81e 	bne	r20,zero,1004978 <__sfvwrite_r+0x2d8>
 10049d8:	e009883a 	mov	r4,fp
 10049dc:	900b883a 	mov	r5,r18
 10049e0:	1003d3c0 	call	1003d3c <_fflush_r>
 10049e4:	103fc31e 	bne	r2,zero,10048f4 <__sfvwrite_r+0x254>
 10049e8:	d8000015 	stw	zero,0(sp)
 10049ec:	003fe206 	br	1004978 <__sfvwrite_r+0x2d8>
 10049f0:	91000017 	ldw	r4,0(r18)
 10049f4:	90800417 	ldw	r2,16(r18)
 10049f8:	1100022e 	bgeu	r2,r4,1004a04 <__sfvwrite_r+0x364>
 10049fc:	8023883a 	mov	r17,r16
 1004a00:	85003136 	bltu	r16,r20,1004ac8 <__sfvwrite_r+0x428>
 1004a04:	91c00517 	ldw	r7,20(r18)
 1004a08:	a1c01836 	bltu	r20,r7,1004a6c <__sfvwrite_r+0x3cc>
 1004a0c:	90c00917 	ldw	r3,36(r18)
 1004a10:	91400717 	ldw	r5,28(r18)
 1004a14:	e009883a 	mov	r4,fp
 1004a18:	b80d883a 	mov	r6,r23
 1004a1c:	183ee83a 	callr	r3
 1004a20:	1021883a 	mov	r16,r2
 1004a24:	00bfb30e 	bge	zero,r2,10048f4 <__sfvwrite_r+0x254>
 1004a28:	1023883a 	mov	r17,r2
 1004a2c:	1027883a 	mov	r19,r2
 1004a30:	003f9b06 	br	10048a0 <__sfvwrite_r+0x200>
 1004a34:	b80b883a 	mov	r5,r23
 1004a38:	800d883a 	mov	r6,r16
 1004a3c:	10057d80 	call	10057d8 <memmove>
 1004a40:	90c00217 	ldw	r3,8(r18)
 1004a44:	90800017 	ldw	r2,0(r18)
 1004a48:	8023883a 	mov	r17,r16
 1004a4c:	1c07c83a 	sub	r3,r3,r16
 1004a50:	1405883a 	add	r2,r2,r16
 1004a54:	90c00215 	stw	r3,8(r18)
 1004a58:	90800015 	stw	r2,0(r18)
 1004a5c:	003fc406 	br	1004970 <__sfvwrite_r+0x2d0>
 1004a60:	a00d883a 	mov	r6,r20
 1004a64:	a021883a 	mov	r16,r20
 1004a68:	003f8106 	br	1004870 <__sfvwrite_r+0x1d0>
 1004a6c:	b80b883a 	mov	r5,r23
 1004a70:	a00d883a 	mov	r6,r20
 1004a74:	10057d80 	call	10057d8 <memmove>
 1004a78:	90c00217 	ldw	r3,8(r18)
 1004a7c:	90800017 	ldw	r2,0(r18)
 1004a80:	a021883a 	mov	r16,r20
 1004a84:	1d07c83a 	sub	r3,r3,r20
 1004a88:	1505883a 	add	r2,r2,r20
 1004a8c:	a023883a 	mov	r17,r20
 1004a90:	a027883a 	mov	r19,r20
 1004a94:	90c00215 	stw	r3,8(r18)
 1004a98:	90800015 	stw	r2,0(r18)
 1004a9c:	003f8006 	br	10048a0 <__sfvwrite_r+0x200>
 1004aa0:	b809883a 	mov	r4,r23
 1004aa4:	01400284 	movi	r5,10
 1004aa8:	980d883a 	mov	r6,r19
 1004aac:	10056540 	call	1005654 <memchr>
 1004ab0:	10001726 	beq	r2,zero,1004b10 <__sfvwrite_r+0x470>
 1004ab4:	15c5c83a 	sub	r2,r2,r23
 1004ab8:	15000044 	addi	r20,r2,1
 1004abc:	00800044 	movi	r2,1
 1004ac0:	d8800015 	stw	r2,0(sp)
 1004ac4:	003f9806 	br	1004928 <__sfvwrite_r+0x288>
 1004ac8:	b80b883a 	mov	r5,r23
 1004acc:	800d883a 	mov	r6,r16
 1004ad0:	10057d80 	call	10057d8 <memmove>
 1004ad4:	90c00017 	ldw	r3,0(r18)
 1004ad8:	e009883a 	mov	r4,fp
 1004adc:	900b883a 	mov	r5,r18
 1004ae0:	1c07883a 	add	r3,r3,r16
 1004ae4:	90c00015 	stw	r3,0(r18)
 1004ae8:	8027883a 	mov	r19,r16
 1004aec:	1003d3c0 	call	1003d3c <_fflush_r>
 1004af0:	103f6b26 	beq	r2,zero,10048a0 <__sfvwrite_r+0x200>
 1004af4:	003f7f06 	br	10048f4 <__sfvwrite_r+0x254>
 1004af8:	400b883a 	mov	r5,r8
 1004afc:	e009883a 	mov	r4,fp
 1004b00:	10069dc0 	call	10069dc <_realloc_r>
 1004b04:	103f7626 	beq	r2,zero,10048e0 <__sfvwrite_r+0x240>
 1004b08:	1023883a 	mov	r17,r2
 1004b0c:	003f5006 	br	1004850 <__sfvwrite_r+0x1b0>
 1004b10:	00c00044 	movi	r3,1
 1004b14:	9d000044 	addi	r20,r19,1
 1004b18:	d8c00015 	stw	r3,0(sp)
 1004b1c:	003f8206 	br	1004928 <__sfvwrite_r+0x288>
 1004b20:	9080030b 	ldhu	r2,12(r18)
 1004b24:	00c00244 	movi	r3,9
 1004b28:	013fffc4 	movi	r4,-1
 1004b2c:	10801014 	ori	r2,r2,64
 1004b30:	9080030d 	sth	r2,12(r18)
 1004b34:	e0c00015 	stw	r3,0(fp)
 1004b38:	003f0606 	br	1004754 <__sfvwrite_r+0xb4>

01004b3c <_fwalk_reent>:
 1004b3c:	defff704 	addi	sp,sp,-36
 1004b40:	dcc00315 	stw	r19,12(sp)
 1004b44:	24c0b804 	addi	r19,r4,736
 1004b48:	dd800615 	stw	r22,24(sp)
 1004b4c:	dd400515 	stw	r21,20(sp)
 1004b50:	dfc00815 	stw	ra,32(sp)
 1004b54:	ddc00715 	stw	r23,28(sp)
 1004b58:	dd000415 	stw	r20,16(sp)
 1004b5c:	dc800215 	stw	r18,8(sp)
 1004b60:	dc400115 	stw	r17,4(sp)
 1004b64:	dc000015 	stw	r16,0(sp)
 1004b68:	202b883a 	mov	r21,r4
 1004b6c:	282d883a 	mov	r22,r5
 1004b70:	1003fc40 	call	1003fc4 <__sfp_lock_acquire>
 1004b74:	98002126 	beq	r19,zero,1004bfc <_fwalk_reent+0xc0>
 1004b78:	002f883a 	mov	r23,zero
 1004b7c:	9c800117 	ldw	r18,4(r19)
 1004b80:	9c000217 	ldw	r16,8(r19)
 1004b84:	90bfffc4 	addi	r2,r18,-1
 1004b88:	10000d16 	blt	r2,zero,1004bc0 <_fwalk_reent+0x84>
 1004b8c:	0023883a 	mov	r17,zero
 1004b90:	053fffc4 	movi	r20,-1
 1004b94:	8080030f 	ldh	r2,12(r16)
 1004b98:	8c400044 	addi	r17,r17,1
 1004b9c:	10000626 	beq	r2,zero,1004bb8 <_fwalk_reent+0x7c>
 1004ba0:	8080038f 	ldh	r2,14(r16)
 1004ba4:	800b883a 	mov	r5,r16
 1004ba8:	a809883a 	mov	r4,r21
 1004bac:	15000226 	beq	r2,r20,1004bb8 <_fwalk_reent+0x7c>
 1004bb0:	b03ee83a 	callr	r22
 1004bb4:	b8aeb03a 	or	r23,r23,r2
 1004bb8:	84001704 	addi	r16,r16,92
 1004bbc:	947ff51e 	bne	r18,r17,1004b94 <_fwalk_reent+0x58>
 1004bc0:	9cc00017 	ldw	r19,0(r19)
 1004bc4:	983fed1e 	bne	r19,zero,1004b7c <_fwalk_reent+0x40>
 1004bc8:	1003fc80 	call	1003fc8 <__sfp_lock_release>
 1004bcc:	b805883a 	mov	r2,r23
 1004bd0:	dfc00817 	ldw	ra,32(sp)
 1004bd4:	ddc00717 	ldw	r23,28(sp)
 1004bd8:	dd800617 	ldw	r22,24(sp)
 1004bdc:	dd400517 	ldw	r21,20(sp)
 1004be0:	dd000417 	ldw	r20,16(sp)
 1004be4:	dcc00317 	ldw	r19,12(sp)
 1004be8:	dc800217 	ldw	r18,8(sp)
 1004bec:	dc400117 	ldw	r17,4(sp)
 1004bf0:	dc000017 	ldw	r16,0(sp)
 1004bf4:	dec00904 	addi	sp,sp,36
 1004bf8:	f800283a 	ret
 1004bfc:	002f883a 	mov	r23,zero
 1004c00:	003ff106 	br	1004bc8 <_fwalk_reent+0x8c>

01004c04 <_fwalk>:
 1004c04:	defff804 	addi	sp,sp,-32
 1004c08:	dcc00315 	stw	r19,12(sp)
 1004c0c:	24c0b804 	addi	r19,r4,736
 1004c10:	dd400515 	stw	r21,20(sp)
 1004c14:	dfc00715 	stw	ra,28(sp)
 1004c18:	dd800615 	stw	r22,24(sp)
 1004c1c:	dd000415 	stw	r20,16(sp)
 1004c20:	dc800215 	stw	r18,8(sp)
 1004c24:	dc400115 	stw	r17,4(sp)
 1004c28:	dc000015 	stw	r16,0(sp)
 1004c2c:	282b883a 	mov	r21,r5
 1004c30:	1003fc40 	call	1003fc4 <__sfp_lock_acquire>
 1004c34:	98001f26 	beq	r19,zero,1004cb4 <_fwalk+0xb0>
 1004c38:	002d883a 	mov	r22,zero
 1004c3c:	9c800117 	ldw	r18,4(r19)
 1004c40:	9c000217 	ldw	r16,8(r19)
 1004c44:	90bfffc4 	addi	r2,r18,-1
 1004c48:	10000c16 	blt	r2,zero,1004c7c <_fwalk+0x78>
 1004c4c:	0023883a 	mov	r17,zero
 1004c50:	053fffc4 	movi	r20,-1
 1004c54:	8080030f 	ldh	r2,12(r16)
 1004c58:	8c400044 	addi	r17,r17,1
 1004c5c:	10000526 	beq	r2,zero,1004c74 <_fwalk+0x70>
 1004c60:	8080038f 	ldh	r2,14(r16)
 1004c64:	8009883a 	mov	r4,r16
 1004c68:	15000226 	beq	r2,r20,1004c74 <_fwalk+0x70>
 1004c6c:	a83ee83a 	callr	r21
 1004c70:	b0acb03a 	or	r22,r22,r2
 1004c74:	84001704 	addi	r16,r16,92
 1004c78:	947ff61e 	bne	r18,r17,1004c54 <_fwalk+0x50>
 1004c7c:	9cc00017 	ldw	r19,0(r19)
 1004c80:	983fee1e 	bne	r19,zero,1004c3c <_fwalk+0x38>
 1004c84:	1003fc80 	call	1003fc8 <__sfp_lock_release>
 1004c88:	b005883a 	mov	r2,r22
 1004c8c:	dfc00717 	ldw	ra,28(sp)
 1004c90:	dd800617 	ldw	r22,24(sp)
 1004c94:	dd400517 	ldw	r21,20(sp)
 1004c98:	dd000417 	ldw	r20,16(sp)
 1004c9c:	dcc00317 	ldw	r19,12(sp)
 1004ca0:	dc800217 	ldw	r18,8(sp)
 1004ca4:	dc400117 	ldw	r17,4(sp)
 1004ca8:	dc000017 	ldw	r16,0(sp)
 1004cac:	dec00804 	addi	sp,sp,32
 1004cb0:	f800283a 	ret
 1004cb4:	002d883a 	mov	r22,zero
 1004cb8:	003ff206 	br	1004c84 <_fwalk+0x80>

01004cbc <__locale_charset>:
 1004cbc:	d0a00317 	ldw	r2,-32756(gp)
 1004cc0:	f800283a 	ret

01004cc4 <_localeconv_r>:
 1004cc4:	00804074 	movhi	r2,257
 1004cc8:	10b34404 	addi	r2,r2,-13040
 1004ccc:	f800283a 	ret

01004cd0 <localeconv>:
 1004cd0:	00804074 	movhi	r2,257
 1004cd4:	10ba8304 	addi	r2,r2,-5620
 1004cd8:	11000017 	ldw	r4,0(r2)
 1004cdc:	1004cc41 	jmpi	1004cc4 <_localeconv_r>

01004ce0 <_setlocale_r>:
 1004ce0:	defffc04 	addi	sp,sp,-16
 1004ce4:	00c04074 	movhi	r3,257
 1004ce8:	18f33f04 	addi	r3,r3,-13060
 1004cec:	dc800215 	stw	r18,8(sp)
 1004cf0:	dc400115 	stw	r17,4(sp)
 1004cf4:	dc000015 	stw	r16,0(sp)
 1004cf8:	2023883a 	mov	r17,r4
 1004cfc:	2825883a 	mov	r18,r5
 1004d00:	dfc00315 	stw	ra,12(sp)
 1004d04:	3021883a 	mov	r16,r6
 1004d08:	3009883a 	mov	r4,r6
 1004d0c:	180b883a 	mov	r5,r3
 1004d10:	30000926 	beq	r6,zero,1004d38 <_setlocale_r+0x58>
 1004d14:	10071fc0 	call	10071fc <strcmp>
 1004d18:	8009883a 	mov	r4,r16
 1004d1c:	01404074 	movhi	r5,257
 1004d20:	29732a04 	addi	r5,r5,-13144
 1004d24:	10000b1e 	bne	r2,zero,1004d54 <_setlocale_r+0x74>
 1004d28:	8c000d15 	stw	r16,52(r17)
 1004d2c:	8c800c15 	stw	r18,48(r17)
 1004d30:	00c04074 	movhi	r3,257
 1004d34:	18f33f04 	addi	r3,r3,-13060
 1004d38:	1805883a 	mov	r2,r3
 1004d3c:	dfc00317 	ldw	ra,12(sp)
 1004d40:	dc800217 	ldw	r18,8(sp)
 1004d44:	dc400117 	ldw	r17,4(sp)
 1004d48:	dc000017 	ldw	r16,0(sp)
 1004d4c:	dec00404 	addi	sp,sp,16
 1004d50:	f800283a 	ret
 1004d54:	10071fc0 	call	10071fc <strcmp>
 1004d58:	0007883a 	mov	r3,zero
 1004d5c:	103ff226 	beq	r2,zero,1004d28 <_setlocale_r+0x48>
 1004d60:	003ff506 	br	1004d38 <_setlocale_r+0x58>

01004d64 <setlocale>:
 1004d64:	01804074 	movhi	r6,257
 1004d68:	31ba8304 	addi	r6,r6,-5620
 1004d6c:	2007883a 	mov	r3,r4
 1004d70:	31000017 	ldw	r4,0(r6)
 1004d74:	280d883a 	mov	r6,r5
 1004d78:	180b883a 	mov	r5,r3
 1004d7c:	1004ce01 	jmpi	1004ce0 <_setlocale_r>

01004d80 <__smakebuf_r>:
 1004d80:	2880030b 	ldhu	r2,12(r5)
 1004d84:	deffed04 	addi	sp,sp,-76
 1004d88:	dc401015 	stw	r17,64(sp)
 1004d8c:	1080008c 	andi	r2,r2,2
 1004d90:	dc000f15 	stw	r16,60(sp)
 1004d94:	dfc01215 	stw	ra,72(sp)
 1004d98:	dc801115 	stw	r18,68(sp)
 1004d9c:	2821883a 	mov	r16,r5
 1004da0:	2023883a 	mov	r17,r4
 1004da4:	10000b26 	beq	r2,zero,1004dd4 <__smakebuf_r+0x54>
 1004da8:	28c010c4 	addi	r3,r5,67
 1004dac:	00800044 	movi	r2,1
 1004db0:	28800515 	stw	r2,20(r5)
 1004db4:	28c00415 	stw	r3,16(r5)
 1004db8:	28c00015 	stw	r3,0(r5)
 1004dbc:	dfc01217 	ldw	ra,72(sp)
 1004dc0:	dc801117 	ldw	r18,68(sp)
 1004dc4:	dc401017 	ldw	r17,64(sp)
 1004dc8:	dc000f17 	ldw	r16,60(sp)
 1004dcc:	dec01304 	addi	sp,sp,76
 1004dd0:	f800283a 	ret
 1004dd4:	2940038f 	ldh	r5,14(r5)
 1004dd8:	28002116 	blt	r5,zero,1004e60 <__smakebuf_r+0xe0>
 1004ddc:	d80d883a 	mov	r6,sp
 1004de0:	100758c0 	call	100758c <_fstat_r>
 1004de4:	10001e16 	blt	r2,zero,1004e60 <__smakebuf_r+0xe0>
 1004de8:	d8800117 	ldw	r2,4(sp)
 1004dec:	00e00014 	movui	r3,32768
 1004df0:	113c000c 	andi	r4,r2,61440
 1004df4:	20c03126 	beq	r4,r3,1004ebc <__smakebuf_r+0x13c>
 1004df8:	8080030b 	ldhu	r2,12(r16)
 1004dfc:	00c80004 	movi	r3,8192
 1004e00:	10820014 	ori	r2,r2,2048
 1004e04:	8080030d 	sth	r2,12(r16)
 1004e08:	20c01e26 	beq	r4,r3,1004e84 <__smakebuf_r+0x104>
 1004e0c:	04810004 	movi	r18,1024
 1004e10:	8809883a 	mov	r4,r17
 1004e14:	900b883a 	mov	r5,r18
 1004e18:	1004f140 	call	1004f14 <_malloc_r>
 1004e1c:	1009883a 	mov	r4,r2
 1004e20:	10003126 	beq	r2,zero,1004ee8 <__smakebuf_r+0x168>
 1004e24:	80c0030b 	ldhu	r3,12(r16)
 1004e28:	00804034 	movhi	r2,256
 1004e2c:	10902e04 	addi	r2,r2,16568
 1004e30:	88800f15 	stw	r2,60(r17)
 1004e34:	18c02014 	ori	r3,r3,128
 1004e38:	84800515 	stw	r18,20(r16)
 1004e3c:	80c0030d 	sth	r3,12(r16)
 1004e40:	81000415 	stw	r4,16(r16)
 1004e44:	81000015 	stw	r4,0(r16)
 1004e48:	dfc01217 	ldw	ra,72(sp)
 1004e4c:	dc801117 	ldw	r18,68(sp)
 1004e50:	dc401017 	ldw	r17,64(sp)
 1004e54:	dc000f17 	ldw	r16,60(sp)
 1004e58:	dec01304 	addi	sp,sp,76
 1004e5c:	f800283a 	ret
 1004e60:	80c0030b 	ldhu	r3,12(r16)
 1004e64:	1880200c 	andi	r2,r3,128
 1004e68:	10000426 	beq	r2,zero,1004e7c <__smakebuf_r+0xfc>
 1004e6c:	04801004 	movi	r18,64
 1004e70:	18820014 	ori	r2,r3,2048
 1004e74:	8080030d 	sth	r2,12(r16)
 1004e78:	003fe506 	br	1004e10 <__smakebuf_r+0x90>
 1004e7c:	04810004 	movi	r18,1024
 1004e80:	003ffb06 	br	1004e70 <__smakebuf_r+0xf0>
 1004e84:	8140038f 	ldh	r5,14(r16)
 1004e88:	8809883a 	mov	r4,r17
 1004e8c:	10076000 	call	1007600 <_isatty_r>
 1004e90:	103fde26 	beq	r2,zero,1004e0c <__smakebuf_r+0x8c>
 1004e94:	8080030b 	ldhu	r2,12(r16)
 1004e98:	80c010c4 	addi	r3,r16,67
 1004e9c:	04810004 	movi	r18,1024
 1004ea0:	10800054 	ori	r2,r2,1
 1004ea4:	8080030d 	sth	r2,12(r16)
 1004ea8:	00800044 	movi	r2,1
 1004eac:	80c00415 	stw	r3,16(r16)
 1004eb0:	80800515 	stw	r2,20(r16)
 1004eb4:	80c00015 	stw	r3,0(r16)
 1004eb8:	003fd506 	br	1004e10 <__smakebuf_r+0x90>
 1004ebc:	80c00a17 	ldw	r3,40(r16)
 1004ec0:	00804034 	movhi	r2,256
 1004ec4:	109c2e04 	addi	r2,r2,28856
 1004ec8:	18bfcb1e 	bne	r3,r2,1004df8 <__smakebuf_r+0x78>
 1004ecc:	8080030b 	ldhu	r2,12(r16)
 1004ed0:	00c10004 	movi	r3,1024
 1004ed4:	1825883a 	mov	r18,r3
 1004ed8:	10c4b03a 	or	r2,r2,r3
 1004edc:	8080030d 	sth	r2,12(r16)
 1004ee0:	80c01315 	stw	r3,76(r16)
 1004ee4:	003fca06 	br	1004e10 <__smakebuf_r+0x90>
 1004ee8:	8100030b 	ldhu	r4,12(r16)
 1004eec:	2080800c 	andi	r2,r4,512
 1004ef0:	103fb21e 	bne	r2,zero,1004dbc <__smakebuf_r+0x3c>
 1004ef4:	80c010c4 	addi	r3,r16,67
 1004ef8:	21000094 	ori	r4,r4,2
 1004efc:	00800044 	movi	r2,1
 1004f00:	80800515 	stw	r2,20(r16)
 1004f04:	8100030d 	sth	r4,12(r16)
 1004f08:	80c00415 	stw	r3,16(r16)
 1004f0c:	80c00015 	stw	r3,0(r16)
 1004f10:	003faa06 	br	1004dbc <__smakebuf_r+0x3c>

01004f14 <_malloc_r>:
 1004f14:	defff604 	addi	sp,sp,-40
 1004f18:	28c002c4 	addi	r3,r5,11
 1004f1c:	00800584 	movi	r2,22
 1004f20:	dc800215 	stw	r18,8(sp)
 1004f24:	dfc00915 	stw	ra,36(sp)
 1004f28:	df000815 	stw	fp,32(sp)
 1004f2c:	ddc00715 	stw	r23,28(sp)
 1004f30:	dd800615 	stw	r22,24(sp)
 1004f34:	dd400515 	stw	r21,20(sp)
 1004f38:	dd000415 	stw	r20,16(sp)
 1004f3c:	dcc00315 	stw	r19,12(sp)
 1004f40:	dc400115 	stw	r17,4(sp)
 1004f44:	dc000015 	stw	r16,0(sp)
 1004f48:	2025883a 	mov	r18,r4
 1004f4c:	10c01236 	bltu	r2,r3,1004f98 <_malloc_r+0x84>
 1004f50:	04400404 	movi	r17,16
 1004f54:	8940142e 	bgeu	r17,r5,1004fa8 <_malloc_r+0x94>
 1004f58:	00800304 	movi	r2,12
 1004f5c:	0007883a 	mov	r3,zero
 1004f60:	90800015 	stw	r2,0(r18)
 1004f64:	1805883a 	mov	r2,r3
 1004f68:	dfc00917 	ldw	ra,36(sp)
 1004f6c:	df000817 	ldw	fp,32(sp)
 1004f70:	ddc00717 	ldw	r23,28(sp)
 1004f74:	dd800617 	ldw	r22,24(sp)
 1004f78:	dd400517 	ldw	r21,20(sp)
 1004f7c:	dd000417 	ldw	r20,16(sp)
 1004f80:	dcc00317 	ldw	r19,12(sp)
 1004f84:	dc800217 	ldw	r18,8(sp)
 1004f88:	dc400117 	ldw	r17,4(sp)
 1004f8c:	dc000017 	ldw	r16,0(sp)
 1004f90:	dec00a04 	addi	sp,sp,40
 1004f94:	f800283a 	ret
 1004f98:	00bffe04 	movi	r2,-8
 1004f9c:	18a2703a 	and	r17,r3,r2
 1004fa0:	883fed16 	blt	r17,zero,1004f58 <_malloc_r+0x44>
 1004fa4:	897fec36 	bltu	r17,r5,1004f58 <_malloc_r+0x44>
 1004fa8:	9009883a 	mov	r4,r18
 1004fac:	100a4280 	call	100a428 <__malloc_lock>
 1004fb0:	00807dc4 	movi	r2,503
 1004fb4:	14402b2e 	bgeu	r2,r17,1005064 <_malloc_r+0x150>
 1004fb8:	8806d27a 	srli	r3,r17,9
 1004fbc:	18003f1e 	bne	r3,zero,10050bc <_malloc_r+0x1a8>
 1004fc0:	880cd0fa 	srli	r6,r17,3
 1004fc4:	300490fa 	slli	r2,r6,3
 1004fc8:	02c04074 	movhi	r11,257
 1004fcc:	5af4f404 	addi	r11,r11,-11312
 1004fd0:	12cb883a 	add	r5,r2,r11
 1004fd4:	2c000317 	ldw	r16,12(r5)
 1004fd8:	580f883a 	mov	r7,r11
 1004fdc:	2c00041e 	bne	r5,r16,1004ff0 <_malloc_r+0xdc>
 1004fe0:	00000a06 	br	100500c <_malloc_r+0xf8>
 1004fe4:	1800860e 	bge	r3,zero,1005200 <_malloc_r+0x2ec>
 1004fe8:	84000317 	ldw	r16,12(r16)
 1004fec:	2c000726 	beq	r5,r16,100500c <_malloc_r+0xf8>
 1004ff0:	80800117 	ldw	r2,4(r16)
 1004ff4:	00ffff04 	movi	r3,-4
 1004ff8:	10c8703a 	and	r4,r2,r3
 1004ffc:	2447c83a 	sub	r3,r4,r17
 1005000:	008003c4 	movi	r2,15
 1005004:	10fff70e 	bge	r2,r3,1004fe4 <_malloc_r+0xd0>
 1005008:	31bfffc4 	addi	r6,r6,-1
 100500c:	32400044 	addi	r9,r6,1
 1005010:	02804074 	movhi	r10,257
 1005014:	52b4f604 	addi	r10,r10,-11304
 1005018:	54000217 	ldw	r16,8(r10)
 100501c:	8280a026 	beq	r16,r10,10052a0 <_malloc_r+0x38c>
 1005020:	80800117 	ldw	r2,4(r16)
 1005024:	00ffff04 	movi	r3,-4
 1005028:	10ca703a 	and	r5,r2,r3
 100502c:	2c4dc83a 	sub	r6,r5,r17
 1005030:	008003c4 	movi	r2,15
 1005034:	11808316 	blt	r2,r6,1005244 <_malloc_r+0x330>
 1005038:	52800315 	stw	r10,12(r10)
 100503c:	52800215 	stw	r10,8(r10)
 1005040:	30002916 	blt	r6,zero,10050e8 <_malloc_r+0x1d4>
 1005044:	8147883a 	add	r3,r16,r5
 1005048:	18800117 	ldw	r2,4(r3)
 100504c:	9009883a 	mov	r4,r18
 1005050:	10800054 	ori	r2,r2,1
 1005054:	18800115 	stw	r2,4(r3)
 1005058:	100a4480 	call	100a448 <__malloc_unlock>
 100505c:	80c00204 	addi	r3,r16,8
 1005060:	003fc006 	br	1004f64 <_malloc_r+0x50>
 1005064:	02c04074 	movhi	r11,257
 1005068:	5af4f404 	addi	r11,r11,-11312
 100506c:	8ac5883a 	add	r2,r17,r11
 1005070:	14000317 	ldw	r16,12(r2)
 1005074:	580f883a 	mov	r7,r11
 1005078:	8806d0fa 	srli	r3,r17,3
 100507c:	14006c26 	beq	r2,r16,1005230 <_malloc_r+0x31c>
 1005080:	80c00117 	ldw	r3,4(r16)
 1005084:	00bfff04 	movi	r2,-4
 1005088:	81800317 	ldw	r6,12(r16)
 100508c:	1886703a 	and	r3,r3,r2
 1005090:	80c7883a 	add	r3,r16,r3
 1005094:	18800117 	ldw	r2,4(r3)
 1005098:	81400217 	ldw	r5,8(r16)
 100509c:	9009883a 	mov	r4,r18
 10050a0:	10800054 	ori	r2,r2,1
 10050a4:	18800115 	stw	r2,4(r3)
 10050a8:	31400215 	stw	r5,8(r6)
 10050ac:	29800315 	stw	r6,12(r5)
 10050b0:	100a4480 	call	100a448 <__malloc_unlock>
 10050b4:	80c00204 	addi	r3,r16,8
 10050b8:	003faa06 	br	1004f64 <_malloc_r+0x50>
 10050bc:	00800104 	movi	r2,4
 10050c0:	10c0052e 	bgeu	r2,r3,10050d8 <_malloc_r+0x1c4>
 10050c4:	00800504 	movi	r2,20
 10050c8:	10c07836 	bltu	r2,r3,10052ac <_malloc_r+0x398>
 10050cc:	198016c4 	addi	r6,r3,91
 10050d0:	300490fa 	slli	r2,r6,3
 10050d4:	003fbc06 	br	1004fc8 <_malloc_r+0xb4>
 10050d8:	8804d1ba 	srli	r2,r17,6
 10050dc:	11800e04 	addi	r6,r2,56
 10050e0:	300490fa 	slli	r2,r6,3
 10050e4:	003fb806 	br	1004fc8 <_malloc_r+0xb4>
 10050e8:	00807fc4 	movi	r2,511
 10050ec:	1140bb36 	bltu	r2,r5,10053dc <_malloc_r+0x4c8>
 10050f0:	2806d0fa 	srli	r3,r5,3
 10050f4:	573ffe04 	addi	fp,r10,-8
 10050f8:	00800044 	movi	r2,1
 10050fc:	180890fa 	slli	r4,r3,3
 1005100:	1807d0ba 	srai	r3,r3,2
 1005104:	e1c00117 	ldw	r7,4(fp)
 1005108:	5909883a 	add	r4,r11,r4
 100510c:	21400217 	ldw	r5,8(r4)
 1005110:	10c4983a 	sll	r2,r2,r3
 1005114:	81000315 	stw	r4,12(r16)
 1005118:	81400215 	stw	r5,8(r16)
 100511c:	388eb03a 	or	r7,r7,r2
 1005120:	2c000315 	stw	r16,12(r5)
 1005124:	24000215 	stw	r16,8(r4)
 1005128:	e1c00115 	stw	r7,4(fp)
 100512c:	4807883a 	mov	r3,r9
 1005130:	4800cd16 	blt	r9,zero,1005468 <_malloc_r+0x554>
 1005134:	1807d0ba 	srai	r3,r3,2
 1005138:	00800044 	movi	r2,1
 100513c:	10c8983a 	sll	r4,r2,r3
 1005140:	39004436 	bltu	r7,r4,1005254 <_malloc_r+0x340>
 1005144:	21c4703a 	and	r2,r4,r7
 1005148:	10000a1e 	bne	r2,zero,1005174 <_malloc_r+0x260>
 100514c:	2109883a 	add	r4,r4,r4
 1005150:	00bfff04 	movi	r2,-4
 1005154:	4884703a 	and	r2,r9,r2
 1005158:	3906703a 	and	r3,r7,r4
 100515c:	12400104 	addi	r9,r2,4
 1005160:	1800041e 	bne	r3,zero,1005174 <_malloc_r+0x260>
 1005164:	2109883a 	add	r4,r4,r4
 1005168:	3904703a 	and	r2,r7,r4
 100516c:	4a400104 	addi	r9,r9,4
 1005170:	103ffc26 	beq	r2,zero,1005164 <_malloc_r+0x250>
 1005174:	480490fa 	slli	r2,r9,3
 1005178:	4819883a 	mov	r12,r9
 100517c:	023fff04 	movi	r8,-4
 1005180:	589b883a 	add	r13,r11,r2
 1005184:	6807883a 	mov	r3,r13
 1005188:	014003c4 	movi	r5,15
 100518c:	1c000317 	ldw	r16,12(r3)
 1005190:	1c00041e 	bne	r3,r16,10051a4 <_malloc_r+0x290>
 1005194:	0000a706 	br	1005434 <_malloc_r+0x520>
 1005198:	3000ab0e 	bge	r6,zero,1005448 <_malloc_r+0x534>
 100519c:	84000317 	ldw	r16,12(r16)
 10051a0:	1c00a426 	beq	r3,r16,1005434 <_malloc_r+0x520>
 10051a4:	80800117 	ldw	r2,4(r16)
 10051a8:	1204703a 	and	r2,r2,r8
 10051ac:	144dc83a 	sub	r6,r2,r17
 10051b0:	29bff90e 	bge	r5,r6,1005198 <_malloc_r+0x284>
 10051b4:	81000317 	ldw	r4,12(r16)
 10051b8:	80c00217 	ldw	r3,8(r16)
 10051bc:	89400054 	ori	r5,r17,1
 10051c0:	8445883a 	add	r2,r16,r17
 10051c4:	20c00215 	stw	r3,8(r4)
 10051c8:	19000315 	stw	r4,12(r3)
 10051cc:	81400115 	stw	r5,4(r16)
 10051d0:	1187883a 	add	r3,r2,r6
 10051d4:	31000054 	ori	r4,r6,1
 10051d8:	50800315 	stw	r2,12(r10)
 10051dc:	50800215 	stw	r2,8(r10)
 10051e0:	19800015 	stw	r6,0(r3)
 10051e4:	11000115 	stw	r4,4(r2)
 10051e8:	12800215 	stw	r10,8(r2)
 10051ec:	12800315 	stw	r10,12(r2)
 10051f0:	9009883a 	mov	r4,r18
 10051f4:	100a4480 	call	100a448 <__malloc_unlock>
 10051f8:	80c00204 	addi	r3,r16,8
 10051fc:	003f5906 	br	1004f64 <_malloc_r+0x50>
 1005200:	8109883a 	add	r4,r16,r4
 1005204:	20800117 	ldw	r2,4(r4)
 1005208:	80c00217 	ldw	r3,8(r16)
 100520c:	81400317 	ldw	r5,12(r16)
 1005210:	10800054 	ori	r2,r2,1
 1005214:	20800115 	stw	r2,4(r4)
 1005218:	28c00215 	stw	r3,8(r5)
 100521c:	19400315 	stw	r5,12(r3)
 1005220:	9009883a 	mov	r4,r18
 1005224:	100a4480 	call	100a448 <__malloc_unlock>
 1005228:	80c00204 	addi	r3,r16,8
 100522c:	003f4d06 	br	1004f64 <_malloc_r+0x50>
 1005230:	80800204 	addi	r2,r16,8
 1005234:	14000317 	ldw	r16,12(r2)
 1005238:	143f911e 	bne	r2,r16,1005080 <_malloc_r+0x16c>
 100523c:	1a400084 	addi	r9,r3,2
 1005240:	003f7306 	br	1005010 <_malloc_r+0xfc>
 1005244:	88c00054 	ori	r3,r17,1
 1005248:	8445883a 	add	r2,r16,r17
 100524c:	80c00115 	stw	r3,4(r16)
 1005250:	003fdf06 	br	10051d0 <_malloc_r+0x2bc>
 1005254:	e4000217 	ldw	r16,8(fp)
 1005258:	00bfff04 	movi	r2,-4
 100525c:	80c00117 	ldw	r3,4(r16)
 1005260:	802d883a 	mov	r22,r16
 1005264:	18aa703a 	and	r21,r3,r2
 1005268:	ac401636 	bltu	r21,r17,10052c4 <_malloc_r+0x3b0>
 100526c:	ac49c83a 	sub	r4,r21,r17
 1005270:	008003c4 	movi	r2,15
 1005274:	1100130e 	bge	r2,r4,10052c4 <_malloc_r+0x3b0>
 1005278:	88800054 	ori	r2,r17,1
 100527c:	8447883a 	add	r3,r16,r17
 1005280:	80800115 	stw	r2,4(r16)
 1005284:	20800054 	ori	r2,r4,1
 1005288:	18800115 	stw	r2,4(r3)
 100528c:	e0c00215 	stw	r3,8(fp)
 1005290:	9009883a 	mov	r4,r18
 1005294:	100a4480 	call	100a448 <__malloc_unlock>
 1005298:	80c00204 	addi	r3,r16,8
 100529c:	003f3106 	br	1004f64 <_malloc_r+0x50>
 10052a0:	39c00117 	ldw	r7,4(r7)
 10052a4:	573ffe04 	addi	fp,r10,-8
 10052a8:	003fa006 	br	100512c <_malloc_r+0x218>
 10052ac:	00801504 	movi	r2,84
 10052b0:	10c06736 	bltu	r2,r3,1005450 <_malloc_r+0x53c>
 10052b4:	8804d33a 	srli	r2,r17,12
 10052b8:	11801b84 	addi	r6,r2,110
 10052bc:	300490fa 	slli	r2,r6,3
 10052c0:	003f4106 	br	1004fc8 <_malloc_r+0xb4>
 10052c4:	d0a6b517 	ldw	r2,-25900(gp)
 10052c8:	d0e00517 	ldw	r3,-32748(gp)
 10052cc:	053fffc4 	movi	r20,-1
 10052d0:	10800404 	addi	r2,r2,16
 10052d4:	88a7883a 	add	r19,r17,r2
 10052d8:	1d000326 	beq	r3,r20,10052e8 <_malloc_r+0x3d4>
 10052dc:	98c3ffc4 	addi	r3,r19,4095
 10052e0:	00bc0004 	movi	r2,-4096
 10052e4:	18a6703a 	and	r19,r3,r2
 10052e8:	9009883a 	mov	r4,r18
 10052ec:	980b883a 	mov	r5,r19
 10052f0:	10070400 	call	1007040 <_sbrk_r>
 10052f4:	1009883a 	mov	r4,r2
 10052f8:	15000426 	beq	r2,r20,100530c <_malloc_r+0x3f8>
 10052fc:	854b883a 	add	r5,r16,r21
 1005300:	1029883a 	mov	r20,r2
 1005304:	11405a2e 	bgeu	r2,r5,1005470 <_malloc_r+0x55c>
 1005308:	87000c26 	beq	r16,fp,100533c <_malloc_r+0x428>
 100530c:	e4000217 	ldw	r16,8(fp)
 1005310:	80c00117 	ldw	r3,4(r16)
 1005314:	00bfff04 	movi	r2,-4
 1005318:	1884703a 	and	r2,r3,r2
 100531c:	14400336 	bltu	r2,r17,100532c <_malloc_r+0x418>
 1005320:	1449c83a 	sub	r4,r2,r17
 1005324:	008003c4 	movi	r2,15
 1005328:	113fd316 	blt	r2,r4,1005278 <_malloc_r+0x364>
 100532c:	9009883a 	mov	r4,r18
 1005330:	100a4480 	call	100a448 <__malloc_unlock>
 1005334:	0007883a 	mov	r3,zero
 1005338:	003f0a06 	br	1004f64 <_malloc_r+0x50>
 100533c:	05c04074 	movhi	r23,257
 1005340:	bdc14204 	addi	r23,r23,1288
 1005344:	b8800017 	ldw	r2,0(r23)
 1005348:	988d883a 	add	r6,r19,r2
 100534c:	b9800015 	stw	r6,0(r23)
 1005350:	d0e00517 	ldw	r3,-32748(gp)
 1005354:	00bfffc4 	movi	r2,-1
 1005358:	18808e26 	beq	r3,r2,1005594 <_malloc_r+0x680>
 100535c:	2145c83a 	sub	r2,r4,r5
 1005360:	3085883a 	add	r2,r6,r2
 1005364:	b8800015 	stw	r2,0(r23)
 1005368:	20c001cc 	andi	r3,r4,7
 100536c:	18005f1e 	bne	r3,zero,10054ec <_malloc_r+0x5d8>
 1005370:	000b883a 	mov	r5,zero
 1005374:	a4c5883a 	add	r2,r20,r19
 1005378:	1083ffcc 	andi	r2,r2,4095
 100537c:	00c40004 	movi	r3,4096
 1005380:	1887c83a 	sub	r3,r3,r2
 1005384:	28e7883a 	add	r19,r5,r3
 1005388:	9009883a 	mov	r4,r18
 100538c:	980b883a 	mov	r5,r19
 1005390:	10070400 	call	1007040 <_sbrk_r>
 1005394:	1007883a 	mov	r3,r2
 1005398:	00bfffc4 	movi	r2,-1
 100539c:	18807a26 	beq	r3,r2,1005588 <_malloc_r+0x674>
 10053a0:	1d05c83a 	sub	r2,r3,r20
 10053a4:	9885883a 	add	r2,r19,r2
 10053a8:	10c00054 	ori	r3,r2,1
 10053ac:	b8800017 	ldw	r2,0(r23)
 10053b0:	a021883a 	mov	r16,r20
 10053b4:	a0c00115 	stw	r3,4(r20)
 10053b8:	9885883a 	add	r2,r19,r2
 10053bc:	b8800015 	stw	r2,0(r23)
 10053c0:	e5000215 	stw	r20,8(fp)
 10053c4:	b7003626 	beq	r22,fp,10054a0 <_malloc_r+0x58c>
 10053c8:	018003c4 	movi	r6,15
 10053cc:	35404b36 	bltu	r6,r21,10054fc <_malloc_r+0x5e8>
 10053d0:	00800044 	movi	r2,1
 10053d4:	a0800115 	stw	r2,4(r20)
 10053d8:	003fcd06 	br	1005310 <_malloc_r+0x3fc>
 10053dc:	2808d27a 	srli	r4,r5,9
 10053e0:	2000371e 	bne	r4,zero,10054c0 <_malloc_r+0x5ac>
 10053e4:	2808d0fa 	srli	r4,r5,3
 10053e8:	200690fa 	slli	r3,r4,3
 10053ec:	1ad1883a 	add	r8,r3,r11
 10053f0:	41800217 	ldw	r6,8(r8)
 10053f4:	41805b26 	beq	r8,r6,1005564 <_malloc_r+0x650>
 10053f8:	30800117 	ldw	r2,4(r6)
 10053fc:	00ffff04 	movi	r3,-4
 1005400:	10c4703a 	and	r2,r2,r3
 1005404:	2880022e 	bgeu	r5,r2,1005410 <_malloc_r+0x4fc>
 1005408:	31800217 	ldw	r6,8(r6)
 100540c:	41bffa1e 	bne	r8,r6,10053f8 <_malloc_r+0x4e4>
 1005410:	32000317 	ldw	r8,12(r6)
 1005414:	39c00117 	ldw	r7,4(r7)
 1005418:	82000315 	stw	r8,12(r16)
 100541c:	81800215 	stw	r6,8(r16)
 1005420:	07004074 	movhi	fp,257
 1005424:	e734f404 	addi	fp,fp,-11312
 1005428:	34000315 	stw	r16,12(r6)
 100542c:	44000215 	stw	r16,8(r8)
 1005430:	003f3e06 	br	100512c <_malloc_r+0x218>
 1005434:	63000044 	addi	r12,r12,1
 1005438:	608000cc 	andi	r2,r12,3
 100543c:	10005d26 	beq	r2,zero,10055b4 <_malloc_r+0x6a0>
 1005440:	18c00204 	addi	r3,r3,8
 1005444:	003f5106 	br	100518c <_malloc_r+0x278>
 1005448:	8089883a 	add	r4,r16,r2
 100544c:	003f6d06 	br	1005204 <_malloc_r+0x2f0>
 1005450:	00805504 	movi	r2,340
 1005454:	10c02036 	bltu	r2,r3,10054d8 <_malloc_r+0x5c4>
 1005458:	8804d3fa 	srli	r2,r17,15
 100545c:	11801dc4 	addi	r6,r2,119
 1005460:	300490fa 	slli	r2,r6,3
 1005464:	003ed806 	br	1004fc8 <_malloc_r+0xb4>
 1005468:	48c000c4 	addi	r3,r9,3
 100546c:	003f3106 	br	1005134 <_malloc_r+0x220>
 1005470:	05c04074 	movhi	r23,257
 1005474:	bdc14204 	addi	r23,r23,1288
 1005478:	b8800017 	ldw	r2,0(r23)
 100547c:	988d883a 	add	r6,r19,r2
 1005480:	b9800015 	stw	r6,0(r23)
 1005484:	293fb21e 	bne	r5,r4,1005350 <_malloc_r+0x43c>
 1005488:	2083ffcc 	andi	r2,r4,4095
 100548c:	103fb01e 	bne	r2,zero,1005350 <_malloc_r+0x43c>
 1005490:	e4000217 	ldw	r16,8(fp)
 1005494:	9d45883a 	add	r2,r19,r21
 1005498:	10800054 	ori	r2,r2,1
 100549c:	80800115 	stw	r2,4(r16)
 10054a0:	b8c00017 	ldw	r3,0(r23)
 10054a4:	d0a6b617 	ldw	r2,-25896(gp)
 10054a8:	10c0012e 	bgeu	r2,r3,10054b0 <_malloc_r+0x59c>
 10054ac:	d0e6b615 	stw	r3,-25896(gp)
 10054b0:	d0a6b717 	ldw	r2,-25892(gp)
 10054b4:	10ff962e 	bgeu	r2,r3,1005310 <_malloc_r+0x3fc>
 10054b8:	d0e6b715 	stw	r3,-25892(gp)
 10054bc:	003f9406 	br	1005310 <_malloc_r+0x3fc>
 10054c0:	00800104 	movi	r2,4
 10054c4:	11001e36 	bltu	r2,r4,1005540 <_malloc_r+0x62c>
 10054c8:	2804d1ba 	srli	r2,r5,6
 10054cc:	11000e04 	addi	r4,r2,56
 10054d0:	200690fa 	slli	r3,r4,3
 10054d4:	003fc506 	br	10053ec <_malloc_r+0x4d8>
 10054d8:	00815504 	movi	r2,1364
 10054dc:	10c01d2e 	bgeu	r2,r3,1005554 <_malloc_r+0x640>
 10054e0:	01801f84 	movi	r6,126
 10054e4:	0080fc04 	movi	r2,1008
 10054e8:	003eb706 	br	1004fc8 <_malloc_r+0xb4>
 10054ec:	00800204 	movi	r2,8
 10054f0:	10cbc83a 	sub	r5,r2,r3
 10054f4:	2169883a 	add	r20,r4,r5
 10054f8:	003f9e06 	br	1005374 <_malloc_r+0x460>
 10054fc:	00bffe04 	movi	r2,-8
 1005500:	a93ffd04 	addi	r4,r21,-12
 1005504:	2088703a 	and	r4,r4,r2
 1005508:	b10b883a 	add	r5,r22,r4
 100550c:	00c00144 	movi	r3,5
 1005510:	28c00215 	stw	r3,8(r5)
 1005514:	28c00115 	stw	r3,4(r5)
 1005518:	b0800117 	ldw	r2,4(r22)
 100551c:	1080004c 	andi	r2,r2,1
 1005520:	2084b03a 	or	r2,r4,r2
 1005524:	b0800115 	stw	r2,4(r22)
 1005528:	313fdd2e 	bgeu	r6,r4,10054a0 <_malloc_r+0x58c>
 100552c:	b1400204 	addi	r5,r22,8
 1005530:	9009883a 	mov	r4,r18
 1005534:	100438c0 	call	100438c <_free_r>
 1005538:	e4000217 	ldw	r16,8(fp)
 100553c:	003fd806 	br	10054a0 <_malloc_r+0x58c>
 1005540:	00800504 	movi	r2,20
 1005544:	11001536 	bltu	r2,r4,100559c <_malloc_r+0x688>
 1005548:	210016c4 	addi	r4,r4,91
 100554c:	200690fa 	slli	r3,r4,3
 1005550:	003fa606 	br	10053ec <_malloc_r+0x4d8>
 1005554:	8804d4ba 	srli	r2,r17,18
 1005558:	11801f04 	addi	r6,r2,124
 100555c:	300490fa 	slli	r2,r6,3
 1005560:	003e9906 	br	1004fc8 <_malloc_r+0xb4>
 1005564:	2009d0ba 	srai	r4,r4,2
 1005568:	01404074 	movhi	r5,257
 100556c:	2974f404 	addi	r5,r5,-11312
 1005570:	00c00044 	movi	r3,1
 1005574:	28800117 	ldw	r2,4(r5)
 1005578:	1906983a 	sll	r3,r3,r4
 100557c:	10c4b03a 	or	r2,r2,r3
 1005580:	28800115 	stw	r2,4(r5)
 1005584:	003fa306 	br	1005414 <_malloc_r+0x500>
 1005588:	0027883a 	mov	r19,zero
 100558c:	00c00044 	movi	r3,1
 1005590:	003f8606 	br	10053ac <_malloc_r+0x498>
 1005594:	d1200515 	stw	r4,-32748(gp)
 1005598:	003f7306 	br	1005368 <_malloc_r+0x454>
 100559c:	00801504 	movi	r2,84
 10055a0:	11001936 	bltu	r2,r4,1005608 <_malloc_r+0x6f4>
 10055a4:	2804d33a 	srli	r2,r5,12
 10055a8:	11001b84 	addi	r4,r2,110
 10055ac:	200690fa 	slli	r3,r4,3
 10055b0:	003f8e06 	br	10053ec <_malloc_r+0x4d8>
 10055b4:	480b883a 	mov	r5,r9
 10055b8:	6807883a 	mov	r3,r13
 10055bc:	288000cc 	andi	r2,r5,3
 10055c0:	18fffe04 	addi	r3,r3,-8
 10055c4:	297fffc4 	addi	r5,r5,-1
 10055c8:	10001526 	beq	r2,zero,1005620 <_malloc_r+0x70c>
 10055cc:	18800217 	ldw	r2,8(r3)
 10055d0:	10fffa26 	beq	r2,r3,10055bc <_malloc_r+0x6a8>
 10055d4:	2109883a 	add	r4,r4,r4
 10055d8:	393f1e36 	bltu	r7,r4,1005254 <_malloc_r+0x340>
 10055dc:	203f1d26 	beq	r4,zero,1005254 <_malloc_r+0x340>
 10055e0:	21c4703a 	and	r2,r4,r7
 10055e4:	10000226 	beq	r2,zero,10055f0 <_malloc_r+0x6dc>
 10055e8:	6013883a 	mov	r9,r12
 10055ec:	003ee106 	br	1005174 <_malloc_r+0x260>
 10055f0:	2109883a 	add	r4,r4,r4
 10055f4:	3904703a 	and	r2,r7,r4
 10055f8:	63000104 	addi	r12,r12,4
 10055fc:	103ffc26 	beq	r2,zero,10055f0 <_malloc_r+0x6dc>
 1005600:	6013883a 	mov	r9,r12
 1005604:	003edb06 	br	1005174 <_malloc_r+0x260>
 1005608:	00805504 	movi	r2,340
 100560c:	11000836 	bltu	r2,r4,1005630 <_malloc_r+0x71c>
 1005610:	2804d3fa 	srli	r2,r5,15
 1005614:	11001dc4 	addi	r4,r2,119
 1005618:	200690fa 	slli	r3,r4,3
 100561c:	003f7306 	br	10053ec <_malloc_r+0x4d8>
 1005620:	0104303a 	nor	r2,zero,r4
 1005624:	388e703a 	and	r7,r7,r2
 1005628:	e1c00115 	stw	r7,4(fp)
 100562c:	003fe906 	br	10055d4 <_malloc_r+0x6c0>
 1005630:	00815504 	movi	r2,1364
 1005634:	1100032e 	bgeu	r2,r4,1005644 <_malloc_r+0x730>
 1005638:	01001f84 	movi	r4,126
 100563c:	00c0fc04 	movi	r3,1008
 1005640:	003f6a06 	br	10053ec <_malloc_r+0x4d8>
 1005644:	2804d4ba 	srli	r2,r5,18
 1005648:	11001f04 	addi	r4,r2,124
 100564c:	200690fa 	slli	r3,r4,3
 1005650:	003f6606 	br	10053ec <_malloc_r+0x4d8>

01005654 <memchr>:
 1005654:	008000c4 	movi	r2,3
 1005658:	29403fcc 	andi	r5,r5,255
 100565c:	2007883a 	mov	r3,r4
 1005660:	1180022e 	bgeu	r2,r6,100566c <memchr+0x18>
 1005664:	2084703a 	and	r2,r4,r2
 1005668:	10000b26 	beq	r2,zero,1005698 <memchr+0x44>
 100566c:	313fffc4 	addi	r4,r6,-1
 1005670:	3000051e 	bne	r6,zero,1005688 <memchr+0x34>
 1005674:	00002c06 	br	1005728 <memchr+0xd4>
 1005678:	213fffc4 	addi	r4,r4,-1
 100567c:	00bfffc4 	movi	r2,-1
 1005680:	18c00044 	addi	r3,r3,1
 1005684:	20802826 	beq	r4,r2,1005728 <memchr+0xd4>
 1005688:	18800003 	ldbu	r2,0(r3)
 100568c:	28bffa1e 	bne	r5,r2,1005678 <memchr+0x24>
 1005690:	1805883a 	mov	r2,r3
 1005694:	f800283a 	ret
 1005698:	0011883a 	mov	r8,zero
 100569c:	0007883a 	mov	r3,zero
 10056a0:	01c00104 	movi	r7,4
 10056a4:	4004923a 	slli	r2,r8,8
 10056a8:	18c00044 	addi	r3,r3,1
 10056ac:	1151883a 	add	r8,r2,r5
 10056b0:	19fffc1e 	bne	r3,r7,10056a4 <memchr+0x50>
 10056b4:	02bfbff4 	movhi	r10,65279
 10056b8:	52bfbfc4 	addi	r10,r10,-257
 10056bc:	02602074 	movhi	r9,32897
 10056c0:	4a602004 	addi	r9,r9,-32640
 10056c4:	02c000c4 	movi	r11,3
 10056c8:	20800017 	ldw	r2,0(r4)
 10056cc:	31bfff04 	addi	r6,r6,-4
 10056d0:	200f883a 	mov	r7,r4
 10056d4:	1204f03a 	xor	r2,r2,r8
 10056d8:	1287883a 	add	r3,r2,r10
 10056dc:	1a46703a 	and	r3,r3,r9
 10056e0:	0084303a 	nor	r2,zero,r2
 10056e4:	10c4703a 	and	r2,r2,r3
 10056e8:	10000b26 	beq	r2,zero,1005718 <memchr+0xc4>
 10056ec:	20800003 	ldbu	r2,0(r4)
 10056f0:	28800f26 	beq	r5,r2,1005730 <memchr+0xdc>
 10056f4:	20800043 	ldbu	r2,1(r4)
 10056f8:	21c00044 	addi	r7,r4,1
 10056fc:	28800c26 	beq	r5,r2,1005730 <memchr+0xdc>
 1005700:	20800083 	ldbu	r2,2(r4)
 1005704:	21c00084 	addi	r7,r4,2
 1005708:	28800926 	beq	r5,r2,1005730 <memchr+0xdc>
 100570c:	208000c3 	ldbu	r2,3(r4)
 1005710:	21c000c4 	addi	r7,r4,3
 1005714:	28800626 	beq	r5,r2,1005730 <memchr+0xdc>
 1005718:	21000104 	addi	r4,r4,4
 100571c:	59bfea36 	bltu	r11,r6,10056c8 <memchr+0x74>
 1005720:	2007883a 	mov	r3,r4
 1005724:	003fd106 	br	100566c <memchr+0x18>
 1005728:	0005883a 	mov	r2,zero
 100572c:	f800283a 	ret
 1005730:	3805883a 	mov	r2,r7
 1005734:	f800283a 	ret

01005738 <memcpy>:
 1005738:	01c003c4 	movi	r7,15
 100573c:	2007883a 	mov	r3,r4
 1005740:	3980032e 	bgeu	r7,r6,1005750 <memcpy+0x18>
 1005744:	2904b03a 	or	r2,r5,r4
 1005748:	108000cc 	andi	r2,r2,3
 100574c:	10000926 	beq	r2,zero,1005774 <memcpy+0x3c>
 1005750:	30000626 	beq	r6,zero,100576c <memcpy+0x34>
 1005754:	30cd883a 	add	r6,r6,r3
 1005758:	28800003 	ldbu	r2,0(r5)
 100575c:	29400044 	addi	r5,r5,1
 1005760:	18800005 	stb	r2,0(r3)
 1005764:	18c00044 	addi	r3,r3,1
 1005768:	30fffb1e 	bne	r6,r3,1005758 <memcpy+0x20>
 100576c:	2005883a 	mov	r2,r4
 1005770:	f800283a 	ret
 1005774:	3811883a 	mov	r8,r7
 1005778:	200f883a 	mov	r7,r4
 100577c:	28c00017 	ldw	r3,0(r5)
 1005780:	31bffc04 	addi	r6,r6,-16
 1005784:	38c00015 	stw	r3,0(r7)
 1005788:	28800117 	ldw	r2,4(r5)
 100578c:	38800115 	stw	r2,4(r7)
 1005790:	28c00217 	ldw	r3,8(r5)
 1005794:	38c00215 	stw	r3,8(r7)
 1005798:	28800317 	ldw	r2,12(r5)
 100579c:	29400404 	addi	r5,r5,16
 10057a0:	38800315 	stw	r2,12(r7)
 10057a4:	39c00404 	addi	r7,r7,16
 10057a8:	41bff436 	bltu	r8,r6,100577c <memcpy+0x44>
 10057ac:	008000c4 	movi	r2,3
 10057b0:	1180072e 	bgeu	r2,r6,10057d0 <memcpy+0x98>
 10057b4:	1007883a 	mov	r3,r2
 10057b8:	28800017 	ldw	r2,0(r5)
 10057bc:	31bfff04 	addi	r6,r6,-4
 10057c0:	29400104 	addi	r5,r5,4
 10057c4:	38800015 	stw	r2,0(r7)
 10057c8:	39c00104 	addi	r7,r7,4
 10057cc:	19bffa36 	bltu	r3,r6,10057b8 <memcpy+0x80>
 10057d0:	3807883a 	mov	r3,r7
 10057d4:	003fde06 	br	1005750 <memcpy+0x18>

010057d8 <memmove>:
 10057d8:	2807883a 	mov	r3,r5
 10057dc:	2011883a 	mov	r8,r4
 10057e0:	29000c2e 	bgeu	r5,r4,1005814 <memmove+0x3c>
 10057e4:	298f883a 	add	r7,r5,r6
 10057e8:	21c00a2e 	bgeu	r4,r7,1005814 <memmove+0x3c>
 10057ec:	30000726 	beq	r6,zero,100580c <memmove+0x34>
 10057f0:	2187883a 	add	r3,r4,r6
 10057f4:	198dc83a 	sub	r6,r3,r6
 10057f8:	39ffffc4 	addi	r7,r7,-1
 10057fc:	38800003 	ldbu	r2,0(r7)
 1005800:	18ffffc4 	addi	r3,r3,-1
 1005804:	18800005 	stb	r2,0(r3)
 1005808:	19bffb1e 	bne	r3,r6,10057f8 <memmove+0x20>
 100580c:	2005883a 	mov	r2,r4
 1005810:	f800283a 	ret
 1005814:	01c003c4 	movi	r7,15
 1005818:	39800a36 	bltu	r7,r6,1005844 <memmove+0x6c>
 100581c:	303ffb26 	beq	r6,zero,100580c <memmove+0x34>
 1005820:	400f883a 	mov	r7,r8
 1005824:	320d883a 	add	r6,r6,r8
 1005828:	28800003 	ldbu	r2,0(r5)
 100582c:	29400044 	addi	r5,r5,1
 1005830:	38800005 	stb	r2,0(r7)
 1005834:	39c00044 	addi	r7,r7,1
 1005838:	39bffb1e 	bne	r7,r6,1005828 <memmove+0x50>
 100583c:	2005883a 	mov	r2,r4
 1005840:	f800283a 	ret
 1005844:	1904b03a 	or	r2,r3,r4
 1005848:	108000cc 	andi	r2,r2,3
 100584c:	103ff31e 	bne	r2,zero,100581c <memmove+0x44>
 1005850:	3811883a 	mov	r8,r7
 1005854:	180b883a 	mov	r5,r3
 1005858:	200f883a 	mov	r7,r4
 100585c:	28c00017 	ldw	r3,0(r5)
 1005860:	31bffc04 	addi	r6,r6,-16
 1005864:	38c00015 	stw	r3,0(r7)
 1005868:	28800117 	ldw	r2,4(r5)
 100586c:	38800115 	stw	r2,4(r7)
 1005870:	28c00217 	ldw	r3,8(r5)
 1005874:	38c00215 	stw	r3,8(r7)
 1005878:	28800317 	ldw	r2,12(r5)
 100587c:	29400404 	addi	r5,r5,16
 1005880:	38800315 	stw	r2,12(r7)
 1005884:	39c00404 	addi	r7,r7,16
 1005888:	41bff436 	bltu	r8,r6,100585c <memmove+0x84>
 100588c:	008000c4 	movi	r2,3
 1005890:	1180072e 	bgeu	r2,r6,10058b0 <memmove+0xd8>
 1005894:	1007883a 	mov	r3,r2
 1005898:	28800017 	ldw	r2,0(r5)
 100589c:	31bfff04 	addi	r6,r6,-4
 10058a0:	29400104 	addi	r5,r5,4
 10058a4:	38800015 	stw	r2,0(r7)
 10058a8:	39c00104 	addi	r7,r7,4
 10058ac:	19bffa36 	bltu	r3,r6,1005898 <memmove+0xc0>
 10058b0:	3811883a 	mov	r8,r7
 10058b4:	003fd906 	br	100581c <memmove+0x44>

010058b8 <memset>:
 10058b8:	008000c4 	movi	r2,3
 10058bc:	29403fcc 	andi	r5,r5,255
 10058c0:	2007883a 	mov	r3,r4
 10058c4:	1180022e 	bgeu	r2,r6,10058d0 <memset+0x18>
 10058c8:	2084703a 	and	r2,r4,r2
 10058cc:	10000826 	beq	r2,zero,10058f0 <memset+0x38>
 10058d0:	30000526 	beq	r6,zero,10058e8 <memset+0x30>
 10058d4:	2805883a 	mov	r2,r5
 10058d8:	30cd883a 	add	r6,r6,r3
 10058dc:	18800005 	stb	r2,0(r3)
 10058e0:	18c00044 	addi	r3,r3,1
 10058e4:	19bffd1e 	bne	r3,r6,10058dc <memset+0x24>
 10058e8:	2005883a 	mov	r2,r4
 10058ec:	f800283a 	ret
 10058f0:	2804923a 	slli	r2,r5,8
 10058f4:	020003c4 	movi	r8,15
 10058f8:	200f883a 	mov	r7,r4
 10058fc:	2884b03a 	or	r2,r5,r2
 1005900:	1006943a 	slli	r3,r2,16
 1005904:	10c6b03a 	or	r3,r2,r3
 1005908:	41800a2e 	bgeu	r8,r6,1005934 <memset+0x7c>
 100590c:	4005883a 	mov	r2,r8
 1005910:	31bffc04 	addi	r6,r6,-16
 1005914:	38c00015 	stw	r3,0(r7)
 1005918:	38c00115 	stw	r3,4(r7)
 100591c:	38c00215 	stw	r3,8(r7)
 1005920:	38c00315 	stw	r3,12(r7)
 1005924:	39c00404 	addi	r7,r7,16
 1005928:	11bff936 	bltu	r2,r6,1005910 <memset+0x58>
 100592c:	008000c4 	movi	r2,3
 1005930:	1180052e 	bgeu	r2,r6,1005948 <memset+0x90>
 1005934:	31bfff04 	addi	r6,r6,-4
 1005938:	008000c4 	movi	r2,3
 100593c:	38c00015 	stw	r3,0(r7)
 1005940:	39c00104 	addi	r7,r7,4
 1005944:	11bffb36 	bltu	r2,r6,1005934 <memset+0x7c>
 1005948:	3807883a 	mov	r3,r7
 100594c:	003fe006 	br	10058d0 <memset+0x18>

01005950 <_Bfree>:
 1005950:	28000826 	beq	r5,zero,1005974 <_Bfree+0x24>
 1005954:	28800117 	ldw	r2,4(r5)
 1005958:	21001317 	ldw	r4,76(r4)
 100595c:	1085883a 	add	r2,r2,r2
 1005960:	1085883a 	add	r2,r2,r2
 1005964:	1105883a 	add	r2,r2,r4
 1005968:	10c00017 	ldw	r3,0(r2)
 100596c:	28c00015 	stw	r3,0(r5)
 1005970:	11400015 	stw	r5,0(r2)
 1005974:	f800283a 	ret

01005978 <__hi0bits>:
 1005978:	20bfffec 	andhi	r2,r4,65535
 100597c:	10001426 	beq	r2,zero,10059d0 <__hi0bits+0x58>
 1005980:	0007883a 	mov	r3,zero
 1005984:	20bfc02c 	andhi	r2,r4,65280
 1005988:	1000021e 	bne	r2,zero,1005994 <__hi0bits+0x1c>
 100598c:	2008923a 	slli	r4,r4,8
 1005990:	18c00204 	addi	r3,r3,8
 1005994:	20bc002c 	andhi	r2,r4,61440
 1005998:	1000021e 	bne	r2,zero,10059a4 <__hi0bits+0x2c>
 100599c:	2008913a 	slli	r4,r4,4
 10059a0:	18c00104 	addi	r3,r3,4
 10059a4:	20b0002c 	andhi	r2,r4,49152
 10059a8:	1000031e 	bne	r2,zero,10059b8 <__hi0bits+0x40>
 10059ac:	2105883a 	add	r2,r4,r4
 10059b0:	18c00084 	addi	r3,r3,2
 10059b4:	1089883a 	add	r4,r2,r2
 10059b8:	20000316 	blt	r4,zero,10059c8 <__hi0bits+0x50>
 10059bc:	2090002c 	andhi	r2,r4,16384
 10059c0:	10000626 	beq	r2,zero,10059dc <__hi0bits+0x64>
 10059c4:	18c00044 	addi	r3,r3,1
 10059c8:	1805883a 	mov	r2,r3
 10059cc:	f800283a 	ret
 10059d0:	2008943a 	slli	r4,r4,16
 10059d4:	00c00404 	movi	r3,16
 10059d8:	003fea06 	br	1005984 <__hi0bits+0xc>
 10059dc:	00c00804 	movi	r3,32
 10059e0:	1805883a 	mov	r2,r3
 10059e4:	f800283a 	ret

010059e8 <__lo0bits>:
 10059e8:	20c00017 	ldw	r3,0(r4)
 10059ec:	188001cc 	andi	r2,r3,7
 10059f0:	10000a26 	beq	r2,zero,1005a1c <__lo0bits+0x34>
 10059f4:	1880004c 	andi	r2,r3,1
 10059f8:	1005003a 	cmpeq	r2,r2,zero
 10059fc:	10002126 	beq	r2,zero,1005a84 <__lo0bits+0x9c>
 1005a00:	1880008c 	andi	r2,r3,2
 1005a04:	1000251e 	bne	r2,zero,1005a9c <__lo0bits+0xb4>
 1005a08:	1804d0ba 	srli	r2,r3,2
 1005a0c:	01400084 	movi	r5,2
 1005a10:	20800015 	stw	r2,0(r4)
 1005a14:	2805883a 	mov	r2,r5
 1005a18:	f800283a 	ret
 1005a1c:	18bfffcc 	andi	r2,r3,65535
 1005a20:	10001526 	beq	r2,zero,1005a78 <__lo0bits+0x90>
 1005a24:	000b883a 	mov	r5,zero
 1005a28:	18803fcc 	andi	r2,r3,255
 1005a2c:	1000021e 	bne	r2,zero,1005a38 <__lo0bits+0x50>
 1005a30:	1806d23a 	srli	r3,r3,8
 1005a34:	29400204 	addi	r5,r5,8
 1005a38:	188003cc 	andi	r2,r3,15
 1005a3c:	1000021e 	bne	r2,zero,1005a48 <__lo0bits+0x60>
 1005a40:	1806d13a 	srli	r3,r3,4
 1005a44:	29400104 	addi	r5,r5,4
 1005a48:	188000cc 	andi	r2,r3,3
 1005a4c:	1000021e 	bne	r2,zero,1005a58 <__lo0bits+0x70>
 1005a50:	1806d0ba 	srli	r3,r3,2
 1005a54:	29400084 	addi	r5,r5,2
 1005a58:	1880004c 	andi	r2,r3,1
 1005a5c:	1000031e 	bne	r2,zero,1005a6c <__lo0bits+0x84>
 1005a60:	1806d07a 	srli	r3,r3,1
 1005a64:	18000a26 	beq	r3,zero,1005a90 <__lo0bits+0xa8>
 1005a68:	29400044 	addi	r5,r5,1
 1005a6c:	2805883a 	mov	r2,r5
 1005a70:	20c00015 	stw	r3,0(r4)
 1005a74:	f800283a 	ret
 1005a78:	1806d43a 	srli	r3,r3,16
 1005a7c:	01400404 	movi	r5,16
 1005a80:	003fe906 	br	1005a28 <__lo0bits+0x40>
 1005a84:	000b883a 	mov	r5,zero
 1005a88:	2805883a 	mov	r2,r5
 1005a8c:	f800283a 	ret
 1005a90:	01400804 	movi	r5,32
 1005a94:	2805883a 	mov	r2,r5
 1005a98:	f800283a 	ret
 1005a9c:	1804d07a 	srli	r2,r3,1
 1005aa0:	01400044 	movi	r5,1
 1005aa4:	20800015 	stw	r2,0(r4)
 1005aa8:	003fda06 	br	1005a14 <__lo0bits+0x2c>

01005aac <__mcmp>:
 1005aac:	20800417 	ldw	r2,16(r4)
 1005ab0:	28c00417 	ldw	r3,16(r5)
 1005ab4:	10cfc83a 	sub	r7,r2,r3
 1005ab8:	38000c1e 	bne	r7,zero,1005aec <__mcmp+0x40>
 1005abc:	18c5883a 	add	r2,r3,r3
 1005ac0:	1085883a 	add	r2,r2,r2
 1005ac4:	10c00504 	addi	r3,r2,20
 1005ac8:	21000504 	addi	r4,r4,20
 1005acc:	28cb883a 	add	r5,r5,r3
 1005ad0:	2085883a 	add	r2,r4,r2
 1005ad4:	10bfff04 	addi	r2,r2,-4
 1005ad8:	297fff04 	addi	r5,r5,-4
 1005adc:	11800017 	ldw	r6,0(r2)
 1005ae0:	28c00017 	ldw	r3,0(r5)
 1005ae4:	30c0031e 	bne	r6,r3,1005af4 <__mcmp+0x48>
 1005ae8:	20bffa36 	bltu	r4,r2,1005ad4 <__mcmp+0x28>
 1005aec:	3805883a 	mov	r2,r7
 1005af0:	f800283a 	ret
 1005af4:	30c00336 	bltu	r6,r3,1005b04 <__mcmp+0x58>
 1005af8:	01c00044 	movi	r7,1
 1005afc:	3805883a 	mov	r2,r7
 1005b00:	f800283a 	ret
 1005b04:	01ffffc4 	movi	r7,-1
 1005b08:	003ff806 	br	1005aec <__mcmp+0x40>

01005b0c <__ulp>:
 1005b0c:	295ffc2c 	andhi	r5,r5,32752
 1005b10:	013f3034 	movhi	r4,64704
 1005b14:	290b883a 	add	r5,r5,r4
 1005b18:	0145c83a 	sub	r2,zero,r5
 1005b1c:	1007d53a 	srai	r3,r2,20
 1005b20:	000d883a 	mov	r6,zero
 1005b24:	0140040e 	bge	zero,r5,1005b38 <__ulp+0x2c>
 1005b28:	280f883a 	mov	r7,r5
 1005b2c:	3807883a 	mov	r3,r7
 1005b30:	3005883a 	mov	r2,r6
 1005b34:	f800283a 	ret
 1005b38:	008004c4 	movi	r2,19
 1005b3c:	193ffb04 	addi	r4,r3,-20
 1005b40:	10c00c0e 	bge	r2,r3,1005b74 <__ulp+0x68>
 1005b44:	008007c4 	movi	r2,31
 1005b48:	1107c83a 	sub	r3,r2,r4
 1005b4c:	00800784 	movi	r2,30
 1005b50:	01400044 	movi	r5,1
 1005b54:	11000216 	blt	r2,r4,1005b60 <__ulp+0x54>
 1005b58:	00800044 	movi	r2,1
 1005b5c:	10ca983a 	sll	r5,r2,r3
 1005b60:	000f883a 	mov	r7,zero
 1005b64:	280d883a 	mov	r6,r5
 1005b68:	3807883a 	mov	r3,r7
 1005b6c:	3005883a 	mov	r2,r6
 1005b70:	f800283a 	ret
 1005b74:	00800234 	movhi	r2,8
 1005b78:	10cfd83a 	sra	r7,r2,r3
 1005b7c:	000d883a 	mov	r6,zero
 1005b80:	3005883a 	mov	r2,r6
 1005b84:	3807883a 	mov	r3,r7
 1005b88:	f800283a 	ret

01005b8c <__b2d>:
 1005b8c:	20800417 	ldw	r2,16(r4)
 1005b90:	defff904 	addi	sp,sp,-28
 1005b94:	dd000415 	stw	r20,16(sp)
 1005b98:	1085883a 	add	r2,r2,r2
 1005b9c:	25000504 	addi	r20,r4,20
 1005ba0:	1085883a 	add	r2,r2,r2
 1005ba4:	dc000015 	stw	r16,0(sp)
 1005ba8:	a0a1883a 	add	r16,r20,r2
 1005bac:	dd400515 	stw	r21,20(sp)
 1005bb0:	857fff17 	ldw	r21,-4(r16)
 1005bb4:	dc400115 	stw	r17,4(sp)
 1005bb8:	dfc00615 	stw	ra,24(sp)
 1005bbc:	a809883a 	mov	r4,r21
 1005bc0:	2823883a 	mov	r17,r5
 1005bc4:	dcc00315 	stw	r19,12(sp)
 1005bc8:	dc800215 	stw	r18,8(sp)
 1005bcc:	10059780 	call	1005978 <__hi0bits>
 1005bd0:	100b883a 	mov	r5,r2
 1005bd4:	00800804 	movi	r2,32
 1005bd8:	1145c83a 	sub	r2,r2,r5
 1005bdc:	88800015 	stw	r2,0(r17)
 1005be0:	00800284 	movi	r2,10
 1005be4:	80ffff04 	addi	r3,r16,-4
 1005be8:	11401416 	blt	r2,r5,1005c3c <__b2d+0xb0>
 1005bec:	008002c4 	movi	r2,11
 1005bf0:	1149c83a 	sub	r4,r2,r5
 1005bf4:	a0c02736 	bltu	r20,r3,1005c94 <__b2d+0x108>
 1005bf8:	000d883a 	mov	r6,zero
 1005bfc:	28800544 	addi	r2,r5,21
 1005c00:	a906d83a 	srl	r3,r21,r4
 1005c04:	a884983a 	sll	r2,r21,r2
 1005c08:	1ccffc34 	orhi	r19,r3,16368
 1005c0c:	11a4b03a 	or	r18,r2,r6
 1005c10:	9005883a 	mov	r2,r18
 1005c14:	9807883a 	mov	r3,r19
 1005c18:	dfc00617 	ldw	ra,24(sp)
 1005c1c:	dd400517 	ldw	r21,20(sp)
 1005c20:	dd000417 	ldw	r20,16(sp)
 1005c24:	dcc00317 	ldw	r19,12(sp)
 1005c28:	dc800217 	ldw	r18,8(sp)
 1005c2c:	dc400117 	ldw	r17,4(sp)
 1005c30:	dc000017 	ldw	r16,0(sp)
 1005c34:	dec00704 	addi	sp,sp,28
 1005c38:	f800283a 	ret
 1005c3c:	a0c00e36 	bltu	r20,r3,1005c78 <__b2d+0xec>
 1005c40:	293ffd44 	addi	r4,r5,-11
 1005c44:	000d883a 	mov	r6,zero
 1005c48:	20000f26 	beq	r4,zero,1005c88 <__b2d+0xfc>
 1005c4c:	00800804 	movi	r2,32
 1005c50:	110bc83a 	sub	r5,r2,r4
 1005c54:	a0c01236 	bltu	r20,r3,1005ca0 <__b2d+0x114>
 1005c58:	000f883a 	mov	r7,zero
 1005c5c:	a904983a 	sll	r2,r21,r4
 1005c60:	3146d83a 	srl	r3,r6,r5
 1005c64:	3108983a 	sll	r4,r6,r4
 1005c68:	108ffc34 	orhi	r2,r2,16368
 1005c6c:	18a6b03a 	or	r19,r3,r2
 1005c70:	3924b03a 	or	r18,r7,r4
 1005c74:	003fe606 	br	1005c10 <__b2d+0x84>
 1005c78:	293ffd44 	addi	r4,r5,-11
 1005c7c:	81bffe17 	ldw	r6,-8(r16)
 1005c80:	80fffe04 	addi	r3,r16,-8
 1005c84:	203ff11e 	bne	r4,zero,1005c4c <__b2d+0xc0>
 1005c88:	accffc34 	orhi	r19,r21,16368
 1005c8c:	3025883a 	mov	r18,r6
 1005c90:	003fdf06 	br	1005c10 <__b2d+0x84>
 1005c94:	18bfff17 	ldw	r2,-4(r3)
 1005c98:	110cd83a 	srl	r6,r2,r4
 1005c9c:	003fd706 	br	1005bfc <__b2d+0x70>
 1005ca0:	18bfff17 	ldw	r2,-4(r3)
 1005ca4:	114ed83a 	srl	r7,r2,r5
 1005ca8:	003fec06 	br	1005c5c <__b2d+0xd0>

01005cac <__ratio>:
 1005cac:	defff904 	addi	sp,sp,-28
 1005cb0:	dc400215 	stw	r17,8(sp)
 1005cb4:	2823883a 	mov	r17,r5
 1005cb8:	d80b883a 	mov	r5,sp
 1005cbc:	dfc00615 	stw	ra,24(sp)
 1005cc0:	dd000515 	stw	r20,20(sp)
 1005cc4:	dcc00415 	stw	r19,16(sp)
 1005cc8:	dc800315 	stw	r18,12(sp)
 1005ccc:	2025883a 	mov	r18,r4
 1005cd0:	1005b8c0 	call	1005b8c <__b2d>
 1005cd4:	8809883a 	mov	r4,r17
 1005cd8:	d9400104 	addi	r5,sp,4
 1005cdc:	1027883a 	mov	r19,r2
 1005ce0:	1829883a 	mov	r20,r3
 1005ce4:	1005b8c0 	call	1005b8c <__b2d>
 1005ce8:	89000417 	ldw	r4,16(r17)
 1005cec:	91c00417 	ldw	r7,16(r18)
 1005cf0:	d9800117 	ldw	r6,4(sp)
 1005cf4:	180b883a 	mov	r5,r3
 1005cf8:	390fc83a 	sub	r7,r7,r4
 1005cfc:	1009883a 	mov	r4,r2
 1005d00:	d8800017 	ldw	r2,0(sp)
 1005d04:	380e917a 	slli	r7,r7,5
 1005d08:	2011883a 	mov	r8,r4
 1005d0c:	1185c83a 	sub	r2,r2,r6
 1005d10:	11c5883a 	add	r2,r2,r7
 1005d14:	1006953a 	slli	r3,r2,20
 1005d18:	2813883a 	mov	r9,r5
 1005d1c:	00800d0e 	bge	zero,r2,1005d54 <__ratio+0xa8>
 1005d20:	1d29883a 	add	r20,r3,r20
 1005d24:	a00b883a 	mov	r5,r20
 1005d28:	480f883a 	mov	r7,r9
 1005d2c:	9809883a 	mov	r4,r19
 1005d30:	400d883a 	mov	r6,r8
 1005d34:	1008cf40 	call	1008cf4 <__divdf3>
 1005d38:	dfc00617 	ldw	ra,24(sp)
 1005d3c:	dd000517 	ldw	r20,20(sp)
 1005d40:	dcc00417 	ldw	r19,16(sp)
 1005d44:	dc800317 	ldw	r18,12(sp)
 1005d48:	dc400217 	ldw	r17,8(sp)
 1005d4c:	dec00704 	addi	sp,sp,28
 1005d50:	f800283a 	ret
 1005d54:	28d3c83a 	sub	r9,r5,r3
 1005d58:	003ff206 	br	1005d24 <__ratio+0x78>

01005d5c <_mprec_log10>:
 1005d5c:	defffe04 	addi	sp,sp,-8
 1005d60:	008005c4 	movi	r2,23
 1005d64:	dc000015 	stw	r16,0(sp)
 1005d68:	dfc00115 	stw	ra,4(sp)
 1005d6c:	2021883a 	mov	r16,r4
 1005d70:	11000c16 	blt	r2,r4,1005da4 <_mprec_log10+0x48>
 1005d74:	200490fa 	slli	r2,r4,3
 1005d78:	00c04074 	movhi	r3,257
 1005d7c:	18f35004 	addi	r3,r3,-12992
 1005d80:	10c5883a 	add	r2,r2,r3
 1005d84:	12400117 	ldw	r9,4(r2)
 1005d88:	12000017 	ldw	r8,0(r2)
 1005d8c:	4807883a 	mov	r3,r9
 1005d90:	4005883a 	mov	r2,r8
 1005d94:	dfc00117 	ldw	ra,4(sp)
 1005d98:	dc000017 	ldw	r16,0(sp)
 1005d9c:	dec00204 	addi	sp,sp,8
 1005da0:	f800283a 	ret
 1005da4:	0011883a 	mov	r8,zero
 1005da8:	024ffc34 	movhi	r9,16368
 1005dac:	0005883a 	mov	r2,zero
 1005db0:	00d00934 	movhi	r3,16420
 1005db4:	480b883a 	mov	r5,r9
 1005db8:	4009883a 	mov	r4,r8
 1005dbc:	180f883a 	mov	r7,r3
 1005dc0:	100d883a 	mov	r6,r2
 1005dc4:	10089300 	call	1008930 <__muldf3>
 1005dc8:	843fffc4 	addi	r16,r16,-1
 1005dcc:	1011883a 	mov	r8,r2
 1005dd0:	1813883a 	mov	r9,r3
 1005dd4:	803ff51e 	bne	r16,zero,1005dac <_mprec_log10+0x50>
 1005dd8:	4005883a 	mov	r2,r8
 1005ddc:	4807883a 	mov	r3,r9
 1005de0:	dfc00117 	ldw	ra,4(sp)
 1005de4:	dc000017 	ldw	r16,0(sp)
 1005de8:	dec00204 	addi	sp,sp,8
 1005dec:	f800283a 	ret

01005df0 <__copybits>:
 1005df0:	297fffc4 	addi	r5,r5,-1
 1005df4:	30800417 	ldw	r2,16(r6)
 1005df8:	280bd17a 	srai	r5,r5,5
 1005dfc:	31800504 	addi	r6,r6,20
 1005e00:	1085883a 	add	r2,r2,r2
 1005e04:	294b883a 	add	r5,r5,r5
 1005e08:	294b883a 	add	r5,r5,r5
 1005e0c:	1085883a 	add	r2,r2,r2
 1005e10:	290b883a 	add	r5,r5,r4
 1005e14:	3087883a 	add	r3,r6,r2
 1005e18:	29400104 	addi	r5,r5,4
 1005e1c:	30c0052e 	bgeu	r6,r3,1005e34 <__copybits+0x44>
 1005e20:	30800017 	ldw	r2,0(r6)
 1005e24:	31800104 	addi	r6,r6,4
 1005e28:	20800015 	stw	r2,0(r4)
 1005e2c:	21000104 	addi	r4,r4,4
 1005e30:	30fffb36 	bltu	r6,r3,1005e20 <__copybits+0x30>
 1005e34:	2140032e 	bgeu	r4,r5,1005e44 <__copybits+0x54>
 1005e38:	20000015 	stw	zero,0(r4)
 1005e3c:	21000104 	addi	r4,r4,4
 1005e40:	217ffd36 	bltu	r4,r5,1005e38 <__copybits+0x48>
 1005e44:	f800283a 	ret

01005e48 <__any_on>:
 1005e48:	20800417 	ldw	r2,16(r4)
 1005e4c:	2807d17a 	srai	r3,r5,5
 1005e50:	21000504 	addi	r4,r4,20
 1005e54:	10c00d0e 	bge	r2,r3,1005e8c <__any_on+0x44>
 1005e58:	1085883a 	add	r2,r2,r2
 1005e5c:	1085883a 	add	r2,r2,r2
 1005e60:	208d883a 	add	r6,r4,r2
 1005e64:	2180182e 	bgeu	r4,r6,1005ec8 <__any_on+0x80>
 1005e68:	30bfff17 	ldw	r2,-4(r6)
 1005e6c:	30ffff04 	addi	r3,r6,-4
 1005e70:	1000041e 	bne	r2,zero,1005e84 <__any_on+0x3c>
 1005e74:	20c0142e 	bgeu	r4,r3,1005ec8 <__any_on+0x80>
 1005e78:	18ffff04 	addi	r3,r3,-4
 1005e7c:	18800017 	ldw	r2,0(r3)
 1005e80:	103ffc26 	beq	r2,zero,1005e74 <__any_on+0x2c>
 1005e84:	00800044 	movi	r2,1
 1005e88:	f800283a 	ret
 1005e8c:	18800a0e 	bge	r3,r2,1005eb8 <__any_on+0x70>
 1005e90:	294007cc 	andi	r5,r5,31
 1005e94:	28000826 	beq	r5,zero,1005eb8 <__any_on+0x70>
 1005e98:	18c5883a 	add	r2,r3,r3
 1005e9c:	1085883a 	add	r2,r2,r2
 1005ea0:	208d883a 	add	r6,r4,r2
 1005ea4:	30c00017 	ldw	r3,0(r6)
 1005ea8:	1944d83a 	srl	r2,r3,r5
 1005eac:	1144983a 	sll	r2,r2,r5
 1005eb0:	18bff41e 	bne	r3,r2,1005e84 <__any_on+0x3c>
 1005eb4:	003feb06 	br	1005e64 <__any_on+0x1c>
 1005eb8:	18c5883a 	add	r2,r3,r3
 1005ebc:	1085883a 	add	r2,r2,r2
 1005ec0:	208d883a 	add	r6,r4,r2
 1005ec4:	003fe706 	br	1005e64 <__any_on+0x1c>
 1005ec8:	0005883a 	mov	r2,zero
 1005ecc:	f800283a 	ret

01005ed0 <_Balloc>:
 1005ed0:	20c01317 	ldw	r3,76(r4)
 1005ed4:	defffb04 	addi	sp,sp,-20
 1005ed8:	dcc00315 	stw	r19,12(sp)
 1005edc:	dc800215 	stw	r18,8(sp)
 1005ee0:	dfc00415 	stw	ra,16(sp)
 1005ee4:	2825883a 	mov	r18,r5
 1005ee8:	dc400115 	stw	r17,4(sp)
 1005eec:	dc000015 	stw	r16,0(sp)
 1005ef0:	2027883a 	mov	r19,r4
 1005ef4:	01800404 	movi	r6,16
 1005ef8:	01400104 	movi	r5,4
 1005efc:	18001726 	beq	r3,zero,1005f5c <_Balloc+0x8c>
 1005f00:	01400044 	movi	r5,1
 1005f04:	9485883a 	add	r2,r18,r18
 1005f08:	2ca2983a 	sll	r17,r5,r18
 1005f0c:	1085883a 	add	r2,r2,r2
 1005f10:	10c7883a 	add	r3,r2,r3
 1005f14:	1c000017 	ldw	r16,0(r3)
 1005f18:	8c4d883a 	add	r6,r17,r17
 1005f1c:	318d883a 	add	r6,r6,r6
 1005f20:	9809883a 	mov	r4,r19
 1005f24:	31800504 	addi	r6,r6,20
 1005f28:	80001226 	beq	r16,zero,1005f74 <_Balloc+0xa4>
 1005f2c:	80800017 	ldw	r2,0(r16)
 1005f30:	18800015 	stw	r2,0(r3)
 1005f34:	80000415 	stw	zero,16(r16)
 1005f38:	80000315 	stw	zero,12(r16)
 1005f3c:	8005883a 	mov	r2,r16
 1005f40:	dfc00417 	ldw	ra,16(sp)
 1005f44:	dcc00317 	ldw	r19,12(sp)
 1005f48:	dc800217 	ldw	r18,8(sp)
 1005f4c:	dc400117 	ldw	r17,4(sp)
 1005f50:	dc000017 	ldw	r16,0(sp)
 1005f54:	dec00504 	addi	sp,sp,20
 1005f58:	f800283a 	ret
 1005f5c:	10073300 	call	1007330 <_calloc_r>
 1005f60:	1007883a 	mov	r3,r2
 1005f64:	0021883a 	mov	r16,zero
 1005f68:	98801315 	stw	r2,76(r19)
 1005f6c:	103fe41e 	bne	r2,zero,1005f00 <_Balloc+0x30>
 1005f70:	003ff206 	br	1005f3c <_Balloc+0x6c>
 1005f74:	10073300 	call	1007330 <_calloc_r>
 1005f78:	103ff026 	beq	r2,zero,1005f3c <_Balloc+0x6c>
 1005f7c:	1021883a 	mov	r16,r2
 1005f80:	14800115 	stw	r18,4(r2)
 1005f84:	14400215 	stw	r17,8(r2)
 1005f88:	003fea06 	br	1005f34 <_Balloc+0x64>

01005f8c <__d2b>:
 1005f8c:	defff504 	addi	sp,sp,-44
 1005f90:	dcc00515 	stw	r19,20(sp)
 1005f94:	04c00044 	movi	r19,1
 1005f98:	dc000215 	stw	r16,8(sp)
 1005f9c:	2821883a 	mov	r16,r5
 1005fa0:	980b883a 	mov	r5,r19
 1005fa4:	ddc00915 	stw	r23,36(sp)
 1005fa8:	dd800815 	stw	r22,32(sp)
 1005fac:	dd400715 	stw	r21,28(sp)
 1005fb0:	dd000615 	stw	r20,24(sp)
 1005fb4:	dc800415 	stw	r18,16(sp)
 1005fb8:	dc400315 	stw	r17,12(sp)
 1005fbc:	dfc00a15 	stw	ra,40(sp)
 1005fc0:	3023883a 	mov	r17,r6
 1005fc4:	382d883a 	mov	r22,r7
 1005fc8:	ddc00b17 	ldw	r23,44(sp)
 1005fcc:	1005ed00 	call	1005ed0 <_Balloc>
 1005fd0:	1025883a 	mov	r18,r2
 1005fd4:	00a00034 	movhi	r2,32768
 1005fd8:	10bfffc4 	addi	r2,r2,-1
 1005fdc:	8888703a 	and	r4,r17,r2
 1005fe0:	202ad53a 	srli	r21,r4,20
 1005fe4:	00800434 	movhi	r2,16
 1005fe8:	10bfffc4 	addi	r2,r2,-1
 1005fec:	8886703a 	and	r3,r17,r2
 1005ff0:	a829003a 	cmpeq	r20,r21,zero
 1005ff4:	800b883a 	mov	r5,r16
 1005ff8:	d8c00115 	stw	r3,4(sp)
 1005ffc:	94000504 	addi	r16,r18,20
 1006000:	a000021e 	bne	r20,zero,100600c <__d2b+0x80>
 1006004:	18c00434 	orhi	r3,r3,16
 1006008:	d8c00115 	stw	r3,4(sp)
 100600c:	28002726 	beq	r5,zero,10060ac <__d2b+0x120>
 1006010:	d809883a 	mov	r4,sp
 1006014:	d9400015 	stw	r5,0(sp)
 1006018:	10059e80 	call	10059e8 <__lo0bits>
 100601c:	100d883a 	mov	r6,r2
 1006020:	10003526 	beq	r2,zero,10060f8 <__d2b+0x16c>
 1006024:	d8c00117 	ldw	r3,4(sp)
 1006028:	00800804 	movi	r2,32
 100602c:	1185c83a 	sub	r2,r2,r6
 1006030:	d9000017 	ldw	r4,0(sp)
 1006034:	1886983a 	sll	r3,r3,r2
 1006038:	1906b03a 	or	r3,r3,r4
 100603c:	90c00515 	stw	r3,20(r18)
 1006040:	d8c00117 	ldw	r3,4(sp)
 1006044:	1986d83a 	srl	r3,r3,r6
 1006048:	d8c00115 	stw	r3,4(sp)
 100604c:	180b003a 	cmpeq	r5,r3,zero
 1006050:	00800084 	movi	r2,2
 1006054:	114bc83a 	sub	r5,r2,r5
 1006058:	80c00115 	stw	r3,4(r16)
 100605c:	91400415 	stw	r5,16(r18)
 1006060:	a0001a1e 	bne	r20,zero,10060cc <__d2b+0x140>
 1006064:	3545883a 	add	r2,r6,r21
 1006068:	10bef344 	addi	r2,r2,-1075
 100606c:	00c00d44 	movi	r3,53
 1006070:	b0800015 	stw	r2,0(r22)
 1006074:	1987c83a 	sub	r3,r3,r6
 1006078:	b8c00015 	stw	r3,0(r23)
 100607c:	9005883a 	mov	r2,r18
 1006080:	dfc00a17 	ldw	ra,40(sp)
 1006084:	ddc00917 	ldw	r23,36(sp)
 1006088:	dd800817 	ldw	r22,32(sp)
 100608c:	dd400717 	ldw	r21,28(sp)
 1006090:	dd000617 	ldw	r20,24(sp)
 1006094:	dcc00517 	ldw	r19,20(sp)
 1006098:	dc800417 	ldw	r18,16(sp)
 100609c:	dc400317 	ldw	r17,12(sp)
 10060a0:	dc000217 	ldw	r16,8(sp)
 10060a4:	dec00b04 	addi	sp,sp,44
 10060a8:	f800283a 	ret
 10060ac:	d9000104 	addi	r4,sp,4
 10060b0:	10059e80 	call	10059e8 <__lo0bits>
 10060b4:	11800804 	addi	r6,r2,32
 10060b8:	d8800117 	ldw	r2,4(sp)
 10060bc:	94c00415 	stw	r19,16(r18)
 10060c0:	980b883a 	mov	r5,r19
 10060c4:	90800515 	stw	r2,20(r18)
 10060c8:	a03fe626 	beq	r20,zero,1006064 <__d2b+0xd8>
 10060cc:	2945883a 	add	r2,r5,r5
 10060d0:	1085883a 	add	r2,r2,r2
 10060d4:	1405883a 	add	r2,r2,r16
 10060d8:	113fff17 	ldw	r4,-4(r2)
 10060dc:	30fef384 	addi	r3,r6,-1074
 10060e0:	2820917a 	slli	r16,r5,5
 10060e4:	b0c00015 	stw	r3,0(r22)
 10060e8:	10059780 	call	1005978 <__hi0bits>
 10060ec:	80a1c83a 	sub	r16,r16,r2
 10060f0:	bc000015 	stw	r16,0(r23)
 10060f4:	003fe106 	br	100607c <__d2b+0xf0>
 10060f8:	d8800017 	ldw	r2,0(sp)
 10060fc:	90800515 	stw	r2,20(r18)
 1006100:	d8c00117 	ldw	r3,4(sp)
 1006104:	003fd106 	br	100604c <__d2b+0xc0>

01006108 <__mdiff>:
 1006108:	defffb04 	addi	sp,sp,-20
 100610c:	dc000015 	stw	r16,0(sp)
 1006110:	2821883a 	mov	r16,r5
 1006114:	dc800215 	stw	r18,8(sp)
 1006118:	300b883a 	mov	r5,r6
 100611c:	2025883a 	mov	r18,r4
 1006120:	8009883a 	mov	r4,r16
 1006124:	dc400115 	stw	r17,4(sp)
 1006128:	dfc00415 	stw	ra,16(sp)
 100612c:	dcc00315 	stw	r19,12(sp)
 1006130:	3023883a 	mov	r17,r6
 1006134:	1005aac0 	call	1005aac <__mcmp>
 1006138:	10004226 	beq	r2,zero,1006244 <__mdiff+0x13c>
 100613c:	10005016 	blt	r2,zero,1006280 <__mdiff+0x178>
 1006140:	0027883a 	mov	r19,zero
 1006144:	81400117 	ldw	r5,4(r16)
 1006148:	9009883a 	mov	r4,r18
 100614c:	1005ed00 	call	1005ed0 <_Balloc>
 1006150:	1019883a 	mov	r12,r2
 1006154:	82800417 	ldw	r10,16(r16)
 1006158:	88800417 	ldw	r2,16(r17)
 100615c:	81800504 	addi	r6,r16,20
 1006160:	5287883a 	add	r3,r10,r10
 1006164:	1085883a 	add	r2,r2,r2
 1006168:	18c7883a 	add	r3,r3,r3
 100616c:	1085883a 	add	r2,r2,r2
 1006170:	8a000504 	addi	r8,r17,20
 1006174:	64c00315 	stw	r19,12(r12)
 1006178:	30db883a 	add	r13,r6,r3
 100617c:	4097883a 	add	r11,r8,r2
 1006180:	61c00504 	addi	r7,r12,20
 1006184:	0013883a 	mov	r9,zero
 1006188:	31000017 	ldw	r4,0(r6)
 100618c:	41400017 	ldw	r5,0(r8)
 1006190:	42000104 	addi	r8,r8,4
 1006194:	20bfffcc 	andi	r2,r4,65535
 1006198:	28ffffcc 	andi	r3,r5,65535
 100619c:	10c5c83a 	sub	r2,r2,r3
 10061a0:	1245883a 	add	r2,r2,r9
 10061a4:	2008d43a 	srli	r4,r4,16
 10061a8:	280ad43a 	srli	r5,r5,16
 10061ac:	1007d43a 	srai	r3,r2,16
 10061b0:	3880000d 	sth	r2,0(r7)
 10061b4:	2149c83a 	sub	r4,r4,r5
 10061b8:	20c9883a 	add	r4,r4,r3
 10061bc:	3900008d 	sth	r4,2(r7)
 10061c0:	31800104 	addi	r6,r6,4
 10061c4:	39c00104 	addi	r7,r7,4
 10061c8:	2013d43a 	srai	r9,r4,16
 10061cc:	42ffee36 	bltu	r8,r11,1006188 <__mdiff+0x80>
 10061d0:	33400c2e 	bgeu	r6,r13,1006204 <__mdiff+0xfc>
 10061d4:	30800017 	ldw	r2,0(r6)
 10061d8:	31800104 	addi	r6,r6,4
 10061dc:	10ffffcc 	andi	r3,r2,65535
 10061e0:	1a47883a 	add	r3,r3,r9
 10061e4:	1004d43a 	srli	r2,r2,16
 10061e8:	1809d43a 	srai	r4,r3,16
 10061ec:	38c0000d 	sth	r3,0(r7)
 10061f0:	1105883a 	add	r2,r2,r4
 10061f4:	3880008d 	sth	r2,2(r7)
 10061f8:	1013d43a 	srai	r9,r2,16
 10061fc:	39c00104 	addi	r7,r7,4
 1006200:	337ff436 	bltu	r6,r13,10061d4 <__mdiff+0xcc>
 1006204:	38bfff17 	ldw	r2,-4(r7)
 1006208:	38ffff04 	addi	r3,r7,-4
 100620c:	1000041e 	bne	r2,zero,1006220 <__mdiff+0x118>
 1006210:	18ffff04 	addi	r3,r3,-4
 1006214:	18800017 	ldw	r2,0(r3)
 1006218:	52bfffc4 	addi	r10,r10,-1
 100621c:	103ffc26 	beq	r2,zero,1006210 <__mdiff+0x108>
 1006220:	6005883a 	mov	r2,r12
 1006224:	62800415 	stw	r10,16(r12)
 1006228:	dfc00417 	ldw	ra,16(sp)
 100622c:	dcc00317 	ldw	r19,12(sp)
 1006230:	dc800217 	ldw	r18,8(sp)
 1006234:	dc400117 	ldw	r17,4(sp)
 1006238:	dc000017 	ldw	r16,0(sp)
 100623c:	dec00504 	addi	sp,sp,20
 1006240:	f800283a 	ret
 1006244:	9009883a 	mov	r4,r18
 1006248:	000b883a 	mov	r5,zero
 100624c:	1005ed00 	call	1005ed0 <_Balloc>
 1006250:	1019883a 	mov	r12,r2
 1006254:	00800044 	movi	r2,1
 1006258:	60800415 	stw	r2,16(r12)
 100625c:	6005883a 	mov	r2,r12
 1006260:	60000515 	stw	zero,20(r12)
 1006264:	dfc00417 	ldw	ra,16(sp)
 1006268:	dcc00317 	ldw	r19,12(sp)
 100626c:	dc800217 	ldw	r18,8(sp)
 1006270:	dc400117 	ldw	r17,4(sp)
 1006274:	dc000017 	ldw	r16,0(sp)
 1006278:	dec00504 	addi	sp,sp,20
 100627c:	f800283a 	ret
 1006280:	880d883a 	mov	r6,r17
 1006284:	04c00044 	movi	r19,1
 1006288:	8023883a 	mov	r17,r16
 100628c:	3021883a 	mov	r16,r6
 1006290:	003fac06 	br	1006144 <__mdiff+0x3c>

01006294 <__lshift>:
 1006294:	defff904 	addi	sp,sp,-28
 1006298:	28800417 	ldw	r2,16(r5)
 100629c:	dc000015 	stw	r16,0(sp)
 10062a0:	3021d17a 	srai	r16,r6,5
 10062a4:	28c00217 	ldw	r3,8(r5)
 10062a8:	10800044 	addi	r2,r2,1
 10062ac:	dc400115 	stw	r17,4(sp)
 10062b0:	80a3883a 	add	r17,r16,r2
 10062b4:	dd400515 	stw	r21,20(sp)
 10062b8:	dd000415 	stw	r20,16(sp)
 10062bc:	dc800215 	stw	r18,8(sp)
 10062c0:	dfc00615 	stw	ra,24(sp)
 10062c4:	2825883a 	mov	r18,r5
 10062c8:	dcc00315 	stw	r19,12(sp)
 10062cc:	3029883a 	mov	r20,r6
 10062d0:	202b883a 	mov	r21,r4
 10062d4:	29400117 	ldw	r5,4(r5)
 10062d8:	1c40030e 	bge	r3,r17,10062e8 <__lshift+0x54>
 10062dc:	18c7883a 	add	r3,r3,r3
 10062e0:	29400044 	addi	r5,r5,1
 10062e4:	1c7ffd16 	blt	r3,r17,10062dc <__lshift+0x48>
 10062e8:	a809883a 	mov	r4,r21
 10062ec:	1005ed00 	call	1005ed0 <_Balloc>
 10062f0:	1027883a 	mov	r19,r2
 10062f4:	11400504 	addi	r5,r2,20
 10062f8:	0400090e 	bge	zero,r16,1006320 <__lshift+0x8c>
 10062fc:	2805883a 	mov	r2,r5
 1006300:	0007883a 	mov	r3,zero
 1006304:	18c00044 	addi	r3,r3,1
 1006308:	10000015 	stw	zero,0(r2)
 100630c:	10800104 	addi	r2,r2,4
 1006310:	80fffc1e 	bne	r16,r3,1006304 <__lshift+0x70>
 1006314:	8405883a 	add	r2,r16,r16
 1006318:	1085883a 	add	r2,r2,r2
 100631c:	288b883a 	add	r5,r5,r2
 1006320:	90800417 	ldw	r2,16(r18)
 1006324:	91000504 	addi	r4,r18,20
 1006328:	a18007cc 	andi	r6,r20,31
 100632c:	1085883a 	add	r2,r2,r2
 1006330:	1085883a 	add	r2,r2,r2
 1006334:	208f883a 	add	r7,r4,r2
 1006338:	30001e26 	beq	r6,zero,10063b4 <__lshift+0x120>
 100633c:	00800804 	movi	r2,32
 1006340:	1191c83a 	sub	r8,r2,r6
 1006344:	0007883a 	mov	r3,zero
 1006348:	20800017 	ldw	r2,0(r4)
 100634c:	1184983a 	sll	r2,r2,r6
 1006350:	1884b03a 	or	r2,r3,r2
 1006354:	28800015 	stw	r2,0(r5)
 1006358:	20c00017 	ldw	r3,0(r4)
 100635c:	21000104 	addi	r4,r4,4
 1006360:	29400104 	addi	r5,r5,4
 1006364:	1a06d83a 	srl	r3,r3,r8
 1006368:	21fff736 	bltu	r4,r7,1006348 <__lshift+0xb4>
 100636c:	28c00015 	stw	r3,0(r5)
 1006370:	18000126 	beq	r3,zero,1006378 <__lshift+0xe4>
 1006374:	8c400044 	addi	r17,r17,1
 1006378:	88bfffc4 	addi	r2,r17,-1
 100637c:	98800415 	stw	r2,16(r19)
 1006380:	a809883a 	mov	r4,r21
 1006384:	900b883a 	mov	r5,r18
 1006388:	10059500 	call	1005950 <_Bfree>
 100638c:	9805883a 	mov	r2,r19
 1006390:	dfc00617 	ldw	ra,24(sp)
 1006394:	dd400517 	ldw	r21,20(sp)
 1006398:	dd000417 	ldw	r20,16(sp)
 100639c:	dcc00317 	ldw	r19,12(sp)
 10063a0:	dc800217 	ldw	r18,8(sp)
 10063a4:	dc400117 	ldw	r17,4(sp)
 10063a8:	dc000017 	ldw	r16,0(sp)
 10063ac:	dec00704 	addi	sp,sp,28
 10063b0:	f800283a 	ret
 10063b4:	20800017 	ldw	r2,0(r4)
 10063b8:	21000104 	addi	r4,r4,4
 10063bc:	28800015 	stw	r2,0(r5)
 10063c0:	29400104 	addi	r5,r5,4
 10063c4:	21ffec2e 	bgeu	r4,r7,1006378 <__lshift+0xe4>
 10063c8:	20800017 	ldw	r2,0(r4)
 10063cc:	21000104 	addi	r4,r4,4
 10063d0:	28800015 	stw	r2,0(r5)
 10063d4:	29400104 	addi	r5,r5,4
 10063d8:	21fff636 	bltu	r4,r7,10063b4 <__lshift+0x120>
 10063dc:	003fe606 	br	1006378 <__lshift+0xe4>

010063e0 <__multiply>:
 10063e0:	defff004 	addi	sp,sp,-64
 10063e4:	dc800815 	stw	r18,32(sp)
 10063e8:	dc400715 	stw	r17,28(sp)
 10063ec:	2c800417 	ldw	r18,16(r5)
 10063f0:	34400417 	ldw	r17,16(r6)
 10063f4:	dcc00915 	stw	r19,36(sp)
 10063f8:	dc000615 	stw	r16,24(sp)
 10063fc:	dfc00f15 	stw	ra,60(sp)
 1006400:	df000e15 	stw	fp,56(sp)
 1006404:	ddc00d15 	stw	r23,52(sp)
 1006408:	dd800c15 	stw	r22,48(sp)
 100640c:	dd400b15 	stw	r21,44(sp)
 1006410:	dd000a15 	stw	r20,40(sp)
 1006414:	2821883a 	mov	r16,r5
 1006418:	3027883a 	mov	r19,r6
 100641c:	9440040e 	bge	r18,r17,1006430 <__multiply+0x50>
 1006420:	8825883a 	mov	r18,r17
 1006424:	2c400417 	ldw	r17,16(r5)
 1006428:	2827883a 	mov	r19,r5
 100642c:	3021883a 	mov	r16,r6
 1006430:	80800217 	ldw	r2,8(r16)
 1006434:	9447883a 	add	r3,r18,r17
 1006438:	d8c00415 	stw	r3,16(sp)
 100643c:	81400117 	ldw	r5,4(r16)
 1006440:	10c0010e 	bge	r2,r3,1006448 <__multiply+0x68>
 1006444:	29400044 	addi	r5,r5,1
 1006448:	1005ed00 	call	1005ed0 <_Balloc>
 100644c:	d8800515 	stw	r2,20(sp)
 1006450:	d9000417 	ldw	r4,16(sp)
 1006454:	d8c00517 	ldw	r3,20(sp)
 1006458:	2105883a 	add	r2,r4,r4
 100645c:	1085883a 	add	r2,r2,r2
 1006460:	19000504 	addi	r4,r3,20
 1006464:	2085883a 	add	r2,r4,r2
 1006468:	d8800315 	stw	r2,12(sp)
 100646c:	2080052e 	bgeu	r4,r2,1006484 <__multiply+0xa4>
 1006470:	2005883a 	mov	r2,r4
 1006474:	d8c00317 	ldw	r3,12(sp)
 1006478:	10000015 	stw	zero,0(r2)
 100647c:	10800104 	addi	r2,r2,4
 1006480:	10fffc36 	bltu	r2,r3,1006474 <__multiply+0x94>
 1006484:	8c45883a 	add	r2,r17,r17
 1006488:	9487883a 	add	r3,r18,r18
 100648c:	9dc00504 	addi	r23,r19,20
 1006490:	1085883a 	add	r2,r2,r2
 1006494:	84000504 	addi	r16,r16,20
 1006498:	18c7883a 	add	r3,r3,r3
 100649c:	b885883a 	add	r2,r23,r2
 10064a0:	dc000015 	stw	r16,0(sp)
 10064a4:	d8800215 	stw	r2,8(sp)
 10064a8:	80f9883a 	add	fp,r16,r3
 10064ac:	b880432e 	bgeu	r23,r2,10065bc <__multiply+0x1dc>
 10064b0:	d9000115 	stw	r4,4(sp)
 10064b4:	b9000017 	ldw	r4,0(r23)
 10064b8:	253fffcc 	andi	r20,r4,65535
 10064bc:	a0001a26 	beq	r20,zero,1006528 <__multiply+0x148>
 10064c0:	dcc00017 	ldw	r19,0(sp)
 10064c4:	dc800117 	ldw	r18,4(sp)
 10064c8:	002b883a 	mov	r21,zero
 10064cc:	9c400017 	ldw	r17,0(r19)
 10064d0:	94000017 	ldw	r16,0(r18)
 10064d4:	a009883a 	mov	r4,r20
 10064d8:	897fffcc 	andi	r5,r17,65535
 10064dc:	10096a40 	call	10096a4 <__mulsi3>
 10064e0:	880ad43a 	srli	r5,r17,16
 10064e4:	80ffffcc 	andi	r3,r16,65535
 10064e8:	a8c7883a 	add	r3,r21,r3
 10064ec:	a009883a 	mov	r4,r20
 10064f0:	10e3883a 	add	r17,r2,r3
 10064f4:	8020d43a 	srli	r16,r16,16
 10064f8:	10096a40 	call	10096a4 <__mulsi3>
 10064fc:	8806d43a 	srli	r3,r17,16
 1006500:	1405883a 	add	r2,r2,r16
 1006504:	9cc00104 	addi	r19,r19,4
 1006508:	1887883a 	add	r3,r3,r2
 100650c:	90c0008d 	sth	r3,2(r18)
 1006510:	9440000d 	sth	r17,0(r18)
 1006514:	182ad43a 	srli	r21,r3,16
 1006518:	94800104 	addi	r18,r18,4
 100651c:	9f3feb36 	bltu	r19,fp,10064cc <__multiply+0xec>
 1006520:	95400015 	stw	r21,0(r18)
 1006524:	b9000017 	ldw	r4,0(r23)
 1006528:	202ad43a 	srli	r21,r4,16
 100652c:	a8001c26 	beq	r21,zero,10065a0 <__multiply+0x1c0>
 1006530:	d9000117 	ldw	r4,4(sp)
 1006534:	dd000017 	ldw	r20,0(sp)
 1006538:	002d883a 	mov	r22,zero
 100653c:	24c00017 	ldw	r19,0(r4)
 1006540:	2025883a 	mov	r18,r4
 1006544:	9823883a 	mov	r17,r19
 1006548:	a4000017 	ldw	r16,0(r20)
 100654c:	a809883a 	mov	r4,r21
 1006550:	a5000104 	addi	r20,r20,4
 1006554:	817fffcc 	andi	r5,r16,65535
 1006558:	10096a40 	call	10096a4 <__mulsi3>
 100655c:	8806d43a 	srli	r3,r17,16
 1006560:	800ad43a 	srli	r5,r16,16
 1006564:	94c0000d 	sth	r19,0(r18)
 1006568:	b0c7883a 	add	r3,r22,r3
 100656c:	10e1883a 	add	r16,r2,r3
 1006570:	9400008d 	sth	r16,2(r18)
 1006574:	a809883a 	mov	r4,r21
 1006578:	94800104 	addi	r18,r18,4
 100657c:	10096a40 	call	10096a4 <__mulsi3>
 1006580:	94400017 	ldw	r17,0(r18)
 1006584:	8020d43a 	srli	r16,r16,16
 1006588:	88ffffcc 	andi	r3,r17,65535
 100658c:	10c5883a 	add	r2,r2,r3
 1006590:	80a7883a 	add	r19,r16,r2
 1006594:	982cd43a 	srli	r22,r19,16
 1006598:	a73feb36 	bltu	r20,fp,1006548 <__multiply+0x168>
 100659c:	94c00015 	stw	r19,0(r18)
 10065a0:	d8800217 	ldw	r2,8(sp)
 10065a4:	bdc00104 	addi	r23,r23,4
 10065a8:	b880042e 	bgeu	r23,r2,10065bc <__multiply+0x1dc>
 10065ac:	d8c00117 	ldw	r3,4(sp)
 10065b0:	18c00104 	addi	r3,r3,4
 10065b4:	d8c00115 	stw	r3,4(sp)
 10065b8:	003fbe06 	br	10064b4 <__multiply+0xd4>
 10065bc:	d9000417 	ldw	r4,16(sp)
 10065c0:	01000c0e 	bge	zero,r4,10065f4 <__multiply+0x214>
 10065c4:	d8c00317 	ldw	r3,12(sp)
 10065c8:	18bfff17 	ldw	r2,-4(r3)
 10065cc:	18ffff04 	addi	r3,r3,-4
 10065d0:	10000326 	beq	r2,zero,10065e0 <__multiply+0x200>
 10065d4:	00000706 	br	10065f4 <__multiply+0x214>
 10065d8:	18800017 	ldw	r2,0(r3)
 10065dc:	1000051e 	bne	r2,zero,10065f4 <__multiply+0x214>
 10065e0:	d9000417 	ldw	r4,16(sp)
 10065e4:	18ffff04 	addi	r3,r3,-4
 10065e8:	213fffc4 	addi	r4,r4,-1
 10065ec:	d9000415 	stw	r4,16(sp)
 10065f0:	203ff91e 	bne	r4,zero,10065d8 <__multiply+0x1f8>
 10065f4:	d8800417 	ldw	r2,16(sp)
 10065f8:	d8c00517 	ldw	r3,20(sp)
 10065fc:	18800415 	stw	r2,16(r3)
 1006600:	1805883a 	mov	r2,r3
 1006604:	dfc00f17 	ldw	ra,60(sp)
 1006608:	df000e17 	ldw	fp,56(sp)
 100660c:	ddc00d17 	ldw	r23,52(sp)
 1006610:	dd800c17 	ldw	r22,48(sp)
 1006614:	dd400b17 	ldw	r21,44(sp)
 1006618:	dd000a17 	ldw	r20,40(sp)
 100661c:	dcc00917 	ldw	r19,36(sp)
 1006620:	dc800817 	ldw	r18,32(sp)
 1006624:	dc400717 	ldw	r17,28(sp)
 1006628:	dc000617 	ldw	r16,24(sp)
 100662c:	dec01004 	addi	sp,sp,64
 1006630:	f800283a 	ret

01006634 <__i2b>:
 1006634:	defffd04 	addi	sp,sp,-12
 1006638:	dc000015 	stw	r16,0(sp)
 100663c:	04000044 	movi	r16,1
 1006640:	dc800115 	stw	r18,4(sp)
 1006644:	2825883a 	mov	r18,r5
 1006648:	800b883a 	mov	r5,r16
 100664c:	dfc00215 	stw	ra,8(sp)
 1006650:	1005ed00 	call	1005ed0 <_Balloc>
 1006654:	14000415 	stw	r16,16(r2)
 1006658:	14800515 	stw	r18,20(r2)
 100665c:	dfc00217 	ldw	ra,8(sp)
 1006660:	dc800117 	ldw	r18,4(sp)
 1006664:	dc000017 	ldw	r16,0(sp)
 1006668:	dec00304 	addi	sp,sp,12
 100666c:	f800283a 	ret

01006670 <__multadd>:
 1006670:	defff604 	addi	sp,sp,-40
 1006674:	dd800615 	stw	r22,24(sp)
 1006678:	2d800417 	ldw	r22,16(r5)
 100667c:	df000815 	stw	fp,32(sp)
 1006680:	ddc00715 	stw	r23,28(sp)
 1006684:	dd400515 	stw	r21,20(sp)
 1006688:	dd000415 	stw	r20,16(sp)
 100668c:	dcc00315 	stw	r19,12(sp)
 1006690:	dc800215 	stw	r18,8(sp)
 1006694:	dfc00915 	stw	ra,36(sp)
 1006698:	dc400115 	stw	r17,4(sp)
 100669c:	dc000015 	stw	r16,0(sp)
 10066a0:	282f883a 	mov	r23,r5
 10066a4:	2039883a 	mov	fp,r4
 10066a8:	302b883a 	mov	r21,r6
 10066ac:	3829883a 	mov	r20,r7
 10066b0:	2c800504 	addi	r18,r5,20
 10066b4:	0027883a 	mov	r19,zero
 10066b8:	94400017 	ldw	r17,0(r18)
 10066bc:	a80b883a 	mov	r5,r21
 10066c0:	9cc00044 	addi	r19,r19,1
 10066c4:	893fffcc 	andi	r4,r17,65535
 10066c8:	10096a40 	call	10096a4 <__mulsi3>
 10066cc:	8808d43a 	srli	r4,r17,16
 10066d0:	1521883a 	add	r16,r2,r20
 10066d4:	a80b883a 	mov	r5,r21
 10066d8:	10096a40 	call	10096a4 <__mulsi3>
 10066dc:	8008d43a 	srli	r4,r16,16
 10066e0:	843fffcc 	andi	r16,r16,65535
 10066e4:	1105883a 	add	r2,r2,r4
 10066e8:	1006943a 	slli	r3,r2,16
 10066ec:	1028d43a 	srli	r20,r2,16
 10066f0:	1c07883a 	add	r3,r3,r16
 10066f4:	90c00015 	stw	r3,0(r18)
 10066f8:	94800104 	addi	r18,r18,4
 10066fc:	9dbfee16 	blt	r19,r22,10066b8 <__multadd+0x48>
 1006700:	a0000826 	beq	r20,zero,1006724 <__multadd+0xb4>
 1006704:	b8800217 	ldw	r2,8(r23)
 1006708:	b080130e 	bge	r22,r2,1006758 <__multadd+0xe8>
 100670c:	b585883a 	add	r2,r22,r22
 1006710:	1085883a 	add	r2,r2,r2
 1006714:	15c5883a 	add	r2,r2,r23
 1006718:	b0c00044 	addi	r3,r22,1
 100671c:	15000515 	stw	r20,20(r2)
 1006720:	b8c00415 	stw	r3,16(r23)
 1006724:	b805883a 	mov	r2,r23
 1006728:	dfc00917 	ldw	ra,36(sp)
 100672c:	df000817 	ldw	fp,32(sp)
 1006730:	ddc00717 	ldw	r23,28(sp)
 1006734:	dd800617 	ldw	r22,24(sp)
 1006738:	dd400517 	ldw	r21,20(sp)
 100673c:	dd000417 	ldw	r20,16(sp)
 1006740:	dcc00317 	ldw	r19,12(sp)
 1006744:	dc800217 	ldw	r18,8(sp)
 1006748:	dc400117 	ldw	r17,4(sp)
 100674c:	dc000017 	ldw	r16,0(sp)
 1006750:	dec00a04 	addi	sp,sp,40
 1006754:	f800283a 	ret
 1006758:	b9400117 	ldw	r5,4(r23)
 100675c:	e009883a 	mov	r4,fp
 1006760:	29400044 	addi	r5,r5,1
 1006764:	1005ed00 	call	1005ed0 <_Balloc>
 1006768:	b9800417 	ldw	r6,16(r23)
 100676c:	b9400304 	addi	r5,r23,12
 1006770:	11000304 	addi	r4,r2,12
 1006774:	318d883a 	add	r6,r6,r6
 1006778:	318d883a 	add	r6,r6,r6
 100677c:	31800204 	addi	r6,r6,8
 1006780:	1023883a 	mov	r17,r2
 1006784:	10057380 	call	1005738 <memcpy>
 1006788:	b80b883a 	mov	r5,r23
 100678c:	e009883a 	mov	r4,fp
 1006790:	10059500 	call	1005950 <_Bfree>
 1006794:	882f883a 	mov	r23,r17
 1006798:	003fdc06 	br	100670c <__multadd+0x9c>

0100679c <__pow5mult>:
 100679c:	defffa04 	addi	sp,sp,-24
 10067a0:	308000cc 	andi	r2,r6,3
 10067a4:	dd000415 	stw	r20,16(sp)
 10067a8:	dcc00315 	stw	r19,12(sp)
 10067ac:	dc000015 	stw	r16,0(sp)
 10067b0:	dfc00515 	stw	ra,20(sp)
 10067b4:	dc800215 	stw	r18,8(sp)
 10067b8:	dc400115 	stw	r17,4(sp)
 10067bc:	3021883a 	mov	r16,r6
 10067c0:	2027883a 	mov	r19,r4
 10067c4:	2829883a 	mov	r20,r5
 10067c8:	10002b1e 	bne	r2,zero,1006878 <__pow5mult+0xdc>
 10067cc:	8025d0ba 	srai	r18,r16,2
 10067d0:	90001b26 	beq	r18,zero,1006840 <__pow5mult+0xa4>
 10067d4:	9c001217 	ldw	r16,72(r19)
 10067d8:	8000081e 	bne	r16,zero,10067fc <__pow5mult+0x60>
 10067dc:	00003006 	br	10068a0 <__pow5mult+0x104>
 10067e0:	800b883a 	mov	r5,r16
 10067e4:	800d883a 	mov	r6,r16
 10067e8:	9809883a 	mov	r4,r19
 10067ec:	90001426 	beq	r18,zero,1006840 <__pow5mult+0xa4>
 10067f0:	80800017 	ldw	r2,0(r16)
 10067f4:	10001b26 	beq	r2,zero,1006864 <__pow5mult+0xc8>
 10067f8:	1021883a 	mov	r16,r2
 10067fc:	9080004c 	andi	r2,r18,1
 1006800:	1005003a 	cmpeq	r2,r2,zero
 1006804:	9025d07a 	srai	r18,r18,1
 1006808:	800d883a 	mov	r6,r16
 100680c:	9809883a 	mov	r4,r19
 1006810:	a00b883a 	mov	r5,r20
 1006814:	103ff21e 	bne	r2,zero,10067e0 <__pow5mult+0x44>
 1006818:	10063e00 	call	10063e0 <__multiply>
 100681c:	a00b883a 	mov	r5,r20
 1006820:	9809883a 	mov	r4,r19
 1006824:	1023883a 	mov	r17,r2
 1006828:	10059500 	call	1005950 <_Bfree>
 100682c:	8829883a 	mov	r20,r17
 1006830:	800b883a 	mov	r5,r16
 1006834:	800d883a 	mov	r6,r16
 1006838:	9809883a 	mov	r4,r19
 100683c:	903fec1e 	bne	r18,zero,10067f0 <__pow5mult+0x54>
 1006840:	a005883a 	mov	r2,r20
 1006844:	dfc00517 	ldw	ra,20(sp)
 1006848:	dd000417 	ldw	r20,16(sp)
 100684c:	dcc00317 	ldw	r19,12(sp)
 1006850:	dc800217 	ldw	r18,8(sp)
 1006854:	dc400117 	ldw	r17,4(sp)
 1006858:	dc000017 	ldw	r16,0(sp)
 100685c:	dec00604 	addi	sp,sp,24
 1006860:	f800283a 	ret
 1006864:	10063e00 	call	10063e0 <__multiply>
 1006868:	80800015 	stw	r2,0(r16)
 100686c:	1021883a 	mov	r16,r2
 1006870:	10000015 	stw	zero,0(r2)
 1006874:	003fe106 	br	10067fc <__pow5mult+0x60>
 1006878:	1085883a 	add	r2,r2,r2
 100687c:	00c04074 	movhi	r3,257
 1006880:	18f39604 	addi	r3,r3,-12712
 1006884:	1085883a 	add	r2,r2,r2
 1006888:	10c5883a 	add	r2,r2,r3
 100688c:	11bfff17 	ldw	r6,-4(r2)
 1006890:	000f883a 	mov	r7,zero
 1006894:	10066700 	call	1006670 <__multadd>
 1006898:	1029883a 	mov	r20,r2
 100689c:	003fcb06 	br	10067cc <__pow5mult+0x30>
 10068a0:	9809883a 	mov	r4,r19
 10068a4:	01409c44 	movi	r5,625
 10068a8:	10066340 	call	1006634 <__i2b>
 10068ac:	98801215 	stw	r2,72(r19)
 10068b0:	1021883a 	mov	r16,r2
 10068b4:	10000015 	stw	zero,0(r2)
 10068b8:	003fd006 	br	10067fc <__pow5mult+0x60>

010068bc <__s2b>:
 10068bc:	defff904 	addi	sp,sp,-28
 10068c0:	dcc00315 	stw	r19,12(sp)
 10068c4:	dc800215 	stw	r18,8(sp)
 10068c8:	2827883a 	mov	r19,r5
 10068cc:	2025883a 	mov	r18,r4
 10068d0:	01400244 	movi	r5,9
 10068d4:	39000204 	addi	r4,r7,8
 10068d8:	dd000415 	stw	r20,16(sp)
 10068dc:	dc400115 	stw	r17,4(sp)
 10068e0:	dfc00615 	stw	ra,24(sp)
 10068e4:	dd400515 	stw	r21,20(sp)
 10068e8:	dc000015 	stw	r16,0(sp)
 10068ec:	3829883a 	mov	r20,r7
 10068f0:	3023883a 	mov	r17,r6
 10068f4:	10095d40 	call	10095d4 <__divsi3>
 10068f8:	00c00044 	movi	r3,1
 10068fc:	1880350e 	bge	r3,r2,10069d4 <__s2b+0x118>
 1006900:	000b883a 	mov	r5,zero
 1006904:	18c7883a 	add	r3,r3,r3
 1006908:	29400044 	addi	r5,r5,1
 100690c:	18bffd16 	blt	r3,r2,1006904 <__s2b+0x48>
 1006910:	9009883a 	mov	r4,r18
 1006914:	1005ed00 	call	1005ed0 <_Balloc>
 1006918:	1011883a 	mov	r8,r2
 100691c:	d8800717 	ldw	r2,28(sp)
 1006920:	00c00044 	movi	r3,1
 1006924:	01800244 	movi	r6,9
 1006928:	40800515 	stw	r2,20(r8)
 100692c:	40c00415 	stw	r3,16(r8)
 1006930:	3440260e 	bge	r6,r17,10069cc <__s2b+0x110>
 1006934:	3021883a 	mov	r16,r6
 1006938:	99ab883a 	add	r21,r19,r6
 100693c:	9c05883a 	add	r2,r19,r16
 1006940:	11c00007 	ldb	r7,0(r2)
 1006944:	400b883a 	mov	r5,r8
 1006948:	9009883a 	mov	r4,r18
 100694c:	39fff404 	addi	r7,r7,-48
 1006950:	01800284 	movi	r6,10
 1006954:	10066700 	call	1006670 <__multadd>
 1006958:	84000044 	addi	r16,r16,1
 100695c:	1011883a 	mov	r8,r2
 1006960:	8c3ff61e 	bne	r17,r16,100693c <__s2b+0x80>
 1006964:	ac45883a 	add	r2,r21,r17
 1006968:	117ffe04 	addi	r5,r2,-8
 100696c:	880d883a 	mov	r6,r17
 1006970:	35000c0e 	bge	r6,r20,10069a4 <__s2b+0xe8>
 1006974:	a185c83a 	sub	r2,r20,r6
 1006978:	2821883a 	mov	r16,r5
 100697c:	28a3883a 	add	r17,r5,r2
 1006980:	81c00007 	ldb	r7,0(r16)
 1006984:	400b883a 	mov	r5,r8
 1006988:	9009883a 	mov	r4,r18
 100698c:	39fff404 	addi	r7,r7,-48
 1006990:	01800284 	movi	r6,10
 1006994:	10066700 	call	1006670 <__multadd>
 1006998:	84000044 	addi	r16,r16,1
 100699c:	1011883a 	mov	r8,r2
 10069a0:	847ff71e 	bne	r16,r17,1006980 <__s2b+0xc4>
 10069a4:	4005883a 	mov	r2,r8
 10069a8:	dfc00617 	ldw	ra,24(sp)
 10069ac:	dd400517 	ldw	r21,20(sp)
 10069b0:	dd000417 	ldw	r20,16(sp)
 10069b4:	dcc00317 	ldw	r19,12(sp)
 10069b8:	dc800217 	ldw	r18,8(sp)
 10069bc:	dc400117 	ldw	r17,4(sp)
 10069c0:	dc000017 	ldw	r16,0(sp)
 10069c4:	dec00704 	addi	sp,sp,28
 10069c8:	f800283a 	ret
 10069cc:	99400284 	addi	r5,r19,10
 10069d0:	003fe706 	br	1006970 <__s2b+0xb4>
 10069d4:	000b883a 	mov	r5,zero
 10069d8:	003fcd06 	br	1006910 <__s2b+0x54>

010069dc <_realloc_r>:
 10069dc:	defff404 	addi	sp,sp,-48
 10069e0:	dd800815 	stw	r22,32(sp)
 10069e4:	dc800415 	stw	r18,16(sp)
 10069e8:	dc400315 	stw	r17,12(sp)
 10069ec:	dfc00b15 	stw	ra,44(sp)
 10069f0:	df000a15 	stw	fp,40(sp)
 10069f4:	ddc00915 	stw	r23,36(sp)
 10069f8:	dd400715 	stw	r21,28(sp)
 10069fc:	dd000615 	stw	r20,24(sp)
 1006a00:	dcc00515 	stw	r19,20(sp)
 1006a04:	dc000215 	stw	r16,8(sp)
 1006a08:	2825883a 	mov	r18,r5
 1006a0c:	3023883a 	mov	r17,r6
 1006a10:	202d883a 	mov	r22,r4
 1006a14:	2800c926 	beq	r5,zero,1006d3c <_realloc_r+0x360>
 1006a18:	100a4280 	call	100a428 <__malloc_lock>
 1006a1c:	943ffe04 	addi	r16,r18,-8
 1006a20:	88c002c4 	addi	r3,r17,11
 1006a24:	00800584 	movi	r2,22
 1006a28:	82000117 	ldw	r8,4(r16)
 1006a2c:	10c01b2e 	bgeu	r2,r3,1006a9c <_realloc_r+0xc0>
 1006a30:	00bffe04 	movi	r2,-8
 1006a34:	188e703a 	and	r7,r3,r2
 1006a38:	3839883a 	mov	fp,r7
 1006a3c:	38001a16 	blt	r7,zero,1006aa8 <_realloc_r+0xcc>
 1006a40:	e4401936 	bltu	fp,r17,1006aa8 <_realloc_r+0xcc>
 1006a44:	013fff04 	movi	r4,-4
 1006a48:	4126703a 	and	r19,r8,r4
 1006a4c:	99c02616 	blt	r19,r7,1006ae8 <_realloc_r+0x10c>
 1006a50:	802b883a 	mov	r21,r16
 1006a54:	9829883a 	mov	r20,r19
 1006a58:	84000204 	addi	r16,r16,8
 1006a5c:	a80f883a 	mov	r7,r21
 1006a60:	a70dc83a 	sub	r6,r20,fp
 1006a64:	008003c4 	movi	r2,15
 1006a68:	1180c136 	bltu	r2,r6,1006d70 <_realloc_r+0x394>
 1006a6c:	38800117 	ldw	r2,4(r7)
 1006a70:	a549883a 	add	r4,r20,r21
 1006a74:	1080004c 	andi	r2,r2,1
 1006a78:	a084b03a 	or	r2,r20,r2
 1006a7c:	38800115 	stw	r2,4(r7)
 1006a80:	20c00117 	ldw	r3,4(r4)
 1006a84:	18c00054 	ori	r3,r3,1
 1006a88:	20c00115 	stw	r3,4(r4)
 1006a8c:	b009883a 	mov	r4,r22
 1006a90:	100a4480 	call	100a448 <__malloc_unlock>
 1006a94:	8023883a 	mov	r17,r16
 1006a98:	00000606 	br	1006ab4 <_realloc_r+0xd8>
 1006a9c:	01c00404 	movi	r7,16
 1006aa0:	3839883a 	mov	fp,r7
 1006aa4:	e47fe72e 	bgeu	fp,r17,1006a44 <_realloc_r+0x68>
 1006aa8:	00800304 	movi	r2,12
 1006aac:	0023883a 	mov	r17,zero
 1006ab0:	b0800015 	stw	r2,0(r22)
 1006ab4:	8805883a 	mov	r2,r17
 1006ab8:	dfc00b17 	ldw	ra,44(sp)
 1006abc:	df000a17 	ldw	fp,40(sp)
 1006ac0:	ddc00917 	ldw	r23,36(sp)
 1006ac4:	dd800817 	ldw	r22,32(sp)
 1006ac8:	dd400717 	ldw	r21,28(sp)
 1006acc:	dd000617 	ldw	r20,24(sp)
 1006ad0:	dcc00517 	ldw	r19,20(sp)
 1006ad4:	dc800417 	ldw	r18,16(sp)
 1006ad8:	dc400317 	ldw	r17,12(sp)
 1006adc:	dc000217 	ldw	r16,8(sp)
 1006ae0:	dec00c04 	addi	sp,sp,48
 1006ae4:	f800283a 	ret
 1006ae8:	00804074 	movhi	r2,257
 1006aec:	10b4f404 	addi	r2,r2,-11312
 1006af0:	12400217 	ldw	r9,8(r2)
 1006af4:	84cd883a 	add	r6,r16,r19
 1006af8:	802b883a 	mov	r21,r16
 1006afc:	3240b926 	beq	r6,r9,1006de4 <_realloc_r+0x408>
 1006b00:	31400117 	ldw	r5,4(r6)
 1006b04:	00bfff84 	movi	r2,-2
 1006b08:	2884703a 	and	r2,r5,r2
 1006b0c:	1185883a 	add	r2,r2,r6
 1006b10:	10c00117 	ldw	r3,4(r2)
 1006b14:	18c0004c 	andi	r3,r3,1
 1006b18:	1807003a 	cmpeq	r3,r3,zero
 1006b1c:	1800a326 	beq	r3,zero,1006dac <_realloc_r+0x3d0>
 1006b20:	2908703a 	and	r4,r5,r4
 1006b24:	9929883a 	add	r20,r19,r4
 1006b28:	a1c0a30e 	bge	r20,r7,1006db8 <_realloc_r+0x3dc>
 1006b2c:	4080004c 	andi	r2,r8,1
 1006b30:	1000551e 	bne	r2,zero,1006c88 <_realloc_r+0x2ac>
 1006b34:	80800017 	ldw	r2,0(r16)
 1006b38:	80afc83a 	sub	r23,r16,r2
 1006b3c:	b8c00117 	ldw	r3,4(r23)
 1006b40:	00bfff04 	movi	r2,-4
 1006b44:	1884703a 	and	r2,r3,r2
 1006b48:	30002e26 	beq	r6,zero,1006c04 <_realloc_r+0x228>
 1006b4c:	3240b926 	beq	r6,r9,1006e34 <_realloc_r+0x458>
 1006b50:	98a9883a 	add	r20,r19,r2
 1006b54:	2509883a 	add	r4,r4,r20
 1006b58:	d9000015 	stw	r4,0(sp)
 1006b5c:	21c02a16 	blt	r4,r7,1006c08 <_realloc_r+0x22c>
 1006b60:	30800317 	ldw	r2,12(r6)
 1006b64:	30c00217 	ldw	r3,8(r6)
 1006b68:	01400904 	movi	r5,36
 1006b6c:	99bfff04 	addi	r6,r19,-4
 1006b70:	18800315 	stw	r2,12(r3)
 1006b74:	10c00215 	stw	r3,8(r2)
 1006b78:	b9000317 	ldw	r4,12(r23)
 1006b7c:	b8800217 	ldw	r2,8(r23)
 1006b80:	b82b883a 	mov	r21,r23
 1006b84:	bc000204 	addi	r16,r23,8
 1006b88:	20800215 	stw	r2,8(r4)
 1006b8c:	11000315 	stw	r4,12(r2)
 1006b90:	2980e436 	bltu	r5,r6,1006f24 <_realloc_r+0x548>
 1006b94:	008004c4 	movi	r2,19
 1006b98:	9009883a 	mov	r4,r18
 1006b9c:	8011883a 	mov	r8,r16
 1006ba0:	11800f2e 	bgeu	r2,r6,1006be0 <_realloc_r+0x204>
 1006ba4:	90800017 	ldw	r2,0(r18)
 1006ba8:	ba000404 	addi	r8,r23,16
 1006bac:	91000204 	addi	r4,r18,8
 1006bb0:	b8800215 	stw	r2,8(r23)
 1006bb4:	90c00117 	ldw	r3,4(r18)
 1006bb8:	008006c4 	movi	r2,27
 1006bbc:	b8c00315 	stw	r3,12(r23)
 1006bc0:	1180072e 	bgeu	r2,r6,1006be0 <_realloc_r+0x204>
 1006bc4:	90c00217 	ldw	r3,8(r18)
 1006bc8:	ba000604 	addi	r8,r23,24
 1006bcc:	91000404 	addi	r4,r18,16
 1006bd0:	b8c00415 	stw	r3,16(r23)
 1006bd4:	90800317 	ldw	r2,12(r18)
 1006bd8:	b8800515 	stw	r2,20(r23)
 1006bdc:	3140e726 	beq	r6,r5,1006f7c <_realloc_r+0x5a0>
 1006be0:	20800017 	ldw	r2,0(r4)
 1006be4:	dd000017 	ldw	r20,0(sp)
 1006be8:	b80f883a 	mov	r7,r23
 1006bec:	40800015 	stw	r2,0(r8)
 1006bf0:	20c00117 	ldw	r3,4(r4)
 1006bf4:	40c00115 	stw	r3,4(r8)
 1006bf8:	20800217 	ldw	r2,8(r4)
 1006bfc:	40800215 	stw	r2,8(r8)
 1006c00:	003f9706 	br	1006a60 <_realloc_r+0x84>
 1006c04:	98a9883a 	add	r20,r19,r2
 1006c08:	a1c01f16 	blt	r20,r7,1006c88 <_realloc_r+0x2ac>
 1006c0c:	b8c00317 	ldw	r3,12(r23)
 1006c10:	b8800217 	ldw	r2,8(r23)
 1006c14:	99bfff04 	addi	r6,r19,-4
 1006c18:	01400904 	movi	r5,36
 1006c1c:	b82b883a 	mov	r21,r23
 1006c20:	18800215 	stw	r2,8(r3)
 1006c24:	10c00315 	stw	r3,12(r2)
 1006c28:	bc000204 	addi	r16,r23,8
 1006c2c:	2980c336 	bltu	r5,r6,1006f3c <_realloc_r+0x560>
 1006c30:	008004c4 	movi	r2,19
 1006c34:	9009883a 	mov	r4,r18
 1006c38:	8011883a 	mov	r8,r16
 1006c3c:	11800f2e 	bgeu	r2,r6,1006c7c <_realloc_r+0x2a0>
 1006c40:	90800017 	ldw	r2,0(r18)
 1006c44:	ba000404 	addi	r8,r23,16
 1006c48:	91000204 	addi	r4,r18,8
 1006c4c:	b8800215 	stw	r2,8(r23)
 1006c50:	90c00117 	ldw	r3,4(r18)
 1006c54:	008006c4 	movi	r2,27
 1006c58:	b8c00315 	stw	r3,12(r23)
 1006c5c:	1180072e 	bgeu	r2,r6,1006c7c <_realloc_r+0x2a0>
 1006c60:	90c00217 	ldw	r3,8(r18)
 1006c64:	ba000604 	addi	r8,r23,24
 1006c68:	91000404 	addi	r4,r18,16
 1006c6c:	b8c00415 	stw	r3,16(r23)
 1006c70:	90800317 	ldw	r2,12(r18)
 1006c74:	b8800515 	stw	r2,20(r23)
 1006c78:	3140c726 	beq	r6,r5,1006f98 <_realloc_r+0x5bc>
 1006c7c:	20800017 	ldw	r2,0(r4)
 1006c80:	b80f883a 	mov	r7,r23
 1006c84:	003fd906 	br	1006bec <_realloc_r+0x210>
 1006c88:	880b883a 	mov	r5,r17
 1006c8c:	b009883a 	mov	r4,r22
 1006c90:	1004f140 	call	1004f14 <_malloc_r>
 1006c94:	1023883a 	mov	r17,r2
 1006c98:	10002526 	beq	r2,zero,1006d30 <_realloc_r+0x354>
 1006c9c:	80800117 	ldw	r2,4(r16)
 1006ca0:	00ffff84 	movi	r3,-2
 1006ca4:	893ffe04 	addi	r4,r17,-8
 1006ca8:	10c4703a 	and	r2,r2,r3
 1006cac:	8085883a 	add	r2,r16,r2
 1006cb0:	20809526 	beq	r4,r2,1006f08 <_realloc_r+0x52c>
 1006cb4:	99bfff04 	addi	r6,r19,-4
 1006cb8:	01c00904 	movi	r7,36
 1006cbc:	39804536 	bltu	r7,r6,1006dd4 <_realloc_r+0x3f8>
 1006cc0:	008004c4 	movi	r2,19
 1006cc4:	9009883a 	mov	r4,r18
 1006cc8:	880b883a 	mov	r5,r17
 1006ccc:	11800f2e 	bgeu	r2,r6,1006d0c <_realloc_r+0x330>
 1006cd0:	90800017 	ldw	r2,0(r18)
 1006cd4:	89400204 	addi	r5,r17,8
 1006cd8:	91000204 	addi	r4,r18,8
 1006cdc:	88800015 	stw	r2,0(r17)
 1006ce0:	90c00117 	ldw	r3,4(r18)
 1006ce4:	008006c4 	movi	r2,27
 1006ce8:	88c00115 	stw	r3,4(r17)
 1006cec:	1180072e 	bgeu	r2,r6,1006d0c <_realloc_r+0x330>
 1006cf0:	90c00217 	ldw	r3,8(r18)
 1006cf4:	89400404 	addi	r5,r17,16
 1006cf8:	91000404 	addi	r4,r18,16
 1006cfc:	88c00215 	stw	r3,8(r17)
 1006d00:	90800317 	ldw	r2,12(r18)
 1006d04:	88800315 	stw	r2,12(r17)
 1006d08:	31c09126 	beq	r6,r7,1006f50 <_realloc_r+0x574>
 1006d0c:	20800017 	ldw	r2,0(r4)
 1006d10:	28800015 	stw	r2,0(r5)
 1006d14:	20c00117 	ldw	r3,4(r4)
 1006d18:	28c00115 	stw	r3,4(r5)
 1006d1c:	20800217 	ldw	r2,8(r4)
 1006d20:	28800215 	stw	r2,8(r5)
 1006d24:	900b883a 	mov	r5,r18
 1006d28:	b009883a 	mov	r4,r22
 1006d2c:	100438c0 	call	100438c <_free_r>
 1006d30:	b009883a 	mov	r4,r22
 1006d34:	100a4480 	call	100a448 <__malloc_unlock>
 1006d38:	003f5e06 	br	1006ab4 <_realloc_r+0xd8>
 1006d3c:	300b883a 	mov	r5,r6
 1006d40:	dfc00b17 	ldw	ra,44(sp)
 1006d44:	df000a17 	ldw	fp,40(sp)
 1006d48:	ddc00917 	ldw	r23,36(sp)
 1006d4c:	dd800817 	ldw	r22,32(sp)
 1006d50:	dd400717 	ldw	r21,28(sp)
 1006d54:	dd000617 	ldw	r20,24(sp)
 1006d58:	dcc00517 	ldw	r19,20(sp)
 1006d5c:	dc800417 	ldw	r18,16(sp)
 1006d60:	dc400317 	ldw	r17,12(sp)
 1006d64:	dc000217 	ldw	r16,8(sp)
 1006d68:	dec00c04 	addi	sp,sp,48
 1006d6c:	1004f141 	jmpi	1004f14 <_malloc_r>
 1006d70:	38800117 	ldw	r2,4(r7)
 1006d74:	e54b883a 	add	r5,fp,r21
 1006d78:	31000054 	ori	r4,r6,1
 1006d7c:	1080004c 	andi	r2,r2,1
 1006d80:	1704b03a 	or	r2,r2,fp
 1006d84:	38800115 	stw	r2,4(r7)
 1006d88:	29000115 	stw	r4,4(r5)
 1006d8c:	2987883a 	add	r3,r5,r6
 1006d90:	18800117 	ldw	r2,4(r3)
 1006d94:	29400204 	addi	r5,r5,8
 1006d98:	b009883a 	mov	r4,r22
 1006d9c:	10800054 	ori	r2,r2,1
 1006da0:	18800115 	stw	r2,4(r3)
 1006da4:	100438c0 	call	100438c <_free_r>
 1006da8:	003f3806 	br	1006a8c <_realloc_r+0xb0>
 1006dac:	000d883a 	mov	r6,zero
 1006db0:	0009883a 	mov	r4,zero
 1006db4:	003f5d06 	br	1006b2c <_realloc_r+0x150>
 1006db8:	30c00217 	ldw	r3,8(r6)
 1006dbc:	30800317 	ldw	r2,12(r6)
 1006dc0:	800f883a 	mov	r7,r16
 1006dc4:	84000204 	addi	r16,r16,8
 1006dc8:	10c00215 	stw	r3,8(r2)
 1006dcc:	18800315 	stw	r2,12(r3)
 1006dd0:	003f2306 	br	1006a60 <_realloc_r+0x84>
 1006dd4:	8809883a 	mov	r4,r17
 1006dd8:	900b883a 	mov	r5,r18
 1006ddc:	10057d80 	call	10057d8 <memmove>
 1006de0:	003fd006 	br	1006d24 <_realloc_r+0x348>
 1006de4:	30800117 	ldw	r2,4(r6)
 1006de8:	e0c00404 	addi	r3,fp,16
 1006dec:	1108703a 	and	r4,r2,r4
 1006df0:	9905883a 	add	r2,r19,r4
 1006df4:	10ff4d16 	blt	r2,r3,1006b2c <_realloc_r+0x150>
 1006df8:	1705c83a 	sub	r2,r2,fp
 1006dfc:	870b883a 	add	r5,r16,fp
 1006e00:	10800054 	ori	r2,r2,1
 1006e04:	28800115 	stw	r2,4(r5)
 1006e08:	80c00117 	ldw	r3,4(r16)
 1006e0c:	00804074 	movhi	r2,257
 1006e10:	10b4f404 	addi	r2,r2,-11312
 1006e14:	b009883a 	mov	r4,r22
 1006e18:	18c0004c 	andi	r3,r3,1
 1006e1c:	e0c6b03a 	or	r3,fp,r3
 1006e20:	11400215 	stw	r5,8(r2)
 1006e24:	80c00115 	stw	r3,4(r16)
 1006e28:	100a4480 	call	100a448 <__malloc_unlock>
 1006e2c:	84400204 	addi	r17,r16,8
 1006e30:	003f2006 	br	1006ab4 <_realloc_r+0xd8>
 1006e34:	98a9883a 	add	r20,r19,r2
 1006e38:	2509883a 	add	r4,r4,r20
 1006e3c:	e0800404 	addi	r2,fp,16
 1006e40:	d9000115 	stw	r4,4(sp)
 1006e44:	20bf7016 	blt	r4,r2,1006c08 <_realloc_r+0x22c>
 1006e48:	b8c00317 	ldw	r3,12(r23)
 1006e4c:	b8800217 	ldw	r2,8(r23)
 1006e50:	99bfff04 	addi	r6,r19,-4
 1006e54:	01400904 	movi	r5,36
 1006e58:	18800215 	stw	r2,8(r3)
 1006e5c:	10c00315 	stw	r3,12(r2)
 1006e60:	bc400204 	addi	r17,r23,8
 1006e64:	29804136 	bltu	r5,r6,1006f6c <_realloc_r+0x590>
 1006e68:	008004c4 	movi	r2,19
 1006e6c:	9009883a 	mov	r4,r18
 1006e70:	880f883a 	mov	r7,r17
 1006e74:	11800f2e 	bgeu	r2,r6,1006eb4 <_realloc_r+0x4d8>
 1006e78:	90800017 	ldw	r2,0(r18)
 1006e7c:	b9c00404 	addi	r7,r23,16
 1006e80:	91000204 	addi	r4,r18,8
 1006e84:	b8800215 	stw	r2,8(r23)
 1006e88:	90c00117 	ldw	r3,4(r18)
 1006e8c:	008006c4 	movi	r2,27
 1006e90:	b8c00315 	stw	r3,12(r23)
 1006e94:	1180072e 	bgeu	r2,r6,1006eb4 <_realloc_r+0x4d8>
 1006e98:	90c00217 	ldw	r3,8(r18)
 1006e9c:	b9c00604 	addi	r7,r23,24
 1006ea0:	91000404 	addi	r4,r18,16
 1006ea4:	b8c00415 	stw	r3,16(r23)
 1006ea8:	90800317 	ldw	r2,12(r18)
 1006eac:	b8800515 	stw	r2,20(r23)
 1006eb0:	31404026 	beq	r6,r5,1006fb4 <_realloc_r+0x5d8>
 1006eb4:	20800017 	ldw	r2,0(r4)
 1006eb8:	38800015 	stw	r2,0(r7)
 1006ebc:	20c00117 	ldw	r3,4(r4)
 1006ec0:	38c00115 	stw	r3,4(r7)
 1006ec4:	20800217 	ldw	r2,8(r4)
 1006ec8:	38800215 	stw	r2,8(r7)
 1006ecc:	d8c00117 	ldw	r3,4(sp)
 1006ed0:	bf0b883a 	add	r5,r23,fp
 1006ed4:	b009883a 	mov	r4,r22
 1006ed8:	1f05c83a 	sub	r2,r3,fp
 1006edc:	10800054 	ori	r2,r2,1
 1006ee0:	28800115 	stw	r2,4(r5)
 1006ee4:	b8c00117 	ldw	r3,4(r23)
 1006ee8:	00804074 	movhi	r2,257
 1006eec:	10b4f404 	addi	r2,r2,-11312
 1006ef0:	11400215 	stw	r5,8(r2)
 1006ef4:	18c0004c 	andi	r3,r3,1
 1006ef8:	e0c6b03a 	or	r3,fp,r3
 1006efc:	b8c00115 	stw	r3,4(r23)
 1006f00:	100a4480 	call	100a448 <__malloc_unlock>
 1006f04:	003eeb06 	br	1006ab4 <_realloc_r+0xd8>
 1006f08:	20800117 	ldw	r2,4(r4)
 1006f0c:	00ffff04 	movi	r3,-4
 1006f10:	800f883a 	mov	r7,r16
 1006f14:	10c4703a 	and	r2,r2,r3
 1006f18:	98a9883a 	add	r20,r19,r2
 1006f1c:	84000204 	addi	r16,r16,8
 1006f20:	003ecf06 	br	1006a60 <_realloc_r+0x84>
 1006f24:	900b883a 	mov	r5,r18
 1006f28:	8009883a 	mov	r4,r16
 1006f2c:	10057d80 	call	10057d8 <memmove>
 1006f30:	dd000017 	ldw	r20,0(sp)
 1006f34:	b80f883a 	mov	r7,r23
 1006f38:	003ec906 	br	1006a60 <_realloc_r+0x84>
 1006f3c:	900b883a 	mov	r5,r18
 1006f40:	8009883a 	mov	r4,r16
 1006f44:	10057d80 	call	10057d8 <memmove>
 1006f48:	b80f883a 	mov	r7,r23
 1006f4c:	003ec406 	br	1006a60 <_realloc_r+0x84>
 1006f50:	90c00417 	ldw	r3,16(r18)
 1006f54:	89400604 	addi	r5,r17,24
 1006f58:	91000604 	addi	r4,r18,24
 1006f5c:	88c00415 	stw	r3,16(r17)
 1006f60:	90800517 	ldw	r2,20(r18)
 1006f64:	88800515 	stw	r2,20(r17)
 1006f68:	003f6806 	br	1006d0c <_realloc_r+0x330>
 1006f6c:	900b883a 	mov	r5,r18
 1006f70:	8809883a 	mov	r4,r17
 1006f74:	10057d80 	call	10057d8 <memmove>
 1006f78:	003fd406 	br	1006ecc <_realloc_r+0x4f0>
 1006f7c:	90c00417 	ldw	r3,16(r18)
 1006f80:	91000604 	addi	r4,r18,24
 1006f84:	ba000804 	addi	r8,r23,32
 1006f88:	b8c00615 	stw	r3,24(r23)
 1006f8c:	90800517 	ldw	r2,20(r18)
 1006f90:	b8800715 	stw	r2,28(r23)
 1006f94:	003f1206 	br	1006be0 <_realloc_r+0x204>
 1006f98:	90c00417 	ldw	r3,16(r18)
 1006f9c:	91000604 	addi	r4,r18,24
 1006fa0:	ba000804 	addi	r8,r23,32
 1006fa4:	b8c00615 	stw	r3,24(r23)
 1006fa8:	90800517 	ldw	r2,20(r18)
 1006fac:	b8800715 	stw	r2,28(r23)
 1006fb0:	003f3206 	br	1006c7c <_realloc_r+0x2a0>
 1006fb4:	90c00417 	ldw	r3,16(r18)
 1006fb8:	91000604 	addi	r4,r18,24
 1006fbc:	b9c00804 	addi	r7,r23,32
 1006fc0:	b8c00615 	stw	r3,24(r23)
 1006fc4:	90800517 	ldw	r2,20(r18)
 1006fc8:	b8800715 	stw	r2,28(r23)
 1006fcc:	003fb906 	br	1006eb4 <_realloc_r+0x4d8>

01006fd0 <__isinfd>:
 1006fd0:	200d883a 	mov	r6,r4
 1006fd4:	0109c83a 	sub	r4,zero,r4
 1006fd8:	2188b03a 	or	r4,r4,r6
 1006fdc:	2008d7fa 	srli	r4,r4,31
 1006fe0:	00a00034 	movhi	r2,32768
 1006fe4:	10bfffc4 	addi	r2,r2,-1
 1006fe8:	1144703a 	and	r2,r2,r5
 1006fec:	2088b03a 	or	r4,r4,r2
 1006ff0:	009ffc34 	movhi	r2,32752
 1006ff4:	1105c83a 	sub	r2,r2,r4
 1006ff8:	0087c83a 	sub	r3,zero,r2
 1006ffc:	10c4b03a 	or	r2,r2,r3
 1007000:	1004d7fa 	srli	r2,r2,31
 1007004:	00c00044 	movi	r3,1
 1007008:	1885c83a 	sub	r2,r3,r2
 100700c:	f800283a 	ret

01007010 <__isnand>:
 1007010:	200d883a 	mov	r6,r4
 1007014:	0109c83a 	sub	r4,zero,r4
 1007018:	2188b03a 	or	r4,r4,r6
 100701c:	2008d7fa 	srli	r4,r4,31
 1007020:	00a00034 	movhi	r2,32768
 1007024:	10bfffc4 	addi	r2,r2,-1
 1007028:	1144703a 	and	r2,r2,r5
 100702c:	2088b03a 	or	r4,r4,r2
 1007030:	009ffc34 	movhi	r2,32752
 1007034:	1105c83a 	sub	r2,r2,r4
 1007038:	1004d7fa 	srli	r2,r2,31
 100703c:	f800283a 	ret

01007040 <_sbrk_r>:
 1007040:	defffd04 	addi	sp,sp,-12
 1007044:	dc000015 	stw	r16,0(sp)
 1007048:	04004074 	movhi	r16,257
 100704c:	84013b04 	addi	r16,r16,1260
 1007050:	dc400115 	stw	r17,4(sp)
 1007054:	80000015 	stw	zero,0(r16)
 1007058:	2023883a 	mov	r17,r4
 100705c:	2809883a 	mov	r4,r5
 1007060:	dfc00215 	stw	ra,8(sp)
 1007064:	100a6640 	call	100a664 <sbrk>
 1007068:	1007883a 	mov	r3,r2
 100706c:	00bfffc4 	movi	r2,-1
 1007070:	18800626 	beq	r3,r2,100708c <_sbrk_r+0x4c>
 1007074:	1805883a 	mov	r2,r3
 1007078:	dfc00217 	ldw	ra,8(sp)
 100707c:	dc400117 	ldw	r17,4(sp)
 1007080:	dc000017 	ldw	r16,0(sp)
 1007084:	dec00304 	addi	sp,sp,12
 1007088:	f800283a 	ret
 100708c:	80800017 	ldw	r2,0(r16)
 1007090:	103ff826 	beq	r2,zero,1007074 <_sbrk_r+0x34>
 1007094:	88800015 	stw	r2,0(r17)
 1007098:	1805883a 	mov	r2,r3
 100709c:	dfc00217 	ldw	ra,8(sp)
 10070a0:	dc400117 	ldw	r17,4(sp)
 10070a4:	dc000017 	ldw	r16,0(sp)
 10070a8:	dec00304 	addi	sp,sp,12
 10070ac:	f800283a 	ret

010070b0 <__sclose>:
 10070b0:	2940038f 	ldh	r5,14(r5)
 10070b4:	10073f81 	jmpi	10073f8 <_close_r>

010070b8 <__sseek>:
 10070b8:	defffe04 	addi	sp,sp,-8
 10070bc:	dc000015 	stw	r16,0(sp)
 10070c0:	2821883a 	mov	r16,r5
 10070c4:	2940038f 	ldh	r5,14(r5)
 10070c8:	dfc00115 	stw	ra,4(sp)
 10070cc:	10076700 	call	1007670 <_lseek_r>
 10070d0:	1007883a 	mov	r3,r2
 10070d4:	00bfffc4 	movi	r2,-1
 10070d8:	18800926 	beq	r3,r2,1007100 <__sseek+0x48>
 10070dc:	8080030b 	ldhu	r2,12(r16)
 10070e0:	80c01415 	stw	r3,80(r16)
 10070e4:	10840014 	ori	r2,r2,4096
 10070e8:	8080030d 	sth	r2,12(r16)
 10070ec:	1805883a 	mov	r2,r3
 10070f0:	dfc00117 	ldw	ra,4(sp)
 10070f4:	dc000017 	ldw	r16,0(sp)
 10070f8:	dec00204 	addi	sp,sp,8
 10070fc:	f800283a 	ret
 1007100:	8080030b 	ldhu	r2,12(r16)
 1007104:	10bbffcc 	andi	r2,r2,61439
 1007108:	8080030d 	sth	r2,12(r16)
 100710c:	1805883a 	mov	r2,r3
 1007110:	dfc00117 	ldw	ra,4(sp)
 1007114:	dc000017 	ldw	r16,0(sp)
 1007118:	dec00204 	addi	sp,sp,8
 100711c:	f800283a 	ret

01007120 <__swrite>:
 1007120:	2880030b 	ldhu	r2,12(r5)
 1007124:	defffb04 	addi	sp,sp,-20
 1007128:	dcc00315 	stw	r19,12(sp)
 100712c:	1080400c 	andi	r2,r2,256
 1007130:	dc800215 	stw	r18,8(sp)
 1007134:	dc400115 	stw	r17,4(sp)
 1007138:	dc000015 	stw	r16,0(sp)
 100713c:	3027883a 	mov	r19,r6
 1007140:	3825883a 	mov	r18,r7
 1007144:	dfc00415 	stw	ra,16(sp)
 1007148:	2821883a 	mov	r16,r5
 100714c:	000d883a 	mov	r6,zero
 1007150:	01c00084 	movi	r7,2
 1007154:	2023883a 	mov	r17,r4
 1007158:	10000226 	beq	r2,zero,1007164 <__swrite+0x44>
 100715c:	2940038f 	ldh	r5,14(r5)
 1007160:	10076700 	call	1007670 <_lseek_r>
 1007164:	8080030b 	ldhu	r2,12(r16)
 1007168:	8140038f 	ldh	r5,14(r16)
 100716c:	8809883a 	mov	r4,r17
 1007170:	10bbffcc 	andi	r2,r2,61439
 1007174:	980d883a 	mov	r6,r19
 1007178:	900f883a 	mov	r7,r18
 100717c:	8080030d 	sth	r2,12(r16)
 1007180:	dfc00417 	ldw	ra,16(sp)
 1007184:	dcc00317 	ldw	r19,12(sp)
 1007188:	dc800217 	ldw	r18,8(sp)
 100718c:	dc400117 	ldw	r17,4(sp)
 1007190:	dc000017 	ldw	r16,0(sp)
 1007194:	dec00504 	addi	sp,sp,20
 1007198:	10072b81 	jmpi	10072b8 <_write_r>

0100719c <__sread>:
 100719c:	defffe04 	addi	sp,sp,-8
 10071a0:	dc000015 	stw	r16,0(sp)
 10071a4:	2821883a 	mov	r16,r5
 10071a8:	2940038f 	ldh	r5,14(r5)
 10071ac:	dfc00115 	stw	ra,4(sp)
 10071b0:	10076e80 	call	10076e8 <_read_r>
 10071b4:	1007883a 	mov	r3,r2
 10071b8:	10000816 	blt	r2,zero,10071dc <__sread+0x40>
 10071bc:	80801417 	ldw	r2,80(r16)
 10071c0:	10c5883a 	add	r2,r2,r3
 10071c4:	80801415 	stw	r2,80(r16)
 10071c8:	1805883a 	mov	r2,r3
 10071cc:	dfc00117 	ldw	ra,4(sp)
 10071d0:	dc000017 	ldw	r16,0(sp)
 10071d4:	dec00204 	addi	sp,sp,8
 10071d8:	f800283a 	ret
 10071dc:	8080030b 	ldhu	r2,12(r16)
 10071e0:	10bbffcc 	andi	r2,r2,61439
 10071e4:	8080030d 	sth	r2,12(r16)
 10071e8:	1805883a 	mov	r2,r3
 10071ec:	dfc00117 	ldw	ra,4(sp)
 10071f0:	dc000017 	ldw	r16,0(sp)
 10071f4:	dec00204 	addi	sp,sp,8
 10071f8:	f800283a 	ret

010071fc <strcmp>:
 10071fc:	2144b03a 	or	r2,r4,r5
 1007200:	108000cc 	andi	r2,r2,3
 1007204:	10001d1e 	bne	r2,zero,100727c <strcmp+0x80>
 1007208:	200f883a 	mov	r7,r4
 100720c:	28800017 	ldw	r2,0(r5)
 1007210:	21000017 	ldw	r4,0(r4)
 1007214:	280d883a 	mov	r6,r5
 1007218:	2080161e 	bne	r4,r2,1007274 <strcmp+0x78>
 100721c:	023fbff4 	movhi	r8,65279
 1007220:	423fbfc4 	addi	r8,r8,-257
 1007224:	2207883a 	add	r3,r4,r8
 1007228:	01602074 	movhi	r5,32897
 100722c:	29602004 	addi	r5,r5,-32640
 1007230:	1946703a 	and	r3,r3,r5
 1007234:	0104303a 	nor	r2,zero,r4
 1007238:	10c4703a 	and	r2,r2,r3
 100723c:	10001c1e 	bne	r2,zero,10072b0 <strcmp+0xb4>
 1007240:	4013883a 	mov	r9,r8
 1007244:	2811883a 	mov	r8,r5
 1007248:	00000106 	br	1007250 <strcmp+0x54>
 100724c:	1800181e 	bne	r3,zero,10072b0 <strcmp+0xb4>
 1007250:	39c00104 	addi	r7,r7,4
 1007254:	39000017 	ldw	r4,0(r7)
 1007258:	31800104 	addi	r6,r6,4
 100725c:	31400017 	ldw	r5,0(r6)
 1007260:	2245883a 	add	r2,r4,r9
 1007264:	1204703a 	and	r2,r2,r8
 1007268:	0106303a 	nor	r3,zero,r4
 100726c:	1886703a 	and	r3,r3,r2
 1007270:	217ff626 	beq	r4,r5,100724c <strcmp+0x50>
 1007274:	3809883a 	mov	r4,r7
 1007278:	300b883a 	mov	r5,r6
 100727c:	20c00007 	ldb	r3,0(r4)
 1007280:	1800051e 	bne	r3,zero,1007298 <strcmp+0x9c>
 1007284:	00000606 	br	10072a0 <strcmp+0xa4>
 1007288:	21000044 	addi	r4,r4,1
 100728c:	20c00007 	ldb	r3,0(r4)
 1007290:	29400044 	addi	r5,r5,1
 1007294:	18000226 	beq	r3,zero,10072a0 <strcmp+0xa4>
 1007298:	28800007 	ldb	r2,0(r5)
 100729c:	18bffa26 	beq	r3,r2,1007288 <strcmp+0x8c>
 10072a0:	20c00003 	ldbu	r3,0(r4)
 10072a4:	28800003 	ldbu	r2,0(r5)
 10072a8:	1885c83a 	sub	r2,r3,r2
 10072ac:	f800283a 	ret
 10072b0:	0005883a 	mov	r2,zero
 10072b4:	f800283a 	ret

010072b8 <_write_r>:
 10072b8:	defffd04 	addi	sp,sp,-12
 10072bc:	dc000015 	stw	r16,0(sp)
 10072c0:	04004074 	movhi	r16,257
 10072c4:	84013b04 	addi	r16,r16,1260
 10072c8:	dc400115 	stw	r17,4(sp)
 10072cc:	80000015 	stw	zero,0(r16)
 10072d0:	2023883a 	mov	r17,r4
 10072d4:	2809883a 	mov	r4,r5
 10072d8:	300b883a 	mov	r5,r6
 10072dc:	380d883a 	mov	r6,r7
 10072e0:	dfc00215 	stw	ra,8(sp)
 10072e4:	100a7200 	call	100a720 <write>
 10072e8:	1007883a 	mov	r3,r2
 10072ec:	00bfffc4 	movi	r2,-1
 10072f0:	18800626 	beq	r3,r2,100730c <_write_r+0x54>
 10072f4:	1805883a 	mov	r2,r3
 10072f8:	dfc00217 	ldw	ra,8(sp)
 10072fc:	dc400117 	ldw	r17,4(sp)
 1007300:	dc000017 	ldw	r16,0(sp)
 1007304:	dec00304 	addi	sp,sp,12
 1007308:	f800283a 	ret
 100730c:	80800017 	ldw	r2,0(r16)
 1007310:	103ff826 	beq	r2,zero,10072f4 <_write_r+0x3c>
 1007314:	88800015 	stw	r2,0(r17)
 1007318:	1805883a 	mov	r2,r3
 100731c:	dfc00217 	ldw	ra,8(sp)
 1007320:	dc400117 	ldw	r17,4(sp)
 1007324:	dc000017 	ldw	r16,0(sp)
 1007328:	dec00304 	addi	sp,sp,12
 100732c:	f800283a 	ret

01007330 <_calloc_r>:
 1007330:	defffe04 	addi	sp,sp,-8
 1007334:	dc400015 	stw	r17,0(sp)
 1007338:	2023883a 	mov	r17,r4
 100733c:	2809883a 	mov	r4,r5
 1007340:	300b883a 	mov	r5,r6
 1007344:	dfc00115 	stw	ra,4(sp)
 1007348:	10096a40 	call	10096a4 <__mulsi3>
 100734c:	100b883a 	mov	r5,r2
 1007350:	8809883a 	mov	r4,r17
 1007354:	1004f140 	call	1004f14 <_malloc_r>
 1007358:	1023883a 	mov	r17,r2
 100735c:	01c00904 	movi	r7,36
 1007360:	10000d26 	beq	r2,zero,1007398 <_calloc_r+0x68>
 1007364:	10ffff17 	ldw	r3,-4(r2)
 1007368:	1009883a 	mov	r4,r2
 100736c:	00bfff04 	movi	r2,-4
 1007370:	1886703a 	and	r3,r3,r2
 1007374:	1887883a 	add	r3,r3,r2
 1007378:	180d883a 	mov	r6,r3
 100737c:	000b883a 	mov	r5,zero
 1007380:	38c01736 	bltu	r7,r3,10073e0 <_calloc_r+0xb0>
 1007384:	008004c4 	movi	r2,19
 1007388:	10c00836 	bltu	r2,r3,10073ac <_calloc_r+0x7c>
 100738c:	20000215 	stw	zero,8(r4)
 1007390:	20000015 	stw	zero,0(r4)
 1007394:	20000115 	stw	zero,4(r4)
 1007398:	8805883a 	mov	r2,r17
 100739c:	dfc00117 	ldw	ra,4(sp)
 10073a0:	dc400017 	ldw	r17,0(sp)
 10073a4:	dec00204 	addi	sp,sp,8
 10073a8:	f800283a 	ret
 10073ac:	008006c4 	movi	r2,27
 10073b0:	88000015 	stw	zero,0(r17)
 10073b4:	88000115 	stw	zero,4(r17)
 10073b8:	89000204 	addi	r4,r17,8
 10073bc:	10fff32e 	bgeu	r2,r3,100738c <_calloc_r+0x5c>
 10073c0:	88000215 	stw	zero,8(r17)
 10073c4:	88000315 	stw	zero,12(r17)
 10073c8:	89000404 	addi	r4,r17,16
 10073cc:	19ffef1e 	bne	r3,r7,100738c <_calloc_r+0x5c>
 10073d0:	89000604 	addi	r4,r17,24
 10073d4:	88000415 	stw	zero,16(r17)
 10073d8:	88000515 	stw	zero,20(r17)
 10073dc:	003feb06 	br	100738c <_calloc_r+0x5c>
 10073e0:	10058b80 	call	10058b8 <memset>
 10073e4:	8805883a 	mov	r2,r17
 10073e8:	dfc00117 	ldw	ra,4(sp)
 10073ec:	dc400017 	ldw	r17,0(sp)
 10073f0:	dec00204 	addi	sp,sp,8
 10073f4:	f800283a 	ret

010073f8 <_close_r>:
 10073f8:	defffd04 	addi	sp,sp,-12
 10073fc:	dc000015 	stw	r16,0(sp)
 1007400:	04004074 	movhi	r16,257
 1007404:	84013b04 	addi	r16,r16,1260
 1007408:	dc400115 	stw	r17,4(sp)
 100740c:	80000015 	stw	zero,0(r16)
 1007410:	2023883a 	mov	r17,r4
 1007414:	2809883a 	mov	r4,r5
 1007418:	dfc00215 	stw	ra,8(sp)
 100741c:	1009d940 	call	1009d94 <close>
 1007420:	1007883a 	mov	r3,r2
 1007424:	00bfffc4 	movi	r2,-1
 1007428:	18800626 	beq	r3,r2,1007444 <_close_r+0x4c>
 100742c:	1805883a 	mov	r2,r3
 1007430:	dfc00217 	ldw	ra,8(sp)
 1007434:	dc400117 	ldw	r17,4(sp)
 1007438:	dc000017 	ldw	r16,0(sp)
 100743c:	dec00304 	addi	sp,sp,12
 1007440:	f800283a 	ret
 1007444:	80800017 	ldw	r2,0(r16)
 1007448:	103ff826 	beq	r2,zero,100742c <_close_r+0x34>
 100744c:	88800015 	stw	r2,0(r17)
 1007450:	1805883a 	mov	r2,r3
 1007454:	dfc00217 	ldw	ra,8(sp)
 1007458:	dc400117 	ldw	r17,4(sp)
 100745c:	dc000017 	ldw	r16,0(sp)
 1007460:	dec00304 	addi	sp,sp,12
 1007464:	f800283a 	ret

01007468 <_fclose_r>:
 1007468:	defffc04 	addi	sp,sp,-16
 100746c:	dc400115 	stw	r17,4(sp)
 1007470:	dc000015 	stw	r16,0(sp)
 1007474:	dfc00315 	stw	ra,12(sp)
 1007478:	dc800215 	stw	r18,8(sp)
 100747c:	2821883a 	mov	r16,r5
 1007480:	2023883a 	mov	r17,r4
 1007484:	28002926 	beq	r5,zero,100752c <_fclose_r+0xc4>
 1007488:	1003fc40 	call	1003fc4 <__sfp_lock_acquire>
 100748c:	88000226 	beq	r17,zero,1007498 <_fclose_r+0x30>
 1007490:	88800e17 	ldw	r2,56(r17)
 1007494:	10002d26 	beq	r2,zero,100754c <_fclose_r+0xe4>
 1007498:	8080030f 	ldh	r2,12(r16)
 100749c:	10002226 	beq	r2,zero,1007528 <_fclose_r+0xc0>
 10074a0:	8809883a 	mov	r4,r17
 10074a4:	800b883a 	mov	r5,r16
 10074a8:	1003d3c0 	call	1003d3c <_fflush_r>
 10074ac:	1025883a 	mov	r18,r2
 10074b0:	80800b17 	ldw	r2,44(r16)
 10074b4:	10000426 	beq	r2,zero,10074c8 <_fclose_r+0x60>
 10074b8:	81400717 	ldw	r5,28(r16)
 10074bc:	8809883a 	mov	r4,r17
 10074c0:	103ee83a 	callr	r2
 10074c4:	10002a16 	blt	r2,zero,1007570 <_fclose_r+0x108>
 10074c8:	8080030b 	ldhu	r2,12(r16)
 10074cc:	1080200c 	andi	r2,r2,128
 10074d0:	1000231e 	bne	r2,zero,1007560 <_fclose_r+0xf8>
 10074d4:	81400c17 	ldw	r5,48(r16)
 10074d8:	28000526 	beq	r5,zero,10074f0 <_fclose_r+0x88>
 10074dc:	80801004 	addi	r2,r16,64
 10074e0:	28800226 	beq	r5,r2,10074ec <_fclose_r+0x84>
 10074e4:	8809883a 	mov	r4,r17
 10074e8:	100438c0 	call	100438c <_free_r>
 10074ec:	80000c15 	stw	zero,48(r16)
 10074f0:	81401117 	ldw	r5,68(r16)
 10074f4:	28000326 	beq	r5,zero,1007504 <_fclose_r+0x9c>
 10074f8:	8809883a 	mov	r4,r17
 10074fc:	100438c0 	call	100438c <_free_r>
 1007500:	80001115 	stw	zero,68(r16)
 1007504:	8000030d 	sth	zero,12(r16)
 1007508:	1003fc80 	call	1003fc8 <__sfp_lock_release>
 100750c:	9005883a 	mov	r2,r18
 1007510:	dfc00317 	ldw	ra,12(sp)
 1007514:	dc800217 	ldw	r18,8(sp)
 1007518:	dc400117 	ldw	r17,4(sp)
 100751c:	dc000017 	ldw	r16,0(sp)
 1007520:	dec00404 	addi	sp,sp,16
 1007524:	f800283a 	ret
 1007528:	1003fc80 	call	1003fc8 <__sfp_lock_release>
 100752c:	0025883a 	mov	r18,zero
 1007530:	9005883a 	mov	r2,r18
 1007534:	dfc00317 	ldw	ra,12(sp)
 1007538:	dc800217 	ldw	r18,8(sp)
 100753c:	dc400117 	ldw	r17,4(sp)
 1007540:	dc000017 	ldw	r16,0(sp)
 1007544:	dec00404 	addi	sp,sp,16
 1007548:	f800283a 	ret
 100754c:	8809883a 	mov	r4,r17
 1007550:	1003fd40 	call	1003fd4 <__sinit>
 1007554:	8080030f 	ldh	r2,12(r16)
 1007558:	103fd11e 	bne	r2,zero,10074a0 <_fclose_r+0x38>
 100755c:	003ff206 	br	1007528 <_fclose_r+0xc0>
 1007560:	81400417 	ldw	r5,16(r16)
 1007564:	8809883a 	mov	r4,r17
 1007568:	100438c0 	call	100438c <_free_r>
 100756c:	003fd906 	br	10074d4 <_fclose_r+0x6c>
 1007570:	04bfffc4 	movi	r18,-1
 1007574:	003fd406 	br	10074c8 <_fclose_r+0x60>

01007578 <fclose>:
 1007578:	00804074 	movhi	r2,257
 100757c:	10ba8304 	addi	r2,r2,-5620
 1007580:	200b883a 	mov	r5,r4
 1007584:	11000017 	ldw	r4,0(r2)
 1007588:	10074681 	jmpi	1007468 <_fclose_r>

0100758c <_fstat_r>:
 100758c:	defffd04 	addi	sp,sp,-12
 1007590:	dc000015 	stw	r16,0(sp)
 1007594:	04004074 	movhi	r16,257
 1007598:	84013b04 	addi	r16,r16,1260
 100759c:	dc400115 	stw	r17,4(sp)
 10075a0:	80000015 	stw	zero,0(r16)
 10075a4:	2023883a 	mov	r17,r4
 10075a8:	2809883a 	mov	r4,r5
 10075ac:	300b883a 	mov	r5,r6
 10075b0:	dfc00215 	stw	ra,8(sp)
 10075b4:	1009f200 	call	1009f20 <fstat>
 10075b8:	1007883a 	mov	r3,r2
 10075bc:	00bfffc4 	movi	r2,-1
 10075c0:	18800626 	beq	r3,r2,10075dc <_fstat_r+0x50>
 10075c4:	1805883a 	mov	r2,r3
 10075c8:	dfc00217 	ldw	ra,8(sp)
 10075cc:	dc400117 	ldw	r17,4(sp)
 10075d0:	dc000017 	ldw	r16,0(sp)
 10075d4:	dec00304 	addi	sp,sp,12
 10075d8:	f800283a 	ret
 10075dc:	80800017 	ldw	r2,0(r16)
 10075e0:	103ff826 	beq	r2,zero,10075c4 <_fstat_r+0x38>
 10075e4:	88800015 	stw	r2,0(r17)
 10075e8:	1805883a 	mov	r2,r3
 10075ec:	dfc00217 	ldw	ra,8(sp)
 10075f0:	dc400117 	ldw	r17,4(sp)
 10075f4:	dc000017 	ldw	r16,0(sp)
 10075f8:	dec00304 	addi	sp,sp,12
 10075fc:	f800283a 	ret

01007600 <_isatty_r>:
 1007600:	defffd04 	addi	sp,sp,-12
 1007604:	dc000015 	stw	r16,0(sp)
 1007608:	04004074 	movhi	r16,257
 100760c:	84013b04 	addi	r16,r16,1260
 1007610:	dc400115 	stw	r17,4(sp)
 1007614:	80000015 	stw	zero,0(r16)
 1007618:	2023883a 	mov	r17,r4
 100761c:	2809883a 	mov	r4,r5
 1007620:	dfc00215 	stw	ra,8(sp)
 1007624:	100a0580 	call	100a058 <isatty>
 1007628:	1007883a 	mov	r3,r2
 100762c:	00bfffc4 	movi	r2,-1
 1007630:	18800626 	beq	r3,r2,100764c <_isatty_r+0x4c>
 1007634:	1805883a 	mov	r2,r3
 1007638:	dfc00217 	ldw	ra,8(sp)
 100763c:	dc400117 	ldw	r17,4(sp)
 1007640:	dc000017 	ldw	r16,0(sp)
 1007644:	dec00304 	addi	sp,sp,12
 1007648:	f800283a 	ret
 100764c:	80800017 	ldw	r2,0(r16)
 1007650:	103ff826 	beq	r2,zero,1007634 <_isatty_r+0x34>
 1007654:	88800015 	stw	r2,0(r17)
 1007658:	1805883a 	mov	r2,r3
 100765c:	dfc00217 	ldw	ra,8(sp)
 1007660:	dc400117 	ldw	r17,4(sp)
 1007664:	dc000017 	ldw	r16,0(sp)
 1007668:	dec00304 	addi	sp,sp,12
 100766c:	f800283a 	ret

01007670 <_lseek_r>:
 1007670:	defffd04 	addi	sp,sp,-12
 1007674:	dc000015 	stw	r16,0(sp)
 1007678:	04004074 	movhi	r16,257
 100767c:	84013b04 	addi	r16,r16,1260
 1007680:	dc400115 	stw	r17,4(sp)
 1007684:	80000015 	stw	zero,0(r16)
 1007688:	2023883a 	mov	r17,r4
 100768c:	2809883a 	mov	r4,r5
 1007690:	300b883a 	mov	r5,r6
 1007694:	380d883a 	mov	r6,r7
 1007698:	dfc00215 	stw	ra,8(sp)
 100769c:	100a2680 	call	100a268 <lseek>
 10076a0:	1007883a 	mov	r3,r2
 10076a4:	00bfffc4 	movi	r2,-1
 10076a8:	18800626 	beq	r3,r2,10076c4 <_lseek_r+0x54>
 10076ac:	1805883a 	mov	r2,r3
 10076b0:	dfc00217 	ldw	ra,8(sp)
 10076b4:	dc400117 	ldw	r17,4(sp)
 10076b8:	dc000017 	ldw	r16,0(sp)
 10076bc:	dec00304 	addi	sp,sp,12
 10076c0:	f800283a 	ret
 10076c4:	80800017 	ldw	r2,0(r16)
 10076c8:	103ff826 	beq	r2,zero,10076ac <_lseek_r+0x3c>
 10076cc:	88800015 	stw	r2,0(r17)
 10076d0:	1805883a 	mov	r2,r3
 10076d4:	dfc00217 	ldw	ra,8(sp)
 10076d8:	dc400117 	ldw	r17,4(sp)
 10076dc:	dc000017 	ldw	r16,0(sp)
 10076e0:	dec00304 	addi	sp,sp,12
 10076e4:	f800283a 	ret

010076e8 <_read_r>:
 10076e8:	defffd04 	addi	sp,sp,-12
 10076ec:	dc000015 	stw	r16,0(sp)
 10076f0:	04004074 	movhi	r16,257
 10076f4:	84013b04 	addi	r16,r16,1260
 10076f8:	dc400115 	stw	r17,4(sp)
 10076fc:	80000015 	stw	zero,0(r16)
 1007700:	2023883a 	mov	r17,r4
 1007704:	2809883a 	mov	r4,r5
 1007708:	300b883a 	mov	r5,r6
 100770c:	380d883a 	mov	r6,r7
 1007710:	dfc00215 	stw	ra,8(sp)
 1007714:	100a4680 	call	100a468 <read>
 1007718:	1007883a 	mov	r3,r2
 100771c:	00bfffc4 	movi	r2,-1
 1007720:	18800626 	beq	r3,r2,100773c <_read_r+0x54>
 1007724:	1805883a 	mov	r2,r3
 1007728:	dfc00217 	ldw	ra,8(sp)
 100772c:	dc400117 	ldw	r17,4(sp)
 1007730:	dc000017 	ldw	r16,0(sp)
 1007734:	dec00304 	addi	sp,sp,12
 1007738:	f800283a 	ret
 100773c:	80800017 	ldw	r2,0(r16)
 1007740:	103ff826 	beq	r2,zero,1007724 <_read_r+0x3c>
 1007744:	88800015 	stw	r2,0(r17)
 1007748:	1805883a 	mov	r2,r3
 100774c:	dfc00217 	ldw	ra,8(sp)
 1007750:	dc400117 	ldw	r17,4(sp)
 1007754:	dc000017 	ldw	r16,0(sp)
 1007758:	dec00304 	addi	sp,sp,12
 100775c:	f800283a 	ret

01007760 <__udivdi3>:
 1007760:	defff104 	addi	sp,sp,-60
 1007764:	0015883a 	mov	r10,zero
 1007768:	2005883a 	mov	r2,r4
 100776c:	3011883a 	mov	r8,r6
 1007770:	df000d15 	stw	fp,52(sp)
 1007774:	dd400a15 	stw	r21,40(sp)
 1007778:	dcc00815 	stw	r19,32(sp)
 100777c:	dfc00e15 	stw	ra,56(sp)
 1007780:	ddc00c15 	stw	r23,48(sp)
 1007784:	dd800b15 	stw	r22,44(sp)
 1007788:	dd000915 	stw	r20,36(sp)
 100778c:	dc800715 	stw	r18,28(sp)
 1007790:	dc400615 	stw	r17,24(sp)
 1007794:	dc000515 	stw	r16,20(sp)
 1007798:	da800315 	stw	r10,12(sp)
 100779c:	4027883a 	mov	r19,r8
 10077a0:	1039883a 	mov	fp,r2
 10077a4:	282b883a 	mov	r21,r5
 10077a8:	da800415 	stw	r10,16(sp)
 10077ac:	3800401e 	bne	r7,zero,10078b0 <__udivdi3+0x150>
 10077b0:	2a006536 	bltu	r5,r8,1007948 <__udivdi3+0x1e8>
 10077b4:	4000b526 	beq	r8,zero,1007a8c <__udivdi3+0x32c>
 10077b8:	00bfffd4 	movui	r2,65535
 10077bc:	14c0ad36 	bltu	r2,r19,1007a74 <__udivdi3+0x314>
 10077c0:	00803fc4 	movi	r2,255
 10077c4:	14c15e36 	bltu	r2,r19,1007d40 <__udivdi3+0x5e0>
 10077c8:	000b883a 	mov	r5,zero
 10077cc:	0005883a 	mov	r2,zero
 10077d0:	9884d83a 	srl	r2,r19,r2
 10077d4:	01004074 	movhi	r4,257
 10077d8:	21339e04 	addi	r4,r4,-12680
 10077dc:	01800804 	movi	r6,32
 10077e0:	1105883a 	add	r2,r2,r4
 10077e4:	10c00003 	ldbu	r3,0(r2)
 10077e8:	28c7883a 	add	r3,r5,r3
 10077ec:	30e9c83a 	sub	r20,r6,r3
 10077f0:	a0010a1e 	bne	r20,zero,1007c1c <__udivdi3+0x4bc>
 10077f4:	982ed43a 	srli	r23,r19,16
 10077f8:	acebc83a 	sub	r21,r21,r19
 10077fc:	9dbfffcc 	andi	r22,r19,65535
 1007800:	05000044 	movi	r20,1
 1007804:	a809883a 	mov	r4,r21
 1007808:	b80b883a 	mov	r5,r23
 100780c:	10096940 	call	1009694 <__udivsi3>
 1007810:	100b883a 	mov	r5,r2
 1007814:	b009883a 	mov	r4,r22
 1007818:	1021883a 	mov	r16,r2
 100781c:	10096a40 	call	10096a4 <__mulsi3>
 1007820:	a809883a 	mov	r4,r21
 1007824:	b80b883a 	mov	r5,r23
 1007828:	1023883a 	mov	r17,r2
 100782c:	100969c0 	call	100969c <__umodsi3>
 1007830:	1004943a 	slli	r2,r2,16
 1007834:	e006d43a 	srli	r3,fp,16
 1007838:	10c4b03a 	or	r2,r2,r3
 100783c:	1440042e 	bgeu	r2,r17,1007850 <__udivdi3+0xf0>
 1007840:	14c5883a 	add	r2,r2,r19
 1007844:	843fffc4 	addi	r16,r16,-1
 1007848:	14c00136 	bltu	r2,r19,1007850 <__udivdi3+0xf0>
 100784c:	14415c36 	bltu	r2,r17,1007dc0 <__udivdi3+0x660>
 1007850:	1463c83a 	sub	r17,r2,r17
 1007854:	8809883a 	mov	r4,r17
 1007858:	b80b883a 	mov	r5,r23
 100785c:	10096940 	call	1009694 <__udivsi3>
 1007860:	100b883a 	mov	r5,r2
 1007864:	b009883a 	mov	r4,r22
 1007868:	102b883a 	mov	r21,r2
 100786c:	10096a40 	call	10096a4 <__mulsi3>
 1007870:	8809883a 	mov	r4,r17
 1007874:	b80b883a 	mov	r5,r23
 1007878:	1025883a 	mov	r18,r2
 100787c:	100969c0 	call	100969c <__umodsi3>
 1007880:	1004943a 	slli	r2,r2,16
 1007884:	e0ffffcc 	andi	r3,fp,65535
 1007888:	10c4b03a 	or	r2,r2,r3
 100788c:	1480042e 	bgeu	r2,r18,10078a0 <__udivdi3+0x140>
 1007890:	9885883a 	add	r2,r19,r2
 1007894:	ad7fffc4 	addi	r21,r21,-1
 1007898:	14c00136 	bltu	r2,r19,10078a0 <__udivdi3+0x140>
 100789c:	14813c36 	bltu	r2,r18,1007d90 <__udivdi3+0x630>
 10078a0:	8004943a 	slli	r2,r16,16
 10078a4:	a009883a 	mov	r4,r20
 10078a8:	a884b03a 	or	r2,r21,r2
 10078ac:	00001506 	br	1007904 <__udivdi3+0x1a4>
 10078b0:	380d883a 	mov	r6,r7
 10078b4:	29c06c36 	bltu	r5,r7,1007a68 <__udivdi3+0x308>
 10078b8:	00bfffd4 	movui	r2,65535
 10078bc:	11c06436 	bltu	r2,r7,1007a50 <__udivdi3+0x2f0>
 10078c0:	00803fc4 	movi	r2,255
 10078c4:	11c11836 	bltu	r2,r7,1007d28 <__udivdi3+0x5c8>
 10078c8:	000b883a 	mov	r5,zero
 10078cc:	0005883a 	mov	r2,zero
 10078d0:	3084d83a 	srl	r2,r6,r2
 10078d4:	01004074 	movhi	r4,257
 10078d8:	21339e04 	addi	r4,r4,-12680
 10078dc:	01c00804 	movi	r7,32
 10078e0:	1105883a 	add	r2,r2,r4
 10078e4:	10c00003 	ldbu	r3,0(r2)
 10078e8:	28c7883a 	add	r3,r5,r3
 10078ec:	38edc83a 	sub	r22,r7,r3
 10078f0:	b000731e 	bne	r22,zero,1007ac0 <__udivdi3+0x360>
 10078f4:	35400136 	bltu	r6,r21,10078fc <__udivdi3+0x19c>
 10078f8:	e4c05b36 	bltu	fp,r19,1007a68 <__udivdi3+0x308>
 10078fc:	00800044 	movi	r2,1
 1007900:	0009883a 	mov	r4,zero
 1007904:	d8800315 	stw	r2,12(sp)
 1007908:	d9400317 	ldw	r5,12(sp)
 100790c:	2007883a 	mov	r3,r4
 1007910:	d9000415 	stw	r4,16(sp)
 1007914:	2805883a 	mov	r2,r5
 1007918:	dfc00e17 	ldw	ra,56(sp)
 100791c:	df000d17 	ldw	fp,52(sp)
 1007920:	ddc00c17 	ldw	r23,48(sp)
 1007924:	dd800b17 	ldw	r22,44(sp)
 1007928:	dd400a17 	ldw	r21,40(sp)
 100792c:	dd000917 	ldw	r20,36(sp)
 1007930:	dcc00817 	ldw	r19,32(sp)
 1007934:	dc800717 	ldw	r18,28(sp)
 1007938:	dc400617 	ldw	r17,24(sp)
 100793c:	dc000517 	ldw	r16,20(sp)
 1007940:	dec00f04 	addi	sp,sp,60
 1007944:	f800283a 	ret
 1007948:	00bfffd4 	movui	r2,65535
 100794c:	12005636 	bltu	r2,r8,1007aa8 <__udivdi3+0x348>
 1007950:	00803fc4 	movi	r2,255
 1007954:	12010036 	bltu	r2,r8,1007d58 <__udivdi3+0x5f8>
 1007958:	000b883a 	mov	r5,zero
 100795c:	0005883a 	mov	r2,zero
 1007960:	9884d83a 	srl	r2,r19,r2
 1007964:	01004074 	movhi	r4,257
 1007968:	21339e04 	addi	r4,r4,-12680
 100796c:	01800804 	movi	r6,32
 1007970:	1105883a 	add	r2,r2,r4
 1007974:	10c00003 	ldbu	r3,0(r2)
 1007978:	28c7883a 	add	r3,r5,r3
 100797c:	30cbc83a 	sub	r5,r6,r3
 1007980:	28000626 	beq	r5,zero,100799c <__udivdi3+0x23c>
 1007984:	3145c83a 	sub	r2,r6,r5
 1007988:	e084d83a 	srl	r2,fp,r2
 100798c:	a946983a 	sll	r3,r21,r5
 1007990:	e178983a 	sll	fp,fp,r5
 1007994:	9966983a 	sll	r19,r19,r5
 1007998:	18aab03a 	or	r21,r3,r2
 100799c:	982ed43a 	srli	r23,r19,16
 10079a0:	a809883a 	mov	r4,r21
 10079a4:	9cbfffcc 	andi	r18,r19,65535
 10079a8:	b80b883a 	mov	r5,r23
 10079ac:	10096940 	call	1009694 <__udivsi3>
 10079b0:	100b883a 	mov	r5,r2
 10079b4:	9009883a 	mov	r4,r18
 10079b8:	1021883a 	mov	r16,r2
 10079bc:	10096a40 	call	10096a4 <__mulsi3>
 10079c0:	a809883a 	mov	r4,r21
 10079c4:	b80b883a 	mov	r5,r23
 10079c8:	1023883a 	mov	r17,r2
 10079cc:	100969c0 	call	100969c <__umodsi3>
 10079d0:	1004943a 	slli	r2,r2,16
 10079d4:	e006d43a 	srli	r3,fp,16
 10079d8:	10c4b03a 	or	r2,r2,r3
 10079dc:	1440042e 	bgeu	r2,r17,10079f0 <__udivdi3+0x290>
 10079e0:	14c5883a 	add	r2,r2,r19
 10079e4:	843fffc4 	addi	r16,r16,-1
 10079e8:	14c00136 	bltu	r2,r19,10079f0 <__udivdi3+0x290>
 10079ec:	1440ea36 	bltu	r2,r17,1007d98 <__udivdi3+0x638>
 10079f0:	1463c83a 	sub	r17,r2,r17
 10079f4:	8809883a 	mov	r4,r17
 10079f8:	b80b883a 	mov	r5,r23
 10079fc:	10096940 	call	1009694 <__udivsi3>
 1007a00:	100b883a 	mov	r5,r2
 1007a04:	9009883a 	mov	r4,r18
 1007a08:	102b883a 	mov	r21,r2
 1007a0c:	10096a40 	call	10096a4 <__mulsi3>
 1007a10:	8809883a 	mov	r4,r17
 1007a14:	b80b883a 	mov	r5,r23
 1007a18:	1025883a 	mov	r18,r2
 1007a1c:	100969c0 	call	100969c <__umodsi3>
 1007a20:	1004943a 	slli	r2,r2,16
 1007a24:	e0ffffcc 	andi	r3,fp,65535
 1007a28:	10c4b03a 	or	r2,r2,r3
 1007a2c:	1480042e 	bgeu	r2,r18,1007a40 <__udivdi3+0x2e0>
 1007a30:	9885883a 	add	r2,r19,r2
 1007a34:	ad7fffc4 	addi	r21,r21,-1
 1007a38:	14c00136 	bltu	r2,r19,1007a40 <__udivdi3+0x2e0>
 1007a3c:	1480d936 	bltu	r2,r18,1007da4 <__udivdi3+0x644>
 1007a40:	8004943a 	slli	r2,r16,16
 1007a44:	0009883a 	mov	r4,zero
 1007a48:	a884b03a 	or	r2,r21,r2
 1007a4c:	003fad06 	br	1007904 <__udivdi3+0x1a4>
 1007a50:	00804034 	movhi	r2,256
 1007a54:	10bfffc4 	addi	r2,r2,-1
 1007a58:	11c0b636 	bltu	r2,r7,1007d34 <__udivdi3+0x5d4>
 1007a5c:	01400404 	movi	r5,16
 1007a60:	2805883a 	mov	r2,r5
 1007a64:	003f9a06 	br	10078d0 <__udivdi3+0x170>
 1007a68:	0005883a 	mov	r2,zero
 1007a6c:	0009883a 	mov	r4,zero
 1007a70:	003fa406 	br	1007904 <__udivdi3+0x1a4>
 1007a74:	00804034 	movhi	r2,256
 1007a78:	10bfffc4 	addi	r2,r2,-1
 1007a7c:	14c0b336 	bltu	r2,r19,1007d4c <__udivdi3+0x5ec>
 1007a80:	01400404 	movi	r5,16
 1007a84:	2805883a 	mov	r2,r5
 1007a88:	003f5106 	br	10077d0 <__udivdi3+0x70>
 1007a8c:	01000044 	movi	r4,1
 1007a90:	000b883a 	mov	r5,zero
 1007a94:	10096940 	call	1009694 <__udivsi3>
 1007a98:	1027883a 	mov	r19,r2
 1007a9c:	00bfffd4 	movui	r2,65535
 1007aa0:	14fff436 	bltu	r2,r19,1007a74 <__udivdi3+0x314>
 1007aa4:	003f4606 	br	10077c0 <__udivdi3+0x60>
 1007aa8:	00804034 	movhi	r2,256
 1007aac:	10bfffc4 	addi	r2,r2,-1
 1007ab0:	1200ac36 	bltu	r2,r8,1007d64 <__udivdi3+0x604>
 1007ab4:	01400404 	movi	r5,16
 1007ab8:	2805883a 	mov	r2,r5
 1007abc:	003fa806 	br	1007960 <__udivdi3+0x200>
 1007ac0:	3d85c83a 	sub	r2,r7,r22
 1007ac4:	3588983a 	sll	r4,r6,r22
 1007ac8:	9886d83a 	srl	r3,r19,r2
 1007acc:	a8a2d83a 	srl	r17,r21,r2
 1007ad0:	e084d83a 	srl	r2,fp,r2
 1007ad4:	20eeb03a 	or	r23,r4,r3
 1007ad8:	b824d43a 	srli	r18,r23,16
 1007adc:	ad86983a 	sll	r3,r21,r22
 1007ae0:	8809883a 	mov	r4,r17
 1007ae4:	900b883a 	mov	r5,r18
 1007ae8:	1886b03a 	or	r3,r3,r2
 1007aec:	d8c00115 	stw	r3,4(sp)
 1007af0:	bc3fffcc 	andi	r16,r23,65535
 1007af4:	10096940 	call	1009694 <__udivsi3>
 1007af8:	100b883a 	mov	r5,r2
 1007afc:	8009883a 	mov	r4,r16
 1007b00:	1029883a 	mov	r20,r2
 1007b04:	10096a40 	call	10096a4 <__mulsi3>
 1007b08:	900b883a 	mov	r5,r18
 1007b0c:	8809883a 	mov	r4,r17
 1007b10:	102b883a 	mov	r21,r2
 1007b14:	100969c0 	call	100969c <__umodsi3>
 1007b18:	d9400117 	ldw	r5,4(sp)
 1007b1c:	1004943a 	slli	r2,r2,16
 1007b20:	9da6983a 	sll	r19,r19,r22
 1007b24:	2806d43a 	srli	r3,r5,16
 1007b28:	10c4b03a 	or	r2,r2,r3
 1007b2c:	1540032e 	bgeu	r2,r21,1007b3c <__udivdi3+0x3dc>
 1007b30:	15c5883a 	add	r2,r2,r23
 1007b34:	a53fffc4 	addi	r20,r20,-1
 1007b38:	15c0912e 	bgeu	r2,r23,1007d80 <__udivdi3+0x620>
 1007b3c:	1563c83a 	sub	r17,r2,r21
 1007b40:	8809883a 	mov	r4,r17
 1007b44:	900b883a 	mov	r5,r18
 1007b48:	10096940 	call	1009694 <__udivsi3>
 1007b4c:	100b883a 	mov	r5,r2
 1007b50:	8009883a 	mov	r4,r16
 1007b54:	102b883a 	mov	r21,r2
 1007b58:	10096a40 	call	10096a4 <__mulsi3>
 1007b5c:	8809883a 	mov	r4,r17
 1007b60:	900b883a 	mov	r5,r18
 1007b64:	1021883a 	mov	r16,r2
 1007b68:	100969c0 	call	100969c <__umodsi3>
 1007b6c:	da800117 	ldw	r10,4(sp)
 1007b70:	1004943a 	slli	r2,r2,16
 1007b74:	50ffffcc 	andi	r3,r10,65535
 1007b78:	10c6b03a 	or	r3,r2,r3
 1007b7c:	1c00032e 	bgeu	r3,r16,1007b8c <__udivdi3+0x42c>
 1007b80:	1dc7883a 	add	r3,r3,r23
 1007b84:	ad7fffc4 	addi	r21,r21,-1
 1007b88:	1dc0792e 	bgeu	r3,r23,1007d70 <__udivdi3+0x610>
 1007b8c:	a004943a 	slli	r2,r20,16
 1007b90:	982ed43a 	srli	r23,r19,16
 1007b94:	9cffffcc 	andi	r19,r19,65535
 1007b98:	a8a4b03a 	or	r18,r21,r2
 1007b9c:	947fffcc 	andi	r17,r18,65535
 1007ba0:	902ad43a 	srli	r21,r18,16
 1007ba4:	8809883a 	mov	r4,r17
 1007ba8:	980b883a 	mov	r5,r19
 1007bac:	1c21c83a 	sub	r16,r3,r16
 1007bb0:	10096a40 	call	10096a4 <__mulsi3>
 1007bb4:	8809883a 	mov	r4,r17
 1007bb8:	b80b883a 	mov	r5,r23
 1007bbc:	1029883a 	mov	r20,r2
 1007bc0:	10096a40 	call	10096a4 <__mulsi3>
 1007bc4:	980b883a 	mov	r5,r19
 1007bc8:	a809883a 	mov	r4,r21
 1007bcc:	1023883a 	mov	r17,r2
 1007bd0:	10096a40 	call	10096a4 <__mulsi3>
 1007bd4:	a809883a 	mov	r4,r21
 1007bd8:	b80b883a 	mov	r5,r23
 1007bdc:	1027883a 	mov	r19,r2
 1007be0:	10096a40 	call	10096a4 <__mulsi3>
 1007be4:	1009883a 	mov	r4,r2
 1007be8:	a004d43a 	srli	r2,r20,16
 1007bec:	8ce3883a 	add	r17,r17,r19
 1007bf0:	1447883a 	add	r3,r2,r17
 1007bf4:	1cc0022e 	bgeu	r3,r19,1007c00 <__udivdi3+0x4a0>
 1007bf8:	00800074 	movhi	r2,1
 1007bfc:	2089883a 	add	r4,r4,r2
 1007c00:	1804d43a 	srli	r2,r3,16
 1007c04:	2085883a 	add	r2,r4,r2
 1007c08:	80804436 	bltu	r16,r2,1007d1c <__udivdi3+0x5bc>
 1007c0c:	80803e26 	beq	r16,r2,1007d08 <__udivdi3+0x5a8>
 1007c10:	9005883a 	mov	r2,r18
 1007c14:	0009883a 	mov	r4,zero
 1007c18:	003f3a06 	br	1007904 <__udivdi3+0x1a4>
 1007c1c:	9d26983a 	sll	r19,r19,r20
 1007c20:	3505c83a 	sub	r2,r6,r20
 1007c24:	a8a2d83a 	srl	r17,r21,r2
 1007c28:	982ed43a 	srli	r23,r19,16
 1007c2c:	e084d83a 	srl	r2,fp,r2
 1007c30:	ad06983a 	sll	r3,r21,r20
 1007c34:	8809883a 	mov	r4,r17
 1007c38:	b80b883a 	mov	r5,r23
 1007c3c:	1886b03a 	or	r3,r3,r2
 1007c40:	d8c00015 	stw	r3,0(sp)
 1007c44:	9dbfffcc 	andi	r22,r19,65535
 1007c48:	10096940 	call	1009694 <__udivsi3>
 1007c4c:	100b883a 	mov	r5,r2
 1007c50:	b009883a 	mov	r4,r22
 1007c54:	d8800215 	stw	r2,8(sp)
 1007c58:	10096a40 	call	10096a4 <__mulsi3>
 1007c5c:	8809883a 	mov	r4,r17
 1007c60:	b80b883a 	mov	r5,r23
 1007c64:	102b883a 	mov	r21,r2
 1007c68:	100969c0 	call	100969c <__umodsi3>
 1007c6c:	d9000017 	ldw	r4,0(sp)
 1007c70:	1004943a 	slli	r2,r2,16
 1007c74:	2006d43a 	srli	r3,r4,16
 1007c78:	10c4b03a 	or	r2,r2,r3
 1007c7c:	1540052e 	bgeu	r2,r21,1007c94 <__udivdi3+0x534>
 1007c80:	d9400217 	ldw	r5,8(sp)
 1007c84:	14c5883a 	add	r2,r2,r19
 1007c88:	297fffc4 	addi	r5,r5,-1
 1007c8c:	d9400215 	stw	r5,8(sp)
 1007c90:	14c0462e 	bgeu	r2,r19,1007dac <__udivdi3+0x64c>
 1007c94:	1563c83a 	sub	r17,r2,r21
 1007c98:	8809883a 	mov	r4,r17
 1007c9c:	b80b883a 	mov	r5,r23
 1007ca0:	10096940 	call	1009694 <__udivsi3>
 1007ca4:	100b883a 	mov	r5,r2
 1007ca8:	b009883a 	mov	r4,r22
 1007cac:	1025883a 	mov	r18,r2
 1007cb0:	10096a40 	call	10096a4 <__mulsi3>
 1007cb4:	8809883a 	mov	r4,r17
 1007cb8:	b80b883a 	mov	r5,r23
 1007cbc:	1021883a 	mov	r16,r2
 1007cc0:	100969c0 	call	100969c <__umodsi3>
 1007cc4:	da800017 	ldw	r10,0(sp)
 1007cc8:	1004943a 	slli	r2,r2,16
 1007ccc:	50ffffcc 	andi	r3,r10,65535
 1007cd0:	10c6b03a 	or	r3,r2,r3
 1007cd4:	1c00062e 	bgeu	r3,r16,1007cf0 <__udivdi3+0x590>
 1007cd8:	1cc7883a 	add	r3,r3,r19
 1007cdc:	94bfffc4 	addi	r18,r18,-1
 1007ce0:	1cc00336 	bltu	r3,r19,1007cf0 <__udivdi3+0x590>
 1007ce4:	1c00022e 	bgeu	r3,r16,1007cf0 <__udivdi3+0x590>
 1007ce8:	94bfffc4 	addi	r18,r18,-1
 1007cec:	1cc7883a 	add	r3,r3,r19
 1007cf0:	d9000217 	ldw	r4,8(sp)
 1007cf4:	e538983a 	sll	fp,fp,r20
 1007cf8:	1c2bc83a 	sub	r21,r3,r16
 1007cfc:	2004943a 	slli	r2,r4,16
 1007d00:	90a8b03a 	or	r20,r18,r2
 1007d04:	003ebf06 	br	1007804 <__udivdi3+0xa4>
 1007d08:	1804943a 	slli	r2,r3,16
 1007d0c:	e588983a 	sll	r4,fp,r22
 1007d10:	a0ffffcc 	andi	r3,r20,65535
 1007d14:	10c5883a 	add	r2,r2,r3
 1007d18:	20bfbd2e 	bgeu	r4,r2,1007c10 <__udivdi3+0x4b0>
 1007d1c:	90bfffc4 	addi	r2,r18,-1
 1007d20:	0009883a 	mov	r4,zero
 1007d24:	003ef706 	br	1007904 <__udivdi3+0x1a4>
 1007d28:	01400204 	movi	r5,8
 1007d2c:	2805883a 	mov	r2,r5
 1007d30:	003ee706 	br	10078d0 <__udivdi3+0x170>
 1007d34:	01400604 	movi	r5,24
 1007d38:	2805883a 	mov	r2,r5
 1007d3c:	003ee406 	br	10078d0 <__udivdi3+0x170>
 1007d40:	01400204 	movi	r5,8
 1007d44:	2805883a 	mov	r2,r5
 1007d48:	003ea106 	br	10077d0 <__udivdi3+0x70>
 1007d4c:	01400604 	movi	r5,24
 1007d50:	2805883a 	mov	r2,r5
 1007d54:	003e9e06 	br	10077d0 <__udivdi3+0x70>
 1007d58:	01400204 	movi	r5,8
 1007d5c:	2805883a 	mov	r2,r5
 1007d60:	003eff06 	br	1007960 <__udivdi3+0x200>
 1007d64:	01400604 	movi	r5,24
 1007d68:	2805883a 	mov	r2,r5
 1007d6c:	003efc06 	br	1007960 <__udivdi3+0x200>
 1007d70:	1c3f862e 	bgeu	r3,r16,1007b8c <__udivdi3+0x42c>
 1007d74:	1dc7883a 	add	r3,r3,r23
 1007d78:	ad7fffc4 	addi	r21,r21,-1
 1007d7c:	003f8306 	br	1007b8c <__udivdi3+0x42c>
 1007d80:	157f6e2e 	bgeu	r2,r21,1007b3c <__udivdi3+0x3dc>
 1007d84:	a53fffc4 	addi	r20,r20,-1
 1007d88:	15c5883a 	add	r2,r2,r23
 1007d8c:	003f6b06 	br	1007b3c <__udivdi3+0x3dc>
 1007d90:	ad7fffc4 	addi	r21,r21,-1
 1007d94:	003ec206 	br	10078a0 <__udivdi3+0x140>
 1007d98:	843fffc4 	addi	r16,r16,-1
 1007d9c:	14c5883a 	add	r2,r2,r19
 1007da0:	003f1306 	br	10079f0 <__udivdi3+0x290>
 1007da4:	ad7fffc4 	addi	r21,r21,-1
 1007da8:	003f2506 	br	1007a40 <__udivdi3+0x2e0>
 1007dac:	157fb92e 	bgeu	r2,r21,1007c94 <__udivdi3+0x534>
 1007db0:	297fffc4 	addi	r5,r5,-1
 1007db4:	14c5883a 	add	r2,r2,r19
 1007db8:	d9400215 	stw	r5,8(sp)
 1007dbc:	003fb506 	br	1007c94 <__udivdi3+0x534>
 1007dc0:	843fffc4 	addi	r16,r16,-1
 1007dc4:	14c5883a 	add	r2,r2,r19
 1007dc8:	003ea106 	br	1007850 <__udivdi3+0xf0>

01007dcc <__umoddi3>:
 1007dcc:	defff004 	addi	sp,sp,-64
 1007dd0:	3011883a 	mov	r8,r6
 1007dd4:	000d883a 	mov	r6,zero
 1007dd8:	dd400b15 	stw	r21,44(sp)
 1007ddc:	dcc00915 	stw	r19,36(sp)
 1007de0:	dc000615 	stw	r16,24(sp)
 1007de4:	dfc00f15 	stw	ra,60(sp)
 1007de8:	df000e15 	stw	fp,56(sp)
 1007dec:	ddc00d15 	stw	r23,52(sp)
 1007df0:	dd800c15 	stw	r22,48(sp)
 1007df4:	dd000a15 	stw	r20,40(sp)
 1007df8:	dc800815 	stw	r18,32(sp)
 1007dfc:	dc400715 	stw	r17,28(sp)
 1007e00:	2817883a 	mov	r11,r5
 1007e04:	d9800415 	stw	r6,16(sp)
 1007e08:	4027883a 	mov	r19,r8
 1007e0c:	d9800515 	stw	r6,20(sp)
 1007e10:	2021883a 	mov	r16,r4
 1007e14:	282b883a 	mov	r21,r5
 1007e18:	38002c1e 	bne	r7,zero,1007ecc <__umoddi3+0x100>
 1007e1c:	2a005636 	bltu	r5,r8,1007f78 <__umoddi3+0x1ac>
 1007e20:	40009a26 	beq	r8,zero,100808c <__umoddi3+0x2c0>
 1007e24:	00bfffd4 	movui	r2,65535
 1007e28:	14c09236 	bltu	r2,r19,1008074 <__umoddi3+0x2a8>
 1007e2c:	00803fc4 	movi	r2,255
 1007e30:	14c15c36 	bltu	r2,r19,10083a4 <__umoddi3+0x5d8>
 1007e34:	000b883a 	mov	r5,zero
 1007e38:	0005883a 	mov	r2,zero
 1007e3c:	9884d83a 	srl	r2,r19,r2
 1007e40:	01004074 	movhi	r4,257
 1007e44:	21339e04 	addi	r4,r4,-12680
 1007e48:	01800804 	movi	r6,32
 1007e4c:	1105883a 	add	r2,r2,r4
 1007e50:	10c00003 	ldbu	r3,0(r2)
 1007e54:	28c7883a 	add	r3,r5,r3
 1007e58:	30e5c83a 	sub	r18,r6,r3
 1007e5c:	9000a41e 	bne	r18,zero,10080f0 <__umoddi3+0x324>
 1007e60:	982ed43a 	srli	r23,r19,16
 1007e64:	acebc83a 	sub	r21,r21,r19
 1007e68:	9d3fffcc 	andi	r20,r19,65535
 1007e6c:	002d883a 	mov	r22,zero
 1007e70:	a809883a 	mov	r4,r21
 1007e74:	b80b883a 	mov	r5,r23
 1007e78:	10096940 	call	1009694 <__udivsi3>
 1007e7c:	100b883a 	mov	r5,r2
 1007e80:	a009883a 	mov	r4,r20
 1007e84:	10096a40 	call	10096a4 <__mulsi3>
 1007e88:	a809883a 	mov	r4,r21
 1007e8c:	b80b883a 	mov	r5,r23
 1007e90:	1023883a 	mov	r17,r2
 1007e94:	100969c0 	call	100969c <__umodsi3>
 1007e98:	1004943a 	slli	r2,r2,16
 1007e9c:	8006d43a 	srli	r3,r16,16
 1007ea0:	10c4b03a 	or	r2,r2,r3
 1007ea4:	1440032e 	bgeu	r2,r17,1007eb4 <__umoddi3+0xe8>
 1007ea8:	14c5883a 	add	r2,r2,r19
 1007eac:	14c00136 	bltu	r2,r19,1007eb4 <__umoddi3+0xe8>
 1007eb0:	14415836 	bltu	r2,r17,1008414 <__umoddi3+0x648>
 1007eb4:	1463c83a 	sub	r17,r2,r17
 1007eb8:	8809883a 	mov	r4,r17
 1007ebc:	b80b883a 	mov	r5,r23
 1007ec0:	10096940 	call	1009694 <__udivsi3>
 1007ec4:	a009883a 	mov	r4,r20
 1007ec8:	00005306 	br	1008018 <__umoddi3+0x24c>
 1007ecc:	380d883a 	mov	r6,r7
 1007ed0:	29c0132e 	bgeu	r5,r7,1007f20 <__umoddi3+0x154>
 1007ed4:	d9000415 	stw	r4,16(sp)
 1007ed8:	d9400515 	stw	r5,20(sp)
 1007edc:	d9400417 	ldw	r5,16(sp)
 1007ee0:	5813883a 	mov	r9,r11
 1007ee4:	2811883a 	mov	r8,r5
 1007ee8:	4005883a 	mov	r2,r8
 1007eec:	4807883a 	mov	r3,r9
 1007ef0:	dfc00f17 	ldw	ra,60(sp)
 1007ef4:	df000e17 	ldw	fp,56(sp)
 1007ef8:	ddc00d17 	ldw	r23,52(sp)
 1007efc:	dd800c17 	ldw	r22,48(sp)
 1007f00:	dd400b17 	ldw	r21,44(sp)
 1007f04:	dd000a17 	ldw	r20,40(sp)
 1007f08:	dcc00917 	ldw	r19,36(sp)
 1007f0c:	dc800817 	ldw	r18,32(sp)
 1007f10:	dc400717 	ldw	r17,28(sp)
 1007f14:	dc000617 	ldw	r16,24(sp)
 1007f18:	dec01004 	addi	sp,sp,64
 1007f1c:	f800283a 	ret
 1007f20:	00bfffd4 	movui	r2,65535
 1007f24:	11c06636 	bltu	r2,r7,10080c0 <__umoddi3+0x2f4>
 1007f28:	00803fc4 	movi	r2,255
 1007f2c:	11c12036 	bltu	r2,r7,10083b0 <__umoddi3+0x5e4>
 1007f30:	000b883a 	mov	r5,zero
 1007f34:	0005883a 	mov	r2,zero
 1007f38:	3084d83a 	srl	r2,r6,r2
 1007f3c:	01004074 	movhi	r4,257
 1007f40:	21339e04 	addi	r4,r4,-12680
 1007f44:	01c00804 	movi	r7,32
 1007f48:	1105883a 	add	r2,r2,r4
 1007f4c:	10c00003 	ldbu	r3,0(r2)
 1007f50:	28c7883a 	add	r3,r5,r3
 1007f54:	38e5c83a 	sub	r18,r7,r3
 1007f58:	9000941e 	bne	r18,zero,10081ac <__umoddi3+0x3e0>
 1007f5c:	35405e36 	bltu	r6,r21,10080d8 <__umoddi3+0x30c>
 1007f60:	84c05d2e 	bgeu	r16,r19,10080d8 <__umoddi3+0x30c>
 1007f64:	8011883a 	mov	r8,r16
 1007f68:	a813883a 	mov	r9,r21
 1007f6c:	dc000415 	stw	r16,16(sp)
 1007f70:	dd400515 	stw	r21,20(sp)
 1007f74:	003fdc06 	br	1007ee8 <__umoddi3+0x11c>
 1007f78:	00bfffd4 	movui	r2,65535
 1007f7c:	12004a36 	bltu	r2,r8,10080a8 <__umoddi3+0x2dc>
 1007f80:	00803fc4 	movi	r2,255
 1007f84:	12010d36 	bltu	r2,r8,10083bc <__umoddi3+0x5f0>
 1007f88:	000b883a 	mov	r5,zero
 1007f8c:	0005883a 	mov	r2,zero
 1007f90:	9884d83a 	srl	r2,r19,r2
 1007f94:	01004074 	movhi	r4,257
 1007f98:	21339e04 	addi	r4,r4,-12680
 1007f9c:	01800804 	movi	r6,32
 1007fa0:	1105883a 	add	r2,r2,r4
 1007fa4:	10c00003 	ldbu	r3,0(r2)
 1007fa8:	28c7883a 	add	r3,r5,r3
 1007fac:	30c7c83a 	sub	r3,r6,r3
 1007fb0:	1800dc1e 	bne	r3,zero,1008324 <__umoddi3+0x558>
 1007fb4:	002d883a 	mov	r22,zero
 1007fb8:	982ed43a 	srli	r23,r19,16
 1007fbc:	a809883a 	mov	r4,r21
 1007fc0:	9cbfffcc 	andi	r18,r19,65535
 1007fc4:	b80b883a 	mov	r5,r23
 1007fc8:	10096940 	call	1009694 <__udivsi3>
 1007fcc:	100b883a 	mov	r5,r2
 1007fd0:	9009883a 	mov	r4,r18
 1007fd4:	10096a40 	call	10096a4 <__mulsi3>
 1007fd8:	a809883a 	mov	r4,r21
 1007fdc:	b80b883a 	mov	r5,r23
 1007fe0:	1023883a 	mov	r17,r2
 1007fe4:	100969c0 	call	100969c <__umodsi3>
 1007fe8:	1004943a 	slli	r2,r2,16
 1007fec:	8006d43a 	srli	r3,r16,16
 1007ff0:	10c4b03a 	or	r2,r2,r3
 1007ff4:	1440032e 	bgeu	r2,r17,1008004 <__umoddi3+0x238>
 1007ff8:	14c5883a 	add	r2,r2,r19
 1007ffc:	14c00136 	bltu	r2,r19,1008004 <__umoddi3+0x238>
 1008000:	14410236 	bltu	r2,r17,100840c <__umoddi3+0x640>
 1008004:	1463c83a 	sub	r17,r2,r17
 1008008:	8809883a 	mov	r4,r17
 100800c:	b80b883a 	mov	r5,r23
 1008010:	10096940 	call	1009694 <__udivsi3>
 1008014:	9009883a 	mov	r4,r18
 1008018:	100b883a 	mov	r5,r2
 100801c:	10096a40 	call	10096a4 <__mulsi3>
 1008020:	8809883a 	mov	r4,r17
 1008024:	b80b883a 	mov	r5,r23
 1008028:	102b883a 	mov	r21,r2
 100802c:	100969c0 	call	100969c <__umodsi3>
 1008030:	1004943a 	slli	r2,r2,16
 1008034:	80ffffcc 	andi	r3,r16,65535
 1008038:	10c4b03a 	or	r2,r2,r3
 100803c:	1540042e 	bgeu	r2,r21,1008050 <__umoddi3+0x284>
 1008040:	14c5883a 	add	r2,r2,r19
 1008044:	14c00236 	bltu	r2,r19,1008050 <__umoddi3+0x284>
 1008048:	1540012e 	bgeu	r2,r21,1008050 <__umoddi3+0x284>
 100804c:	14c5883a 	add	r2,r2,r19
 1008050:	1545c83a 	sub	r2,r2,r21
 1008054:	1584d83a 	srl	r2,r2,r22
 1008058:	0013883a 	mov	r9,zero
 100805c:	d8800415 	stw	r2,16(sp)
 1008060:	d8c00417 	ldw	r3,16(sp)
 1008064:	0005883a 	mov	r2,zero
 1008068:	d8800515 	stw	r2,20(sp)
 100806c:	1811883a 	mov	r8,r3
 1008070:	003f9d06 	br	1007ee8 <__umoddi3+0x11c>
 1008074:	00804034 	movhi	r2,256
 1008078:	10bfffc4 	addi	r2,r2,-1
 100807c:	14c0c636 	bltu	r2,r19,1008398 <__umoddi3+0x5cc>
 1008080:	01400404 	movi	r5,16
 1008084:	2805883a 	mov	r2,r5
 1008088:	003f6c06 	br	1007e3c <__umoddi3+0x70>
 100808c:	01000044 	movi	r4,1
 1008090:	000b883a 	mov	r5,zero
 1008094:	10096940 	call	1009694 <__udivsi3>
 1008098:	1027883a 	mov	r19,r2
 100809c:	00bfffd4 	movui	r2,65535
 10080a0:	14fff436 	bltu	r2,r19,1008074 <__umoddi3+0x2a8>
 10080a4:	003f6106 	br	1007e2c <__umoddi3+0x60>
 10080a8:	00804034 	movhi	r2,256
 10080ac:	10bfffc4 	addi	r2,r2,-1
 10080b0:	1200c536 	bltu	r2,r8,10083c8 <__umoddi3+0x5fc>
 10080b4:	01400404 	movi	r5,16
 10080b8:	2805883a 	mov	r2,r5
 10080bc:	003fb406 	br	1007f90 <__umoddi3+0x1c4>
 10080c0:	00804034 	movhi	r2,256
 10080c4:	10bfffc4 	addi	r2,r2,-1
 10080c8:	11c0c236 	bltu	r2,r7,10083d4 <__umoddi3+0x608>
 10080cc:	01400404 	movi	r5,16
 10080d0:	2805883a 	mov	r2,r5
 10080d4:	003f9806 	br	1007f38 <__umoddi3+0x16c>
 10080d8:	84c9c83a 	sub	r4,r16,r19
 10080dc:	8105803a 	cmpltu	r2,r16,r4
 10080e0:	a987c83a 	sub	r3,r21,r6
 10080e4:	18abc83a 	sub	r21,r3,r2
 10080e8:	2021883a 	mov	r16,r4
 10080ec:	003f9d06 	br	1007f64 <__umoddi3+0x198>
 10080f0:	9ca6983a 	sll	r19,r19,r18
 10080f4:	3485c83a 	sub	r2,r6,r18
 10080f8:	a8a2d83a 	srl	r17,r21,r2
 10080fc:	982ed43a 	srli	r23,r19,16
 1008100:	ac86983a 	sll	r3,r21,r18
 1008104:	8084d83a 	srl	r2,r16,r2
 1008108:	8809883a 	mov	r4,r17
 100810c:	b80b883a 	mov	r5,r23
 1008110:	18b8b03a 	or	fp,r3,r2
 1008114:	9d3fffcc 	andi	r20,r19,65535
 1008118:	10096940 	call	1009694 <__udivsi3>
 100811c:	100b883a 	mov	r5,r2
 1008120:	a009883a 	mov	r4,r20
 1008124:	10096a40 	call	10096a4 <__mulsi3>
 1008128:	8809883a 	mov	r4,r17
 100812c:	b80b883a 	mov	r5,r23
 1008130:	102b883a 	mov	r21,r2
 1008134:	100969c0 	call	100969c <__umodsi3>
 1008138:	1004943a 	slli	r2,r2,16
 100813c:	e006d43a 	srli	r3,fp,16
 1008140:	902d883a 	mov	r22,r18
 1008144:	10c4b03a 	or	r2,r2,r3
 1008148:	1540022e 	bgeu	r2,r21,1008154 <__umoddi3+0x388>
 100814c:	14c5883a 	add	r2,r2,r19
 1008150:	14c0ab2e 	bgeu	r2,r19,1008400 <__umoddi3+0x634>
 1008154:	1563c83a 	sub	r17,r2,r21
 1008158:	8809883a 	mov	r4,r17
 100815c:	b80b883a 	mov	r5,r23
 1008160:	10096940 	call	1009694 <__udivsi3>
 1008164:	100b883a 	mov	r5,r2
 1008168:	a009883a 	mov	r4,r20
 100816c:	10096a40 	call	10096a4 <__mulsi3>
 1008170:	8809883a 	mov	r4,r17
 1008174:	b80b883a 	mov	r5,r23
 1008178:	102b883a 	mov	r21,r2
 100817c:	100969c0 	call	100969c <__umodsi3>
 1008180:	1004943a 	slli	r2,r2,16
 1008184:	e0ffffcc 	andi	r3,fp,65535
 1008188:	10c4b03a 	or	r2,r2,r3
 100818c:	1540042e 	bgeu	r2,r21,10081a0 <__umoddi3+0x3d4>
 1008190:	14c5883a 	add	r2,r2,r19
 1008194:	14c00236 	bltu	r2,r19,10081a0 <__umoddi3+0x3d4>
 1008198:	1540012e 	bgeu	r2,r21,10081a0 <__umoddi3+0x3d4>
 100819c:	14c5883a 	add	r2,r2,r19
 10081a0:	84a0983a 	sll	r16,r16,r18
 10081a4:	156bc83a 	sub	r21,r2,r21
 10081a8:	003f3106 	br	1007e70 <__umoddi3+0xa4>
 10081ac:	3c8fc83a 	sub	r7,r7,r18
 10081b0:	3486983a 	sll	r3,r6,r18
 10081b4:	99c4d83a 	srl	r2,r19,r7
 10081b8:	a9e2d83a 	srl	r17,r21,r7
 10081bc:	ac8c983a 	sll	r6,r21,r18
 10081c0:	18acb03a 	or	r22,r3,r2
 10081c4:	b02ed43a 	srli	r23,r22,16
 10081c8:	81c4d83a 	srl	r2,r16,r7
 10081cc:	8809883a 	mov	r4,r17
 10081d0:	b80b883a 	mov	r5,r23
 10081d4:	308cb03a 	or	r6,r6,r2
 10081d8:	d9c00315 	stw	r7,12(sp)
 10081dc:	d9800215 	stw	r6,8(sp)
 10081e0:	b53fffcc 	andi	r20,r22,65535
 10081e4:	10096940 	call	1009694 <__udivsi3>
 10081e8:	100b883a 	mov	r5,r2
 10081ec:	a009883a 	mov	r4,r20
 10081f0:	1039883a 	mov	fp,r2
 10081f4:	10096a40 	call	10096a4 <__mulsi3>
 10081f8:	8809883a 	mov	r4,r17
 10081fc:	b80b883a 	mov	r5,r23
 1008200:	102b883a 	mov	r21,r2
 1008204:	100969c0 	call	100969c <__umodsi3>
 1008208:	d9000217 	ldw	r4,8(sp)
 100820c:	1004943a 	slli	r2,r2,16
 1008210:	9ca6983a 	sll	r19,r19,r18
 1008214:	2006d43a 	srli	r3,r4,16
 1008218:	84a0983a 	sll	r16,r16,r18
 100821c:	dcc00015 	stw	r19,0(sp)
 1008220:	10c4b03a 	or	r2,r2,r3
 1008224:	dc000115 	stw	r16,4(sp)
 1008228:	1540032e 	bgeu	r2,r21,1008238 <__umoddi3+0x46c>
 100822c:	1585883a 	add	r2,r2,r22
 1008230:	e73fffc4 	addi	fp,fp,-1
 1008234:	15806e2e 	bgeu	r2,r22,10083f0 <__umoddi3+0x624>
 1008238:	1563c83a 	sub	r17,r2,r21
 100823c:	8809883a 	mov	r4,r17
 1008240:	b80b883a 	mov	r5,r23
 1008244:	10096940 	call	1009694 <__udivsi3>
 1008248:	100b883a 	mov	r5,r2
 100824c:	a009883a 	mov	r4,r20
 1008250:	1021883a 	mov	r16,r2
 1008254:	10096a40 	call	10096a4 <__mulsi3>
 1008258:	b80b883a 	mov	r5,r23
 100825c:	8809883a 	mov	r4,r17
 1008260:	1029883a 	mov	r20,r2
 1008264:	100969c0 	call	100969c <__umodsi3>
 1008268:	d9400217 	ldw	r5,8(sp)
 100826c:	1004943a 	slli	r2,r2,16
 1008270:	28ffffcc 	andi	r3,r5,65535
 1008274:	10c4b03a 	or	r2,r2,r3
 1008278:	1500032e 	bgeu	r2,r20,1008288 <__umoddi3+0x4bc>
 100827c:	1585883a 	add	r2,r2,r22
 1008280:	843fffc4 	addi	r16,r16,-1
 1008284:	1580562e 	bgeu	r2,r22,10083e0 <__umoddi3+0x614>
 1008288:	d9800017 	ldw	r6,0(sp)
 100828c:	e022943a 	slli	r17,fp,16
 1008290:	302ed43a 	srli	r23,r6,16
 1008294:	8462b03a 	or	r17,r16,r17
 1008298:	34ffffcc 	andi	r19,r6,65535
 100829c:	882ad43a 	srli	r21,r17,16
 10082a0:	8c7fffcc 	andi	r17,r17,65535
 10082a4:	8809883a 	mov	r4,r17
 10082a8:	980b883a 	mov	r5,r19
 10082ac:	1521c83a 	sub	r16,r2,r20
 10082b0:	10096a40 	call	10096a4 <__mulsi3>
 10082b4:	8809883a 	mov	r4,r17
 10082b8:	b80b883a 	mov	r5,r23
 10082bc:	1029883a 	mov	r20,r2
 10082c0:	10096a40 	call	10096a4 <__mulsi3>
 10082c4:	980b883a 	mov	r5,r19
 10082c8:	a809883a 	mov	r4,r21
 10082cc:	1023883a 	mov	r17,r2
 10082d0:	10096a40 	call	10096a4 <__mulsi3>
 10082d4:	a809883a 	mov	r4,r21
 10082d8:	b80b883a 	mov	r5,r23
 10082dc:	1027883a 	mov	r19,r2
 10082e0:	10096a40 	call	10096a4 <__mulsi3>
 10082e4:	100b883a 	mov	r5,r2
 10082e8:	a004d43a 	srli	r2,r20,16
 10082ec:	8ce3883a 	add	r17,r17,r19
 10082f0:	1449883a 	add	r4,r2,r17
 10082f4:	24c0022e 	bgeu	r4,r19,1008300 <__umoddi3+0x534>
 10082f8:	00800074 	movhi	r2,1
 10082fc:	288b883a 	add	r5,r5,r2
 1008300:	2004d43a 	srli	r2,r4,16
 1008304:	2008943a 	slli	r4,r4,16
 1008308:	a0ffffcc 	andi	r3,r20,65535
 100830c:	288d883a 	add	r6,r5,r2
 1008310:	20c9883a 	add	r4,r4,r3
 1008314:	81800b36 	bltu	r16,r6,1008344 <__umoddi3+0x578>
 1008318:	81804026 	beq	r16,r6,100841c <__umoddi3+0x650>
 100831c:	818dc83a 	sub	r6,r16,r6
 1008320:	00000f06 	br	1008360 <__umoddi3+0x594>
 1008324:	30c5c83a 	sub	r2,r6,r3
 1008328:	182d883a 	mov	r22,r3
 100832c:	8084d83a 	srl	r2,r16,r2
 1008330:	a8c6983a 	sll	r3,r21,r3
 1008334:	9da6983a 	sll	r19,r19,r22
 1008338:	85a0983a 	sll	r16,r16,r22
 100833c:	18aab03a 	or	r21,r3,r2
 1008340:	003f1d06 	br	1007fb8 <__umoddi3+0x1ec>
 1008344:	d8c00017 	ldw	r3,0(sp)
 1008348:	20c5c83a 	sub	r2,r4,r3
 100834c:	2089803a 	cmpltu	r4,r4,r2
 1008350:	3587c83a 	sub	r3,r6,r22
 1008354:	1907c83a 	sub	r3,r3,r4
 1008358:	80cdc83a 	sub	r6,r16,r3
 100835c:	1009883a 	mov	r4,r2
 1008360:	d9400117 	ldw	r5,4(sp)
 1008364:	2905c83a 	sub	r2,r5,r4
 1008368:	2887803a 	cmpltu	r3,r5,r2
 100836c:	30c7c83a 	sub	r3,r6,r3
 1008370:	d9800317 	ldw	r6,12(sp)
 1008374:	1484d83a 	srl	r2,r2,r18
 1008378:	1988983a 	sll	r4,r3,r6
 100837c:	1c86d83a 	srl	r3,r3,r18
 1008380:	2088b03a 	or	r4,r4,r2
 1008384:	2011883a 	mov	r8,r4
 1008388:	1813883a 	mov	r9,r3
 100838c:	d9000415 	stw	r4,16(sp)
 1008390:	d8c00515 	stw	r3,20(sp)
 1008394:	003ed406 	br	1007ee8 <__umoddi3+0x11c>
 1008398:	01400604 	movi	r5,24
 100839c:	2805883a 	mov	r2,r5
 10083a0:	003ea606 	br	1007e3c <__umoddi3+0x70>
 10083a4:	01400204 	movi	r5,8
 10083a8:	2805883a 	mov	r2,r5
 10083ac:	003ea306 	br	1007e3c <__umoddi3+0x70>
 10083b0:	01400204 	movi	r5,8
 10083b4:	2805883a 	mov	r2,r5
 10083b8:	003edf06 	br	1007f38 <__umoddi3+0x16c>
 10083bc:	01400204 	movi	r5,8
 10083c0:	2805883a 	mov	r2,r5
 10083c4:	003ef206 	br	1007f90 <__umoddi3+0x1c4>
 10083c8:	01400604 	movi	r5,24
 10083cc:	2805883a 	mov	r2,r5
 10083d0:	003eef06 	br	1007f90 <__umoddi3+0x1c4>
 10083d4:	01400604 	movi	r5,24
 10083d8:	2805883a 	mov	r2,r5
 10083dc:	003ed606 	br	1007f38 <__umoddi3+0x16c>
 10083e0:	153fa92e 	bgeu	r2,r20,1008288 <__umoddi3+0x4bc>
 10083e4:	843fffc4 	addi	r16,r16,-1
 10083e8:	1585883a 	add	r2,r2,r22
 10083ec:	003fa606 	br	1008288 <__umoddi3+0x4bc>
 10083f0:	157f912e 	bgeu	r2,r21,1008238 <__umoddi3+0x46c>
 10083f4:	e73fffc4 	addi	fp,fp,-1
 10083f8:	1585883a 	add	r2,r2,r22
 10083fc:	003f8e06 	br	1008238 <__umoddi3+0x46c>
 1008400:	157f542e 	bgeu	r2,r21,1008154 <__umoddi3+0x388>
 1008404:	14c5883a 	add	r2,r2,r19
 1008408:	003f5206 	br	1008154 <__umoddi3+0x388>
 100840c:	14c5883a 	add	r2,r2,r19
 1008410:	003efc06 	br	1008004 <__umoddi3+0x238>
 1008414:	14c5883a 	add	r2,r2,r19
 1008418:	003ea606 	br	1007eb4 <__umoddi3+0xe8>
 100841c:	d8800117 	ldw	r2,4(sp)
 1008420:	113fc836 	bltu	r2,r4,1008344 <__umoddi3+0x578>
 1008424:	000d883a 	mov	r6,zero
 1008428:	003fcd06 	br	1008360 <__umoddi3+0x594>

0100842c <_fpadd_parts>:
 100842c:	defff804 	addi	sp,sp,-32
 1008430:	dcc00315 	stw	r19,12(sp)
 1008434:	2027883a 	mov	r19,r4
 1008438:	21000017 	ldw	r4,0(r4)
 100843c:	00c00044 	movi	r3,1
 1008440:	dd400515 	stw	r21,20(sp)
 1008444:	dd000415 	stw	r20,16(sp)
 1008448:	ddc00715 	stw	r23,28(sp)
 100844c:	dd800615 	stw	r22,24(sp)
 1008450:	dc800215 	stw	r18,8(sp)
 1008454:	dc400115 	stw	r17,4(sp)
 1008458:	dc000015 	stw	r16,0(sp)
 100845c:	282b883a 	mov	r21,r5
 1008460:	3029883a 	mov	r20,r6
 1008464:	1900632e 	bgeu	r3,r4,10085f4 <_fpadd_parts+0x1c8>
 1008468:	28800017 	ldw	r2,0(r5)
 100846c:	1880812e 	bgeu	r3,r2,1008674 <_fpadd_parts+0x248>
 1008470:	00c00104 	movi	r3,4
 1008474:	20c0dc26 	beq	r4,r3,10087e8 <_fpadd_parts+0x3bc>
 1008478:	10c07e26 	beq	r2,r3,1008674 <_fpadd_parts+0x248>
 100847c:	00c00084 	movi	r3,2
 1008480:	10c06726 	beq	r2,r3,1008620 <_fpadd_parts+0x1f4>
 1008484:	20c07b26 	beq	r4,r3,1008674 <_fpadd_parts+0x248>
 1008488:	9dc00217 	ldw	r23,8(r19)
 100848c:	28c00217 	ldw	r3,8(r5)
 1008490:	9c400317 	ldw	r17,12(r19)
 1008494:	2bc00317 	ldw	r15,12(r5)
 1008498:	b8cdc83a 	sub	r6,r23,r3
 100849c:	9c800417 	ldw	r18,16(r19)
 10084a0:	2c000417 	ldw	r16,16(r5)
 10084a4:	3009883a 	mov	r4,r6
 10084a8:	30009716 	blt	r6,zero,1008708 <_fpadd_parts+0x2dc>
 10084ac:	00800fc4 	movi	r2,63
 10084b0:	11806b16 	blt	r2,r6,1008660 <_fpadd_parts+0x234>
 10084b4:	0100a40e 	bge	zero,r4,1008748 <_fpadd_parts+0x31c>
 10084b8:	35bff804 	addi	r22,r6,-32
 10084bc:	b000bc16 	blt	r22,zero,10087b0 <_fpadd_parts+0x384>
 10084c0:	8596d83a 	srl	r11,r16,r22
 10084c4:	0019883a 	mov	r12,zero
 10084c8:	0013883a 	mov	r9,zero
 10084cc:	01000044 	movi	r4,1
 10084d0:	0015883a 	mov	r10,zero
 10084d4:	b000be16 	blt	r22,zero,10087d0 <_fpadd_parts+0x3a4>
 10084d8:	2590983a 	sll	r8,r4,r22
 10084dc:	000f883a 	mov	r7,zero
 10084e0:	00bfffc4 	movi	r2,-1
 10084e4:	3889883a 	add	r4,r7,r2
 10084e8:	408b883a 	add	r5,r8,r2
 10084ec:	21cd803a 	cmpltu	r6,r4,r7
 10084f0:	314b883a 	add	r5,r6,r5
 10084f4:	7904703a 	and	r2,r15,r4
 10084f8:	8146703a 	and	r3,r16,r5
 10084fc:	10c4b03a 	or	r2,r2,r3
 1008500:	10000226 	beq	r2,zero,100850c <_fpadd_parts+0xe0>
 1008504:	02400044 	movi	r9,1
 1008508:	0015883a 	mov	r10,zero
 100850c:	5a5eb03a 	or	r15,r11,r9
 1008510:	62a0b03a 	or	r16,r12,r10
 1008514:	99400117 	ldw	r5,4(r19)
 1008518:	a8800117 	ldw	r2,4(r21)
 100851c:	28806e26 	beq	r5,r2,10086d8 <_fpadd_parts+0x2ac>
 1008520:	28006626 	beq	r5,zero,10086bc <_fpadd_parts+0x290>
 1008524:	7c45c83a 	sub	r2,r15,r17
 1008528:	7889803a 	cmpltu	r4,r15,r2
 100852c:	8487c83a 	sub	r3,r16,r18
 1008530:	1909c83a 	sub	r4,r3,r4
 1008534:	100d883a 	mov	r6,r2
 1008538:	200f883a 	mov	r7,r4
 100853c:	38007716 	blt	r7,zero,100871c <_fpadd_parts+0x2f0>
 1008540:	a5c00215 	stw	r23,8(r20)
 1008544:	a1c00415 	stw	r7,16(r20)
 1008548:	a0000115 	stw	zero,4(r20)
 100854c:	a1800315 	stw	r6,12(r20)
 1008550:	a2000317 	ldw	r8,12(r20)
 1008554:	a2400417 	ldw	r9,16(r20)
 1008558:	00bfffc4 	movi	r2,-1
 100855c:	408b883a 	add	r5,r8,r2
 1008560:	2a09803a 	cmpltu	r4,r5,r8
 1008564:	488d883a 	add	r6,r9,r2
 1008568:	01c40034 	movhi	r7,4096
 100856c:	39ffffc4 	addi	r7,r7,-1
 1008570:	218d883a 	add	r6,r4,r6
 1008574:	39801736 	bltu	r7,r6,10085d4 <_fpadd_parts+0x1a8>
 1008578:	31c06526 	beq	r6,r7,1008710 <_fpadd_parts+0x2e4>
 100857c:	a3000217 	ldw	r12,8(r20)
 1008580:	4209883a 	add	r4,r8,r8
 1008584:	00bfffc4 	movi	r2,-1
 1008588:	220f803a 	cmpltu	r7,r4,r8
 100858c:	4a4b883a 	add	r5,r9,r9
 1008590:	394f883a 	add	r7,r7,r5
 1008594:	2095883a 	add	r10,r4,r2
 1008598:	3897883a 	add	r11,r7,r2
 100859c:	510d803a 	cmpltu	r6,r10,r4
 10085a0:	6099883a 	add	r12,r12,r2
 10085a4:	32d7883a 	add	r11,r6,r11
 10085a8:	00840034 	movhi	r2,4096
 10085ac:	10bfffc4 	addi	r2,r2,-1
 10085b0:	2011883a 	mov	r8,r4
 10085b4:	3813883a 	mov	r9,r7
 10085b8:	a1000315 	stw	r4,12(r20)
 10085bc:	a1c00415 	stw	r7,16(r20)
 10085c0:	a3000215 	stw	r12,8(r20)
 10085c4:	12c00336 	bltu	r2,r11,10085d4 <_fpadd_parts+0x1a8>
 10085c8:	58bfed1e 	bne	r11,r2,1008580 <_fpadd_parts+0x154>
 10085cc:	00bfff84 	movi	r2,-2
 10085d0:	12bfeb2e 	bgeu	r2,r10,1008580 <_fpadd_parts+0x154>
 10085d4:	a2800417 	ldw	r10,16(r20)
 10085d8:	008000c4 	movi	r2,3
 10085dc:	00c80034 	movhi	r3,8192
 10085e0:	18ffffc4 	addi	r3,r3,-1
 10085e4:	a2400317 	ldw	r9,12(r20)
 10085e8:	a0800015 	stw	r2,0(r20)
 10085ec:	1a802336 	bltu	r3,r10,100867c <_fpadd_parts+0x250>
 10085f0:	a027883a 	mov	r19,r20
 10085f4:	9805883a 	mov	r2,r19
 10085f8:	ddc00717 	ldw	r23,28(sp)
 10085fc:	dd800617 	ldw	r22,24(sp)
 1008600:	dd400517 	ldw	r21,20(sp)
 1008604:	dd000417 	ldw	r20,16(sp)
 1008608:	dcc00317 	ldw	r19,12(sp)
 100860c:	dc800217 	ldw	r18,8(sp)
 1008610:	dc400117 	ldw	r17,4(sp)
 1008614:	dc000017 	ldw	r16,0(sp)
 1008618:	dec00804 	addi	sp,sp,32
 100861c:	f800283a 	ret
 1008620:	20fff41e 	bne	r4,r3,10085f4 <_fpadd_parts+0x1c8>
 1008624:	31000015 	stw	r4,0(r6)
 1008628:	98800117 	ldw	r2,4(r19)
 100862c:	30800115 	stw	r2,4(r6)
 1008630:	98c00217 	ldw	r3,8(r19)
 1008634:	30c00215 	stw	r3,8(r6)
 1008638:	98800317 	ldw	r2,12(r19)
 100863c:	30800315 	stw	r2,12(r6)
 1008640:	98c00417 	ldw	r3,16(r19)
 1008644:	30c00415 	stw	r3,16(r6)
 1008648:	98800117 	ldw	r2,4(r19)
 100864c:	28c00117 	ldw	r3,4(r5)
 1008650:	3027883a 	mov	r19,r6
 1008654:	10c4703a 	and	r2,r2,r3
 1008658:	30800115 	stw	r2,4(r6)
 100865c:	003fe506 	br	10085f4 <_fpadd_parts+0x1c8>
 1008660:	1dc02616 	blt	r3,r23,10086fc <_fpadd_parts+0x2d0>
 1008664:	0023883a 	mov	r17,zero
 1008668:	182f883a 	mov	r23,r3
 100866c:	0025883a 	mov	r18,zero
 1008670:	003fa806 	br	1008514 <_fpadd_parts+0xe8>
 1008674:	a827883a 	mov	r19,r21
 1008678:	003fde06 	br	10085f4 <_fpadd_parts+0x1c8>
 100867c:	01800044 	movi	r6,1
 1008680:	500497fa 	slli	r2,r10,31
 1008684:	4808d07a 	srli	r4,r9,1
 1008688:	518ad83a 	srl	r5,r10,r6
 100868c:	a2000217 	ldw	r8,8(r20)
 1008690:	1108b03a 	or	r4,r2,r4
 1008694:	0007883a 	mov	r3,zero
 1008698:	4984703a 	and	r2,r9,r6
 100869c:	208cb03a 	or	r6,r4,r2
 10086a0:	28ceb03a 	or	r7,r5,r3
 10086a4:	42000044 	addi	r8,r8,1
 10086a8:	a027883a 	mov	r19,r20
 10086ac:	a1c00415 	stw	r7,16(r20)
 10086b0:	a2000215 	stw	r8,8(r20)
 10086b4:	a1800315 	stw	r6,12(r20)
 10086b8:	003fce06 	br	10085f4 <_fpadd_parts+0x1c8>
 10086bc:	8bc5c83a 	sub	r2,r17,r15
 10086c0:	8889803a 	cmpltu	r4,r17,r2
 10086c4:	9407c83a 	sub	r3,r18,r16
 10086c8:	1909c83a 	sub	r4,r3,r4
 10086cc:	100d883a 	mov	r6,r2
 10086d0:	200f883a 	mov	r7,r4
 10086d4:	003f9906 	br	100853c <_fpadd_parts+0x110>
 10086d8:	7c45883a 	add	r2,r15,r17
 10086dc:	13c9803a 	cmpltu	r4,r2,r15
 10086e0:	8487883a 	add	r3,r16,r18
 10086e4:	20c9883a 	add	r4,r4,r3
 10086e8:	a1400115 	stw	r5,4(r20)
 10086ec:	a5c00215 	stw	r23,8(r20)
 10086f0:	a0800315 	stw	r2,12(r20)
 10086f4:	a1000415 	stw	r4,16(r20)
 10086f8:	003fb606 	br	10085d4 <_fpadd_parts+0x1a8>
 10086fc:	001f883a 	mov	r15,zero
 1008700:	0021883a 	mov	r16,zero
 1008704:	003f8306 	br	1008514 <_fpadd_parts+0xe8>
 1008708:	018dc83a 	sub	r6,zero,r6
 100870c:	003f6706 	br	10084ac <_fpadd_parts+0x80>
 1008710:	00bfff84 	movi	r2,-2
 1008714:	117faf36 	bltu	r2,r5,10085d4 <_fpadd_parts+0x1a8>
 1008718:	003f9806 	br	100857c <_fpadd_parts+0x150>
 100871c:	0005883a 	mov	r2,zero
 1008720:	1189c83a 	sub	r4,r2,r6
 1008724:	1105803a 	cmpltu	r2,r2,r4
 1008728:	01cbc83a 	sub	r5,zero,r7
 100872c:	2885c83a 	sub	r2,r5,r2
 1008730:	01800044 	movi	r6,1
 1008734:	a1800115 	stw	r6,4(r20)
 1008738:	a5c00215 	stw	r23,8(r20)
 100873c:	a1000315 	stw	r4,12(r20)
 1008740:	a0800415 	stw	r2,16(r20)
 1008744:	003f8206 	br	1008550 <_fpadd_parts+0x124>
 1008748:	203f7226 	beq	r4,zero,1008514 <_fpadd_parts+0xe8>
 100874c:	35bff804 	addi	r22,r6,-32
 1008750:	b9af883a 	add	r23,r23,r6
 1008754:	b0003116 	blt	r22,zero,100881c <_fpadd_parts+0x3f0>
 1008758:	959ad83a 	srl	r13,r18,r22
 100875c:	001d883a 	mov	r14,zero
 1008760:	000f883a 	mov	r7,zero
 1008764:	01000044 	movi	r4,1
 1008768:	0011883a 	mov	r8,zero
 100876c:	b0002516 	blt	r22,zero,1008804 <_fpadd_parts+0x3d8>
 1008770:	2594983a 	sll	r10,r4,r22
 1008774:	0013883a 	mov	r9,zero
 1008778:	00bfffc4 	movi	r2,-1
 100877c:	4889883a 	add	r4,r9,r2
 1008780:	508b883a 	add	r5,r10,r2
 1008784:	224d803a 	cmpltu	r6,r4,r9
 1008788:	314b883a 	add	r5,r6,r5
 100878c:	8904703a 	and	r2,r17,r4
 1008790:	9146703a 	and	r3,r18,r5
 1008794:	10c4b03a 	or	r2,r2,r3
 1008798:	10000226 	beq	r2,zero,10087a4 <_fpadd_parts+0x378>
 100879c:	01c00044 	movi	r7,1
 10087a0:	0011883a 	mov	r8,zero
 10087a4:	69e2b03a 	or	r17,r13,r7
 10087a8:	7224b03a 	or	r18,r14,r8
 10087ac:	003f5906 	br	1008514 <_fpadd_parts+0xe8>
 10087b0:	8407883a 	add	r3,r16,r16
 10087b4:	008007c4 	movi	r2,31
 10087b8:	1185c83a 	sub	r2,r2,r6
 10087bc:	1886983a 	sll	r3,r3,r2
 10087c0:	7996d83a 	srl	r11,r15,r6
 10087c4:	8198d83a 	srl	r12,r16,r6
 10087c8:	1ad6b03a 	or	r11,r3,r11
 10087cc:	003f3e06 	br	10084c8 <_fpadd_parts+0x9c>
 10087d0:	2006d07a 	srli	r3,r4,1
 10087d4:	008007c4 	movi	r2,31
 10087d8:	1185c83a 	sub	r2,r2,r6
 10087dc:	1890d83a 	srl	r8,r3,r2
 10087e0:	218e983a 	sll	r7,r4,r6
 10087e4:	003f3e06 	br	10084e0 <_fpadd_parts+0xb4>
 10087e8:	113f821e 	bne	r2,r4,10085f4 <_fpadd_parts+0x1c8>
 10087ec:	28c00117 	ldw	r3,4(r5)
 10087f0:	98800117 	ldw	r2,4(r19)
 10087f4:	10ff7f26 	beq	r2,r3,10085f4 <_fpadd_parts+0x1c8>
 10087f8:	04c04074 	movhi	r19,257
 10087fc:	9cf39904 	addi	r19,r19,-12700
 1008800:	003f7c06 	br	10085f4 <_fpadd_parts+0x1c8>
 1008804:	2006d07a 	srli	r3,r4,1
 1008808:	008007c4 	movi	r2,31
 100880c:	1185c83a 	sub	r2,r2,r6
 1008810:	1894d83a 	srl	r10,r3,r2
 1008814:	2192983a 	sll	r9,r4,r6
 1008818:	003fd706 	br	1008778 <_fpadd_parts+0x34c>
 100881c:	9487883a 	add	r3,r18,r18
 1008820:	008007c4 	movi	r2,31
 1008824:	1185c83a 	sub	r2,r2,r6
 1008828:	1886983a 	sll	r3,r3,r2
 100882c:	899ad83a 	srl	r13,r17,r6
 1008830:	919cd83a 	srl	r14,r18,r6
 1008834:	1b5ab03a 	or	r13,r3,r13
 1008838:	003fc906 	br	1008760 <_fpadd_parts+0x334>

0100883c <__subdf3>:
 100883c:	deffea04 	addi	sp,sp,-88
 1008840:	dcc01415 	stw	r19,80(sp)
 1008844:	dcc00404 	addi	r19,sp,16
 1008848:	2011883a 	mov	r8,r4
 100884c:	2813883a 	mov	r9,r5
 1008850:	dc401315 	stw	r17,76(sp)
 1008854:	d809883a 	mov	r4,sp
 1008858:	980b883a 	mov	r5,r19
 100885c:	dc400904 	addi	r17,sp,36
 1008860:	dfc01515 	stw	ra,84(sp)
 1008864:	da400115 	stw	r9,4(sp)
 1008868:	d9c00315 	stw	r7,12(sp)
 100886c:	da000015 	stw	r8,0(sp)
 1008870:	d9800215 	stw	r6,8(sp)
 1008874:	1009b940 	call	1009b94 <__unpack_d>
 1008878:	d9000204 	addi	r4,sp,8
 100887c:	880b883a 	mov	r5,r17
 1008880:	1009b940 	call	1009b94 <__unpack_d>
 1008884:	d8800a17 	ldw	r2,40(sp)
 1008888:	880b883a 	mov	r5,r17
 100888c:	9809883a 	mov	r4,r19
 1008890:	d9800e04 	addi	r6,sp,56
 1008894:	1080005c 	xori	r2,r2,1
 1008898:	d8800a15 	stw	r2,40(sp)
 100889c:	100842c0 	call	100842c <_fpadd_parts>
 10088a0:	1009883a 	mov	r4,r2
 10088a4:	10098800 	call	1009880 <__pack_d>
 10088a8:	dfc01517 	ldw	ra,84(sp)
 10088ac:	dcc01417 	ldw	r19,80(sp)
 10088b0:	dc401317 	ldw	r17,76(sp)
 10088b4:	dec01604 	addi	sp,sp,88
 10088b8:	f800283a 	ret

010088bc <__adddf3>:
 10088bc:	deffea04 	addi	sp,sp,-88
 10088c0:	dcc01415 	stw	r19,80(sp)
 10088c4:	dcc00404 	addi	r19,sp,16
 10088c8:	2011883a 	mov	r8,r4
 10088cc:	2813883a 	mov	r9,r5
 10088d0:	dc401315 	stw	r17,76(sp)
 10088d4:	d809883a 	mov	r4,sp
 10088d8:	980b883a 	mov	r5,r19
 10088dc:	dc400904 	addi	r17,sp,36
 10088e0:	dfc01515 	stw	ra,84(sp)
 10088e4:	da400115 	stw	r9,4(sp)
 10088e8:	d9c00315 	stw	r7,12(sp)
 10088ec:	da000015 	stw	r8,0(sp)
 10088f0:	d9800215 	stw	r6,8(sp)
 10088f4:	1009b940 	call	1009b94 <__unpack_d>
 10088f8:	d9000204 	addi	r4,sp,8
 10088fc:	880b883a 	mov	r5,r17
 1008900:	1009b940 	call	1009b94 <__unpack_d>
 1008904:	d9800e04 	addi	r6,sp,56
 1008908:	9809883a 	mov	r4,r19
 100890c:	880b883a 	mov	r5,r17
 1008910:	100842c0 	call	100842c <_fpadd_parts>
 1008914:	1009883a 	mov	r4,r2
 1008918:	10098800 	call	1009880 <__pack_d>
 100891c:	dfc01517 	ldw	ra,84(sp)
 1008920:	dcc01417 	ldw	r19,80(sp)
 1008924:	dc401317 	ldw	r17,76(sp)
 1008928:	dec01604 	addi	sp,sp,88
 100892c:	f800283a 	ret

01008930 <__muldf3>:
 1008930:	deffe004 	addi	sp,sp,-128
 1008934:	dc401815 	stw	r17,96(sp)
 1008938:	dc400404 	addi	r17,sp,16
 100893c:	2011883a 	mov	r8,r4
 1008940:	2813883a 	mov	r9,r5
 1008944:	dc001715 	stw	r16,92(sp)
 1008948:	d809883a 	mov	r4,sp
 100894c:	880b883a 	mov	r5,r17
 1008950:	dc000904 	addi	r16,sp,36
 1008954:	dfc01f15 	stw	ra,124(sp)
 1008958:	da400115 	stw	r9,4(sp)
 100895c:	d9c00315 	stw	r7,12(sp)
 1008960:	da000015 	stw	r8,0(sp)
 1008964:	d9800215 	stw	r6,8(sp)
 1008968:	ddc01e15 	stw	r23,120(sp)
 100896c:	dd801d15 	stw	r22,116(sp)
 1008970:	dd401c15 	stw	r21,112(sp)
 1008974:	dd001b15 	stw	r20,108(sp)
 1008978:	dcc01a15 	stw	r19,104(sp)
 100897c:	dc801915 	stw	r18,100(sp)
 1008980:	1009b940 	call	1009b94 <__unpack_d>
 1008984:	d9000204 	addi	r4,sp,8
 1008988:	800b883a 	mov	r5,r16
 100898c:	1009b940 	call	1009b94 <__unpack_d>
 1008990:	d9000417 	ldw	r4,16(sp)
 1008994:	00800044 	movi	r2,1
 1008998:	1100102e 	bgeu	r2,r4,10089dc <__muldf3+0xac>
 100899c:	d8c00917 	ldw	r3,36(sp)
 10089a0:	10c0062e 	bgeu	r2,r3,10089bc <__muldf3+0x8c>
 10089a4:	00800104 	movi	r2,4
 10089a8:	20800a26 	beq	r4,r2,10089d4 <__muldf3+0xa4>
 10089ac:	1880cc26 	beq	r3,r2,1008ce0 <__muldf3+0x3b0>
 10089b0:	00800084 	movi	r2,2
 10089b4:	20800926 	beq	r4,r2,10089dc <__muldf3+0xac>
 10089b8:	1880191e 	bne	r3,r2,1008a20 <__muldf3+0xf0>
 10089bc:	d8c00a17 	ldw	r3,40(sp)
 10089c0:	d8800517 	ldw	r2,20(sp)
 10089c4:	8009883a 	mov	r4,r16
 10089c8:	10c4c03a 	cmpne	r2,r2,r3
 10089cc:	d8800a15 	stw	r2,40(sp)
 10089d0:	00000706 	br	10089f0 <__muldf3+0xc0>
 10089d4:	00800084 	movi	r2,2
 10089d8:	1880c326 	beq	r3,r2,1008ce8 <__muldf3+0x3b8>
 10089dc:	d8800517 	ldw	r2,20(sp)
 10089e0:	d8c00a17 	ldw	r3,40(sp)
 10089e4:	8809883a 	mov	r4,r17
 10089e8:	10c4c03a 	cmpne	r2,r2,r3
 10089ec:	d8800515 	stw	r2,20(sp)
 10089f0:	10098800 	call	1009880 <__pack_d>
 10089f4:	dfc01f17 	ldw	ra,124(sp)
 10089f8:	ddc01e17 	ldw	r23,120(sp)
 10089fc:	dd801d17 	ldw	r22,116(sp)
 1008a00:	dd401c17 	ldw	r21,112(sp)
 1008a04:	dd001b17 	ldw	r20,108(sp)
 1008a08:	dcc01a17 	ldw	r19,104(sp)
 1008a0c:	dc801917 	ldw	r18,100(sp)
 1008a10:	dc401817 	ldw	r17,96(sp)
 1008a14:	dc001717 	ldw	r16,92(sp)
 1008a18:	dec02004 	addi	sp,sp,128
 1008a1c:	f800283a 	ret
 1008a20:	dd800717 	ldw	r22,28(sp)
 1008a24:	dc800c17 	ldw	r18,48(sp)
 1008a28:	002b883a 	mov	r21,zero
 1008a2c:	0023883a 	mov	r17,zero
 1008a30:	a80b883a 	mov	r5,r21
 1008a34:	b00d883a 	mov	r6,r22
 1008a38:	880f883a 	mov	r7,r17
 1008a3c:	ddc00817 	ldw	r23,32(sp)
 1008a40:	dcc00d17 	ldw	r19,52(sp)
 1008a44:	9009883a 	mov	r4,r18
 1008a48:	10096dc0 	call	10096dc <__muldi3>
 1008a4c:	001b883a 	mov	r13,zero
 1008a50:	680f883a 	mov	r7,r13
 1008a54:	b009883a 	mov	r4,r22
 1008a58:	000b883a 	mov	r5,zero
 1008a5c:	980d883a 	mov	r6,r19
 1008a60:	b82d883a 	mov	r22,r23
 1008a64:	002f883a 	mov	r23,zero
 1008a68:	db401615 	stw	r13,88(sp)
 1008a6c:	d8801315 	stw	r2,76(sp)
 1008a70:	d8c01415 	stw	r3,80(sp)
 1008a74:	dcc01515 	stw	r19,84(sp)
 1008a78:	10096dc0 	call	10096dc <__muldi3>
 1008a7c:	b00d883a 	mov	r6,r22
 1008a80:	000b883a 	mov	r5,zero
 1008a84:	9009883a 	mov	r4,r18
 1008a88:	b80f883a 	mov	r7,r23
 1008a8c:	1021883a 	mov	r16,r2
 1008a90:	1823883a 	mov	r17,r3
 1008a94:	10096dc0 	call	10096dc <__muldi3>
 1008a98:	8085883a 	add	r2,r16,r2
 1008a9c:	140d803a 	cmpltu	r6,r2,r16
 1008aa0:	88c7883a 	add	r3,r17,r3
 1008aa4:	30cd883a 	add	r6,r6,r3
 1008aa8:	1029883a 	mov	r20,r2
 1008aac:	302b883a 	mov	r21,r6
 1008ab0:	da801317 	ldw	r10,76(sp)
 1008ab4:	dac01417 	ldw	r11,80(sp)
 1008ab8:	db001517 	ldw	r12,84(sp)
 1008abc:	db401617 	ldw	r13,88(sp)
 1008ac0:	3440612e 	bgeu	r6,r17,1008c48 <__muldf3+0x318>
 1008ac4:	0009883a 	mov	r4,zero
 1008ac8:	5105883a 	add	r2,r10,r4
 1008acc:	128d803a 	cmpltu	r6,r2,r10
 1008ad0:	5d07883a 	add	r3,r11,r20
 1008ad4:	30cd883a 	add	r6,r6,r3
 1008ad8:	0021883a 	mov	r16,zero
 1008adc:	04400044 	movi	r17,1
 1008ae0:	1025883a 	mov	r18,r2
 1008ae4:	3027883a 	mov	r19,r6
 1008ae8:	32c06236 	bltu	r6,r11,1008c74 <__muldf3+0x344>
 1008aec:	59807a26 	beq	r11,r6,1008cd8 <__muldf3+0x3a8>
 1008af0:	680b883a 	mov	r5,r13
 1008af4:	b80f883a 	mov	r7,r23
 1008af8:	6009883a 	mov	r4,r12
 1008afc:	b00d883a 	mov	r6,r22
 1008b00:	10096dc0 	call	10096dc <__muldi3>
 1008b04:	1009883a 	mov	r4,r2
 1008b08:	000f883a 	mov	r7,zero
 1008b0c:	1545883a 	add	r2,r2,r21
 1008b10:	1111803a 	cmpltu	r8,r2,r4
 1008b14:	19c7883a 	add	r3,r3,r7
 1008b18:	40c7883a 	add	r3,r8,r3
 1008b1c:	88cb883a 	add	r5,r17,r3
 1008b20:	d8c00617 	ldw	r3,24(sp)
 1008b24:	8089883a 	add	r4,r16,r2
 1008b28:	d8800b17 	ldw	r2,44(sp)
 1008b2c:	18c00104 	addi	r3,r3,4
 1008b30:	240d803a 	cmpltu	r6,r4,r16
 1008b34:	10c7883a 	add	r3,r2,r3
 1008b38:	2013883a 	mov	r9,r4
 1008b3c:	d8800a17 	ldw	r2,40(sp)
 1008b40:	d9000517 	ldw	r4,20(sp)
 1008b44:	314d883a 	add	r6,r6,r5
 1008b48:	3015883a 	mov	r10,r6
 1008b4c:	2088c03a 	cmpne	r4,r4,r2
 1008b50:	00880034 	movhi	r2,8192
 1008b54:	10bfffc4 	addi	r2,r2,-1
 1008b58:	d9000f15 	stw	r4,60(sp)
 1008b5c:	d8c01015 	stw	r3,64(sp)
 1008b60:	1180162e 	bgeu	r2,r6,1008bbc <__muldf3+0x28c>
 1008b64:	1811883a 	mov	r8,r3
 1008b68:	101f883a 	mov	r15,r2
 1008b6c:	980497fa 	slli	r2,r19,31
 1008b70:	9016d07a 	srli	r11,r18,1
 1008b74:	500697fa 	slli	r3,r10,31
 1008b78:	480cd07a 	srli	r6,r9,1
 1008b7c:	500ed07a 	srli	r7,r10,1
 1008b80:	12d6b03a 	or	r11,r2,r11
 1008b84:	00800044 	movi	r2,1
 1008b88:	198cb03a 	or	r6,r3,r6
 1008b8c:	4888703a 	and	r4,r9,r2
 1008b90:	9818d07a 	srli	r12,r19,1
 1008b94:	001b883a 	mov	r13,zero
 1008b98:	03a00034 	movhi	r14,32768
 1008b9c:	3013883a 	mov	r9,r6
 1008ba0:	3815883a 	mov	r10,r7
 1008ba4:	4091883a 	add	r8,r8,r2
 1008ba8:	20000226 	beq	r4,zero,1008bb4 <__muldf3+0x284>
 1008bac:	5b64b03a 	or	r18,r11,r13
 1008bb0:	63a6b03a 	or	r19,r12,r14
 1008bb4:	7abfed36 	bltu	r15,r10,1008b6c <__muldf3+0x23c>
 1008bb8:	da001015 	stw	r8,64(sp)
 1008bbc:	00840034 	movhi	r2,4096
 1008bc0:	10bfffc4 	addi	r2,r2,-1
 1008bc4:	12801436 	bltu	r2,r10,1008c18 <__muldf3+0x2e8>
 1008bc8:	da001017 	ldw	r8,64(sp)
 1008bcc:	101f883a 	mov	r15,r2
 1008bd0:	4a45883a 	add	r2,r9,r9
 1008bd4:	124d803a 	cmpltu	r6,r2,r9
 1008bd8:	5287883a 	add	r3,r10,r10
 1008bdc:	9497883a 	add	r11,r18,r18
 1008be0:	5c8f803a 	cmpltu	r7,r11,r18
 1008be4:	9cd9883a 	add	r12,r19,r19
 1008be8:	01000044 	movi	r4,1
 1008bec:	30cd883a 	add	r6,r6,r3
 1008bf0:	3b0f883a 	add	r7,r7,r12
 1008bf4:	423fffc4 	addi	r8,r8,-1
 1008bf8:	1013883a 	mov	r9,r2
 1008bfc:	3015883a 	mov	r10,r6
 1008c00:	111ab03a 	or	r13,r2,r4
 1008c04:	98003016 	blt	r19,zero,1008cc8 <__muldf3+0x398>
 1008c08:	5825883a 	mov	r18,r11
 1008c0c:	3827883a 	mov	r19,r7
 1008c10:	7abfef2e 	bgeu	r15,r10,1008bd0 <__muldf3+0x2a0>
 1008c14:	da001015 	stw	r8,64(sp)
 1008c18:	00803fc4 	movi	r2,255
 1008c1c:	488e703a 	and	r7,r9,r2
 1008c20:	00802004 	movi	r2,128
 1008c24:	0007883a 	mov	r3,zero
 1008c28:	0011883a 	mov	r8,zero
 1008c2c:	38801826 	beq	r7,r2,1008c90 <__muldf3+0x360>
 1008c30:	008000c4 	movi	r2,3
 1008c34:	d9000e04 	addi	r4,sp,56
 1008c38:	da801215 	stw	r10,72(sp)
 1008c3c:	d8800e15 	stw	r2,56(sp)
 1008c40:	da401115 	stw	r9,68(sp)
 1008c44:	003f6a06 	br	10089f0 <__muldf3+0xc0>
 1008c48:	89802126 	beq	r17,r6,1008cd0 <__muldf3+0x3a0>
 1008c4c:	0009883a 	mov	r4,zero
 1008c50:	5105883a 	add	r2,r10,r4
 1008c54:	128d803a 	cmpltu	r6,r2,r10
 1008c58:	5d07883a 	add	r3,r11,r20
 1008c5c:	30cd883a 	add	r6,r6,r3
 1008c60:	0021883a 	mov	r16,zero
 1008c64:	0023883a 	mov	r17,zero
 1008c68:	1025883a 	mov	r18,r2
 1008c6c:	3027883a 	mov	r19,r6
 1008c70:	32ff9e2e 	bgeu	r6,r11,1008aec <__muldf3+0x1bc>
 1008c74:	00800044 	movi	r2,1
 1008c78:	8089883a 	add	r4,r16,r2
 1008c7c:	240d803a 	cmpltu	r6,r4,r16
 1008c80:	344d883a 	add	r6,r6,r17
 1008c84:	2021883a 	mov	r16,r4
 1008c88:	3023883a 	mov	r17,r6
 1008c8c:	003f9806 	br	1008af0 <__muldf3+0x1c0>
 1008c90:	403fe71e 	bne	r8,zero,1008c30 <__muldf3+0x300>
 1008c94:	01004004 	movi	r4,256
 1008c98:	4904703a 	and	r2,r9,r4
 1008c9c:	10c4b03a 	or	r2,r2,r3
 1008ca0:	103fe31e 	bne	r2,zero,1008c30 <__muldf3+0x300>
 1008ca4:	94c4b03a 	or	r2,r18,r19
 1008ca8:	103fe126 	beq	r2,zero,1008c30 <__muldf3+0x300>
 1008cac:	49c5883a 	add	r2,r9,r7
 1008cb0:	1251803a 	cmpltu	r8,r2,r9
 1008cb4:	4291883a 	add	r8,r8,r10
 1008cb8:	013fc004 	movi	r4,-256
 1008cbc:	1112703a 	and	r9,r2,r4
 1008cc0:	4015883a 	mov	r10,r8
 1008cc4:	003fda06 	br	1008c30 <__muldf3+0x300>
 1008cc8:	6813883a 	mov	r9,r13
 1008ccc:	003fce06 	br	1008c08 <__muldf3+0x2d8>
 1008cd0:	143f7c36 	bltu	r2,r16,1008ac4 <__muldf3+0x194>
 1008cd4:	003fdd06 	br	1008c4c <__muldf3+0x31c>
 1008cd8:	12bf852e 	bgeu	r2,r10,1008af0 <__muldf3+0x1c0>
 1008cdc:	003fe506 	br	1008c74 <__muldf3+0x344>
 1008ce0:	00800084 	movi	r2,2
 1008ce4:	20bf351e 	bne	r4,r2,10089bc <__muldf3+0x8c>
 1008ce8:	01004074 	movhi	r4,257
 1008cec:	21339904 	addi	r4,r4,-12700
 1008cf0:	003f3f06 	br	10089f0 <__muldf3+0xc0>

01008cf4 <__divdf3>:
 1008cf4:	deffed04 	addi	sp,sp,-76
 1008cf8:	dcc01115 	stw	r19,68(sp)
 1008cfc:	dcc00404 	addi	r19,sp,16
 1008d00:	2011883a 	mov	r8,r4
 1008d04:	2813883a 	mov	r9,r5
 1008d08:	dc000e15 	stw	r16,56(sp)
 1008d0c:	d809883a 	mov	r4,sp
 1008d10:	980b883a 	mov	r5,r19
 1008d14:	dc000904 	addi	r16,sp,36
 1008d18:	dfc01215 	stw	ra,72(sp)
 1008d1c:	da400115 	stw	r9,4(sp)
 1008d20:	d9c00315 	stw	r7,12(sp)
 1008d24:	da000015 	stw	r8,0(sp)
 1008d28:	d9800215 	stw	r6,8(sp)
 1008d2c:	dc801015 	stw	r18,64(sp)
 1008d30:	dc400f15 	stw	r17,60(sp)
 1008d34:	1009b940 	call	1009b94 <__unpack_d>
 1008d38:	d9000204 	addi	r4,sp,8
 1008d3c:	800b883a 	mov	r5,r16
 1008d40:	1009b940 	call	1009b94 <__unpack_d>
 1008d44:	d9000417 	ldw	r4,16(sp)
 1008d48:	00800044 	movi	r2,1
 1008d4c:	11000b2e 	bgeu	r2,r4,1008d7c <__divdf3+0x88>
 1008d50:	d9400917 	ldw	r5,36(sp)
 1008d54:	1140762e 	bgeu	r2,r5,1008f30 <__divdf3+0x23c>
 1008d58:	d8800517 	ldw	r2,20(sp)
 1008d5c:	d8c00a17 	ldw	r3,40(sp)
 1008d60:	01800104 	movi	r6,4
 1008d64:	10c4f03a 	xor	r2,r2,r3
 1008d68:	d8800515 	stw	r2,20(sp)
 1008d6c:	21800226 	beq	r4,r6,1008d78 <__divdf3+0x84>
 1008d70:	00800084 	movi	r2,2
 1008d74:	2080141e 	bne	r4,r2,1008dc8 <__divdf3+0xd4>
 1008d78:	29000926 	beq	r5,r4,1008da0 <__divdf3+0xac>
 1008d7c:	9809883a 	mov	r4,r19
 1008d80:	10098800 	call	1009880 <__pack_d>
 1008d84:	dfc01217 	ldw	ra,72(sp)
 1008d88:	dcc01117 	ldw	r19,68(sp)
 1008d8c:	dc801017 	ldw	r18,64(sp)
 1008d90:	dc400f17 	ldw	r17,60(sp)
 1008d94:	dc000e17 	ldw	r16,56(sp)
 1008d98:	dec01304 	addi	sp,sp,76
 1008d9c:	f800283a 	ret
 1008da0:	01004074 	movhi	r4,257
 1008da4:	21339904 	addi	r4,r4,-12700
 1008da8:	10098800 	call	1009880 <__pack_d>
 1008dac:	dfc01217 	ldw	ra,72(sp)
 1008db0:	dcc01117 	ldw	r19,68(sp)
 1008db4:	dc801017 	ldw	r18,64(sp)
 1008db8:	dc400f17 	ldw	r17,60(sp)
 1008dbc:	dc000e17 	ldw	r16,56(sp)
 1008dc0:	dec01304 	addi	sp,sp,76
 1008dc4:	f800283a 	ret
 1008dc8:	29805b26 	beq	r5,r6,1008f38 <__divdf3+0x244>
 1008dcc:	28802d26 	beq	r5,r2,1008e84 <__divdf3+0x190>
 1008dd0:	d8c00617 	ldw	r3,24(sp)
 1008dd4:	d8800b17 	ldw	r2,44(sp)
 1008dd8:	d9c00817 	ldw	r7,32(sp)
 1008ddc:	dc400d17 	ldw	r17,52(sp)
 1008de0:	188bc83a 	sub	r5,r3,r2
 1008de4:	d9800717 	ldw	r6,28(sp)
 1008de8:	dc000c17 	ldw	r16,48(sp)
 1008dec:	d9400615 	stw	r5,24(sp)
 1008df0:	3c403836 	bltu	r7,r17,1008ed4 <__divdf3+0x1e0>
 1008df4:	89c03626 	beq	r17,r7,1008ed0 <__divdf3+0x1dc>
 1008df8:	0015883a 	mov	r10,zero
 1008dfc:	001d883a 	mov	r14,zero
 1008e00:	02c40034 	movhi	r11,4096
 1008e04:	001f883a 	mov	r15,zero
 1008e08:	003f883a 	mov	ra,zero
 1008e0c:	04800f44 	movi	r18,61
 1008e10:	00000f06 	br	1008e50 <__divdf3+0x15c>
 1008e14:	601d883a 	mov	r14,r12
 1008e18:	681f883a 	mov	r15,r13
 1008e1c:	400d883a 	mov	r6,r8
 1008e20:	100f883a 	mov	r7,r2
 1008e24:	3191883a 	add	r8,r6,r6
 1008e28:	5808d07a 	srli	r4,r11,1
 1008e2c:	4185803a 	cmpltu	r2,r8,r6
 1008e30:	39d3883a 	add	r9,r7,r7
 1008e34:	28c6b03a 	or	r3,r5,r3
 1008e38:	1245883a 	add	r2,r2,r9
 1008e3c:	1815883a 	mov	r10,r3
 1008e40:	2017883a 	mov	r11,r4
 1008e44:	400d883a 	mov	r6,r8
 1008e48:	100f883a 	mov	r7,r2
 1008e4c:	fc801726 	beq	ra,r18,1008eac <__divdf3+0x1b8>
 1008e50:	580a97fa 	slli	r5,r11,31
 1008e54:	5006d07a 	srli	r3,r10,1
 1008e58:	ffc00044 	addi	ra,ra,1
 1008e5c:	3c7ff136 	bltu	r7,r17,1008e24 <__divdf3+0x130>
 1008e60:	3411c83a 	sub	r8,r6,r16
 1008e64:	3205803a 	cmpltu	r2,r6,r8
 1008e68:	3c53c83a 	sub	r9,r7,r17
 1008e6c:	7298b03a 	or	r12,r14,r10
 1008e70:	7adab03a 	or	r13,r15,r11
 1008e74:	4885c83a 	sub	r2,r9,r2
 1008e78:	89ffe61e 	bne	r17,r7,1008e14 <__divdf3+0x120>
 1008e7c:	343fe936 	bltu	r6,r16,1008e24 <__divdf3+0x130>
 1008e80:	003fe406 	br	1008e14 <__divdf3+0x120>
 1008e84:	9809883a 	mov	r4,r19
 1008e88:	d9800415 	stw	r6,16(sp)
 1008e8c:	10098800 	call	1009880 <__pack_d>
 1008e90:	dfc01217 	ldw	ra,72(sp)
 1008e94:	dcc01117 	ldw	r19,68(sp)
 1008e98:	dc801017 	ldw	r18,64(sp)
 1008e9c:	dc400f17 	ldw	r17,60(sp)
 1008ea0:	dc000e17 	ldw	r16,56(sp)
 1008ea4:	dec01304 	addi	sp,sp,76
 1008ea8:	f800283a 	ret
 1008eac:	00803fc4 	movi	r2,255
 1008eb0:	7090703a 	and	r8,r14,r2
 1008eb4:	00802004 	movi	r2,128
 1008eb8:	0007883a 	mov	r3,zero
 1008ebc:	0013883a 	mov	r9,zero
 1008ec0:	40800d26 	beq	r8,r2,1008ef8 <__divdf3+0x204>
 1008ec4:	dbc00815 	stw	r15,32(sp)
 1008ec8:	db800715 	stw	r14,28(sp)
 1008ecc:	003fab06 	br	1008d7c <__divdf3+0x88>
 1008ed0:	343fc92e 	bgeu	r6,r16,1008df8 <__divdf3+0x104>
 1008ed4:	3185883a 	add	r2,r6,r6
 1008ed8:	1189803a 	cmpltu	r4,r2,r6
 1008edc:	39c7883a 	add	r3,r7,r7
 1008ee0:	20c9883a 	add	r4,r4,r3
 1008ee4:	297fffc4 	addi	r5,r5,-1
 1008ee8:	100d883a 	mov	r6,r2
 1008eec:	200f883a 	mov	r7,r4
 1008ef0:	d9400615 	stw	r5,24(sp)
 1008ef4:	003fc006 	br	1008df8 <__divdf3+0x104>
 1008ef8:	483ff21e 	bne	r9,zero,1008ec4 <__divdf3+0x1d0>
 1008efc:	01004004 	movi	r4,256
 1008f00:	7104703a 	and	r2,r14,r4
 1008f04:	10c4b03a 	or	r2,r2,r3
 1008f08:	103fee1e 	bne	r2,zero,1008ec4 <__divdf3+0x1d0>
 1008f0c:	31c4b03a 	or	r2,r6,r7
 1008f10:	103fec26 	beq	r2,zero,1008ec4 <__divdf3+0x1d0>
 1008f14:	7205883a 	add	r2,r14,r8
 1008f18:	1391803a 	cmpltu	r8,r2,r14
 1008f1c:	43d1883a 	add	r8,r8,r15
 1008f20:	013fc004 	movi	r4,-256
 1008f24:	111c703a 	and	r14,r2,r4
 1008f28:	401f883a 	mov	r15,r8
 1008f2c:	003fe506 	br	1008ec4 <__divdf3+0x1d0>
 1008f30:	8009883a 	mov	r4,r16
 1008f34:	003f9206 	br	1008d80 <__divdf3+0x8c>
 1008f38:	9809883a 	mov	r4,r19
 1008f3c:	d8000715 	stw	zero,28(sp)
 1008f40:	d8000815 	stw	zero,32(sp)
 1008f44:	d8000615 	stw	zero,24(sp)
 1008f48:	003f8d06 	br	1008d80 <__divdf3+0x8c>

01008f4c <__eqdf2>:
 1008f4c:	deffef04 	addi	sp,sp,-68
 1008f50:	dc400f15 	stw	r17,60(sp)
 1008f54:	dc400404 	addi	r17,sp,16
 1008f58:	2005883a 	mov	r2,r4
 1008f5c:	2807883a 	mov	r3,r5
 1008f60:	dc000e15 	stw	r16,56(sp)
 1008f64:	d809883a 	mov	r4,sp
 1008f68:	880b883a 	mov	r5,r17
 1008f6c:	dc000904 	addi	r16,sp,36
 1008f70:	d8c00115 	stw	r3,4(sp)
 1008f74:	d8800015 	stw	r2,0(sp)
 1008f78:	d9800215 	stw	r6,8(sp)
 1008f7c:	dfc01015 	stw	ra,64(sp)
 1008f80:	d9c00315 	stw	r7,12(sp)
 1008f84:	1009b940 	call	1009b94 <__unpack_d>
 1008f88:	d9000204 	addi	r4,sp,8
 1008f8c:	800b883a 	mov	r5,r16
 1008f90:	1009b940 	call	1009b94 <__unpack_d>
 1008f94:	d8800417 	ldw	r2,16(sp)
 1008f98:	00c00044 	movi	r3,1
 1008f9c:	180d883a 	mov	r6,r3
 1008fa0:	1880062e 	bgeu	r3,r2,1008fbc <__eqdf2+0x70>
 1008fa4:	d8800917 	ldw	r2,36(sp)
 1008fa8:	8809883a 	mov	r4,r17
 1008fac:	800b883a 	mov	r5,r16
 1008fb0:	1880022e 	bgeu	r3,r2,1008fbc <__eqdf2+0x70>
 1008fb4:	1009ccc0 	call	1009ccc <__fpcmp_parts_d>
 1008fb8:	100d883a 	mov	r6,r2
 1008fbc:	3005883a 	mov	r2,r6
 1008fc0:	dfc01017 	ldw	ra,64(sp)
 1008fc4:	dc400f17 	ldw	r17,60(sp)
 1008fc8:	dc000e17 	ldw	r16,56(sp)
 1008fcc:	dec01104 	addi	sp,sp,68
 1008fd0:	f800283a 	ret

01008fd4 <__nedf2>:
 1008fd4:	deffef04 	addi	sp,sp,-68
 1008fd8:	dc400f15 	stw	r17,60(sp)
 1008fdc:	dc400404 	addi	r17,sp,16
 1008fe0:	2005883a 	mov	r2,r4
 1008fe4:	2807883a 	mov	r3,r5
 1008fe8:	dc000e15 	stw	r16,56(sp)
 1008fec:	d809883a 	mov	r4,sp
 1008ff0:	880b883a 	mov	r5,r17
 1008ff4:	dc000904 	addi	r16,sp,36
 1008ff8:	d8c00115 	stw	r3,4(sp)
 1008ffc:	d8800015 	stw	r2,0(sp)
 1009000:	d9800215 	stw	r6,8(sp)
 1009004:	dfc01015 	stw	ra,64(sp)
 1009008:	d9c00315 	stw	r7,12(sp)
 100900c:	1009b940 	call	1009b94 <__unpack_d>
 1009010:	d9000204 	addi	r4,sp,8
 1009014:	800b883a 	mov	r5,r16
 1009018:	1009b940 	call	1009b94 <__unpack_d>
 100901c:	d8800417 	ldw	r2,16(sp)
 1009020:	00c00044 	movi	r3,1
 1009024:	180d883a 	mov	r6,r3
 1009028:	1880062e 	bgeu	r3,r2,1009044 <__nedf2+0x70>
 100902c:	d8800917 	ldw	r2,36(sp)
 1009030:	8809883a 	mov	r4,r17
 1009034:	800b883a 	mov	r5,r16
 1009038:	1880022e 	bgeu	r3,r2,1009044 <__nedf2+0x70>
 100903c:	1009ccc0 	call	1009ccc <__fpcmp_parts_d>
 1009040:	100d883a 	mov	r6,r2
 1009044:	3005883a 	mov	r2,r6
 1009048:	dfc01017 	ldw	ra,64(sp)
 100904c:	dc400f17 	ldw	r17,60(sp)
 1009050:	dc000e17 	ldw	r16,56(sp)
 1009054:	dec01104 	addi	sp,sp,68
 1009058:	f800283a 	ret

0100905c <__gtdf2>:
 100905c:	deffef04 	addi	sp,sp,-68
 1009060:	dc400f15 	stw	r17,60(sp)
 1009064:	dc400404 	addi	r17,sp,16
 1009068:	2005883a 	mov	r2,r4
 100906c:	2807883a 	mov	r3,r5
 1009070:	dc000e15 	stw	r16,56(sp)
 1009074:	d809883a 	mov	r4,sp
 1009078:	880b883a 	mov	r5,r17
 100907c:	dc000904 	addi	r16,sp,36
 1009080:	d8c00115 	stw	r3,4(sp)
 1009084:	d8800015 	stw	r2,0(sp)
 1009088:	d9800215 	stw	r6,8(sp)
 100908c:	dfc01015 	stw	ra,64(sp)
 1009090:	d9c00315 	stw	r7,12(sp)
 1009094:	1009b940 	call	1009b94 <__unpack_d>
 1009098:	d9000204 	addi	r4,sp,8
 100909c:	800b883a 	mov	r5,r16
 10090a0:	1009b940 	call	1009b94 <__unpack_d>
 10090a4:	d8800417 	ldw	r2,16(sp)
 10090a8:	00c00044 	movi	r3,1
 10090ac:	01bfffc4 	movi	r6,-1
 10090b0:	1880062e 	bgeu	r3,r2,10090cc <__gtdf2+0x70>
 10090b4:	d8800917 	ldw	r2,36(sp)
 10090b8:	8809883a 	mov	r4,r17
 10090bc:	800b883a 	mov	r5,r16
 10090c0:	1880022e 	bgeu	r3,r2,10090cc <__gtdf2+0x70>
 10090c4:	1009ccc0 	call	1009ccc <__fpcmp_parts_d>
 10090c8:	100d883a 	mov	r6,r2
 10090cc:	3005883a 	mov	r2,r6
 10090d0:	dfc01017 	ldw	ra,64(sp)
 10090d4:	dc400f17 	ldw	r17,60(sp)
 10090d8:	dc000e17 	ldw	r16,56(sp)
 10090dc:	dec01104 	addi	sp,sp,68
 10090e0:	f800283a 	ret

010090e4 <__gedf2>:
 10090e4:	deffef04 	addi	sp,sp,-68
 10090e8:	dc400f15 	stw	r17,60(sp)
 10090ec:	dc400404 	addi	r17,sp,16
 10090f0:	2005883a 	mov	r2,r4
 10090f4:	2807883a 	mov	r3,r5
 10090f8:	dc000e15 	stw	r16,56(sp)
 10090fc:	d809883a 	mov	r4,sp
 1009100:	880b883a 	mov	r5,r17
 1009104:	dc000904 	addi	r16,sp,36
 1009108:	d8c00115 	stw	r3,4(sp)
 100910c:	d8800015 	stw	r2,0(sp)
 1009110:	d9800215 	stw	r6,8(sp)
 1009114:	dfc01015 	stw	ra,64(sp)
 1009118:	d9c00315 	stw	r7,12(sp)
 100911c:	1009b940 	call	1009b94 <__unpack_d>
 1009120:	d9000204 	addi	r4,sp,8
 1009124:	800b883a 	mov	r5,r16
 1009128:	1009b940 	call	1009b94 <__unpack_d>
 100912c:	d8800417 	ldw	r2,16(sp)
 1009130:	00c00044 	movi	r3,1
 1009134:	01bfffc4 	movi	r6,-1
 1009138:	1880062e 	bgeu	r3,r2,1009154 <__gedf2+0x70>
 100913c:	d8800917 	ldw	r2,36(sp)
 1009140:	8809883a 	mov	r4,r17
 1009144:	800b883a 	mov	r5,r16
 1009148:	1880022e 	bgeu	r3,r2,1009154 <__gedf2+0x70>
 100914c:	1009ccc0 	call	1009ccc <__fpcmp_parts_d>
 1009150:	100d883a 	mov	r6,r2
 1009154:	3005883a 	mov	r2,r6
 1009158:	dfc01017 	ldw	ra,64(sp)
 100915c:	dc400f17 	ldw	r17,60(sp)
 1009160:	dc000e17 	ldw	r16,56(sp)
 1009164:	dec01104 	addi	sp,sp,68
 1009168:	f800283a 	ret

0100916c <__ltdf2>:
 100916c:	deffef04 	addi	sp,sp,-68
 1009170:	dc400f15 	stw	r17,60(sp)
 1009174:	dc400404 	addi	r17,sp,16
 1009178:	2005883a 	mov	r2,r4
 100917c:	2807883a 	mov	r3,r5
 1009180:	dc000e15 	stw	r16,56(sp)
 1009184:	d809883a 	mov	r4,sp
 1009188:	880b883a 	mov	r5,r17
 100918c:	dc000904 	addi	r16,sp,36
 1009190:	d8c00115 	stw	r3,4(sp)
 1009194:	d8800015 	stw	r2,0(sp)
 1009198:	d9800215 	stw	r6,8(sp)
 100919c:	dfc01015 	stw	ra,64(sp)
 10091a0:	d9c00315 	stw	r7,12(sp)
 10091a4:	1009b940 	call	1009b94 <__unpack_d>
 10091a8:	d9000204 	addi	r4,sp,8
 10091ac:	800b883a 	mov	r5,r16
 10091b0:	1009b940 	call	1009b94 <__unpack_d>
 10091b4:	d8800417 	ldw	r2,16(sp)
 10091b8:	00c00044 	movi	r3,1
 10091bc:	180d883a 	mov	r6,r3
 10091c0:	1880062e 	bgeu	r3,r2,10091dc <__ltdf2+0x70>
 10091c4:	d8800917 	ldw	r2,36(sp)
 10091c8:	8809883a 	mov	r4,r17
 10091cc:	800b883a 	mov	r5,r16
 10091d0:	1880022e 	bgeu	r3,r2,10091dc <__ltdf2+0x70>
 10091d4:	1009ccc0 	call	1009ccc <__fpcmp_parts_d>
 10091d8:	100d883a 	mov	r6,r2
 10091dc:	3005883a 	mov	r2,r6
 10091e0:	dfc01017 	ldw	ra,64(sp)
 10091e4:	dc400f17 	ldw	r17,60(sp)
 10091e8:	dc000e17 	ldw	r16,56(sp)
 10091ec:	dec01104 	addi	sp,sp,68
 10091f0:	f800283a 	ret

010091f4 <__floatsidf>:
 10091f4:	2006d7fa 	srli	r3,r4,31
 10091f8:	defff604 	addi	sp,sp,-40
 10091fc:	008000c4 	movi	r2,3
 1009200:	dfc00915 	stw	ra,36(sp)
 1009204:	dcc00815 	stw	r19,32(sp)
 1009208:	dc800715 	stw	r18,28(sp)
 100920c:	dc400615 	stw	r17,24(sp)
 1009210:	dc000515 	stw	r16,20(sp)
 1009214:	d8800015 	stw	r2,0(sp)
 1009218:	d8c00115 	stw	r3,4(sp)
 100921c:	20000f1e 	bne	r4,zero,100925c <__floatsidf+0x68>
 1009220:	00800084 	movi	r2,2
 1009224:	d8800015 	stw	r2,0(sp)
 1009228:	d809883a 	mov	r4,sp
 100922c:	10098800 	call	1009880 <__pack_d>
 1009230:	1009883a 	mov	r4,r2
 1009234:	180b883a 	mov	r5,r3
 1009238:	2005883a 	mov	r2,r4
 100923c:	2807883a 	mov	r3,r5
 1009240:	dfc00917 	ldw	ra,36(sp)
 1009244:	dcc00817 	ldw	r19,32(sp)
 1009248:	dc800717 	ldw	r18,28(sp)
 100924c:	dc400617 	ldw	r17,24(sp)
 1009250:	dc000517 	ldw	r16,20(sp)
 1009254:	dec00a04 	addi	sp,sp,40
 1009258:	f800283a 	ret
 100925c:	00800f04 	movi	r2,60
 1009260:	1807003a 	cmpeq	r3,r3,zero
 1009264:	d8800215 	stw	r2,8(sp)
 1009268:	18001126 	beq	r3,zero,10092b0 <__floatsidf+0xbc>
 100926c:	0027883a 	mov	r19,zero
 1009270:	2025883a 	mov	r18,r4
 1009274:	d9000315 	stw	r4,12(sp)
 1009278:	dcc00415 	stw	r19,16(sp)
 100927c:	10098000 	call	1009800 <__clzsi2>
 1009280:	11000744 	addi	r4,r2,29
 1009284:	013fe80e 	bge	zero,r4,1009228 <__floatsidf+0x34>
 1009288:	10bfff44 	addi	r2,r2,-3
 100928c:	10000c16 	blt	r2,zero,10092c0 <__floatsidf+0xcc>
 1009290:	90a2983a 	sll	r17,r18,r2
 1009294:	0021883a 	mov	r16,zero
 1009298:	d8800217 	ldw	r2,8(sp)
 100929c:	dc400415 	stw	r17,16(sp)
 10092a0:	dc000315 	stw	r16,12(sp)
 10092a4:	1105c83a 	sub	r2,r2,r4
 10092a8:	d8800215 	stw	r2,8(sp)
 10092ac:	003fde06 	br	1009228 <__floatsidf+0x34>
 10092b0:	00a00034 	movhi	r2,32768
 10092b4:	20800a26 	beq	r4,r2,10092e0 <__floatsidf+0xec>
 10092b8:	0109c83a 	sub	r4,zero,r4
 10092bc:	003feb06 	br	100926c <__floatsidf+0x78>
 10092c0:	9006d07a 	srli	r3,r18,1
 10092c4:	008007c4 	movi	r2,31
 10092c8:	1105c83a 	sub	r2,r2,r4
 10092cc:	1886d83a 	srl	r3,r3,r2
 10092d0:	9922983a 	sll	r17,r19,r4
 10092d4:	9120983a 	sll	r16,r18,r4
 10092d8:	1c62b03a 	or	r17,r3,r17
 10092dc:	003fee06 	br	1009298 <__floatsidf+0xa4>
 10092e0:	0009883a 	mov	r4,zero
 10092e4:	01707834 	movhi	r5,49632
 10092e8:	003fd306 	br	1009238 <__floatsidf+0x44>

010092ec <__fixdfsi>:
 10092ec:	defff804 	addi	sp,sp,-32
 10092f0:	2005883a 	mov	r2,r4
 10092f4:	2807883a 	mov	r3,r5
 10092f8:	d809883a 	mov	r4,sp
 10092fc:	d9400204 	addi	r5,sp,8
 1009300:	d8c00115 	stw	r3,4(sp)
 1009304:	d8800015 	stw	r2,0(sp)
 1009308:	dfc00715 	stw	ra,28(sp)
 100930c:	1009b940 	call	1009b94 <__unpack_d>
 1009310:	d8c00217 	ldw	r3,8(sp)
 1009314:	00800084 	movi	r2,2
 1009318:	1880051e 	bne	r3,r2,1009330 <__fixdfsi+0x44>
 100931c:	0007883a 	mov	r3,zero
 1009320:	1805883a 	mov	r2,r3
 1009324:	dfc00717 	ldw	ra,28(sp)
 1009328:	dec00804 	addi	sp,sp,32
 100932c:	f800283a 	ret
 1009330:	00800044 	movi	r2,1
 1009334:	10fff92e 	bgeu	r2,r3,100931c <__fixdfsi+0x30>
 1009338:	00800104 	movi	r2,4
 100933c:	18800426 	beq	r3,r2,1009350 <__fixdfsi+0x64>
 1009340:	d8c00417 	ldw	r3,16(sp)
 1009344:	183ff516 	blt	r3,zero,100931c <__fixdfsi+0x30>
 1009348:	00800784 	movi	r2,30
 100934c:	10c0080e 	bge	r2,r3,1009370 <__fixdfsi+0x84>
 1009350:	d8800317 	ldw	r2,12(sp)
 1009354:	1000121e 	bne	r2,zero,10093a0 <__fixdfsi+0xb4>
 1009358:	00e00034 	movhi	r3,32768
 100935c:	18ffffc4 	addi	r3,r3,-1
 1009360:	1805883a 	mov	r2,r3
 1009364:	dfc00717 	ldw	ra,28(sp)
 1009368:	dec00804 	addi	sp,sp,32
 100936c:	f800283a 	ret
 1009370:	00800f04 	movi	r2,60
 1009374:	10d1c83a 	sub	r8,r2,r3
 1009378:	40bff804 	addi	r2,r8,-32
 100937c:	d9800517 	ldw	r6,20(sp)
 1009380:	d9c00617 	ldw	r7,24(sp)
 1009384:	10000816 	blt	r2,zero,10093a8 <__fixdfsi+0xbc>
 1009388:	3888d83a 	srl	r4,r7,r2
 100938c:	d8800317 	ldw	r2,12(sp)
 1009390:	2007883a 	mov	r3,r4
 1009394:	103fe226 	beq	r2,zero,1009320 <__fixdfsi+0x34>
 1009398:	0107c83a 	sub	r3,zero,r4
 100939c:	003fe006 	br	1009320 <__fixdfsi+0x34>
 10093a0:	00e00034 	movhi	r3,32768
 10093a4:	003fde06 	br	1009320 <__fixdfsi+0x34>
 10093a8:	39c7883a 	add	r3,r7,r7
 10093ac:	008007c4 	movi	r2,31
 10093b0:	1205c83a 	sub	r2,r2,r8
 10093b4:	1886983a 	sll	r3,r3,r2
 10093b8:	3208d83a 	srl	r4,r6,r8
 10093bc:	1908b03a 	or	r4,r3,r4
 10093c0:	003ff206 	br	100938c <__fixdfsi+0xa0>

010093c4 <__floatunsidf>:
 10093c4:	defff204 	addi	sp,sp,-56
 10093c8:	dfc00d15 	stw	ra,52(sp)
 10093cc:	ddc00c15 	stw	r23,48(sp)
 10093d0:	dd800b15 	stw	r22,44(sp)
 10093d4:	dd400a15 	stw	r21,40(sp)
 10093d8:	dd000915 	stw	r20,36(sp)
 10093dc:	dcc00815 	stw	r19,32(sp)
 10093e0:	dc800715 	stw	r18,28(sp)
 10093e4:	dc400615 	stw	r17,24(sp)
 10093e8:	dc000515 	stw	r16,20(sp)
 10093ec:	d8000115 	stw	zero,4(sp)
 10093f0:	20000f1e 	bne	r4,zero,1009430 <__floatunsidf+0x6c>
 10093f4:	00800084 	movi	r2,2
 10093f8:	d8800015 	stw	r2,0(sp)
 10093fc:	d809883a 	mov	r4,sp
 1009400:	10098800 	call	1009880 <__pack_d>
 1009404:	dfc00d17 	ldw	ra,52(sp)
 1009408:	ddc00c17 	ldw	r23,48(sp)
 100940c:	dd800b17 	ldw	r22,44(sp)
 1009410:	dd400a17 	ldw	r21,40(sp)
 1009414:	dd000917 	ldw	r20,36(sp)
 1009418:	dcc00817 	ldw	r19,32(sp)
 100941c:	dc800717 	ldw	r18,28(sp)
 1009420:	dc400617 	ldw	r17,24(sp)
 1009424:	dc000517 	ldw	r16,20(sp)
 1009428:	dec00e04 	addi	sp,sp,56
 100942c:	f800283a 	ret
 1009430:	008000c4 	movi	r2,3
 1009434:	00c00f04 	movi	r3,60
 1009438:	002f883a 	mov	r23,zero
 100943c:	202d883a 	mov	r22,r4
 1009440:	d8800015 	stw	r2,0(sp)
 1009444:	d8c00215 	stw	r3,8(sp)
 1009448:	d9000315 	stw	r4,12(sp)
 100944c:	ddc00415 	stw	r23,16(sp)
 1009450:	10098000 	call	1009800 <__clzsi2>
 1009454:	12400744 	addi	r9,r2,29
 1009458:	48000b16 	blt	r9,zero,1009488 <__floatunsidf+0xc4>
 100945c:	483fe726 	beq	r9,zero,10093fc <__floatunsidf+0x38>
 1009460:	10bfff44 	addi	r2,r2,-3
 1009464:	10002e16 	blt	r2,zero,1009520 <__floatunsidf+0x15c>
 1009468:	b0a2983a 	sll	r17,r22,r2
 100946c:	0021883a 	mov	r16,zero
 1009470:	d8800217 	ldw	r2,8(sp)
 1009474:	dc400415 	stw	r17,16(sp)
 1009478:	dc000315 	stw	r16,12(sp)
 100947c:	1245c83a 	sub	r2,r2,r9
 1009480:	d8800215 	stw	r2,8(sp)
 1009484:	003fdd06 	br	10093fc <__floatunsidf+0x38>
 1009488:	0255c83a 	sub	r10,zero,r9
 100948c:	51bff804 	addi	r6,r10,-32
 1009490:	30001b16 	blt	r6,zero,1009500 <__floatunsidf+0x13c>
 1009494:	b9a8d83a 	srl	r20,r23,r6
 1009498:	002b883a 	mov	r21,zero
 100949c:	000f883a 	mov	r7,zero
 10094a0:	01000044 	movi	r4,1
 10094a4:	0011883a 	mov	r8,zero
 10094a8:	30002516 	blt	r6,zero,1009540 <__floatunsidf+0x17c>
 10094ac:	21a6983a 	sll	r19,r4,r6
 10094b0:	0025883a 	mov	r18,zero
 10094b4:	00bfffc4 	movi	r2,-1
 10094b8:	9089883a 	add	r4,r18,r2
 10094bc:	988b883a 	add	r5,r19,r2
 10094c0:	248d803a 	cmpltu	r6,r4,r18
 10094c4:	314b883a 	add	r5,r6,r5
 10094c8:	b104703a 	and	r2,r22,r4
 10094cc:	b946703a 	and	r3,r23,r5
 10094d0:	10c4b03a 	or	r2,r2,r3
 10094d4:	10000226 	beq	r2,zero,10094e0 <__floatunsidf+0x11c>
 10094d8:	01c00044 	movi	r7,1
 10094dc:	0011883a 	mov	r8,zero
 10094e0:	d9000217 	ldw	r4,8(sp)
 10094e4:	a1c4b03a 	or	r2,r20,r7
 10094e8:	aa06b03a 	or	r3,r21,r8
 10094ec:	2249c83a 	sub	r4,r4,r9
 10094f0:	d8c00415 	stw	r3,16(sp)
 10094f4:	d9000215 	stw	r4,8(sp)
 10094f8:	d8800315 	stw	r2,12(sp)
 10094fc:	003fbf06 	br	10093fc <__floatunsidf+0x38>
 1009500:	bdc7883a 	add	r3,r23,r23
 1009504:	008007c4 	movi	r2,31
 1009508:	1285c83a 	sub	r2,r2,r10
 100950c:	1886983a 	sll	r3,r3,r2
 1009510:	b2a8d83a 	srl	r20,r22,r10
 1009514:	baaad83a 	srl	r21,r23,r10
 1009518:	1d28b03a 	or	r20,r3,r20
 100951c:	003fdf06 	br	100949c <__floatunsidf+0xd8>
 1009520:	b006d07a 	srli	r3,r22,1
 1009524:	008007c4 	movi	r2,31
 1009528:	1245c83a 	sub	r2,r2,r9
 100952c:	1886d83a 	srl	r3,r3,r2
 1009530:	ba62983a 	sll	r17,r23,r9
 1009534:	b260983a 	sll	r16,r22,r9
 1009538:	1c62b03a 	or	r17,r3,r17
 100953c:	003fcc06 	br	1009470 <__floatunsidf+0xac>
 1009540:	2006d07a 	srli	r3,r4,1
 1009544:	008007c4 	movi	r2,31
 1009548:	1285c83a 	sub	r2,r2,r10
 100954c:	18a6d83a 	srl	r19,r3,r2
 1009550:	22a4983a 	sll	r18,r4,r10
 1009554:	003fd706 	br	10094b4 <__floatunsidf+0xf0>

01009558 <udivmodsi4>:
 1009558:	29001b2e 	bgeu	r5,r4,10095c8 <udivmodsi4+0x70>
 100955c:	28001a16 	blt	r5,zero,10095c8 <udivmodsi4+0x70>
 1009560:	00800044 	movi	r2,1
 1009564:	0007883a 	mov	r3,zero
 1009568:	01c007c4 	movi	r7,31
 100956c:	00000306 	br	100957c <udivmodsi4+0x24>
 1009570:	19c01326 	beq	r3,r7,10095c0 <udivmodsi4+0x68>
 1009574:	18c00044 	addi	r3,r3,1
 1009578:	28000416 	blt	r5,zero,100958c <udivmodsi4+0x34>
 100957c:	294b883a 	add	r5,r5,r5
 1009580:	1085883a 	add	r2,r2,r2
 1009584:	293ffa36 	bltu	r5,r4,1009570 <udivmodsi4+0x18>
 1009588:	10000d26 	beq	r2,zero,10095c0 <udivmodsi4+0x68>
 100958c:	0007883a 	mov	r3,zero
 1009590:	21400236 	bltu	r4,r5,100959c <udivmodsi4+0x44>
 1009594:	2149c83a 	sub	r4,r4,r5
 1009598:	1886b03a 	or	r3,r3,r2
 100959c:	1004d07a 	srli	r2,r2,1
 10095a0:	280ad07a 	srli	r5,r5,1
 10095a4:	103ffa1e 	bne	r2,zero,1009590 <udivmodsi4+0x38>
 10095a8:	30000226 	beq	r6,zero,10095b4 <udivmodsi4+0x5c>
 10095ac:	2005883a 	mov	r2,r4
 10095b0:	f800283a 	ret
 10095b4:	1809883a 	mov	r4,r3
 10095b8:	2005883a 	mov	r2,r4
 10095bc:	f800283a 	ret
 10095c0:	0007883a 	mov	r3,zero
 10095c4:	003ff806 	br	10095a8 <udivmodsi4+0x50>
 10095c8:	00800044 	movi	r2,1
 10095cc:	0007883a 	mov	r3,zero
 10095d0:	003fef06 	br	1009590 <udivmodsi4+0x38>

010095d4 <__divsi3>:
 10095d4:	defffe04 	addi	sp,sp,-8
 10095d8:	dc000015 	stw	r16,0(sp)
 10095dc:	dfc00115 	stw	ra,4(sp)
 10095e0:	0021883a 	mov	r16,zero
 10095e4:	20000c16 	blt	r4,zero,1009618 <__divsi3+0x44>
 10095e8:	000d883a 	mov	r6,zero
 10095ec:	28000e16 	blt	r5,zero,1009628 <__divsi3+0x54>
 10095f0:	10095580 	call	1009558 <udivmodsi4>
 10095f4:	1007883a 	mov	r3,r2
 10095f8:	8005003a 	cmpeq	r2,r16,zero
 10095fc:	1000011e 	bne	r2,zero,1009604 <__divsi3+0x30>
 1009600:	00c7c83a 	sub	r3,zero,r3
 1009604:	1805883a 	mov	r2,r3
 1009608:	dfc00117 	ldw	ra,4(sp)
 100960c:	dc000017 	ldw	r16,0(sp)
 1009610:	dec00204 	addi	sp,sp,8
 1009614:	f800283a 	ret
 1009618:	0109c83a 	sub	r4,zero,r4
 100961c:	04000044 	movi	r16,1
 1009620:	000d883a 	mov	r6,zero
 1009624:	283ff20e 	bge	r5,zero,10095f0 <__divsi3+0x1c>
 1009628:	014bc83a 	sub	r5,zero,r5
 100962c:	8021003a 	cmpeq	r16,r16,zero
 1009630:	003fef06 	br	10095f0 <__divsi3+0x1c>

01009634 <__modsi3>:
 1009634:	deffff04 	addi	sp,sp,-4
 1009638:	dfc00015 	stw	ra,0(sp)
 100963c:	01800044 	movi	r6,1
 1009640:	2807883a 	mov	r3,r5
 1009644:	20000416 	blt	r4,zero,1009658 <__modsi3+0x24>
 1009648:	28000c16 	blt	r5,zero,100967c <__modsi3+0x48>
 100964c:	dfc00017 	ldw	ra,0(sp)
 1009650:	dec00104 	addi	sp,sp,4
 1009654:	10095581 	jmpi	1009558 <udivmodsi4>
 1009658:	0109c83a 	sub	r4,zero,r4
 100965c:	28000b16 	blt	r5,zero,100968c <__modsi3+0x58>
 1009660:	180b883a 	mov	r5,r3
 1009664:	01800044 	movi	r6,1
 1009668:	10095580 	call	1009558 <udivmodsi4>
 100966c:	0085c83a 	sub	r2,zero,r2
 1009670:	dfc00017 	ldw	ra,0(sp)
 1009674:	dec00104 	addi	sp,sp,4
 1009678:	f800283a 	ret
 100967c:	014bc83a 	sub	r5,zero,r5
 1009680:	dfc00017 	ldw	ra,0(sp)
 1009684:	dec00104 	addi	sp,sp,4
 1009688:	10095581 	jmpi	1009558 <udivmodsi4>
 100968c:	0147c83a 	sub	r3,zero,r5
 1009690:	003ff306 	br	1009660 <__modsi3+0x2c>

01009694 <__udivsi3>:
 1009694:	000d883a 	mov	r6,zero
 1009698:	10095581 	jmpi	1009558 <udivmodsi4>

0100969c <__umodsi3>:
 100969c:	01800044 	movi	r6,1
 10096a0:	10095581 	jmpi	1009558 <udivmodsi4>

010096a4 <__mulsi3>:
 10096a4:	20000a26 	beq	r4,zero,10096d0 <__mulsi3+0x2c>
 10096a8:	0007883a 	mov	r3,zero
 10096ac:	2080004c 	andi	r2,r4,1
 10096b0:	1005003a 	cmpeq	r2,r2,zero
 10096b4:	2008d07a 	srli	r4,r4,1
 10096b8:	1000011e 	bne	r2,zero,10096c0 <__mulsi3+0x1c>
 10096bc:	1947883a 	add	r3,r3,r5
 10096c0:	294b883a 	add	r5,r5,r5
 10096c4:	203ff91e 	bne	r4,zero,10096ac <__mulsi3+0x8>
 10096c8:	1805883a 	mov	r2,r3
 10096cc:	f800283a 	ret
 10096d0:	0007883a 	mov	r3,zero
 10096d4:	1805883a 	mov	r2,r3
 10096d8:	f800283a 	ret

010096dc <__muldi3>:
 10096dc:	defff204 	addi	sp,sp,-56
 10096e0:	df000c15 	stw	fp,48(sp)
 10096e4:	3038d43a 	srli	fp,r6,16
 10096e8:	dd000815 	stw	r20,32(sp)
 10096ec:	dc400515 	stw	r17,20(sp)
 10096f0:	2028d43a 	srli	r20,r4,16
 10096f4:	247fffcc 	andi	r17,r4,65535
 10096f8:	dc000415 	stw	r16,16(sp)
 10096fc:	343fffcc 	andi	r16,r6,65535
 1009700:	dcc00715 	stw	r19,28(sp)
 1009704:	d9000015 	stw	r4,0(sp)
 1009708:	2827883a 	mov	r19,r5
 100970c:	8809883a 	mov	r4,r17
 1009710:	d9400115 	stw	r5,4(sp)
 1009714:	800b883a 	mov	r5,r16
 1009718:	d9800215 	stw	r6,8(sp)
 100971c:	dfc00d15 	stw	ra,52(sp)
 1009720:	d9c00315 	stw	r7,12(sp)
 1009724:	dd800a15 	stw	r22,40(sp)
 1009728:	dd400915 	stw	r21,36(sp)
 100972c:	302d883a 	mov	r22,r6
 1009730:	ddc00b15 	stw	r23,44(sp)
 1009734:	dc800615 	stw	r18,24(sp)
 1009738:	10096a40 	call	10096a4 <__mulsi3>
 100973c:	8809883a 	mov	r4,r17
 1009740:	e00b883a 	mov	r5,fp
 1009744:	102b883a 	mov	r21,r2
 1009748:	10096a40 	call	10096a4 <__mulsi3>
 100974c:	800b883a 	mov	r5,r16
 1009750:	a009883a 	mov	r4,r20
 1009754:	1023883a 	mov	r17,r2
 1009758:	10096a40 	call	10096a4 <__mulsi3>
 100975c:	a009883a 	mov	r4,r20
 1009760:	e00b883a 	mov	r5,fp
 1009764:	1021883a 	mov	r16,r2
 1009768:	10096a40 	call	10096a4 <__mulsi3>
 100976c:	a8ffffcc 	andi	r3,r21,65535
 1009770:	a82ad43a 	srli	r21,r21,16
 1009774:	8c23883a 	add	r17,r17,r16
 1009778:	1011883a 	mov	r8,r2
 100977c:	ac6b883a 	add	r21,r21,r17
 1009780:	a804943a 	slli	r2,r21,16
 1009784:	b009883a 	mov	r4,r22
 1009788:	980b883a 	mov	r5,r19
 100978c:	10c7883a 	add	r3,r2,r3
 1009790:	a812d43a 	srli	r9,r21,16
 1009794:	180d883a 	mov	r6,r3
 1009798:	ac00022e 	bgeu	r21,r16,10097a4 <__muldi3+0xc8>
 100979c:	00800074 	movhi	r2,1
 10097a0:	4091883a 	add	r8,r8,r2
 10097a4:	4267883a 	add	r19,r8,r9
 10097a8:	302d883a 	mov	r22,r6
 10097ac:	10096a40 	call	10096a4 <__mulsi3>
 10097b0:	d9400317 	ldw	r5,12(sp)
 10097b4:	d9000017 	ldw	r4,0(sp)
 10097b8:	1023883a 	mov	r17,r2
 10097bc:	10096a40 	call	10096a4 <__mulsi3>
 10097c0:	14cb883a 	add	r5,r2,r19
 10097c4:	894b883a 	add	r5,r17,r5
 10097c8:	b005883a 	mov	r2,r22
 10097cc:	2807883a 	mov	r3,r5
 10097d0:	dfc00d17 	ldw	ra,52(sp)
 10097d4:	df000c17 	ldw	fp,48(sp)
 10097d8:	ddc00b17 	ldw	r23,44(sp)
 10097dc:	dd800a17 	ldw	r22,40(sp)
 10097e0:	dd400917 	ldw	r21,36(sp)
 10097e4:	dd000817 	ldw	r20,32(sp)
 10097e8:	dcc00717 	ldw	r19,28(sp)
 10097ec:	dc800617 	ldw	r18,24(sp)
 10097f0:	dc400517 	ldw	r17,20(sp)
 10097f4:	dc000417 	ldw	r16,16(sp)
 10097f8:	dec00e04 	addi	sp,sp,56
 10097fc:	f800283a 	ret

01009800 <__clzsi2>:
 1009800:	00bfffd4 	movui	r2,65535
 1009804:	11000e36 	bltu	r2,r4,1009840 <__clzsi2+0x40>
 1009808:	00803fc4 	movi	r2,255
 100980c:	01400204 	movi	r5,8
 1009810:	0007883a 	mov	r3,zero
 1009814:	11001036 	bltu	r2,r4,1009858 <__clzsi2+0x58>
 1009818:	000b883a 	mov	r5,zero
 100981c:	20c6d83a 	srl	r3,r4,r3
 1009820:	00804074 	movhi	r2,257
 1009824:	10b39e04 	addi	r2,r2,-12680
 1009828:	1887883a 	add	r3,r3,r2
 100982c:	18800003 	ldbu	r2,0(r3)
 1009830:	00c00804 	movi	r3,32
 1009834:	2885883a 	add	r2,r5,r2
 1009838:	1885c83a 	sub	r2,r3,r2
 100983c:	f800283a 	ret
 1009840:	01400404 	movi	r5,16
 1009844:	00804034 	movhi	r2,256
 1009848:	10bfffc4 	addi	r2,r2,-1
 100984c:	2807883a 	mov	r3,r5
 1009850:	113ff22e 	bgeu	r2,r4,100981c <__clzsi2+0x1c>
 1009854:	01400604 	movi	r5,24
 1009858:	2807883a 	mov	r3,r5
 100985c:	20c6d83a 	srl	r3,r4,r3
 1009860:	00804074 	movhi	r2,257
 1009864:	10b39e04 	addi	r2,r2,-12680
 1009868:	1887883a 	add	r3,r3,r2
 100986c:	18800003 	ldbu	r2,0(r3)
 1009870:	00c00804 	movi	r3,32
 1009874:	2885883a 	add	r2,r5,r2
 1009878:	1885c83a 	sub	r2,r3,r2
 100987c:	f800283a 	ret

01009880 <__pack_d>:
 1009880:	20c00017 	ldw	r3,0(r4)
 1009884:	defffd04 	addi	sp,sp,-12
 1009888:	dc000015 	stw	r16,0(sp)
 100988c:	dc800215 	stw	r18,8(sp)
 1009890:	dc400115 	stw	r17,4(sp)
 1009894:	00800044 	movi	r2,1
 1009898:	22000317 	ldw	r8,12(r4)
 100989c:	001f883a 	mov	r15,zero
 10098a0:	22400417 	ldw	r9,16(r4)
 10098a4:	24000117 	ldw	r16,4(r4)
 10098a8:	10c0552e 	bgeu	r2,r3,1009a00 <__pack_d+0x180>
 10098ac:	00800104 	movi	r2,4
 10098b0:	18804f26 	beq	r3,r2,10099f0 <__pack_d+0x170>
 10098b4:	00800084 	movi	r2,2
 10098b8:	18800226 	beq	r3,r2,10098c4 <__pack_d+0x44>
 10098bc:	4244b03a 	or	r2,r8,r9
 10098c0:	10001a1e 	bne	r2,zero,100992c <__pack_d+0xac>
 10098c4:	000d883a 	mov	r6,zero
 10098c8:	000f883a 	mov	r7,zero
 10098cc:	0011883a 	mov	r8,zero
 10098d0:	00800434 	movhi	r2,16
 10098d4:	10bfffc4 	addi	r2,r2,-1
 10098d8:	301d883a 	mov	r14,r6
 10098dc:	3884703a 	and	r2,r7,r2
 10098e0:	400a953a 	slli	r5,r8,20
 10098e4:	79bffc2c 	andhi	r6,r15,65520
 10098e8:	308cb03a 	or	r6,r6,r2
 10098ec:	00e00434 	movhi	r3,32784
 10098f0:	18ffffc4 	addi	r3,r3,-1
 10098f4:	800497fa 	slli	r2,r16,31
 10098f8:	30c6703a 	and	r3,r6,r3
 10098fc:	1946b03a 	or	r3,r3,r5
 1009900:	01600034 	movhi	r5,32768
 1009904:	297fffc4 	addi	r5,r5,-1
 1009908:	194a703a 	and	r5,r3,r5
 100990c:	288ab03a 	or	r5,r5,r2
 1009910:	2807883a 	mov	r3,r5
 1009914:	7005883a 	mov	r2,r14
 1009918:	dc800217 	ldw	r18,8(sp)
 100991c:	dc400117 	ldw	r17,4(sp)
 1009920:	dc000017 	ldw	r16,0(sp)
 1009924:	dec00304 	addi	sp,sp,12
 1009928:	f800283a 	ret
 100992c:	21000217 	ldw	r4,8(r4)
 1009930:	00bf0084 	movi	r2,-1022
 1009934:	20803f16 	blt	r4,r2,1009a34 <__pack_d+0x1b4>
 1009938:	0080ffc4 	movi	r2,1023
 100993c:	11002c16 	blt	r2,r4,10099f0 <__pack_d+0x170>
 1009940:	00803fc4 	movi	r2,255
 1009944:	408c703a 	and	r6,r8,r2
 1009948:	00802004 	movi	r2,128
 100994c:	0007883a 	mov	r3,zero
 1009950:	000f883a 	mov	r7,zero
 1009954:	2280ffc4 	addi	r10,r4,1023
 1009958:	30801e26 	beq	r6,r2,10099d4 <__pack_d+0x154>
 100995c:	00801fc4 	movi	r2,127
 1009960:	4089883a 	add	r4,r8,r2
 1009964:	220d803a 	cmpltu	r6,r4,r8
 1009968:	324d883a 	add	r6,r6,r9
 100996c:	2011883a 	mov	r8,r4
 1009970:	3013883a 	mov	r9,r6
 1009974:	00880034 	movhi	r2,8192
 1009978:	10bfffc4 	addi	r2,r2,-1
 100997c:	12400d36 	bltu	r2,r9,10099b4 <__pack_d+0x134>
 1009980:	4804963a 	slli	r2,r9,24
 1009984:	400cd23a 	srli	r6,r8,8
 1009988:	480ed23a 	srli	r7,r9,8
 100998c:	013fffc4 	movi	r4,-1
 1009990:	118cb03a 	or	r6,r2,r6
 1009994:	01400434 	movhi	r5,16
 1009998:	297fffc4 	addi	r5,r5,-1
 100999c:	3104703a 	and	r2,r6,r4
 10099a0:	3946703a 	and	r3,r7,r5
 10099a4:	5201ffcc 	andi	r8,r10,2047
 10099a8:	100d883a 	mov	r6,r2
 10099ac:	180f883a 	mov	r7,r3
 10099b0:	003fc706 	br	10098d0 <__pack_d+0x50>
 10099b4:	480897fa 	slli	r4,r9,31
 10099b8:	4004d07a 	srli	r2,r8,1
 10099bc:	4806d07a 	srli	r3,r9,1
 10099c0:	52800044 	addi	r10,r10,1
 10099c4:	2084b03a 	or	r2,r4,r2
 10099c8:	1011883a 	mov	r8,r2
 10099cc:	1813883a 	mov	r9,r3
 10099d0:	003feb06 	br	1009980 <__pack_d+0x100>
 10099d4:	383fe11e 	bne	r7,zero,100995c <__pack_d+0xdc>
 10099d8:	01004004 	movi	r4,256
 10099dc:	4104703a 	and	r2,r8,r4
 10099e0:	10c4b03a 	or	r2,r2,r3
 10099e4:	103fe326 	beq	r2,zero,1009974 <__pack_d+0xf4>
 10099e8:	3005883a 	mov	r2,r6
 10099ec:	003fdc06 	br	1009960 <__pack_d+0xe0>
 10099f0:	000d883a 	mov	r6,zero
 10099f4:	000f883a 	mov	r7,zero
 10099f8:	0201ffc4 	movi	r8,2047
 10099fc:	003fb406 	br	10098d0 <__pack_d+0x50>
 1009a00:	0005883a 	mov	r2,zero
 1009a04:	00c00234 	movhi	r3,8
 1009a08:	408cb03a 	or	r6,r8,r2
 1009a0c:	48ceb03a 	or	r7,r9,r3
 1009a10:	013fffc4 	movi	r4,-1
 1009a14:	01400434 	movhi	r5,16
 1009a18:	297fffc4 	addi	r5,r5,-1
 1009a1c:	3104703a 	and	r2,r6,r4
 1009a20:	3946703a 	and	r3,r7,r5
 1009a24:	100d883a 	mov	r6,r2
 1009a28:	180f883a 	mov	r7,r3
 1009a2c:	0201ffc4 	movi	r8,2047
 1009a30:	003fa706 	br	10098d0 <__pack_d+0x50>
 1009a34:	1109c83a 	sub	r4,r2,r4
 1009a38:	00800e04 	movi	r2,56
 1009a3c:	11004316 	blt	r2,r4,1009b4c <__pack_d+0x2cc>
 1009a40:	21fff804 	addi	r7,r4,-32
 1009a44:	38004516 	blt	r7,zero,1009b5c <__pack_d+0x2dc>
 1009a48:	49d8d83a 	srl	r12,r9,r7
 1009a4c:	001b883a 	mov	r13,zero
 1009a50:	0023883a 	mov	r17,zero
 1009a54:	01400044 	movi	r5,1
 1009a58:	0025883a 	mov	r18,zero
 1009a5c:	38004716 	blt	r7,zero,1009b7c <__pack_d+0x2fc>
 1009a60:	29d6983a 	sll	r11,r5,r7
 1009a64:	0015883a 	mov	r10,zero
 1009a68:	00bfffc4 	movi	r2,-1
 1009a6c:	5089883a 	add	r4,r10,r2
 1009a70:	588b883a 	add	r5,r11,r2
 1009a74:	228d803a 	cmpltu	r6,r4,r10
 1009a78:	314b883a 	add	r5,r6,r5
 1009a7c:	4104703a 	and	r2,r8,r4
 1009a80:	4946703a 	and	r3,r9,r5
 1009a84:	10c4b03a 	or	r2,r2,r3
 1009a88:	10000226 	beq	r2,zero,1009a94 <__pack_d+0x214>
 1009a8c:	04400044 	movi	r17,1
 1009a90:	0025883a 	mov	r18,zero
 1009a94:	00803fc4 	movi	r2,255
 1009a98:	644eb03a 	or	r7,r12,r17
 1009a9c:	3892703a 	and	r9,r7,r2
 1009aa0:	00802004 	movi	r2,128
 1009aa4:	6c90b03a 	or	r8,r13,r18
 1009aa8:	0015883a 	mov	r10,zero
 1009aac:	48801626 	beq	r9,r2,1009b08 <__pack_d+0x288>
 1009ab0:	01001fc4 	movi	r4,127
 1009ab4:	3905883a 	add	r2,r7,r4
 1009ab8:	11cd803a 	cmpltu	r6,r2,r7
 1009abc:	320d883a 	add	r6,r6,r8
 1009ac0:	100f883a 	mov	r7,r2
 1009ac4:	00840034 	movhi	r2,4096
 1009ac8:	10bfffc4 	addi	r2,r2,-1
 1009acc:	3011883a 	mov	r8,r6
 1009ad0:	0007883a 	mov	r3,zero
 1009ad4:	11801b36 	bltu	r2,r6,1009b44 <__pack_d+0x2c4>
 1009ad8:	4004963a 	slli	r2,r8,24
 1009adc:	3808d23a 	srli	r4,r7,8
 1009ae0:	400ad23a 	srli	r5,r8,8
 1009ae4:	1813883a 	mov	r9,r3
 1009ae8:	1108b03a 	or	r4,r2,r4
 1009aec:	00bfffc4 	movi	r2,-1
 1009af0:	00c00434 	movhi	r3,16
 1009af4:	18ffffc4 	addi	r3,r3,-1
 1009af8:	208c703a 	and	r6,r4,r2
 1009afc:	28ce703a 	and	r7,r5,r3
 1009b00:	4a01ffcc 	andi	r8,r9,2047
 1009b04:	003f7206 	br	10098d0 <__pack_d+0x50>
 1009b08:	503fe91e 	bne	r10,zero,1009ab0 <__pack_d+0x230>
 1009b0c:	01004004 	movi	r4,256
 1009b10:	3904703a 	and	r2,r7,r4
 1009b14:	0007883a 	mov	r3,zero
 1009b18:	10c4b03a 	or	r2,r2,r3
 1009b1c:	10000626 	beq	r2,zero,1009b38 <__pack_d+0x2b8>
 1009b20:	3a45883a 	add	r2,r7,r9
 1009b24:	11cd803a 	cmpltu	r6,r2,r7
 1009b28:	320d883a 	add	r6,r6,r8
 1009b2c:	100f883a 	mov	r7,r2
 1009b30:	3011883a 	mov	r8,r6
 1009b34:	0007883a 	mov	r3,zero
 1009b38:	00840034 	movhi	r2,4096
 1009b3c:	10bfffc4 	addi	r2,r2,-1
 1009b40:	123fe52e 	bgeu	r2,r8,1009ad8 <__pack_d+0x258>
 1009b44:	00c00044 	movi	r3,1
 1009b48:	003fe306 	br	1009ad8 <__pack_d+0x258>
 1009b4c:	0009883a 	mov	r4,zero
 1009b50:	0013883a 	mov	r9,zero
 1009b54:	000b883a 	mov	r5,zero
 1009b58:	003fe406 	br	1009aec <__pack_d+0x26c>
 1009b5c:	4a47883a 	add	r3,r9,r9
 1009b60:	008007c4 	movi	r2,31
 1009b64:	1105c83a 	sub	r2,r2,r4
 1009b68:	1886983a 	sll	r3,r3,r2
 1009b6c:	4118d83a 	srl	r12,r8,r4
 1009b70:	491ad83a 	srl	r13,r9,r4
 1009b74:	1b18b03a 	or	r12,r3,r12
 1009b78:	003fb506 	br	1009a50 <__pack_d+0x1d0>
 1009b7c:	2806d07a 	srli	r3,r5,1
 1009b80:	008007c4 	movi	r2,31
 1009b84:	1105c83a 	sub	r2,r2,r4
 1009b88:	1896d83a 	srl	r11,r3,r2
 1009b8c:	2914983a 	sll	r10,r5,r4
 1009b90:	003fb506 	br	1009a68 <__pack_d+0x1e8>

01009b94 <__unpack_d>:
 1009b94:	20c00117 	ldw	r3,4(r4)
 1009b98:	22400017 	ldw	r9,0(r4)
 1009b9c:	00800434 	movhi	r2,16
 1009ba0:	10bfffc4 	addi	r2,r2,-1
 1009ba4:	1808d53a 	srli	r4,r3,20
 1009ba8:	180cd7fa 	srli	r6,r3,31
 1009bac:	1894703a 	and	r10,r3,r2
 1009bb0:	2201ffcc 	andi	r8,r4,2047
 1009bb4:	281b883a 	mov	r13,r5
 1009bb8:	4817883a 	mov	r11,r9
 1009bbc:	29800115 	stw	r6,4(r5)
 1009bc0:	5019883a 	mov	r12,r10
 1009bc4:	40001e1e 	bne	r8,zero,1009c40 <__unpack_d+0xac>
 1009bc8:	4a84b03a 	or	r2,r9,r10
 1009bcc:	10001926 	beq	r2,zero,1009c34 <__unpack_d+0xa0>
 1009bd0:	4804d63a 	srli	r2,r9,24
 1009bd4:	500c923a 	slli	r6,r10,8
 1009bd8:	013f0084 	movi	r4,-1022
 1009bdc:	00c40034 	movhi	r3,4096
 1009be0:	18ffffc4 	addi	r3,r3,-1
 1009be4:	118cb03a 	or	r6,r2,r6
 1009be8:	008000c4 	movi	r2,3
 1009bec:	480a923a 	slli	r5,r9,8
 1009bf0:	68800015 	stw	r2,0(r13)
 1009bf4:	69000215 	stw	r4,8(r13)
 1009bf8:	19800b36 	bltu	r3,r6,1009c28 <__unpack_d+0x94>
 1009bfc:	200f883a 	mov	r7,r4
 1009c00:	1811883a 	mov	r8,r3
 1009c04:	2945883a 	add	r2,r5,r5
 1009c08:	1149803a 	cmpltu	r4,r2,r5
 1009c0c:	3187883a 	add	r3,r6,r6
 1009c10:	20c9883a 	add	r4,r4,r3
 1009c14:	100b883a 	mov	r5,r2
 1009c18:	200d883a 	mov	r6,r4
 1009c1c:	39ffffc4 	addi	r7,r7,-1
 1009c20:	413ff82e 	bgeu	r8,r4,1009c04 <__unpack_d+0x70>
 1009c24:	69c00215 	stw	r7,8(r13)
 1009c28:	69800415 	stw	r6,16(r13)
 1009c2c:	69400315 	stw	r5,12(r13)
 1009c30:	f800283a 	ret
 1009c34:	00800084 	movi	r2,2
 1009c38:	28800015 	stw	r2,0(r5)
 1009c3c:	f800283a 	ret
 1009c40:	0081ffc4 	movi	r2,2047
 1009c44:	40800f26 	beq	r8,r2,1009c84 <__unpack_d+0xf0>
 1009c48:	480cd63a 	srli	r6,r9,24
 1009c4c:	5006923a 	slli	r3,r10,8
 1009c50:	4804923a 	slli	r2,r9,8
 1009c54:	0009883a 	mov	r4,zero
 1009c58:	30c6b03a 	or	r3,r6,r3
 1009c5c:	01440034 	movhi	r5,4096
 1009c60:	110cb03a 	or	r6,r2,r4
 1009c64:	423f0044 	addi	r8,r8,-1023
 1009c68:	194eb03a 	or	r7,r3,r5
 1009c6c:	008000c4 	movi	r2,3
 1009c70:	69c00415 	stw	r7,16(r13)
 1009c74:	6a000215 	stw	r8,8(r13)
 1009c78:	68800015 	stw	r2,0(r13)
 1009c7c:	69800315 	stw	r6,12(r13)
 1009c80:	f800283a 	ret
 1009c84:	4a84b03a 	or	r2,r9,r10
 1009c88:	1000031e 	bne	r2,zero,1009c98 <__unpack_d+0x104>
 1009c8c:	00800104 	movi	r2,4
 1009c90:	28800015 	stw	r2,0(r5)
 1009c94:	f800283a 	ret
 1009c98:	0009883a 	mov	r4,zero
 1009c9c:	01400234 	movhi	r5,8
 1009ca0:	4904703a 	and	r2,r9,r4
 1009ca4:	5146703a 	and	r3,r10,r5
 1009ca8:	10c4b03a 	or	r2,r2,r3
 1009cac:	10000526 	beq	r2,zero,1009cc4 <__unpack_d+0x130>
 1009cb0:	00800044 	movi	r2,1
 1009cb4:	68800015 	stw	r2,0(r13)
 1009cb8:	6b000415 	stw	r12,16(r13)
 1009cbc:	6ac00315 	stw	r11,12(r13)
 1009cc0:	f800283a 	ret
 1009cc4:	68000015 	stw	zero,0(r13)
 1009cc8:	003ffb06 	br	1009cb8 <__unpack_d+0x124>

01009ccc <__fpcmp_parts_d>:
 1009ccc:	21800017 	ldw	r6,0(r4)
 1009cd0:	00c00044 	movi	r3,1
 1009cd4:	19800a2e 	bgeu	r3,r6,1009d00 <__fpcmp_parts_d+0x34>
 1009cd8:	28800017 	ldw	r2,0(r5)
 1009cdc:	1880082e 	bgeu	r3,r2,1009d00 <__fpcmp_parts_d+0x34>
 1009ce0:	00c00104 	movi	r3,4
 1009ce4:	30c02626 	beq	r6,r3,1009d80 <__fpcmp_parts_d+0xb4>
 1009ce8:	10c02226 	beq	r2,r3,1009d74 <__fpcmp_parts_d+0xa8>
 1009cec:	00c00084 	movi	r3,2
 1009cf0:	30c00526 	beq	r6,r3,1009d08 <__fpcmp_parts_d+0x3c>
 1009cf4:	10c0071e 	bne	r2,r3,1009d14 <__fpcmp_parts_d+0x48>
 1009cf8:	20800117 	ldw	r2,4(r4)
 1009cfc:	1000091e 	bne	r2,zero,1009d24 <__fpcmp_parts_d+0x58>
 1009d00:	00800044 	movi	r2,1
 1009d04:	f800283a 	ret
 1009d08:	10c01a1e 	bne	r2,r3,1009d74 <__fpcmp_parts_d+0xa8>
 1009d0c:	0005883a 	mov	r2,zero
 1009d10:	f800283a 	ret
 1009d14:	22000117 	ldw	r8,4(r4)
 1009d18:	28800117 	ldw	r2,4(r5)
 1009d1c:	40800326 	beq	r8,r2,1009d2c <__fpcmp_parts_d+0x60>
 1009d20:	403ff726 	beq	r8,zero,1009d00 <__fpcmp_parts_d+0x34>
 1009d24:	00bfffc4 	movi	r2,-1
 1009d28:	f800283a 	ret
 1009d2c:	20c00217 	ldw	r3,8(r4)
 1009d30:	28800217 	ldw	r2,8(r5)
 1009d34:	10fffa16 	blt	r2,r3,1009d20 <__fpcmp_parts_d+0x54>
 1009d38:	18800916 	blt	r3,r2,1009d60 <__fpcmp_parts_d+0x94>
 1009d3c:	21c00417 	ldw	r7,16(r4)
 1009d40:	28c00417 	ldw	r3,16(r5)
 1009d44:	21800317 	ldw	r6,12(r4)
 1009d48:	28800317 	ldw	r2,12(r5)
 1009d4c:	19fff436 	bltu	r3,r7,1009d20 <__fpcmp_parts_d+0x54>
 1009d50:	38c00526 	beq	r7,r3,1009d68 <__fpcmp_parts_d+0x9c>
 1009d54:	38c00236 	bltu	r7,r3,1009d60 <__fpcmp_parts_d+0x94>
 1009d58:	19ffec1e 	bne	r3,r7,1009d0c <__fpcmp_parts_d+0x40>
 1009d5c:	30bfeb2e 	bgeu	r6,r2,1009d0c <__fpcmp_parts_d+0x40>
 1009d60:	403fe71e 	bne	r8,zero,1009d00 <__fpcmp_parts_d+0x34>
 1009d64:	003fef06 	br	1009d24 <__fpcmp_parts_d+0x58>
 1009d68:	11bffa2e 	bgeu	r2,r6,1009d54 <__fpcmp_parts_d+0x88>
 1009d6c:	403fe426 	beq	r8,zero,1009d00 <__fpcmp_parts_d+0x34>
 1009d70:	003fec06 	br	1009d24 <__fpcmp_parts_d+0x58>
 1009d74:	28800117 	ldw	r2,4(r5)
 1009d78:	103fe11e 	bne	r2,zero,1009d00 <__fpcmp_parts_d+0x34>
 1009d7c:	003fe906 	br	1009d24 <__fpcmp_parts_d+0x58>
 1009d80:	11bfdd1e 	bne	r2,r6,1009cf8 <__fpcmp_parts_d+0x2c>
 1009d84:	28c00117 	ldw	r3,4(r5)
 1009d88:	20800117 	ldw	r2,4(r4)
 1009d8c:	1885c83a 	sub	r2,r3,r2
 1009d90:	f800283a 	ret

01009d94 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1009d94:	defff804 	addi	sp,sp,-32
 1009d98:	dfc00715 	stw	ra,28(sp)
 1009d9c:	df000615 	stw	fp,24(sp)
 1009da0:	df000604 	addi	fp,sp,24
 1009da4:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 1009da8:	e0bffc17 	ldw	r2,-16(fp)
 1009dac:	1004803a 	cmplt	r2,r2,zero
 1009db0:	1000091e 	bne	r2,zero,1009dd8 <close+0x44>
 1009db4:	e13ffc17 	ldw	r4,-16(fp)
 1009db8:	01400304 	movi	r5,12
 1009dbc:	10096a40 	call	10096a4 <__mulsi3>
 1009dc0:	1007883a 	mov	r3,r2
 1009dc4:	00804074 	movhi	r2,257
 1009dc8:	10b60004 	addi	r2,r2,-10240
 1009dcc:	1887883a 	add	r3,r3,r2
 1009dd0:	e0ffff15 	stw	r3,-4(fp)
 1009dd4:	00000106 	br	1009ddc <close+0x48>
 1009dd8:	e03fff15 	stw	zero,-4(fp)
 1009ddc:	e0bfff17 	ldw	r2,-4(fp)
 1009de0:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 1009de4:	e0bffb17 	ldw	r2,-20(fp)
 1009de8:	1005003a 	cmpeq	r2,r2,zero
 1009dec:	10001d1e 	bne	r2,zero,1009e64 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 1009df0:	e0bffb17 	ldw	r2,-20(fp)
 1009df4:	10800017 	ldw	r2,0(r2)
 1009df8:	10800417 	ldw	r2,16(r2)
 1009dfc:	1005003a 	cmpeq	r2,r2,zero
 1009e00:	1000071e 	bne	r2,zero,1009e20 <close+0x8c>
 1009e04:	e0bffb17 	ldw	r2,-20(fp)
 1009e08:	10800017 	ldw	r2,0(r2)
 1009e0c:	10800417 	ldw	r2,16(r2)
 1009e10:	e13ffb17 	ldw	r4,-20(fp)
 1009e14:	103ee83a 	callr	r2
 1009e18:	e0bffe15 	stw	r2,-8(fp)
 1009e1c:	00000106 	br	1009e24 <close+0x90>
 1009e20:	e03ffe15 	stw	zero,-8(fp)
 1009e24:	e0bffe17 	ldw	r2,-8(fp)
 1009e28:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1009e2c:	e13ffc17 	ldw	r4,-16(fp)
 1009e30:	100a5ec0 	call	100a5ec <alt_release_fd>
    if (rval < 0)
 1009e34:	e0bffa17 	ldw	r2,-24(fp)
 1009e38:	1004403a 	cmpge	r2,r2,zero
 1009e3c:	1000071e 	bne	r2,zero,1009e5c <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1009e40:	1009e940 	call	1009e94 <alt_get_errno>
 1009e44:	e0fffa17 	ldw	r3,-24(fp)
 1009e48:	00c7c83a 	sub	r3,zero,r3
 1009e4c:	10c00015 	stw	r3,0(r2)
      return -1;
 1009e50:	00bfffc4 	movi	r2,-1
 1009e54:	e0bffd15 	stw	r2,-12(fp)
 1009e58:	00000806 	br	1009e7c <close+0xe8>
    }
    return 0;
 1009e5c:	e03ffd15 	stw	zero,-12(fp)
 1009e60:	00000606 	br	1009e7c <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1009e64:	1009e940 	call	1009e94 <alt_get_errno>
 1009e68:	1007883a 	mov	r3,r2
 1009e6c:	00801444 	movi	r2,81
 1009e70:	18800015 	stw	r2,0(r3)
    return -1;
 1009e74:	00bfffc4 	movi	r2,-1
 1009e78:	e0bffd15 	stw	r2,-12(fp)
 1009e7c:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1009e80:	e037883a 	mov	sp,fp
 1009e84:	dfc00117 	ldw	ra,4(sp)
 1009e88:	df000017 	ldw	fp,0(sp)
 1009e8c:	dec00204 	addi	sp,sp,8
 1009e90:	f800283a 	ret

01009e94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009e94:	defffd04 	addi	sp,sp,-12
 1009e98:	dfc00215 	stw	ra,8(sp)
 1009e9c:	df000115 	stw	fp,4(sp)
 1009ea0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1009ea4:	00804074 	movhi	r2,257
 1009ea8:	10ba8e04 	addi	r2,r2,-5576
 1009eac:	10800017 	ldw	r2,0(r2)
 1009eb0:	1005003a 	cmpeq	r2,r2,zero
 1009eb4:	1000061e 	bne	r2,zero,1009ed0 <alt_get_errno+0x3c>
 1009eb8:	00804074 	movhi	r2,257
 1009ebc:	10ba8e04 	addi	r2,r2,-5576
 1009ec0:	10800017 	ldw	r2,0(r2)
 1009ec4:	103ee83a 	callr	r2
 1009ec8:	e0bfff15 	stw	r2,-4(fp)
 1009ecc:	00000306 	br	1009edc <alt_get_errno+0x48>
 1009ed0:	00804074 	movhi	r2,257
 1009ed4:	10813b04 	addi	r2,r2,1260
 1009ed8:	e0bfff15 	stw	r2,-4(fp)
 1009edc:	e0bfff17 	ldw	r2,-4(fp)
}
 1009ee0:	e037883a 	mov	sp,fp
 1009ee4:	dfc00117 	ldw	ra,4(sp)
 1009ee8:	df000017 	ldw	fp,0(sp)
 1009eec:	dec00204 	addi	sp,sp,8
 1009ef0:	f800283a 	ret

01009ef4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1009ef4:	defffc04 	addi	sp,sp,-16
 1009ef8:	df000315 	stw	fp,12(sp)
 1009efc:	df000304 	addi	fp,sp,12
 1009f00:	e13ffd15 	stw	r4,-12(fp)
 1009f04:	e17ffe15 	stw	r5,-8(fp)
 1009f08:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1009f0c:	e0bfff17 	ldw	r2,-4(fp)
}
 1009f10:	e037883a 	mov	sp,fp
 1009f14:	df000017 	ldw	fp,0(sp)
 1009f18:	dec00104 	addi	sp,sp,4
 1009f1c:	f800283a 	ret

01009f20 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1009f20:	defff904 	addi	sp,sp,-28
 1009f24:	dfc00615 	stw	ra,24(sp)
 1009f28:	df000515 	stw	fp,20(sp)
 1009f2c:	df000504 	addi	fp,sp,20
 1009f30:	e13ffc15 	stw	r4,-16(fp)
 1009f34:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1009f38:	e0bffc17 	ldw	r2,-16(fp)
 1009f3c:	1004803a 	cmplt	r2,r2,zero
 1009f40:	1000091e 	bne	r2,zero,1009f68 <fstat+0x48>
 1009f44:	e13ffc17 	ldw	r4,-16(fp)
 1009f48:	01400304 	movi	r5,12
 1009f4c:	10096a40 	call	10096a4 <__mulsi3>
 1009f50:	1007883a 	mov	r3,r2
 1009f54:	00804074 	movhi	r2,257
 1009f58:	10b60004 	addi	r2,r2,-10240
 1009f5c:	1887883a 	add	r3,r3,r2
 1009f60:	e0ffff15 	stw	r3,-4(fp)
 1009f64:	00000106 	br	1009f6c <fstat+0x4c>
 1009f68:	e03fff15 	stw	zero,-4(fp)
 1009f6c:	e0bfff17 	ldw	r2,-4(fp)
 1009f70:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1009f74:	e0bffb17 	ldw	r2,-20(fp)
 1009f78:	1005003a 	cmpeq	r2,r2,zero
 1009f7c:	1000121e 	bne	r2,zero,1009fc8 <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1009f80:	e0bffb17 	ldw	r2,-20(fp)
 1009f84:	10800017 	ldw	r2,0(r2)
 1009f88:	10800817 	ldw	r2,32(r2)
 1009f8c:	1005003a 	cmpeq	r2,r2,zero
 1009f90:	1000081e 	bne	r2,zero,1009fb4 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 1009f94:	e0bffb17 	ldw	r2,-20(fp)
 1009f98:	10800017 	ldw	r2,0(r2)
 1009f9c:	10800817 	ldw	r2,32(r2)
 1009fa0:	e13ffb17 	ldw	r4,-20(fp)
 1009fa4:	e17ffd17 	ldw	r5,-12(fp)
 1009fa8:	103ee83a 	callr	r2
 1009fac:	e0bffe15 	stw	r2,-8(fp)
 1009fb0:	00000b06 	br	1009fe0 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1009fb4:	e0fffd17 	ldw	r3,-12(fp)
 1009fb8:	00880004 	movi	r2,8192
 1009fbc:	18800115 	stw	r2,4(r3)
      return 0;
 1009fc0:	e03ffe15 	stw	zero,-8(fp)
 1009fc4:	00000606 	br	1009fe0 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1009fc8:	1009ff80 	call	1009ff8 <alt_get_errno>
 1009fcc:	1007883a 	mov	r3,r2
 1009fd0:	00801444 	movi	r2,81
 1009fd4:	18800015 	stw	r2,0(r3)
    return -1;
 1009fd8:	00bfffc4 	movi	r2,-1
 1009fdc:	e0bffe15 	stw	r2,-8(fp)
 1009fe0:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1009fe4:	e037883a 	mov	sp,fp
 1009fe8:	dfc00117 	ldw	ra,4(sp)
 1009fec:	df000017 	ldw	fp,0(sp)
 1009ff0:	dec00204 	addi	sp,sp,8
 1009ff4:	f800283a 	ret

01009ff8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1009ff8:	defffd04 	addi	sp,sp,-12
 1009ffc:	dfc00215 	stw	ra,8(sp)
 100a000:	df000115 	stw	fp,4(sp)
 100a004:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a008:	00804074 	movhi	r2,257
 100a00c:	10ba8e04 	addi	r2,r2,-5576
 100a010:	10800017 	ldw	r2,0(r2)
 100a014:	1005003a 	cmpeq	r2,r2,zero
 100a018:	1000061e 	bne	r2,zero,100a034 <alt_get_errno+0x3c>
 100a01c:	00804074 	movhi	r2,257
 100a020:	10ba8e04 	addi	r2,r2,-5576
 100a024:	10800017 	ldw	r2,0(r2)
 100a028:	103ee83a 	callr	r2
 100a02c:	e0bfff15 	stw	r2,-4(fp)
 100a030:	00000306 	br	100a040 <alt_get_errno+0x48>
 100a034:	00804074 	movhi	r2,257
 100a038:	10813b04 	addi	r2,r2,1260
 100a03c:	e0bfff15 	stw	r2,-4(fp)
 100a040:	e0bfff17 	ldw	r2,-4(fp)
}
 100a044:	e037883a 	mov	sp,fp
 100a048:	dfc00117 	ldw	ra,4(sp)
 100a04c:	df000017 	ldw	fp,0(sp)
 100a050:	dec00204 	addi	sp,sp,8
 100a054:	f800283a 	ret

0100a058 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 100a058:	deffeb04 	addi	sp,sp,-84
 100a05c:	dfc01415 	stw	ra,80(sp)
 100a060:	df001315 	stw	fp,76(sp)
 100a064:	df001304 	addi	fp,sp,76
 100a068:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a06c:	e0bffd17 	ldw	r2,-12(fp)
 100a070:	1004803a 	cmplt	r2,r2,zero
 100a074:	1000091e 	bne	r2,zero,100a09c <isatty+0x44>
 100a078:	e13ffd17 	ldw	r4,-12(fp)
 100a07c:	01400304 	movi	r5,12
 100a080:	10096a40 	call	10096a4 <__mulsi3>
 100a084:	1007883a 	mov	r3,r2
 100a088:	00804074 	movhi	r2,257
 100a08c:	10b60004 	addi	r2,r2,-10240
 100a090:	1887883a 	add	r3,r3,r2
 100a094:	e0ffff15 	stw	r3,-4(fp)
 100a098:	00000106 	br	100a0a0 <isatty+0x48>
 100a09c:	e03fff15 	stw	zero,-4(fp)
 100a0a0:	e0bfff17 	ldw	r2,-4(fp)
 100a0a4:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 100a0a8:	e0bfed17 	ldw	r2,-76(fp)
 100a0ac:	1005003a 	cmpeq	r2,r2,zero
 100a0b0:	10000f1e 	bne	r2,zero,100a0f0 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 100a0b4:	e0bfed17 	ldw	r2,-76(fp)
 100a0b8:	10800017 	ldw	r2,0(r2)
 100a0bc:	10800817 	ldw	r2,32(r2)
 100a0c0:	1004c03a 	cmpne	r2,r2,zero
 100a0c4:	1000031e 	bne	r2,zero,100a0d4 <isatty+0x7c>
    {
      return 1;
 100a0c8:	00800044 	movi	r2,1
 100a0cc:	e0bffe15 	stw	r2,-8(fp)
 100a0d0:	00000c06 	br	100a104 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 100a0d4:	e17fee04 	addi	r5,fp,-72
 100a0d8:	e13ffd17 	ldw	r4,-12(fp)
 100a0dc:	1009f200 	call	1009f20 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 100a0e0:	e0bfef17 	ldw	r2,-68(fp)
 100a0e4:	10880020 	cmpeqi	r2,r2,8192
 100a0e8:	e0bffe15 	stw	r2,-8(fp)
 100a0ec:	00000506 	br	100a104 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 100a0f0:	100a11c0 	call	100a11c <alt_get_errno>
 100a0f4:	1007883a 	mov	r3,r2
 100a0f8:	00801444 	movi	r2,81
 100a0fc:	18800015 	stw	r2,0(r3)
    return 0;
 100a100:	e03ffe15 	stw	zero,-8(fp)
 100a104:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 100a108:	e037883a 	mov	sp,fp
 100a10c:	dfc00117 	ldw	ra,4(sp)
 100a110:	df000017 	ldw	fp,0(sp)
 100a114:	dec00204 	addi	sp,sp,8
 100a118:	f800283a 	ret

0100a11c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a11c:	defffd04 	addi	sp,sp,-12
 100a120:	dfc00215 	stw	ra,8(sp)
 100a124:	df000115 	stw	fp,4(sp)
 100a128:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a12c:	00804074 	movhi	r2,257
 100a130:	10ba8e04 	addi	r2,r2,-5576
 100a134:	10800017 	ldw	r2,0(r2)
 100a138:	1005003a 	cmpeq	r2,r2,zero
 100a13c:	1000061e 	bne	r2,zero,100a158 <alt_get_errno+0x3c>
 100a140:	00804074 	movhi	r2,257
 100a144:	10ba8e04 	addi	r2,r2,-5576
 100a148:	10800017 	ldw	r2,0(r2)
 100a14c:	103ee83a 	callr	r2
 100a150:	e0bfff15 	stw	r2,-4(fp)
 100a154:	00000306 	br	100a164 <alt_get_errno+0x48>
 100a158:	00804074 	movhi	r2,257
 100a15c:	10813b04 	addi	r2,r2,1260
 100a160:	e0bfff15 	stw	r2,-4(fp)
 100a164:	e0bfff17 	ldw	r2,-4(fp)
}
 100a168:	e037883a 	mov	sp,fp
 100a16c:	dfc00117 	ldw	ra,4(sp)
 100a170:	df000017 	ldw	fp,0(sp)
 100a174:	dec00204 	addi	sp,sp,8
 100a178:	f800283a 	ret

0100a17c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 100a17c:	defffe04 	addi	sp,sp,-8
 100a180:	dfc00115 	stw	ra,4(sp)
 100a184:	df000015 	stw	fp,0(sp)
 100a188:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 100a18c:	01004074 	movhi	r4,257
 100a190:	213a9304 	addi	r4,r4,-5556
 100a194:	01404074 	movhi	r5,257
 100a198:	2973f104 	addi	r5,r5,-12348
 100a19c:	01804074 	movhi	r6,257
 100a1a0:	31ba9304 	addi	r6,r6,-5556
 100a1a4:	100a1fc0 	call	100a1fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 100a1a8:	01004034 	movhi	r4,256
 100a1ac:	21000804 	addi	r4,r4,32
 100a1b0:	01404034 	movhi	r5,256
 100a1b4:	29400804 	addi	r5,r5,32
 100a1b8:	01804034 	movhi	r6,256
 100a1bc:	31806d04 	addi	r6,r6,436
 100a1c0:	100a1fc0 	call	100a1fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 100a1c4:	01004074 	movhi	r4,257
 100a1c8:	21330104 	addi	r4,r4,-13308
 100a1cc:	01404074 	movhi	r5,257
 100a1d0:	29730104 	addi	r5,r5,-13308
 100a1d4:	01804074 	movhi	r6,257
 100a1d8:	31b3f104 	addi	r6,r6,-12348
 100a1dc:	100a1fc0 	call	100a1fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 100a1e0:	100ba9c0 	call	100ba9c <alt_dcache_flush_all>
  alt_icache_flush_all();
 100a1e4:	100bd280 	call	100bd28 <alt_icache_flush_all>
}
 100a1e8:	e037883a 	mov	sp,fp
 100a1ec:	dfc00117 	ldw	ra,4(sp)
 100a1f0:	df000017 	ldw	fp,0(sp)
 100a1f4:	dec00204 	addi	sp,sp,8
 100a1f8:	f800283a 	ret

0100a1fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 100a1fc:	defffc04 	addi	sp,sp,-16
 100a200:	df000315 	stw	fp,12(sp)
 100a204:	df000304 	addi	fp,sp,12
 100a208:	e13ffd15 	stw	r4,-12(fp)
 100a20c:	e17ffe15 	stw	r5,-8(fp)
 100a210:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 100a214:	e0fffe17 	ldw	r3,-8(fp)
 100a218:	e0bffd17 	ldw	r2,-12(fp)
 100a21c:	18800e26 	beq	r3,r2,100a258 <alt_load_section+0x5c>
  {
    while( to != end )
 100a220:	00000a06 	br	100a24c <alt_load_section+0x50>
    {
      *to++ = *from++;
 100a224:	e0bffd17 	ldw	r2,-12(fp)
 100a228:	10c00017 	ldw	r3,0(r2)
 100a22c:	e0bffe17 	ldw	r2,-8(fp)
 100a230:	10c00015 	stw	r3,0(r2)
 100a234:	e0bffe17 	ldw	r2,-8(fp)
 100a238:	10800104 	addi	r2,r2,4
 100a23c:	e0bffe15 	stw	r2,-8(fp)
 100a240:	e0bffd17 	ldw	r2,-12(fp)
 100a244:	10800104 	addi	r2,r2,4
 100a248:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 100a24c:	e0fffe17 	ldw	r3,-8(fp)
 100a250:	e0bfff17 	ldw	r2,-4(fp)
 100a254:	18bff31e 	bne	r3,r2,100a224 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 100a258:	e037883a 	mov	sp,fp
 100a25c:	df000017 	ldw	fp,0(sp)
 100a260:	dec00104 	addi	sp,sp,4
 100a264:	f800283a 	ret

0100a268 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 100a268:	defff804 	addi	sp,sp,-32
 100a26c:	dfc00715 	stw	ra,28(sp)
 100a270:	df000615 	stw	fp,24(sp)
 100a274:	df000604 	addi	fp,sp,24
 100a278:	e13ffc15 	stw	r4,-16(fp)
 100a27c:	e17ffd15 	stw	r5,-12(fp)
 100a280:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 100a284:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a288:	e0bffc17 	ldw	r2,-16(fp)
 100a28c:	1004803a 	cmplt	r2,r2,zero
 100a290:	1000091e 	bne	r2,zero,100a2b8 <lseek+0x50>
 100a294:	e13ffc17 	ldw	r4,-16(fp)
 100a298:	01400304 	movi	r5,12
 100a29c:	10096a40 	call	10096a4 <__mulsi3>
 100a2a0:	1007883a 	mov	r3,r2
 100a2a4:	00804074 	movhi	r2,257
 100a2a8:	10b60004 	addi	r2,r2,-10240
 100a2ac:	1887883a 	add	r3,r3,r2
 100a2b0:	e0ffff15 	stw	r3,-4(fp)
 100a2b4:	00000106 	br	100a2bc <lseek+0x54>
 100a2b8:	e03fff15 	stw	zero,-4(fp)
 100a2bc:	e0bfff17 	ldw	r2,-4(fp)
 100a2c0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 100a2c4:	e0bffb17 	ldw	r2,-20(fp)
 100a2c8:	1005003a 	cmpeq	r2,r2,zero
 100a2cc:	1000111e 	bne	r2,zero,100a314 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 100a2d0:	e0bffb17 	ldw	r2,-20(fp)
 100a2d4:	10800017 	ldw	r2,0(r2)
 100a2d8:	10800717 	ldw	r2,28(r2)
 100a2dc:	1005003a 	cmpeq	r2,r2,zero
 100a2e0:	1000091e 	bne	r2,zero,100a308 <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 100a2e4:	e0bffb17 	ldw	r2,-20(fp)
 100a2e8:	10800017 	ldw	r2,0(r2)
 100a2ec:	10800717 	ldw	r2,28(r2)
 100a2f0:	e13ffb17 	ldw	r4,-20(fp)
 100a2f4:	e17ffd17 	ldw	r5,-12(fp)
 100a2f8:	e1bffe17 	ldw	r6,-8(fp)
 100a2fc:	103ee83a 	callr	r2
 100a300:	e0bffa15 	stw	r2,-24(fp)
 100a304:	00000506 	br	100a31c <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 100a308:	00bfde84 	movi	r2,-134
 100a30c:	e0bffa15 	stw	r2,-24(fp)
 100a310:	00000206 	br	100a31c <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 100a314:	00bfebc4 	movi	r2,-81
 100a318:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 100a31c:	e0bffa17 	ldw	r2,-24(fp)
 100a320:	1004403a 	cmpge	r2,r2,zero
 100a324:	1000071e 	bne	r2,zero,100a344 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 100a328:	100a35c0 	call	100a35c <alt_get_errno>
 100a32c:	1007883a 	mov	r3,r2
 100a330:	e0bffa17 	ldw	r2,-24(fp)
 100a334:	0085c83a 	sub	r2,zero,r2
 100a338:	18800015 	stw	r2,0(r3)
    rc = -1;
 100a33c:	00bfffc4 	movi	r2,-1
 100a340:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 100a344:	e0bffa17 	ldw	r2,-24(fp)
}
 100a348:	e037883a 	mov	sp,fp
 100a34c:	dfc00117 	ldw	ra,4(sp)
 100a350:	df000017 	ldw	fp,0(sp)
 100a354:	dec00204 	addi	sp,sp,8
 100a358:	f800283a 	ret

0100a35c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a35c:	defffd04 	addi	sp,sp,-12
 100a360:	dfc00215 	stw	ra,8(sp)
 100a364:	df000115 	stw	fp,4(sp)
 100a368:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a36c:	00804074 	movhi	r2,257
 100a370:	10ba8e04 	addi	r2,r2,-5576
 100a374:	10800017 	ldw	r2,0(r2)
 100a378:	1005003a 	cmpeq	r2,r2,zero
 100a37c:	1000061e 	bne	r2,zero,100a398 <alt_get_errno+0x3c>
 100a380:	00804074 	movhi	r2,257
 100a384:	10ba8e04 	addi	r2,r2,-5576
 100a388:	10800017 	ldw	r2,0(r2)
 100a38c:	103ee83a 	callr	r2
 100a390:	e0bfff15 	stw	r2,-4(fp)
 100a394:	00000306 	br	100a3a4 <alt_get_errno+0x48>
 100a398:	00804074 	movhi	r2,257
 100a39c:	10813b04 	addi	r2,r2,1260
 100a3a0:	e0bfff15 	stw	r2,-4(fp)
 100a3a4:	e0bfff17 	ldw	r2,-4(fp)
}
 100a3a8:	e037883a 	mov	sp,fp
 100a3ac:	dfc00117 	ldw	ra,4(sp)
 100a3b0:	df000017 	ldw	fp,0(sp)
 100a3b4:	dec00204 	addi	sp,sp,8
 100a3b8:	f800283a 	ret

0100a3bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 100a3bc:	defffd04 	addi	sp,sp,-12
 100a3c0:	dfc00215 	stw	ra,8(sp)
 100a3c4:	df000115 	stw	fp,4(sp)
 100a3c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 100a3cc:	0009883a 	mov	r4,zero
 100a3d0:	100a8a40 	call	100a8a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 100a3d4:	100a8d80 	call	100a8d8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100a3d8:	01004074 	movhi	r4,257
 100a3dc:	2133e104 	addi	r4,r4,-12412
 100a3e0:	01404074 	movhi	r5,257
 100a3e4:	2973e104 	addi	r5,r5,-12412
 100a3e8:	01804074 	movhi	r6,257
 100a3ec:	31b3e104 	addi	r6,r6,-12412
 100a3f0:	100c0e80 	call	100c0e8 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 100a3f4:	100bbcc0 	call	100bbcc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100a3f8:	01004074 	movhi	r4,257
 100a3fc:	212f0c04 	addi	r4,r4,-17360
 100a400:	100c7f80 	call	100c7f8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 100a404:	d126b917 	ldw	r4,-25884(gp)
 100a408:	d166ba17 	ldw	r5,-25880(gp)
 100a40c:	d1a6bb17 	ldw	r6,-25876(gp)
 100a410:	10001f00 	call	10001f0 <main>
 100a414:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100a418:	01000044 	movi	r4,1
 100a41c:	1009d940 	call	1009d94 <close>
  exit (result);
 100a420:	e13fff17 	ldw	r4,-4(fp)
 100a424:	100c80c0 	call	100c80c <exit>

0100a428 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100a428:	defffe04 	addi	sp,sp,-8
 100a42c:	df000115 	stw	fp,4(sp)
 100a430:	df000104 	addi	fp,sp,4
 100a434:	e13fff15 	stw	r4,-4(fp)
}
 100a438:	e037883a 	mov	sp,fp
 100a43c:	df000017 	ldw	fp,0(sp)
 100a440:	dec00104 	addi	sp,sp,4
 100a444:	f800283a 	ret

0100a448 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 100a448:	defffe04 	addi	sp,sp,-8
 100a44c:	df000115 	stw	fp,4(sp)
 100a450:	df000104 	addi	fp,sp,4
 100a454:	e13fff15 	stw	r4,-4(fp)
}
 100a458:	e037883a 	mov	sp,fp
 100a45c:	df000017 	ldw	fp,0(sp)
 100a460:	dec00104 	addi	sp,sp,4
 100a464:	f800283a 	ret

0100a468 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 100a468:	defff704 	addi	sp,sp,-36
 100a46c:	dfc00815 	stw	ra,32(sp)
 100a470:	df000715 	stw	fp,28(sp)
 100a474:	df000704 	addi	fp,sp,28
 100a478:	e13ffb15 	stw	r4,-20(fp)
 100a47c:	e17ffc15 	stw	r5,-16(fp)
 100a480:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a484:	e0bffb17 	ldw	r2,-20(fp)
 100a488:	1004803a 	cmplt	r2,r2,zero
 100a48c:	1000091e 	bne	r2,zero,100a4b4 <read+0x4c>
 100a490:	e13ffb17 	ldw	r4,-20(fp)
 100a494:	01400304 	movi	r5,12
 100a498:	10096a40 	call	10096a4 <__mulsi3>
 100a49c:	1007883a 	mov	r3,r2
 100a4a0:	00804074 	movhi	r2,257
 100a4a4:	10b60004 	addi	r2,r2,-10240
 100a4a8:	1887883a 	add	r3,r3,r2
 100a4ac:	e0ffff15 	stw	r3,-4(fp)
 100a4b0:	00000106 	br	100a4b8 <read+0x50>
 100a4b4:	e03fff15 	stw	zero,-4(fp)
 100a4b8:	e0bfff17 	ldw	r2,-4(fp)
 100a4bc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a4c0:	e0bffa17 	ldw	r2,-24(fp)
 100a4c4:	1005003a 	cmpeq	r2,r2,zero
 100a4c8:	1000241e 	bne	r2,zero,100a55c <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 100a4cc:	e0bffa17 	ldw	r2,-24(fp)
 100a4d0:	10800217 	ldw	r2,8(r2)
 100a4d4:	108000cc 	andi	r2,r2,3
 100a4d8:	10800060 	cmpeqi	r2,r2,1
 100a4dc:	10001a1e 	bne	r2,zero,100a548 <read+0xe0>
 100a4e0:	e0bffa17 	ldw	r2,-24(fp)
 100a4e4:	10800017 	ldw	r2,0(r2)
 100a4e8:	10800517 	ldw	r2,20(r2)
 100a4ec:	1005003a 	cmpeq	r2,r2,zero
 100a4f0:	1000151e 	bne	r2,zero,100a548 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100a4f4:	e0bffa17 	ldw	r2,-24(fp)
 100a4f8:	10800017 	ldw	r2,0(r2)
 100a4fc:	10800517 	ldw	r2,20(r2)
 100a500:	e17ffc17 	ldw	r5,-16(fp)
 100a504:	e1bffd17 	ldw	r6,-12(fp)
 100a508:	e13ffa17 	ldw	r4,-24(fp)
 100a50c:	103ee83a 	callr	r2
 100a510:	e0bff915 	stw	r2,-28(fp)
 100a514:	e0bff917 	ldw	r2,-28(fp)
 100a518:	1004403a 	cmpge	r2,r2,zero
 100a51c:	1000071e 	bne	r2,zero,100a53c <read+0xd4>
        {
          ALT_ERRNO = -rval;
 100a520:	100a58c0 	call	100a58c <alt_get_errno>
 100a524:	e0fff917 	ldw	r3,-28(fp)
 100a528:	00c7c83a 	sub	r3,zero,r3
 100a52c:	10c00015 	stw	r3,0(r2)
          return -1;
 100a530:	00bfffc4 	movi	r2,-1
 100a534:	e0bffe15 	stw	r2,-8(fp)
 100a538:	00000e06 	br	100a574 <read+0x10c>
        }
        return rval;
 100a53c:	e0bff917 	ldw	r2,-28(fp)
 100a540:	e0bffe15 	stw	r2,-8(fp)
 100a544:	00000b06 	br	100a574 <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 100a548:	100a58c0 	call	100a58c <alt_get_errno>
 100a54c:	1007883a 	mov	r3,r2
 100a550:	00800344 	movi	r2,13
 100a554:	18800015 	stw	r2,0(r3)
 100a558:	00000406 	br	100a56c <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 100a55c:	100a58c0 	call	100a58c <alt_get_errno>
 100a560:	1007883a 	mov	r3,r2
 100a564:	00801444 	movi	r2,81
 100a568:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100a56c:	00bfffc4 	movi	r2,-1
 100a570:	e0bffe15 	stw	r2,-8(fp)
 100a574:	e0bffe17 	ldw	r2,-8(fp)
}
 100a578:	e037883a 	mov	sp,fp
 100a57c:	dfc00117 	ldw	ra,4(sp)
 100a580:	df000017 	ldw	fp,0(sp)
 100a584:	dec00204 	addi	sp,sp,8
 100a588:	f800283a 	ret

0100a58c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a58c:	defffd04 	addi	sp,sp,-12
 100a590:	dfc00215 	stw	ra,8(sp)
 100a594:	df000115 	stw	fp,4(sp)
 100a598:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a59c:	00804074 	movhi	r2,257
 100a5a0:	10ba8e04 	addi	r2,r2,-5576
 100a5a4:	10800017 	ldw	r2,0(r2)
 100a5a8:	1005003a 	cmpeq	r2,r2,zero
 100a5ac:	1000061e 	bne	r2,zero,100a5c8 <alt_get_errno+0x3c>
 100a5b0:	00804074 	movhi	r2,257
 100a5b4:	10ba8e04 	addi	r2,r2,-5576
 100a5b8:	10800017 	ldw	r2,0(r2)
 100a5bc:	103ee83a 	callr	r2
 100a5c0:	e0bfff15 	stw	r2,-4(fp)
 100a5c4:	00000306 	br	100a5d4 <alt_get_errno+0x48>
 100a5c8:	00804074 	movhi	r2,257
 100a5cc:	10813b04 	addi	r2,r2,1260
 100a5d0:	e0bfff15 	stw	r2,-4(fp)
 100a5d4:	e0bfff17 	ldw	r2,-4(fp)
}
 100a5d8:	e037883a 	mov	sp,fp
 100a5dc:	dfc00117 	ldw	ra,4(sp)
 100a5e0:	df000017 	ldw	fp,0(sp)
 100a5e4:	dec00204 	addi	sp,sp,8
 100a5e8:	f800283a 	ret

0100a5ec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 100a5ec:	defffc04 	addi	sp,sp,-16
 100a5f0:	dfc00315 	stw	ra,12(sp)
 100a5f4:	df000215 	stw	fp,8(sp)
 100a5f8:	dc000115 	stw	r16,4(sp)
 100a5fc:	df000104 	addi	fp,sp,4
 100a600:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100a604:	e0bfff17 	ldw	r2,-4(fp)
 100a608:	108000d0 	cmplti	r2,r2,3
 100a60c:	10000f1e 	bne	r2,zero,100a64c <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 100a610:	e13fff17 	ldw	r4,-4(fp)
 100a614:	04004074 	movhi	r16,257
 100a618:	84360004 	addi	r16,r16,-10240
 100a61c:	01400304 	movi	r5,12
 100a620:	10096a40 	call	10096a4 <__mulsi3>
 100a624:	1405883a 	add	r2,r2,r16
 100a628:	10800204 	addi	r2,r2,8
 100a62c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 100a630:	e13fff17 	ldw	r4,-4(fp)
 100a634:	04004074 	movhi	r16,257
 100a638:	84360004 	addi	r16,r16,-10240
 100a63c:	01400304 	movi	r5,12
 100a640:	10096a40 	call	10096a4 <__mulsi3>
 100a644:	1405883a 	add	r2,r2,r16
 100a648:	10000015 	stw	zero,0(r2)
  }
}
 100a64c:	e037883a 	mov	sp,fp
 100a650:	dfc00217 	ldw	ra,8(sp)
 100a654:	df000117 	ldw	fp,4(sp)
 100a658:	dc000017 	ldw	r16,0(sp)
 100a65c:	dec00304 	addi	sp,sp,12
 100a660:	f800283a 	ret

0100a664 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 100a664:	defff804 	addi	sp,sp,-32
 100a668:	df000715 	stw	fp,28(sp)
 100a66c:	df000704 	addi	fp,sp,28
 100a670:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100a674:	0005303a 	rdctl	r2,status
 100a678:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100a67c:	e0fffb17 	ldw	r3,-20(fp)
 100a680:	00bfff84 	movi	r2,-2
 100a684:	1884703a 	and	r2,r3,r2
 100a688:	1001703a 	wrctl	status,r2
  
  return context;
 100a68c:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 100a690:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 100a694:	d0a00c17 	ldw	r2,-32720(gp)
 100a698:	10c000c4 	addi	r3,r2,3
 100a69c:	00bfff04 	movi	r2,-4
 100a6a0:	1884703a 	and	r2,r3,r2
 100a6a4:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 100a6a8:	d0e00c17 	ldw	r3,-32720(gp)
 100a6ac:	e0bffe17 	ldw	r2,-8(fp)
 100a6b0:	1887883a 	add	r3,r3,r2
 100a6b4:	00806034 	movhi	r2,384
 100a6b8:	10800004 	addi	r2,r2,0
 100a6bc:	10c0072e 	bgeu	r2,r3,100a6dc <sbrk+0x78>
 100a6c0:	e0bffd17 	ldw	r2,-12(fp)
 100a6c4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100a6c8:	e0bffa17 	ldw	r2,-24(fp)
 100a6cc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 100a6d0:	00bfffc4 	movi	r2,-1
 100a6d4:	e0bfff15 	stw	r2,-4(fp)
 100a6d8:	00000c06 	br	100a70c <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 100a6dc:	d0a00c17 	ldw	r2,-32720(gp)
 100a6e0:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100a6e4:	d0e00c17 	ldw	r3,-32720(gp)
 100a6e8:	e0bffe17 	ldw	r2,-8(fp)
 100a6ec:	1885883a 	add	r2,r3,r2
 100a6f0:	d0a00c15 	stw	r2,-32720(gp)
 100a6f4:	e0bffd17 	ldw	r2,-12(fp)
 100a6f8:	e0bff915 	stw	r2,-28(fp)
 100a6fc:	e0bff917 	ldw	r2,-28(fp)
 100a700:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100a704:	e0bffc17 	ldw	r2,-16(fp)
 100a708:	e0bfff15 	stw	r2,-4(fp)
 100a70c:	e0bfff17 	ldw	r2,-4(fp)
} 
 100a710:	e037883a 	mov	sp,fp
 100a714:	df000017 	ldw	fp,0(sp)
 100a718:	dec00104 	addi	sp,sp,4
 100a71c:	f800283a 	ret

0100a720 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 100a720:	defff704 	addi	sp,sp,-36
 100a724:	dfc00815 	stw	ra,32(sp)
 100a728:	df000715 	stw	fp,28(sp)
 100a72c:	df000704 	addi	fp,sp,28
 100a730:	e13ffb15 	stw	r4,-20(fp)
 100a734:	e17ffc15 	stw	r5,-16(fp)
 100a738:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 100a73c:	e0bffb17 	ldw	r2,-20(fp)
 100a740:	1004803a 	cmplt	r2,r2,zero
 100a744:	1000091e 	bne	r2,zero,100a76c <write+0x4c>
 100a748:	e13ffb17 	ldw	r4,-20(fp)
 100a74c:	01400304 	movi	r5,12
 100a750:	10096a40 	call	10096a4 <__mulsi3>
 100a754:	1007883a 	mov	r3,r2
 100a758:	00804074 	movhi	r2,257
 100a75c:	10b60004 	addi	r2,r2,-10240
 100a760:	1887883a 	add	r3,r3,r2
 100a764:	e0ffff15 	stw	r3,-4(fp)
 100a768:	00000106 	br	100a770 <write+0x50>
 100a76c:	e03fff15 	stw	zero,-4(fp)
 100a770:	e0bfff17 	ldw	r2,-4(fp)
 100a774:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 100a778:	e0bffa17 	ldw	r2,-24(fp)
 100a77c:	1005003a 	cmpeq	r2,r2,zero
 100a780:	1000241e 	bne	r2,zero,100a814 <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 100a784:	e0bffa17 	ldw	r2,-24(fp)
 100a788:	10800217 	ldw	r2,8(r2)
 100a78c:	108000cc 	andi	r2,r2,3
 100a790:	1005003a 	cmpeq	r2,r2,zero
 100a794:	10001a1e 	bne	r2,zero,100a800 <write+0xe0>
 100a798:	e0bffa17 	ldw	r2,-24(fp)
 100a79c:	10800017 	ldw	r2,0(r2)
 100a7a0:	10800617 	ldw	r2,24(r2)
 100a7a4:	1005003a 	cmpeq	r2,r2,zero
 100a7a8:	1000151e 	bne	r2,zero,100a800 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 100a7ac:	e0bffa17 	ldw	r2,-24(fp)
 100a7b0:	10800017 	ldw	r2,0(r2)
 100a7b4:	10800617 	ldw	r2,24(r2)
 100a7b8:	e17ffc17 	ldw	r5,-16(fp)
 100a7bc:	e1bffd17 	ldw	r6,-12(fp)
 100a7c0:	e13ffa17 	ldw	r4,-24(fp)
 100a7c4:	103ee83a 	callr	r2
 100a7c8:	e0bff915 	stw	r2,-28(fp)
 100a7cc:	e0bff917 	ldw	r2,-28(fp)
 100a7d0:	1004403a 	cmpge	r2,r2,zero
 100a7d4:	1000071e 	bne	r2,zero,100a7f4 <write+0xd4>
      {
        ALT_ERRNO = -rval;
 100a7d8:	100a8440 	call	100a844 <alt_get_errno>
 100a7dc:	e0fff917 	ldw	r3,-28(fp)
 100a7e0:	00c7c83a 	sub	r3,zero,r3
 100a7e4:	10c00015 	stw	r3,0(r2)
        return -1;
 100a7e8:	00bfffc4 	movi	r2,-1
 100a7ec:	e0bffe15 	stw	r2,-8(fp)
 100a7f0:	00000e06 	br	100a82c <write+0x10c>
      }
      return rval;
 100a7f4:	e0bff917 	ldw	r2,-28(fp)
 100a7f8:	e0bffe15 	stw	r2,-8(fp)
 100a7fc:	00000b06 	br	100a82c <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 100a800:	100a8440 	call	100a844 <alt_get_errno>
 100a804:	1007883a 	mov	r3,r2
 100a808:	00800344 	movi	r2,13
 100a80c:	18800015 	stw	r2,0(r3)
 100a810:	00000406 	br	100a824 <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100a814:	100a8440 	call	100a844 <alt_get_errno>
 100a818:	1007883a 	mov	r3,r2
 100a81c:	00801444 	movi	r2,81
 100a820:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100a824:	00bfffc4 	movi	r2,-1
 100a828:	e0bffe15 	stw	r2,-8(fp)
 100a82c:	e0bffe17 	ldw	r2,-8(fp)
}
 100a830:	e037883a 	mov	sp,fp
 100a834:	dfc00117 	ldw	ra,4(sp)
 100a838:	df000017 	ldw	fp,0(sp)
 100a83c:	dec00204 	addi	sp,sp,8
 100a840:	f800283a 	ret

0100a844 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100a844:	defffd04 	addi	sp,sp,-12
 100a848:	dfc00215 	stw	ra,8(sp)
 100a84c:	df000115 	stw	fp,4(sp)
 100a850:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100a854:	00804074 	movhi	r2,257
 100a858:	10ba8e04 	addi	r2,r2,-5576
 100a85c:	10800017 	ldw	r2,0(r2)
 100a860:	1005003a 	cmpeq	r2,r2,zero
 100a864:	1000061e 	bne	r2,zero,100a880 <alt_get_errno+0x3c>
 100a868:	00804074 	movhi	r2,257
 100a86c:	10ba8e04 	addi	r2,r2,-5576
 100a870:	10800017 	ldw	r2,0(r2)
 100a874:	103ee83a 	callr	r2
 100a878:	e0bfff15 	stw	r2,-4(fp)
 100a87c:	00000306 	br	100a88c <alt_get_errno+0x48>
 100a880:	00804074 	movhi	r2,257
 100a884:	10813b04 	addi	r2,r2,1260
 100a888:	e0bfff15 	stw	r2,-4(fp)
 100a88c:	e0bfff17 	ldw	r2,-4(fp)
}
 100a890:	e037883a 	mov	sp,fp
 100a894:	dfc00117 	ldw	ra,4(sp)
 100a898:	df000017 	ldw	fp,0(sp)
 100a89c:	dec00204 	addi	sp,sp,8
 100a8a0:	f800283a 	ret

0100a8a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 100a8a4:	defffd04 	addi	sp,sp,-12
 100a8a8:	dfc00215 	stw	ra,8(sp)
 100a8ac:	df000115 	stw	fp,4(sp)
 100a8b0:	df000104 	addi	fp,sp,4
 100a8b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 100a8b8:	100c5e80 	call	100c5e8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 100a8bc:	00800044 	movi	r2,1
 100a8c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100a8c4:	e037883a 	mov	sp,fp
 100a8c8:	dfc00117 	ldw	ra,4(sp)
 100a8cc:	df000017 	ldw	fp,0(sp)
 100a8d0:	dec00204 	addi	sp,sp,8
 100a8d4:	f800283a 	ret

0100a8d8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 100a8d8:	defffe04 	addi	sp,sp,-8
 100a8dc:	dfc00115 	stw	ra,4(sp)
 100a8e0:	df000015 	stw	fp,0(sp)
 100a8e4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 100a8e8:	01004074 	movhi	r4,257
 100a8ec:	21366a04 	addi	r4,r4,-9816
 100a8f0:	000b883a 	mov	r5,zero
 100a8f4:	01800144 	movi	r6,5
 100a8f8:	100aab40 	call	100aab4 <altera_avalon_jtag_uart_init>
 100a8fc:	01004074 	movhi	r4,257
 100a900:	21366004 	addi	r4,r4,-9856
 100a904:	100a9340 	call	100a934 <alt_dev_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 100a908:	01004074 	movhi	r4,257
 100a90c:	213a7804 	addi	r4,r4,-5664
 100a910:	100b4c80 	call	100b4c8 <alt_up_character_lcd_init>
 100a914:	01004074 	movhi	r4,257
 100a918:	213a7804 	addi	r4,r4,-5664
 100a91c:	100a9340 	call	100a934 <alt_dev_reg>
}
 100a920:	e037883a 	mov	sp,fp
 100a924:	dfc00117 	ldw	ra,4(sp)
 100a928:	df000017 	ldw	fp,0(sp)
 100a92c:	dec00204 	addi	sp,sp,8
 100a930:	f800283a 	ret

0100a934 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 100a934:	defffd04 	addi	sp,sp,-12
 100a938:	dfc00215 	stw	ra,8(sp)
 100a93c:	df000115 	stw	fp,4(sp)
 100a940:	df000104 	addi	fp,sp,4
 100a944:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 100a948:	e13fff17 	ldw	r4,-4(fp)
 100a94c:	01404074 	movhi	r5,257
 100a950:	297a8b04 	addi	r5,r5,-5588
 100a954:	100bab80 	call	100bab8 <alt_dev_llist_insert>
}
 100a958:	e037883a 	mov	sp,fp
 100a95c:	dfc00117 	ldw	ra,4(sp)
 100a960:	df000017 	ldw	fp,0(sp)
 100a964:	dec00204 	addi	sp,sp,8
 100a968:	f800283a 	ret

0100a96c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 100a96c:	defffa04 	addi	sp,sp,-24
 100a970:	dfc00515 	stw	ra,20(sp)
 100a974:	df000415 	stw	fp,16(sp)
 100a978:	df000404 	addi	fp,sp,16
 100a97c:	e13ffd15 	stw	r4,-12(fp)
 100a980:	e17ffe15 	stw	r5,-8(fp)
 100a984:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100a988:	e0bffd17 	ldw	r2,-12(fp)
 100a98c:	10800017 	ldw	r2,0(r2)
 100a990:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 100a994:	e0bffc17 	ldw	r2,-16(fp)
 100a998:	11000a04 	addi	r4,r2,40
 100a99c:	e0bffd17 	ldw	r2,-12(fp)
 100a9a0:	11c00217 	ldw	r7,8(r2)
 100a9a4:	e17ffe17 	ldw	r5,-8(fp)
 100a9a8:	e1bfff17 	ldw	r6,-4(fp)
 100a9ac:	100afb40 	call	100afb4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 100a9b0:	e037883a 	mov	sp,fp
 100a9b4:	dfc00117 	ldw	ra,4(sp)
 100a9b8:	df000017 	ldw	fp,0(sp)
 100a9bc:	dec00204 	addi	sp,sp,8
 100a9c0:	f800283a 	ret

0100a9c4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 100a9c4:	defffa04 	addi	sp,sp,-24
 100a9c8:	dfc00515 	stw	ra,20(sp)
 100a9cc:	df000415 	stw	fp,16(sp)
 100a9d0:	df000404 	addi	fp,sp,16
 100a9d4:	e13ffd15 	stw	r4,-12(fp)
 100a9d8:	e17ffe15 	stw	r5,-8(fp)
 100a9dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100a9e0:	e0bffd17 	ldw	r2,-12(fp)
 100a9e4:	10800017 	ldw	r2,0(r2)
 100a9e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 100a9ec:	e0bffc17 	ldw	r2,-16(fp)
 100a9f0:	11000a04 	addi	r4,r2,40
 100a9f4:	e0bffd17 	ldw	r2,-12(fp)
 100a9f8:	11c00217 	ldw	r7,8(r2)
 100a9fc:	e17ffe17 	ldw	r5,-8(fp)
 100aa00:	e1bfff17 	ldw	r6,-4(fp)
 100aa04:	100b1d80 	call	100b1d8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100aa08:	e037883a 	mov	sp,fp
 100aa0c:	dfc00117 	ldw	ra,4(sp)
 100aa10:	df000017 	ldw	fp,0(sp)
 100aa14:	dec00204 	addi	sp,sp,8
 100aa18:	f800283a 	ret

0100aa1c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 100aa1c:	defffc04 	addi	sp,sp,-16
 100aa20:	dfc00315 	stw	ra,12(sp)
 100aa24:	df000215 	stw	fp,8(sp)
 100aa28:	df000204 	addi	fp,sp,8
 100aa2c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 100aa30:	e0bfff17 	ldw	r2,-4(fp)
 100aa34:	10800017 	ldw	r2,0(r2)
 100aa38:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 100aa3c:	e0bffe17 	ldw	r2,-8(fp)
 100aa40:	11000a04 	addi	r4,r2,40
 100aa44:	e0bfff17 	ldw	r2,-4(fp)
 100aa48:	11400217 	ldw	r5,8(r2)
 100aa4c:	100ae4c0 	call	100ae4c <altera_avalon_jtag_uart_close>
}
 100aa50:	e037883a 	mov	sp,fp
 100aa54:	dfc00117 	ldw	ra,4(sp)
 100aa58:	df000017 	ldw	fp,0(sp)
 100aa5c:	dec00204 	addi	sp,sp,8
 100aa60:	f800283a 	ret

0100aa64 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 100aa64:	defffa04 	addi	sp,sp,-24
 100aa68:	dfc00515 	stw	ra,20(sp)
 100aa6c:	df000415 	stw	fp,16(sp)
 100aa70:	df000404 	addi	fp,sp,16
 100aa74:	e13ffd15 	stw	r4,-12(fp)
 100aa78:	e17ffe15 	stw	r5,-8(fp)
 100aa7c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 100aa80:	e0bffd17 	ldw	r2,-12(fp)
 100aa84:	10800017 	ldw	r2,0(r2)
 100aa88:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 100aa8c:	e0bffc17 	ldw	r2,-16(fp)
 100aa90:	11000a04 	addi	r4,r2,40
 100aa94:	e17ffe17 	ldw	r5,-8(fp)
 100aa98:	e1bfff17 	ldw	r6,-4(fp)
 100aa9c:	100aec00 	call	100aec0 <altera_avalon_jtag_uart_ioctl>
}
 100aaa0:	e037883a 	mov	sp,fp
 100aaa4:	dfc00117 	ldw	ra,4(sp)
 100aaa8:	df000017 	ldw	fp,0(sp)
 100aaac:	dec00204 	addi	sp,sp,8
 100aab0:	f800283a 	ret

0100aab4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 100aab4:	defffa04 	addi	sp,sp,-24
 100aab8:	dfc00515 	stw	ra,20(sp)
 100aabc:	df000415 	stw	fp,16(sp)
 100aac0:	df000404 	addi	fp,sp,16
 100aac4:	e13ffd15 	stw	r4,-12(fp)
 100aac8:	e17ffe15 	stw	r5,-8(fp)
 100aacc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100aad0:	e0fffd17 	ldw	r3,-12(fp)
 100aad4:	00800044 	movi	r2,1
 100aad8:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 100aadc:	e0bffd17 	ldw	r2,-12(fp)
 100aae0:	10800017 	ldw	r2,0(r2)
 100aae4:	11000104 	addi	r4,r2,4
 100aae8:	e0bffd17 	ldw	r2,-12(fp)
 100aaec:	10800817 	ldw	r2,32(r2)
 100aaf0:	1007883a 	mov	r3,r2
 100aaf4:	2005883a 	mov	r2,r4
 100aaf8:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 100aafc:	e13ffe17 	ldw	r4,-8(fp)
 100ab00:	e17fff17 	ldw	r5,-4(fp)
 100ab04:	d8000015 	stw	zero,0(sp)
 100ab08:	01804074 	movhi	r6,257
 100ab0c:	31aadd04 	addi	r6,r6,-21644
 100ab10:	e1fffd17 	ldw	r7,-12(fp)
 100ab14:	100bd440 	call	100bd44 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 100ab18:	e0bffd17 	ldw	r2,-12(fp)
 100ab1c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 100ab20:	e0bffd17 	ldw	r2,-12(fp)
 100ab24:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100ab28:	00804074 	movhi	r2,257
 100ab2c:	10814004 	addi	r2,r2,1280
 100ab30:	10800017 	ldw	r2,0(r2)
 100ab34:	100b883a 	mov	r5,r2
 100ab38:	01804074 	movhi	r6,257
 100ab3c:	31ab6704 	addi	r6,r6,-21092
 100ab40:	e1fffd17 	ldw	r7,-12(fp)
 100ab44:	100b9480 	call	100b948 <alt_alarm_start>
 100ab48:	1004403a 	cmpge	r2,r2,zero
 100ab4c:	1000041e 	bne	r2,zero,100ab60 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 100ab50:	e0fffd17 	ldw	r3,-12(fp)
 100ab54:	00a00034 	movhi	r2,32768
 100ab58:	10bfffc4 	addi	r2,r2,-1
 100ab5c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 100ab60:	e037883a 	mov	sp,fp
 100ab64:	dfc00117 	ldw	ra,4(sp)
 100ab68:	df000017 	ldw	fp,0(sp)
 100ab6c:	dec00204 	addi	sp,sp,8
 100ab70:	f800283a 	ret

0100ab74 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 100ab74:	defff804 	addi	sp,sp,-32
 100ab78:	df000715 	stw	fp,28(sp)
 100ab7c:	df000704 	addi	fp,sp,28
 100ab80:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 100ab84:	e0bfff17 	ldw	r2,-4(fp)
 100ab88:	e0bffe15 	stw	r2,-8(fp)
  unsigned int base = sp->base;
 100ab8c:	e0bffe17 	ldw	r2,-8(fp)
 100ab90:	10800017 	ldw	r2,0(r2)
 100ab94:	e0bffd15 	stw	r2,-12(fp)
 100ab98:	00000006 	br	100ab9c <altera_avalon_jtag_uart_irq+0x28>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100ab9c:	e0bffd17 	ldw	r2,-12(fp)
 100aba0:	10800104 	addi	r2,r2,4
 100aba4:	10800037 	ldwio	r2,0(r2)
 100aba8:	e0bffc15 	stw	r2,-16(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 100abac:	e0bffc17 	ldw	r2,-16(fp)
 100abb0:	1080c00c 	andi	r2,r2,768
 100abb4:	1005003a 	cmpeq	r2,r2,zero
 100abb8:	1000741e 	bne	r2,zero,100ad8c <altera_avalon_jtag_uart_irq+0x218>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 100abbc:	e0bffc17 	ldw	r2,-16(fp)
 100abc0:	1080400c 	andi	r2,r2,256
 100abc4:	1005003a 	cmpeq	r2,r2,zero
 100abc8:	1000351e 	bne	r2,zero,100aca0 <altera_avalon_jtag_uart_irq+0x12c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 100abcc:	00800074 	movhi	r2,1
 100abd0:	e0bffb15 	stw	r2,-20(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100abd4:	e0bffe17 	ldw	r2,-8(fp)
 100abd8:	10800a17 	ldw	r2,40(r2)
 100abdc:	10800044 	addi	r2,r2,1
 100abe0:	1081ffcc 	andi	r2,r2,2047
 100abe4:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 100abe8:	e0bffe17 	ldw	r2,-8(fp)
 100abec:	10c00b17 	ldw	r3,44(r2)
 100abf0:	e0bffa17 	ldw	r2,-24(fp)
 100abf4:	18801626 	beq	r3,r2,100ac50 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 100abf8:	e0bffd17 	ldw	r2,-12(fp)
 100abfc:	10800037 	ldwio	r2,0(r2)
 100ac00:	e0bffb15 	stw	r2,-20(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 100ac04:	e0bffb17 	ldw	r2,-20(fp)
 100ac08:	10a0000c 	andi	r2,r2,32768
 100ac0c:	1005003a 	cmpeq	r2,r2,zero
 100ac10:	10000f1e 	bne	r2,zero,100ac50 <altera_avalon_jtag_uart_irq+0xdc>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 100ac14:	e0bffe17 	ldw	r2,-8(fp)
 100ac18:	10c00a17 	ldw	r3,40(r2)
 100ac1c:	e0bffb17 	ldw	r2,-20(fp)
 100ac20:	1009883a 	mov	r4,r2
 100ac24:	e0bffe17 	ldw	r2,-8(fp)
 100ac28:	1885883a 	add	r2,r3,r2
 100ac2c:	10800e04 	addi	r2,r2,56
 100ac30:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100ac34:	e0bffe17 	ldw	r2,-8(fp)
 100ac38:	10800a17 	ldw	r2,40(r2)
 100ac3c:	10800044 	addi	r2,r2,1
 100ac40:	10c1ffcc 	andi	r3,r2,2047
 100ac44:	e0bffe17 	ldw	r2,-8(fp)
 100ac48:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 100ac4c:	003fe106 	br	100abd4 <altera_avalon_jtag_uart_irq+0x60>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 100ac50:	e0bffb17 	ldw	r2,-20(fp)
 100ac54:	10bfffec 	andhi	r2,r2,65535
 100ac58:	1005003a 	cmpeq	r2,r2,zero
 100ac5c:	1000101e 	bne	r2,zero,100aca0 <altera_avalon_jtag_uart_irq+0x12c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100ac60:	e0bffe17 	ldw	r2,-8(fp)
 100ac64:	10c00817 	ldw	r3,32(r2)
 100ac68:	00bfff84 	movi	r2,-2
 100ac6c:	1886703a 	and	r3,r3,r2
 100ac70:	e0bffe17 	ldw	r2,-8(fp)
 100ac74:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 100ac78:	e0bffd17 	ldw	r2,-12(fp)
 100ac7c:	11000104 	addi	r4,r2,4
 100ac80:	e0bffe17 	ldw	r2,-8(fp)
 100ac84:	10800817 	ldw	r2,32(r2)
 100ac88:	1007883a 	mov	r3,r2
 100ac8c:	2005883a 	mov	r2,r4
 100ac90:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100ac94:	e0bffd17 	ldw	r2,-12(fp)
 100ac98:	10800104 	addi	r2,r2,4
 100ac9c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 100aca0:	e0bffc17 	ldw	r2,-16(fp)
 100aca4:	1080800c 	andi	r2,r2,512
 100aca8:	1005003a 	cmpeq	r2,r2,zero
 100acac:	103fbb1e 	bne	r2,zero,100ab9c <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 100acb0:	e0bffc17 	ldw	r2,-16(fp)
 100acb4:	10bfffec 	andhi	r2,r2,65535
 100acb8:	1004d43a 	srli	r2,r2,16
 100acbc:	e0bff915 	stw	r2,-28(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 100acc0:	00001506 	br	100ad18 <altera_avalon_jtag_uart_irq+0x1a4>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 100acc4:	e13ffd17 	ldw	r4,-12(fp)
 100acc8:	e0bffe17 	ldw	r2,-8(fp)
 100accc:	10c00d17 	ldw	r3,52(r2)
 100acd0:	e0bffe17 	ldw	r2,-8(fp)
 100acd4:	1885883a 	add	r2,r3,r2
 100acd8:	10820e04 	addi	r2,r2,2104
 100acdc:	10800003 	ldbu	r2,0(r2)
 100ace0:	10c03fcc 	andi	r3,r2,255
 100ace4:	18c0201c 	xori	r3,r3,128
 100ace8:	18ffe004 	addi	r3,r3,-128
 100acec:	2005883a 	mov	r2,r4
 100acf0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100acf4:	e0bffe17 	ldw	r2,-8(fp)
 100acf8:	10800d17 	ldw	r2,52(r2)
 100acfc:	10800044 	addi	r2,r2,1
 100ad00:	10c1ffcc 	andi	r3,r2,2047
 100ad04:	e0bffe17 	ldw	r2,-8(fp)
 100ad08:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 100ad0c:	e0bff917 	ldw	r2,-28(fp)
 100ad10:	10bfffc4 	addi	r2,r2,-1
 100ad14:	e0bff915 	stw	r2,-28(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 100ad18:	e0bff917 	ldw	r2,-28(fp)
 100ad1c:	1005003a 	cmpeq	r2,r2,zero
 100ad20:	1000051e 	bne	r2,zero,100ad38 <altera_avalon_jtag_uart_irq+0x1c4>
 100ad24:	e0bffe17 	ldw	r2,-8(fp)
 100ad28:	10c00d17 	ldw	r3,52(r2)
 100ad2c:	e0bffe17 	ldw	r2,-8(fp)
 100ad30:	10800c17 	ldw	r2,48(r2)
 100ad34:	18bfe31e 	bne	r3,r2,100acc4 <altera_avalon_jtag_uart_irq+0x150>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 100ad38:	e0bff917 	ldw	r2,-28(fp)
 100ad3c:	1005003a 	cmpeq	r2,r2,zero
 100ad40:	103f961e 	bne	r2,zero,100ab9c <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100ad44:	e0bffe17 	ldw	r2,-8(fp)
 100ad48:	10c00817 	ldw	r3,32(r2)
 100ad4c:	00bfff44 	movi	r2,-3
 100ad50:	1886703a 	and	r3,r3,r2
 100ad54:	e0bffe17 	ldw	r2,-8(fp)
 100ad58:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100ad5c:	e0bffe17 	ldw	r2,-8(fp)
 100ad60:	10800017 	ldw	r2,0(r2)
 100ad64:	11000104 	addi	r4,r2,4
 100ad68:	e0bffe17 	ldw	r2,-8(fp)
 100ad6c:	10800817 	ldw	r2,32(r2)
 100ad70:	1007883a 	mov	r3,r2
 100ad74:	2005883a 	mov	r2,r4
 100ad78:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 100ad7c:	e0bffd17 	ldw	r2,-12(fp)
 100ad80:	10800104 	addi	r2,r2,4
 100ad84:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 100ad88:	003f8406 	br	100ab9c <altera_avalon_jtag_uart_irq+0x28>
}
 100ad8c:	e037883a 	mov	sp,fp
 100ad90:	df000017 	ldw	fp,0(sp)
 100ad94:	dec00104 	addi	sp,sp,4
 100ad98:	f800283a 	ret

0100ad9c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 100ad9c:	defffc04 	addi	sp,sp,-16
 100ada0:	df000315 	stw	fp,12(sp)
 100ada4:	df000304 	addi	fp,sp,12
 100ada8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 100adac:	e0bfff17 	ldw	r2,-4(fp)
 100adb0:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 100adb4:	e0bffe17 	ldw	r2,-8(fp)
 100adb8:	10800017 	ldw	r2,0(r2)
 100adbc:	10800104 	addi	r2,r2,4
 100adc0:	10800037 	ldwio	r2,0(r2)
 100adc4:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 100adc8:	e0bffd17 	ldw	r2,-12(fp)
 100adcc:	1081000c 	andi	r2,r2,1024
 100add0:	1005003a 	cmpeq	r2,r2,zero
 100add4:	10000c1e 	bne	r2,zero,100ae08 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 100add8:	e0bffe17 	ldw	r2,-8(fp)
 100addc:	10800017 	ldw	r2,0(r2)
 100ade0:	11000104 	addi	r4,r2,4
 100ade4:	e0bffe17 	ldw	r2,-8(fp)
 100ade8:	10800817 	ldw	r2,32(r2)
 100adec:	10810014 	ori	r2,r2,1024
 100adf0:	1007883a 	mov	r3,r2
 100adf4:	2005883a 	mov	r2,r4
 100adf8:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 100adfc:	e0bffe17 	ldw	r2,-8(fp)
 100ae00:	10000915 	stw	zero,36(r2)
 100ae04:	00000a06 	br	100ae30 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 100ae08:	e0bffe17 	ldw	r2,-8(fp)
 100ae0c:	10c00917 	ldw	r3,36(r2)
 100ae10:	00a00034 	movhi	r2,32768
 100ae14:	10bfff04 	addi	r2,r2,-4
 100ae18:	10c00536 	bltu	r2,r3,100ae30 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 100ae1c:	e0bffe17 	ldw	r2,-8(fp)
 100ae20:	10800917 	ldw	r2,36(r2)
 100ae24:	10c00044 	addi	r3,r2,1
 100ae28:	e0bffe17 	ldw	r2,-8(fp)
 100ae2c:	10c00915 	stw	r3,36(r2)
 100ae30:	00804074 	movhi	r2,257
 100ae34:	10814004 	addi	r2,r2,1280
 100ae38:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 100ae3c:	e037883a 	mov	sp,fp
 100ae40:	df000017 	ldw	fp,0(sp)
 100ae44:	dec00104 	addi	sp,sp,4
 100ae48:	f800283a 	ret

0100ae4c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 100ae4c:	defffc04 	addi	sp,sp,-16
 100ae50:	df000315 	stw	fp,12(sp)
 100ae54:	df000304 	addi	fp,sp,12
 100ae58:	e13ffd15 	stw	r4,-12(fp)
 100ae5c:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100ae60:	00000706 	br	100ae80 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 100ae64:	e0bffe17 	ldw	r2,-8(fp)
 100ae68:	1090000c 	andi	r2,r2,16384
 100ae6c:	1005003a 	cmpeq	r2,r2,zero
 100ae70:	1000031e 	bne	r2,zero,100ae80 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 100ae74:	00bffd44 	movi	r2,-11
 100ae78:	e0bfff15 	stw	r2,-4(fp)
 100ae7c:	00000b06 	br	100aeac <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 100ae80:	e0bffd17 	ldw	r2,-12(fp)
 100ae84:	10c00d17 	ldw	r3,52(r2)
 100ae88:	e0bffd17 	ldw	r2,-12(fp)
 100ae8c:	10800c17 	ldw	r2,48(r2)
 100ae90:	18800526 	beq	r3,r2,100aea8 <altera_avalon_jtag_uart_close+0x5c>
 100ae94:	e0bffd17 	ldw	r2,-12(fp)
 100ae98:	10c00917 	ldw	r3,36(r2)
 100ae9c:	e0bffd17 	ldw	r2,-12(fp)
 100aea0:	10800117 	ldw	r2,4(r2)
 100aea4:	18bfef36 	bltu	r3,r2,100ae64 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 100aea8:	e03fff15 	stw	zero,-4(fp)
 100aeac:	e0bfff17 	ldw	r2,-4(fp)
}
 100aeb0:	e037883a 	mov	sp,fp
 100aeb4:	df000017 	ldw	fp,0(sp)
 100aeb8:	dec00104 	addi	sp,sp,4
 100aebc:	f800283a 	ret

0100aec0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 100aec0:	defff804 	addi	sp,sp,-32
 100aec4:	df000715 	stw	fp,28(sp)
 100aec8:	df000704 	addi	fp,sp,28
 100aecc:	e13ffb15 	stw	r4,-20(fp)
 100aed0:	e17ffc15 	stw	r5,-16(fp)
 100aed4:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 100aed8:	00bff9c4 	movi	r2,-25
 100aedc:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 100aee0:	e0bffc17 	ldw	r2,-16(fp)
 100aee4:	e0bfff15 	stw	r2,-4(fp)
 100aee8:	e0ffff17 	ldw	r3,-4(fp)
 100aeec:	189a8060 	cmpeqi	r2,r3,27137
 100aef0:	1000041e 	bne	r2,zero,100af04 <altera_avalon_jtag_uart_ioctl+0x44>
 100aef4:	e0ffff17 	ldw	r3,-4(fp)
 100aef8:	189a80a0 	cmpeqi	r2,r3,27138
 100aefc:	10001b1e 	bne	r2,zero,100af6c <altera_avalon_jtag_uart_ioctl+0xac>
 100af00:	00002706 	br	100afa0 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 100af04:	e0bffb17 	ldw	r2,-20(fp)
 100af08:	10c00117 	ldw	r3,4(r2)
 100af0c:	00a00034 	movhi	r2,32768
 100af10:	10bfffc4 	addi	r2,r2,-1
 100af14:	18802226 	beq	r3,r2,100afa0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 100af18:	e0bffd17 	ldw	r2,-12(fp)
 100af1c:	10800017 	ldw	r2,0(r2)
 100af20:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 100af24:	e0bff917 	ldw	r2,-28(fp)
 100af28:	10800090 	cmplti	r2,r2,2
 100af2c:	1000071e 	bne	r2,zero,100af4c <altera_avalon_jtag_uart_ioctl+0x8c>
 100af30:	e0fff917 	ldw	r3,-28(fp)
 100af34:	00a00034 	movhi	r2,32768
 100af38:	10bfffc4 	addi	r2,r2,-1
 100af3c:	18800326 	beq	r3,r2,100af4c <altera_avalon_jtag_uart_ioctl+0x8c>
 100af40:	e0bff917 	ldw	r2,-28(fp)
 100af44:	e0bffe15 	stw	r2,-8(fp)
 100af48:	00000306 	br	100af58 <altera_avalon_jtag_uart_ioctl+0x98>
 100af4c:	00e00034 	movhi	r3,32768
 100af50:	18ffff84 	addi	r3,r3,-2
 100af54:	e0fffe15 	stw	r3,-8(fp)
 100af58:	e0bffb17 	ldw	r2,-20(fp)
 100af5c:	e0fffe17 	ldw	r3,-8(fp)
 100af60:	10c00115 	stw	r3,4(r2)
      rc = 0;
 100af64:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 100af68:	00000d06 	br	100afa0 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 100af6c:	e0bffb17 	ldw	r2,-20(fp)
 100af70:	10c00117 	ldw	r3,4(r2)
 100af74:	00a00034 	movhi	r2,32768
 100af78:	10bfffc4 	addi	r2,r2,-1
 100af7c:	18800826 	beq	r3,r2,100afa0 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 100af80:	e13ffd17 	ldw	r4,-12(fp)
 100af84:	e0bffb17 	ldw	r2,-20(fp)
 100af88:	10c00917 	ldw	r3,36(r2)
 100af8c:	e0bffb17 	ldw	r2,-20(fp)
 100af90:	10800117 	ldw	r2,4(r2)
 100af94:	1885803a 	cmpltu	r2,r3,r2
 100af98:	20800015 	stw	r2,0(r4)
      rc = 0;
 100af9c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 100afa0:	e0bffa17 	ldw	r2,-24(fp)
}
 100afa4:	e037883a 	mov	sp,fp
 100afa8:	df000017 	ldw	fp,0(sp)
 100afac:	dec00104 	addi	sp,sp,4
 100afb0:	f800283a 	ret

0100afb4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 100afb4:	defff204 	addi	sp,sp,-56
 100afb8:	dfc00d15 	stw	ra,52(sp)
 100afbc:	df000c15 	stw	fp,48(sp)
 100afc0:	df000c04 	addi	fp,sp,48
 100afc4:	e13ffb15 	stw	r4,-20(fp)
 100afc8:	e17ffc15 	stw	r5,-16(fp)
 100afcc:	e1bffd15 	stw	r6,-12(fp)
 100afd0:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 100afd4:	e0bffc17 	ldw	r2,-16(fp)
 100afd8:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100afdc:	00004806 	br	100b100 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 100afe0:	e0bffb17 	ldw	r2,-20(fp)
 100afe4:	10800a17 	ldw	r2,40(r2)
 100afe8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 100afec:	e0bffb17 	ldw	r2,-20(fp)
 100aff0:	10800b17 	ldw	r2,44(r2)
 100aff4:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 100aff8:	e0fff717 	ldw	r3,-36(fp)
 100affc:	e0bff617 	ldw	r2,-40(fp)
 100b000:	18800536 	bltu	r3,r2,100b018 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 100b004:	e0bff717 	ldw	r2,-36(fp)
 100b008:	e0fff617 	ldw	r3,-40(fp)
 100b00c:	10c5c83a 	sub	r2,r2,r3
 100b010:	e0bff815 	stw	r2,-32(fp)
 100b014:	00000406 	br	100b028 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 100b018:	00820004 	movi	r2,2048
 100b01c:	e0fff617 	ldw	r3,-40(fp)
 100b020:	10c5c83a 	sub	r2,r2,r3
 100b024:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100b028:	e0bff817 	ldw	r2,-32(fp)
 100b02c:	1005003a 	cmpeq	r2,r2,zero
 100b030:	10001f1e 	bne	r2,zero,100b0b0 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 100b034:	e0fffd17 	ldw	r3,-12(fp)
 100b038:	e0bff817 	ldw	r2,-32(fp)
 100b03c:	1880022e 	bgeu	r3,r2,100b048 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 100b040:	e0bffd17 	ldw	r2,-12(fp)
 100b044:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 100b048:	e0bffb17 	ldw	r2,-20(fp)
 100b04c:	10c00e04 	addi	r3,r2,56
 100b050:	e0bff617 	ldw	r2,-40(fp)
 100b054:	1887883a 	add	r3,r3,r2
 100b058:	e0bffa17 	ldw	r2,-24(fp)
 100b05c:	1009883a 	mov	r4,r2
 100b060:	180b883a 	mov	r5,r3
 100b064:	e1bff817 	ldw	r6,-32(fp)
 100b068:	10057380 	call	1005738 <memcpy>
      ptr   += n;
 100b06c:	e0fff817 	ldw	r3,-32(fp)
 100b070:	e0bffa17 	ldw	r2,-24(fp)
 100b074:	10c5883a 	add	r2,r2,r3
 100b078:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 100b07c:	e0fffd17 	ldw	r3,-12(fp)
 100b080:	e0bff817 	ldw	r2,-32(fp)
 100b084:	1885c83a 	sub	r2,r3,r2
 100b088:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b08c:	e0fff617 	ldw	r3,-40(fp)
 100b090:	e0bff817 	ldw	r2,-32(fp)
 100b094:	1885883a 	add	r2,r3,r2
 100b098:	10c1ffcc 	andi	r3,r2,2047
 100b09c:	e0bffb17 	ldw	r2,-20(fp)
 100b0a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 100b0a4:	e0bffd17 	ldw	r2,-12(fp)
 100b0a8:	10800048 	cmpgei	r2,r2,1
 100b0ac:	103fcc1e 	bne	r2,zero,100afe0 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 100b0b0:	e0fffa17 	ldw	r3,-24(fp)
 100b0b4:	e0bffc17 	ldw	r2,-16(fp)
 100b0b8:	1880141e 	bne	r3,r2,100b10c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100b0bc:	e0bffe17 	ldw	r2,-8(fp)
 100b0c0:	1090000c 	andi	r2,r2,16384
 100b0c4:	1004c03a 	cmpne	r2,r2,zero
 100b0c8:	1000101e 	bne	r2,zero,100b10c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100b0cc:	e0bffb17 	ldw	r2,-20(fp)
 100b0d0:	10c00a17 	ldw	r3,40(r2)
 100b0d4:	e0bff717 	ldw	r2,-36(fp)
 100b0d8:	1880051e 	bne	r3,r2,100b0f0 <altera_avalon_jtag_uart_read+0x13c>
 100b0dc:	e0bffb17 	ldw	r2,-20(fp)
 100b0e0:	10c00917 	ldw	r3,36(r2)
 100b0e4:	e0bffb17 	ldw	r2,-20(fp)
 100b0e8:	10800117 	ldw	r2,4(r2)
 100b0ec:	18bff736 	bltu	r3,r2,100b0cc <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 100b0f0:	e0bffb17 	ldw	r2,-20(fp)
 100b0f4:	10c00a17 	ldw	r3,40(r2)
 100b0f8:	e0bff717 	ldw	r2,-36(fp)
 100b0fc:	18800326 	beq	r3,r2,100b10c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 100b100:	e0bffd17 	ldw	r2,-12(fp)
 100b104:	10800048 	cmpgei	r2,r2,1
 100b108:	103fb51e 	bne	r2,zero,100afe0 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100b10c:	e0fffa17 	ldw	r3,-24(fp)
 100b110:	e0bffc17 	ldw	r2,-16(fp)
 100b114:	18801926 	beq	r3,r2,100b17c <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b118:	0005303a 	rdctl	r2,status
 100b11c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b120:	e0fff517 	ldw	r3,-44(fp)
 100b124:	00bfff84 	movi	r2,-2
 100b128:	1884703a 	and	r2,r3,r2
 100b12c:	1001703a 	wrctl	status,r2
  
  return context;
 100b130:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 100b134:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 100b138:	e0bffb17 	ldw	r2,-20(fp)
 100b13c:	10800817 	ldw	r2,32(r2)
 100b140:	10c00054 	ori	r3,r2,1
 100b144:	e0bffb17 	ldw	r2,-20(fp)
 100b148:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100b14c:	e0bffb17 	ldw	r2,-20(fp)
 100b150:	10800017 	ldw	r2,0(r2)
 100b154:	11000104 	addi	r4,r2,4
 100b158:	e0bffb17 	ldw	r2,-20(fp)
 100b15c:	10800817 	ldw	r2,32(r2)
 100b160:	1007883a 	mov	r3,r2
 100b164:	2005883a 	mov	r2,r4
 100b168:	10c00035 	stwio	r3,0(r2)
 100b16c:	e0bff917 	ldw	r2,-28(fp)
 100b170:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b174:	e0bff417 	ldw	r2,-48(fp)
 100b178:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 100b17c:	e0fffa17 	ldw	r3,-24(fp)
 100b180:	e0bffc17 	ldw	r2,-16(fp)
 100b184:	18800526 	beq	r3,r2,100b19c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 100b188:	e0fffa17 	ldw	r3,-24(fp)
 100b18c:	e0bffc17 	ldw	r2,-16(fp)
 100b190:	1887c83a 	sub	r3,r3,r2
 100b194:	e0ffff15 	stw	r3,-4(fp)
 100b198:	00000906 	br	100b1c0 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100b19c:	e0bffe17 	ldw	r2,-8(fp)
 100b1a0:	1090000c 	andi	r2,r2,16384
 100b1a4:	1005003a 	cmpeq	r2,r2,zero
 100b1a8:	1000031e 	bne	r2,zero,100b1b8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100b1ac:	00bffd44 	movi	r2,-11
 100b1b0:	e0bfff15 	stw	r2,-4(fp)
 100b1b4:	00000206 	br	100b1c0 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 100b1b8:	00bffec4 	movi	r2,-5
 100b1bc:	e0bfff15 	stw	r2,-4(fp)
 100b1c0:	e0bfff17 	ldw	r2,-4(fp)
}
 100b1c4:	e037883a 	mov	sp,fp
 100b1c8:	dfc00117 	ldw	ra,4(sp)
 100b1cc:	df000017 	ldw	fp,0(sp)
 100b1d0:	dec00204 	addi	sp,sp,8
 100b1d4:	f800283a 	ret

0100b1d8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 100b1d8:	defff204 	addi	sp,sp,-56
 100b1dc:	dfc00d15 	stw	ra,52(sp)
 100b1e0:	df000c15 	stw	fp,48(sp)
 100b1e4:	df000c04 	addi	fp,sp,48
 100b1e8:	e13ffb15 	stw	r4,-20(fp)
 100b1ec:	e17ffc15 	stw	r5,-16(fp)
 100b1f0:	e1bffd15 	stw	r6,-12(fp)
 100b1f4:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 100b1f8:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100b1fc:	e0bffc17 	ldw	r2,-16(fp)
 100b200:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100b204:	00003a06 	br	100b2f0 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 100b208:	e0bffb17 	ldw	r2,-20(fp)
 100b20c:	10800c17 	ldw	r2,48(r2)
 100b210:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 100b214:	e0bffb17 	ldw	r2,-20(fp)
 100b218:	10800d17 	ldw	r2,52(r2)
 100b21c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 100b220:	e0fffa17 	ldw	r3,-24(fp)
 100b224:	e0bff917 	ldw	r2,-28(fp)
 100b228:	1880062e 	bgeu	r3,r2,100b244 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100b22c:	e0fff917 	ldw	r3,-28(fp)
 100b230:	e0bffa17 	ldw	r2,-24(fp)
 100b234:	1885c83a 	sub	r2,r3,r2
 100b238:	10bfffc4 	addi	r2,r2,-1
 100b23c:	e0bff815 	stw	r2,-32(fp)
 100b240:	00000c06 	br	100b274 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 100b244:	e0bff917 	ldw	r2,-28(fp)
 100b248:	1005003a 	cmpeq	r2,r2,zero
 100b24c:	1000051e 	bne	r2,zero,100b264 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 100b250:	00820004 	movi	r2,2048
 100b254:	e0fffa17 	ldw	r3,-24(fp)
 100b258:	10c5c83a 	sub	r2,r2,r3
 100b25c:	e0bff815 	stw	r2,-32(fp)
 100b260:	00000406 	br	100b274 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 100b264:	0081ffc4 	movi	r2,2047
 100b268:	e0fffa17 	ldw	r3,-24(fp)
 100b26c:	10c5c83a 	sub	r2,r2,r3
 100b270:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 100b274:	e0bff817 	ldw	r2,-32(fp)
 100b278:	1005003a 	cmpeq	r2,r2,zero
 100b27c:	10001f1e 	bne	r2,zero,100b2fc <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 100b280:	e0fffd17 	ldw	r3,-12(fp)
 100b284:	e0bff817 	ldw	r2,-32(fp)
 100b288:	1880022e 	bgeu	r3,r2,100b294 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 100b28c:	e0bffd17 	ldw	r2,-12(fp)
 100b290:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 100b294:	e0bffb17 	ldw	r2,-20(fp)
 100b298:	10c20e04 	addi	r3,r2,2104
 100b29c:	e0bffa17 	ldw	r2,-24(fp)
 100b2a0:	1885883a 	add	r2,r3,r2
 100b2a4:	e0fffc17 	ldw	r3,-16(fp)
 100b2a8:	1009883a 	mov	r4,r2
 100b2ac:	180b883a 	mov	r5,r3
 100b2b0:	e1bff817 	ldw	r6,-32(fp)
 100b2b4:	10057380 	call	1005738 <memcpy>
      ptr   += n;
 100b2b8:	e0fff817 	ldw	r3,-32(fp)
 100b2bc:	e0bffc17 	ldw	r2,-16(fp)
 100b2c0:	10c5883a 	add	r2,r2,r3
 100b2c4:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 100b2c8:	e0fffd17 	ldw	r3,-12(fp)
 100b2cc:	e0bff817 	ldw	r2,-32(fp)
 100b2d0:	1885c83a 	sub	r2,r3,r2
 100b2d4:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 100b2d8:	e0fffa17 	ldw	r3,-24(fp)
 100b2dc:	e0bff817 	ldw	r2,-32(fp)
 100b2e0:	1885883a 	add	r2,r3,r2
 100b2e4:	10c1ffcc 	andi	r3,r2,2047
 100b2e8:	e0bffb17 	ldw	r2,-20(fp)
 100b2ec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 100b2f0:	e0bffd17 	ldw	r2,-12(fp)
 100b2f4:	10800048 	cmpgei	r2,r2,1
 100b2f8:	103fc31e 	bne	r2,zero,100b208 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b2fc:	0005303a 	rdctl	r2,status
 100b300:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b304:	e0fff517 	ldw	r3,-44(fp)
 100b308:	00bfff84 	movi	r2,-2
 100b30c:	1884703a 	and	r2,r3,r2
 100b310:	1001703a 	wrctl	status,r2
  
  return context;
 100b314:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 100b318:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100b31c:	e0bffb17 	ldw	r2,-20(fp)
 100b320:	10800817 	ldw	r2,32(r2)
 100b324:	10c00094 	ori	r3,r2,2
 100b328:	e0bffb17 	ldw	r2,-20(fp)
 100b32c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 100b330:	e0bffb17 	ldw	r2,-20(fp)
 100b334:	10800017 	ldw	r2,0(r2)
 100b338:	11000104 	addi	r4,r2,4
 100b33c:	e0bffb17 	ldw	r2,-20(fp)
 100b340:	10800817 	ldw	r2,32(r2)
 100b344:	1007883a 	mov	r3,r2
 100b348:	2005883a 	mov	r2,r4
 100b34c:	10c00035 	stwio	r3,0(r2)
 100b350:	e0bff717 	ldw	r2,-36(fp)
 100b354:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100b358:	e0bff417 	ldw	r2,-48(fp)
 100b35c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 100b360:	e0bffd17 	ldw	r2,-12(fp)
 100b364:	10800050 	cmplti	r2,r2,1
 100b368:	1000111e 	bne	r2,zero,100b3b0 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 100b36c:	e0bffe17 	ldw	r2,-8(fp)
 100b370:	1090000c 	andi	r2,r2,16384
 100b374:	1004c03a 	cmpne	r2,r2,zero
 100b378:	1000101e 	bne	r2,zero,100b3bc <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 100b37c:	e0bffb17 	ldw	r2,-20(fp)
 100b380:	10c00d17 	ldw	r3,52(r2)
 100b384:	e0bff917 	ldw	r2,-28(fp)
 100b388:	1880051e 	bne	r3,r2,100b3a0 <altera_avalon_jtag_uart_write+0x1c8>
 100b38c:	e0bffb17 	ldw	r2,-20(fp)
 100b390:	10c00917 	ldw	r3,36(r2)
 100b394:	e0bffb17 	ldw	r2,-20(fp)
 100b398:	10800117 	ldw	r2,4(r2)
 100b39c:	18bff736 	bltu	r3,r2,100b37c <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 100b3a0:	e0bffb17 	ldw	r2,-20(fp)
 100b3a4:	10c00d17 	ldw	r3,52(r2)
 100b3a8:	e0bff917 	ldw	r2,-28(fp)
 100b3ac:	18800326 	beq	r3,r2,100b3bc <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 100b3b0:	e0bffd17 	ldw	r2,-12(fp)
 100b3b4:	10800048 	cmpgei	r2,r2,1
 100b3b8:	103fcd1e 	bne	r2,zero,100b2f0 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100b3bc:	e0fffc17 	ldw	r3,-16(fp)
 100b3c0:	e0bff617 	ldw	r2,-40(fp)
 100b3c4:	18800526 	beq	r3,r2,100b3dc <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 100b3c8:	e0fffc17 	ldw	r3,-16(fp)
 100b3cc:	e0bff617 	ldw	r2,-40(fp)
 100b3d0:	1887c83a 	sub	r3,r3,r2
 100b3d4:	e0ffff15 	stw	r3,-4(fp)
 100b3d8:	00000906 	br	100b400 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100b3dc:	e0bffe17 	ldw	r2,-8(fp)
 100b3e0:	1090000c 	andi	r2,r2,16384
 100b3e4:	1005003a 	cmpeq	r2,r2,zero
 100b3e8:	1000031e 	bne	r2,zero,100b3f8 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100b3ec:	00bffd44 	movi	r2,-11
 100b3f0:	e0bfff15 	stw	r2,-4(fp)
 100b3f4:	00000206 	br	100b400 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 100b3f8:	00bffec4 	movi	r2,-5
 100b3fc:	e0bfff15 	stw	r2,-4(fp)
 100b400:	e0bfff17 	ldw	r2,-4(fp)
}
 100b404:	e037883a 	mov	sp,fp
 100b408:	dfc00117 	ldw	ra,4(sp)
 100b40c:	df000017 	ldw	fp,0(sp)
 100b410:	dec00204 	addi	sp,sp,8
 100b414:	f800283a 	ret

0100b418 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 100b418:	defffc04 	addi	sp,sp,-16
 100b41c:	df000315 	stw	fp,12(sp)
 100b420:	df000304 	addi	fp,sp,12
 100b424:	e13ffe15 	stw	r4,-8(fp)
 100b428:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 100b42c:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 100b430:	e0bfff17 	ldw	r2,-4(fp)
 100b434:	1004c03a 	cmpne	r2,r2,zero
 100b438:	1000061e 	bne	r2,zero,100b454 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 100b43c:	e0bffe17 	ldw	r2,-8(fp)
 100b440:	1007883a 	mov	r3,r2
 100b444:	e0bffd03 	ldbu	r2,-12(fp)
 100b448:	10c4b03a 	or	r2,r2,r3
 100b44c:	e0bffd05 	stb	r2,-12(fp)
 100b450:	00000806 	br	100b474 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 100b454:	e0bffe17 	ldw	r2,-8(fp)
 100b458:	1007883a 	mov	r3,r2
 100b45c:	e0bffd03 	ldbu	r2,-12(fp)
 100b460:	10c4b03a 	or	r2,r2,r3
 100b464:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 100b468:	e0bffd03 	ldbu	r2,-12(fp)
 100b46c:	10801014 	ori	r2,r2,64
 100b470:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 100b474:	e0fffd03 	ldbu	r3,-12(fp)
 100b478:	00bfe004 	movi	r2,-128
 100b47c:	1884b03a 	or	r2,r3,r2
 100b480:	10803fcc 	andi	r2,r2,255
}
 100b484:	e037883a 	mov	sp,fp
 100b488:	df000017 	ldw	fp,0(sp)
 100b48c:	dec00104 	addi	sp,sp,4
 100b490:	f800283a 	ret

0100b494 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 100b494:	defffd04 	addi	sp,sp,-12
 100b498:	df000215 	stw	fp,8(sp)
 100b49c:	df000204 	addi	fp,sp,8
 100b4a0:	e13ffe15 	stw	r4,-8(fp)
 100b4a4:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 100b4a8:	e0bffe17 	ldw	r2,-8(fp)
 100b4ac:	10800a17 	ldw	r2,40(r2)
 100b4b0:	e0ffff03 	ldbu	r3,-4(fp)
 100b4b4:	10c00025 	stbio	r3,0(r2)
}
 100b4b8:	e037883a 	mov	sp,fp
 100b4bc:	df000017 	ldw	fp,0(sp)
 100b4c0:	dec00104 	addi	sp,sp,4
 100b4c4:	f800283a 	ret

0100b4c8 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 100b4c8:	defffe04 	addi	sp,sp,-8
 100b4cc:	df000115 	stw	fp,4(sp)
 100b4d0:	df000104 	addi	fp,sp,4
 100b4d4:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 100b4d8:	e0bfff17 	ldw	r2,-4(fp)
 100b4dc:	10800a17 	ldw	r2,40(r2)
 100b4e0:	1007883a 	mov	r3,r2
 100b4e4:	00800044 	movi	r2,1
 100b4e8:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 100b4ec:	e037883a 	mov	sp,fp
 100b4f0:	df000017 	ldw	fp,0(sp)
 100b4f4:	dec00104 	addi	sp,sp,4
 100b4f8:	f800283a 	ret

0100b4fc <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 100b4fc:	defffc04 	addi	sp,sp,-16
 100b500:	dfc00315 	stw	ra,12(sp)
 100b504:	df000215 	stw	fp,8(sp)
 100b508:	df000204 	addi	fp,sp,8
 100b50c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 100b510:	e13fff17 	ldw	r4,-4(fp)
 100b514:	01404074 	movhi	r5,257
 100b518:	297a8b04 	addi	r5,r5,-5588
 100b51c:	100bc940 	call	100bc94 <alt_find_dev>
 100b520:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 100b524:	e0bffe17 	ldw	r2,-8(fp)
}
 100b528:	e037883a 	mov	sp,fp
 100b52c:	dfc00117 	ldw	ra,4(sp)
 100b530:	df000017 	ldw	fp,0(sp)
 100b534:	dec00204 	addi	sp,sp,8
 100b538:	f800283a 	ret

0100b53c <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 100b53c:	defffb04 	addi	sp,sp,-20
 100b540:	df000415 	stw	fp,16(sp)
 100b544:	df000404 	addi	fp,sp,16
 100b548:	e13ffd15 	stw	r4,-12(fp)
 100b54c:	e17ffe15 	stw	r5,-8(fp)
 100b550:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 100b554:	e03ffc15 	stw	zero,-16(fp)
 100b558:	00000f06 	br	100b598 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 100b55c:	e0bffd17 	ldw	r2,-12(fp)
 100b560:	10800a17 	ldw	r2,40(r2)
 100b564:	11000044 	addi	r4,r2,1
 100b568:	e0fffc17 	ldw	r3,-16(fp)
 100b56c:	e0bffe17 	ldw	r2,-8(fp)
 100b570:	1885883a 	add	r2,r3,r2
 100b574:	10800003 	ldbu	r2,0(r2)
 100b578:	10c03fcc 	andi	r3,r2,255
 100b57c:	18c0201c 	xori	r3,r3,128
 100b580:	18ffe004 	addi	r3,r3,-128
 100b584:	2005883a 	mov	r2,r4
 100b588:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 100b58c:	e0bffc17 	ldw	r2,-16(fp)
 100b590:	10800044 	addi	r2,r2,1
 100b594:	e0bffc15 	stw	r2,-16(fp)
 100b598:	e0fffc17 	ldw	r3,-16(fp)
 100b59c:	e0bfff17 	ldw	r2,-4(fp)
 100b5a0:	18bfee36 	bltu	r3,r2,100b55c <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 100b5a4:	e037883a 	mov	sp,fp
 100b5a8:	df000017 	ldw	fp,0(sp)
 100b5ac:	dec00104 	addi	sp,sp,4
 100b5b0:	f800283a 	ret

0100b5b4 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 100b5b4:	defffd04 	addi	sp,sp,-12
 100b5b8:	df000215 	stw	fp,8(sp)
 100b5bc:	df000204 	addi	fp,sp,8
 100b5c0:	e13ffe15 	stw	r4,-8(fp)
 100b5c4:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 100b5c8:	00000d06 	br	100b600 <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 100b5cc:	e0bffe17 	ldw	r2,-8(fp)
 100b5d0:	10800a17 	ldw	r2,40(r2)
 100b5d4:	11000044 	addi	r4,r2,1
 100b5d8:	e0bfff17 	ldw	r2,-4(fp)
 100b5dc:	10800003 	ldbu	r2,0(r2)
 100b5e0:	10c03fcc 	andi	r3,r2,255
 100b5e4:	18c0201c 	xori	r3,r3,128
 100b5e8:	18ffe004 	addi	r3,r3,-128
 100b5ec:	2005883a 	mov	r2,r4
 100b5f0:	10c00025 	stbio	r3,0(r2)
		++ptr;
 100b5f4:	e0bfff17 	ldw	r2,-4(fp)
 100b5f8:	10800044 	addi	r2,r2,1
 100b5fc:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 100b600:	e0bfff17 	ldw	r2,-4(fp)
 100b604:	10800003 	ldbu	r2,0(r2)
 100b608:	10803fcc 	andi	r2,r2,255
 100b60c:	1080201c 	xori	r2,r2,128
 100b610:	10bfe004 	addi	r2,r2,-128
 100b614:	1004c03a 	cmpne	r2,r2,zero
 100b618:	103fec1e 	bne	r2,zero,100b5cc <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 100b61c:	e037883a 	mov	sp,fp
 100b620:	df000017 	ldw	fp,0(sp)
 100b624:	dec00104 	addi	sp,sp,4
 100b628:	f800283a 	ret

0100b62c <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 100b62c:	defffb04 	addi	sp,sp,-20
 100b630:	dfc00415 	stw	ra,16(sp)
 100b634:	df000315 	stw	fp,12(sp)
 100b638:	df000304 	addi	fp,sp,12
 100b63c:	e13ffd15 	stw	r4,-12(fp)
 100b640:	e17ffe15 	stw	r5,-8(fp)
 100b644:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 100b648:	e0bffd17 	ldw	r2,-12(fp)
 100b64c:	10800017 	ldw	r2,0(r2)
 100b650:	1009883a 	mov	r4,r2
 100b654:	e1bfff17 	ldw	r6,-4(fp)
 100b658:	e17ffe17 	ldw	r5,-8(fp)
 100b65c:	100b53c0 	call	100b53c <alt_up_character_lcd_write>
	return 0;
 100b660:	0005883a 	mov	r2,zero
}
 100b664:	e037883a 	mov	sp,fp
 100b668:	dfc00117 	ldw	ra,4(sp)
 100b66c:	df000017 	ldw	fp,0(sp)
 100b670:	dec00204 	addi	sp,sp,8
 100b674:	f800283a 	ret

0100b678 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 100b678:	defff904 	addi	sp,sp,-28
 100b67c:	dfc00615 	stw	ra,24(sp)
 100b680:	df000515 	stw	fp,20(sp)
 100b684:	df000504 	addi	fp,sp,20
 100b688:	e13ffc15 	stw	r4,-16(fp)
 100b68c:	e17ffd15 	stw	r5,-12(fp)
 100b690:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 100b694:	e0bffd17 	ldw	r2,-12(fp)
 100b698:	10800a28 	cmpgeui	r2,r2,40
 100b69c:	1000031e 	bne	r2,zero,100b6ac <alt_up_character_lcd_set_cursor_pos+0x34>
 100b6a0:	e0bffe17 	ldw	r2,-8(fp)
 100b6a4:	108000b0 	cmpltui	r2,r2,2
 100b6a8:	1000031e 	bne	r2,zero,100b6b8 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 100b6ac:	00bfffc4 	movi	r2,-1
 100b6b0:	e0bfff15 	stw	r2,-4(fp)
 100b6b4:	00000806 	br	100b6d8 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100b6b8:	e13ffd17 	ldw	r4,-12(fp)
 100b6bc:	e17ffe17 	ldw	r5,-8(fp)
 100b6c0:	100b4180 	call	100b418 <get_DDRAM_addr>
 100b6c4:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 100b6c8:	e17ffb03 	ldbu	r5,-20(fp)
 100b6cc:	e13ffc17 	ldw	r4,-16(fp)
 100b6d0:	100b4940 	call	100b494 <alt_up_character_lcd_send_cmd>
	return 0;
 100b6d4:	e03fff15 	stw	zero,-4(fp)
 100b6d8:	e0bfff17 	ldw	r2,-4(fp)
}
 100b6dc:	e037883a 	mov	sp,fp
 100b6e0:	dfc00117 	ldw	ra,4(sp)
 100b6e4:	df000017 	ldw	fp,0(sp)
 100b6e8:	dec00204 	addi	sp,sp,8
 100b6ec:	f800283a 	ret

0100b6f0 <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100b6f0:	defff904 	addi	sp,sp,-28
 100b6f4:	dfc00615 	stw	ra,24(sp)
 100b6f8:	df000515 	stw	fp,20(sp)
 100b6fc:	df000504 	addi	fp,sp,20
 100b700:	e13ffc15 	stw	r4,-16(fp)
 100b704:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100b708:	e0bffd17 	ldw	r2,-12(fp)
 100b70c:	1005003a 	cmpeq	r2,r2,zero
 100b710:	10001e1e 	bne	r2,zero,100b78c <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 100b714:	e0bffd17 	ldw	r2,-12(fp)
 100b718:	10800050 	cmplti	r2,r2,1
 100b71c:	1000031e 	bne	r2,zero,100b72c <alt_up_character_lcd_shift_cursor+0x3c>
 100b720:	00800504 	movi	r2,20
 100b724:	e0bfff05 	stb	r2,-4(fp)
 100b728:	00000206 	br	100b734 <alt_up_character_lcd_shift_cursor+0x44>
 100b72c:	00c00404 	movi	r3,16
 100b730:	e0ffff05 	stb	r3,-4(fp)
 100b734:	e0bfff03 	ldbu	r2,-4(fp)
 100b738:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100b73c:	e0fffd17 	ldw	r3,-12(fp)
 100b740:	e0fffe15 	stw	r3,-8(fp)
 100b744:	e0fffe17 	ldw	r3,-8(fp)
 100b748:	1804403a 	cmpge	r2,r3,zero
 100b74c:	1000031e 	bne	r2,zero,100b75c <alt_up_character_lcd_shift_cursor+0x6c>
 100b750:	e0bffe17 	ldw	r2,-8(fp)
 100b754:	0085c83a 	sub	r2,zero,r2
 100b758:	e0bffe15 	stw	r2,-8(fp)
 100b75c:	e0fffe17 	ldw	r3,-8(fp)
 100b760:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100b764:	00000306 	br	100b774 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100b768:	e17ffb43 	ldbu	r5,-19(fp)
 100b76c:	e13ffc17 	ldw	r4,-16(fp)
 100b770:	100b4940 	call	100b494 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100b774:	e0bffb03 	ldbu	r2,-20(fp)
 100b778:	10bfffc4 	addi	r2,r2,-1
 100b77c:	e0bffb05 	stb	r2,-20(fp)
 100b780:	e0bffb03 	ldbu	r2,-20(fp)
 100b784:	10803fd8 	cmpnei	r2,r2,255
 100b788:	103ff71e 	bne	r2,zero,100b768 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100b78c:	e037883a 	mov	sp,fp
 100b790:	dfc00117 	ldw	ra,4(sp)
 100b794:	df000017 	ldw	fp,0(sp)
 100b798:	dec00204 	addi	sp,sp,8
 100b79c:	f800283a 	ret

0100b7a0 <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 100b7a0:	defff904 	addi	sp,sp,-28
 100b7a4:	dfc00615 	stw	ra,24(sp)
 100b7a8:	df000515 	stw	fp,20(sp)
 100b7ac:	df000504 	addi	fp,sp,20
 100b7b0:	e13ffc15 	stw	r4,-16(fp)
 100b7b4:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 100b7b8:	e0bffd17 	ldw	r2,-12(fp)
 100b7bc:	1005003a 	cmpeq	r2,r2,zero
 100b7c0:	10001e1e 	bne	r2,zero,100b83c <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 100b7c4:	e0bffd17 	ldw	r2,-12(fp)
 100b7c8:	10800050 	cmplti	r2,r2,1
 100b7cc:	1000031e 	bne	r2,zero,100b7dc <alt_up_character_lcd_shift_display+0x3c>
 100b7d0:	00800704 	movi	r2,28
 100b7d4:	e0bfff05 	stb	r2,-4(fp)
 100b7d8:	00000206 	br	100b7e4 <alt_up_character_lcd_shift_display+0x44>
 100b7dc:	00c00604 	movi	r3,24
 100b7e0:	e0ffff05 	stb	r3,-4(fp)
 100b7e4:	e0bfff03 	ldbu	r2,-4(fp)
 100b7e8:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 100b7ec:	e0fffd17 	ldw	r3,-12(fp)
 100b7f0:	e0fffe15 	stw	r3,-8(fp)
 100b7f4:	e0fffe17 	ldw	r3,-8(fp)
 100b7f8:	1804403a 	cmpge	r2,r3,zero
 100b7fc:	1000031e 	bne	r2,zero,100b80c <alt_up_character_lcd_shift_display+0x6c>
 100b800:	e0bffe17 	ldw	r2,-8(fp)
 100b804:	0085c83a 	sub	r2,zero,r2
 100b808:	e0bffe15 	stw	r2,-8(fp)
 100b80c:	e0fffe17 	ldw	r3,-8(fp)
 100b810:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 100b814:	00000306 	br	100b824 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 100b818:	e17ffb43 	ldbu	r5,-19(fp)
 100b81c:	e13ffc17 	ldw	r4,-16(fp)
 100b820:	100b4940 	call	100b494 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 100b824:	e0bffb03 	ldbu	r2,-20(fp)
 100b828:	10bfffc4 	addi	r2,r2,-1
 100b82c:	e0bffb05 	stb	r2,-20(fp)
 100b830:	e0bffb03 	ldbu	r2,-20(fp)
 100b834:	10803fd8 	cmpnei	r2,r2,255
 100b838:	103ff71e 	bne	r2,zero,100b818 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 100b83c:	e037883a 	mov	sp,fp
 100b840:	dfc00117 	ldw	ra,4(sp)
 100b844:	df000017 	ldw	fp,0(sp)
 100b848:	dec00204 	addi	sp,sp,8
 100b84c:	f800283a 	ret

0100b850 <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 100b850:	defff904 	addi	sp,sp,-28
 100b854:	dfc00615 	stw	ra,24(sp)
 100b858:	df000515 	stw	fp,20(sp)
 100b85c:	df000504 	addi	fp,sp,20
 100b860:	e13ffc15 	stw	r4,-16(fp)
 100b864:	e17ffd15 	stw	r5,-12(fp)
 100b868:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 100b86c:	e0bffd17 	ldw	r2,-12(fp)
 100b870:	10800a28 	cmpgeui	r2,r2,40
 100b874:	1000031e 	bne	r2,zero,100b884 <alt_up_character_lcd_erase_pos+0x34>
 100b878:	e0bffe17 	ldw	r2,-8(fp)
 100b87c:	108000b0 	cmpltui	r2,r2,2
 100b880:	1000031e 	bne	r2,zero,100b890 <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 100b884:	00bfffc4 	movi	r2,-1
 100b888:	e0bfff15 	stw	r2,-4(fp)
 100b88c:	00000e06 	br	100b8c8 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 100b890:	e13ffd17 	ldw	r4,-12(fp)
 100b894:	e17ffe17 	ldw	r5,-8(fp)
 100b898:	100b4180 	call	100b418 <get_DDRAM_addr>
 100b89c:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 100b8a0:	e17ffb03 	ldbu	r5,-20(fp)
 100b8a4:	e13ffc17 	ldw	r4,-16(fp)
 100b8a8:	100b4940 	call	100b494 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 100b8ac:	e0bffc17 	ldw	r2,-16(fp)
 100b8b0:	10800a17 	ldw	r2,40(r2)
 100b8b4:	10800044 	addi	r2,r2,1
 100b8b8:	1007883a 	mov	r3,r2
 100b8bc:	00800084 	movi	r2,2
 100b8c0:	18800025 	stbio	r2,0(r3)
	return 0;
 100b8c4:	e03fff15 	stw	zero,-4(fp)
 100b8c8:	e0bfff17 	ldw	r2,-4(fp)
}
 100b8cc:	e037883a 	mov	sp,fp
 100b8d0:	dfc00117 	ldw	ra,4(sp)
 100b8d4:	df000017 	ldw	fp,0(sp)
 100b8d8:	dec00204 	addi	sp,sp,8
 100b8dc:	f800283a 	ret

0100b8e0 <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 100b8e0:	defffd04 	addi	sp,sp,-12
 100b8e4:	dfc00215 	stw	ra,8(sp)
 100b8e8:	df000115 	stw	fp,4(sp)
 100b8ec:	df000104 	addi	fp,sp,4
 100b8f0:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 100b8f4:	e13fff17 	ldw	r4,-4(fp)
 100b8f8:	01400304 	movi	r5,12
 100b8fc:	100b4940 	call	100b494 <alt_up_character_lcd_send_cmd>
}
 100b900:	e037883a 	mov	sp,fp
 100b904:	dfc00117 	ldw	ra,4(sp)
 100b908:	df000017 	ldw	fp,0(sp)
 100b90c:	dec00204 	addi	sp,sp,8
 100b910:	f800283a 	ret

0100b914 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 100b914:	defffd04 	addi	sp,sp,-12
 100b918:	dfc00215 	stw	ra,8(sp)
 100b91c:	df000115 	stw	fp,4(sp)
 100b920:	df000104 	addi	fp,sp,4
 100b924:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 100b928:	e13fff17 	ldw	r4,-4(fp)
 100b92c:	014003c4 	movi	r5,15
 100b930:	100b4940 	call	100b494 <alt_up_character_lcd_send_cmd>
}
 100b934:	e037883a 	mov	sp,fp
 100b938:	dfc00117 	ldw	ra,4(sp)
 100b93c:	df000017 	ldw	fp,0(sp)
 100b940:	dec00204 	addi	sp,sp,8
 100b944:	f800283a 	ret

0100b948 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 100b948:	defff404 	addi	sp,sp,-48
 100b94c:	df000b15 	stw	fp,44(sp)
 100b950:	df000b04 	addi	fp,sp,44
 100b954:	e13ffb15 	stw	r4,-20(fp)
 100b958:	e17ffc15 	stw	r5,-16(fp)
 100b95c:	e1bffd15 	stw	r6,-12(fp)
 100b960:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 100b964:	e03ff915 	stw	zero,-28(fp)
 100b968:	00804074 	movhi	r2,257
 100b96c:	10814004 	addi	r2,r2,1280
 100b970:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 100b974:	1005003a 	cmpeq	r2,r2,zero
 100b978:	1000411e 	bne	r2,zero,100ba80 <alt_alarm_start+0x138>
  {
    if (alarm)
 100b97c:	e0bffb17 	ldw	r2,-20(fp)
 100b980:	1005003a 	cmpeq	r2,r2,zero
 100b984:	10003b1e 	bne	r2,zero,100ba74 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 100b988:	e0fffb17 	ldw	r3,-20(fp)
 100b98c:	e0bffd17 	ldw	r2,-12(fp)
 100b990:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 100b994:	e0fffb17 	ldw	r3,-20(fp)
 100b998:	e0bffe17 	ldw	r2,-8(fp)
 100b99c:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100b9a0:	0005303a 	rdctl	r2,status
 100b9a4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100b9a8:	e0fff817 	ldw	r3,-32(fp)
 100b9ac:	00bfff84 	movi	r2,-2
 100b9b0:	1884703a 	and	r2,r3,r2
 100b9b4:	1001703a 	wrctl	status,r2
  
  return context;
 100b9b8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 100b9bc:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 100b9c0:	00804074 	movhi	r2,257
 100b9c4:	10814104 	addi	r2,r2,1284
 100b9c8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 100b9cc:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 100b9d0:	e0fffc17 	ldw	r3,-16(fp)
 100b9d4:	e0bff917 	ldw	r2,-28(fp)
 100b9d8:	1885883a 	add	r2,r3,r2
 100b9dc:	10c00044 	addi	r3,r2,1
 100b9e0:	e0bffb17 	ldw	r2,-20(fp)
 100b9e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100b9e8:	e0bffb17 	ldw	r2,-20(fp)
 100b9ec:	10c00217 	ldw	r3,8(r2)
 100b9f0:	e0bff917 	ldw	r2,-28(fp)
 100b9f4:	1880042e 	bgeu	r3,r2,100ba08 <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 100b9f8:	e0fffb17 	ldw	r3,-20(fp)
 100b9fc:	00800044 	movi	r2,1
 100ba00:	18800405 	stb	r2,16(r3)
 100ba04:	00000206 	br	100ba10 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 100ba08:	e0bffb17 	ldw	r2,-20(fp)
 100ba0c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 100ba10:	e0fffb17 	ldw	r3,-20(fp)
 100ba14:	00804074 	movhi	r2,257
 100ba18:	10ba9104 	addi	r2,r2,-5564
 100ba1c:	e0bff615 	stw	r2,-40(fp)
 100ba20:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100ba24:	e0fff717 	ldw	r3,-36(fp)
 100ba28:	e0bff617 	ldw	r2,-40(fp)
 100ba2c:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100ba30:	e0bff617 	ldw	r2,-40(fp)
 100ba34:	10c00017 	ldw	r3,0(r2)
 100ba38:	e0bff717 	ldw	r2,-36(fp)
 100ba3c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100ba40:	e0bff617 	ldw	r2,-40(fp)
 100ba44:	10c00017 	ldw	r3,0(r2)
 100ba48:	e0bff717 	ldw	r2,-36(fp)
 100ba4c:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100ba50:	e0fff617 	ldw	r3,-40(fp)
 100ba54:	e0bff717 	ldw	r2,-36(fp)
 100ba58:	18800015 	stw	r2,0(r3)
 100ba5c:	e0bffa17 	ldw	r2,-24(fp)
 100ba60:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100ba64:	e0bff517 	ldw	r2,-44(fp)
 100ba68:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 100ba6c:	e03fff15 	stw	zero,-4(fp)
 100ba70:	00000506 	br	100ba88 <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 100ba74:	00bffa84 	movi	r2,-22
 100ba78:	e0bfff15 	stw	r2,-4(fp)
 100ba7c:	00000206 	br	100ba88 <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 100ba80:	00bfde84 	movi	r2,-134
 100ba84:	e0bfff15 	stw	r2,-4(fp)
 100ba88:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 100ba8c:	e037883a 	mov	sp,fp
 100ba90:	df000017 	ldw	fp,0(sp)
 100ba94:	dec00104 	addi	sp,sp,4
 100ba98:	f800283a 	ret

0100ba9c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 100ba9c:	deffff04 	addi	sp,sp,-4
 100baa0:	df000015 	stw	fp,0(sp)
 100baa4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100baa8:	e037883a 	mov	sp,fp
 100baac:	df000017 	ldw	fp,0(sp)
 100bab0:	dec00104 	addi	sp,sp,4
 100bab4:	f800283a 	ret

0100bab8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100bab8:	defff904 	addi	sp,sp,-28
 100babc:	dfc00615 	stw	ra,24(sp)
 100bac0:	df000515 	stw	fp,20(sp)
 100bac4:	df000504 	addi	fp,sp,20
 100bac8:	e13ffd15 	stw	r4,-12(fp)
 100bacc:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 100bad0:	e0bffd17 	ldw	r2,-12(fp)
 100bad4:	1005003a 	cmpeq	r2,r2,zero
 100bad8:	1000041e 	bne	r2,zero,100baec <alt_dev_llist_insert+0x34>
 100badc:	e0bffd17 	ldw	r2,-12(fp)
 100bae0:	10800217 	ldw	r2,8(r2)
 100bae4:	1004c03a 	cmpne	r2,r2,zero
 100bae8:	1000071e 	bne	r2,zero,100bb08 <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 100baec:	100bb6c0 	call	100bb6c <alt_get_errno>
 100baf0:	1007883a 	mov	r3,r2
 100baf4:	00800584 	movi	r2,22
 100baf8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 100bafc:	00bffa84 	movi	r2,-22
 100bb00:	e0bfff15 	stw	r2,-4(fp)
 100bb04:	00001306 	br	100bb54 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 100bb08:	e0fffd17 	ldw	r3,-12(fp)
 100bb0c:	e0bffe17 	ldw	r2,-8(fp)
 100bb10:	e0bffb15 	stw	r2,-20(fp)
 100bb14:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100bb18:	e0fffc17 	ldw	r3,-16(fp)
 100bb1c:	e0bffb17 	ldw	r2,-20(fp)
 100bb20:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 100bb24:	e0bffb17 	ldw	r2,-20(fp)
 100bb28:	10c00017 	ldw	r3,0(r2)
 100bb2c:	e0bffc17 	ldw	r2,-16(fp)
 100bb30:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 100bb34:	e0bffb17 	ldw	r2,-20(fp)
 100bb38:	10c00017 	ldw	r3,0(r2)
 100bb3c:	e0bffc17 	ldw	r2,-16(fp)
 100bb40:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 100bb44:	e0fffb17 	ldw	r3,-20(fp)
 100bb48:	e0bffc17 	ldw	r2,-16(fp)
 100bb4c:	18800015 	stw	r2,0(r3)

  return 0;  
 100bb50:	e03fff15 	stw	zero,-4(fp)
 100bb54:	e0bfff17 	ldw	r2,-4(fp)
}
 100bb58:	e037883a 	mov	sp,fp
 100bb5c:	dfc00117 	ldw	ra,4(sp)
 100bb60:	df000017 	ldw	fp,0(sp)
 100bb64:	dec00204 	addi	sp,sp,8
 100bb68:	f800283a 	ret

0100bb6c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100bb6c:	defffd04 	addi	sp,sp,-12
 100bb70:	dfc00215 	stw	ra,8(sp)
 100bb74:	df000115 	stw	fp,4(sp)
 100bb78:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100bb7c:	00804074 	movhi	r2,257
 100bb80:	10ba8e04 	addi	r2,r2,-5576
 100bb84:	10800017 	ldw	r2,0(r2)
 100bb88:	1005003a 	cmpeq	r2,r2,zero
 100bb8c:	1000061e 	bne	r2,zero,100bba8 <alt_get_errno+0x3c>
 100bb90:	00804074 	movhi	r2,257
 100bb94:	10ba8e04 	addi	r2,r2,-5576
 100bb98:	10800017 	ldw	r2,0(r2)
 100bb9c:	103ee83a 	callr	r2
 100bba0:	e0bfff15 	stw	r2,-4(fp)
 100bba4:	00000306 	br	100bbb4 <alt_get_errno+0x48>
 100bba8:	00804074 	movhi	r2,257
 100bbac:	10813b04 	addi	r2,r2,1260
 100bbb0:	e0bfff15 	stw	r2,-4(fp)
 100bbb4:	e0bfff17 	ldw	r2,-4(fp)
}
 100bbb8:	e037883a 	mov	sp,fp
 100bbbc:	dfc00117 	ldw	ra,4(sp)
 100bbc0:	df000017 	ldw	fp,0(sp)
 100bbc4:	dec00204 	addi	sp,sp,8
 100bbc8:	f800283a 	ret

0100bbcc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 100bbcc:	defffd04 	addi	sp,sp,-12
 100bbd0:	dfc00215 	stw	ra,8(sp)
 100bbd4:	df000115 	stw	fp,4(sp)
 100bbd8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100bbdc:	00bfff04 	movi	r2,-4
 100bbe0:	00c04074 	movhi	r3,257
 100bbe4:	18f30104 	addi	r3,r3,-13308
 100bbe8:	1885883a 	add	r2,r3,r2
 100bbec:	e0bfff15 	stw	r2,-4(fp)
 100bbf0:	00000606 	br	100bc0c <_do_ctors+0x40>
        (*ctor) (); 
 100bbf4:	e0bfff17 	ldw	r2,-4(fp)
 100bbf8:	10800017 	ldw	r2,0(r2)
 100bbfc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 100bc00:	e0bfff17 	ldw	r2,-4(fp)
 100bc04:	10bfff04 	addi	r2,r2,-4
 100bc08:	e0bfff15 	stw	r2,-4(fp)
 100bc0c:	e0ffff17 	ldw	r3,-4(fp)
 100bc10:	00804074 	movhi	r2,257
 100bc14:	10b30004 	addi	r2,r2,-13312
 100bc18:	18bff62e 	bgeu	r3,r2,100bbf4 <_do_ctors+0x28>
        (*ctor) (); 
}
 100bc1c:	e037883a 	mov	sp,fp
 100bc20:	dfc00117 	ldw	ra,4(sp)
 100bc24:	df000017 	ldw	fp,0(sp)
 100bc28:	dec00204 	addi	sp,sp,8
 100bc2c:	f800283a 	ret

0100bc30 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 100bc30:	defffd04 	addi	sp,sp,-12
 100bc34:	dfc00215 	stw	ra,8(sp)
 100bc38:	df000115 	stw	fp,4(sp)
 100bc3c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100bc40:	00bfff04 	movi	r2,-4
 100bc44:	00c04074 	movhi	r3,257
 100bc48:	18f30104 	addi	r3,r3,-13308
 100bc4c:	1885883a 	add	r2,r3,r2
 100bc50:	e0bfff15 	stw	r2,-4(fp)
 100bc54:	00000606 	br	100bc70 <_do_dtors+0x40>
        (*dtor) (); 
 100bc58:	e0bfff17 	ldw	r2,-4(fp)
 100bc5c:	10800017 	ldw	r2,0(r2)
 100bc60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 100bc64:	e0bfff17 	ldw	r2,-4(fp)
 100bc68:	10bfff04 	addi	r2,r2,-4
 100bc6c:	e0bfff15 	stw	r2,-4(fp)
 100bc70:	e0ffff17 	ldw	r3,-4(fp)
 100bc74:	00804074 	movhi	r2,257
 100bc78:	10b30104 	addi	r2,r2,-13308
 100bc7c:	18bff62e 	bgeu	r3,r2,100bc58 <_do_dtors+0x28>
        (*dtor) (); 
}
 100bc80:	e037883a 	mov	sp,fp
 100bc84:	dfc00117 	ldw	ra,4(sp)
 100bc88:	df000017 	ldw	fp,0(sp)
 100bc8c:	dec00204 	addi	sp,sp,8
 100bc90:	f800283a 	ret

0100bc94 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 100bc94:	defff904 	addi	sp,sp,-28
 100bc98:	dfc00615 	stw	ra,24(sp)
 100bc9c:	df000515 	stw	fp,20(sp)
 100bca0:	df000504 	addi	fp,sp,20
 100bca4:	e13ffd15 	stw	r4,-12(fp)
 100bca8:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 100bcac:	e0bffe17 	ldw	r2,-8(fp)
 100bcb0:	10800017 	ldw	r2,0(r2)
 100bcb4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100bcb8:	e13ffd17 	ldw	r4,-12(fp)
 100bcbc:	10004540 	call	1000454 <strlen>
 100bcc0:	10800044 	addi	r2,r2,1
 100bcc4:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100bcc8:	00000d06 	br	100bd00 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 100bccc:	e0bffc17 	ldw	r2,-16(fp)
 100bcd0:	11000217 	ldw	r4,8(r2)
 100bcd4:	e1bffb17 	ldw	r6,-20(fp)
 100bcd8:	e17ffd17 	ldw	r5,-12(fp)
 100bcdc:	100c8440 	call	100c844 <memcmp>
 100bce0:	1004c03a 	cmpne	r2,r2,zero
 100bce4:	1000031e 	bne	r2,zero,100bcf4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100bce8:	e0bffc17 	ldw	r2,-16(fp)
 100bcec:	e0bfff15 	stw	r2,-4(fp)
 100bcf0:	00000706 	br	100bd10 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 100bcf4:	e0bffc17 	ldw	r2,-16(fp)
 100bcf8:	10800017 	ldw	r2,0(r2)
 100bcfc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100bd00:	e0fffe17 	ldw	r3,-8(fp)
 100bd04:	e0bffc17 	ldw	r2,-16(fp)
 100bd08:	10fff01e 	bne	r2,r3,100bccc <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 100bd0c:	e03fff15 	stw	zero,-4(fp)
 100bd10:	e0bfff17 	ldw	r2,-4(fp)
}
 100bd14:	e037883a 	mov	sp,fp
 100bd18:	dfc00117 	ldw	ra,4(sp)
 100bd1c:	df000017 	ldw	fp,0(sp)
 100bd20:	dec00204 	addi	sp,sp,8
 100bd24:	f800283a 	ret

0100bd28 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100bd28:	deffff04 	addi	sp,sp,-4
 100bd2c:	df000015 	stw	fp,0(sp)
 100bd30:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 100bd34:	e037883a 	mov	sp,fp
 100bd38:	df000017 	ldw	fp,0(sp)
 100bd3c:	dec00104 	addi	sp,sp,4
 100bd40:	f800283a 	ret

0100bd44 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100bd44:	defff904 	addi	sp,sp,-28
 100bd48:	dfc00615 	stw	ra,24(sp)
 100bd4c:	df000515 	stw	fp,20(sp)
 100bd50:	df000504 	addi	fp,sp,20
 100bd54:	e13ffc15 	stw	r4,-16(fp)
 100bd58:	e17ffd15 	stw	r5,-12(fp)
 100bd5c:	e1bffe15 	stw	r6,-8(fp)
 100bd60:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 100bd64:	e0800217 	ldw	r2,8(fp)
 100bd68:	d8800015 	stw	r2,0(sp)
 100bd6c:	e13ffc17 	ldw	r4,-16(fp)
 100bd70:	e17ffd17 	ldw	r5,-12(fp)
 100bd74:	e1bffe17 	ldw	r6,-8(fp)
 100bd78:	e1ffff17 	ldw	r7,-4(fp)
 100bd7c:	100bf180 	call	100bf18 <alt_iic_isr_register>
}  
 100bd80:	e037883a 	mov	sp,fp
 100bd84:	dfc00117 	ldw	ra,4(sp)
 100bd88:	df000017 	ldw	fp,0(sp)
 100bd8c:	dec00204 	addi	sp,sp,8
 100bd90:	f800283a 	ret

0100bd94 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 100bd94:	defff904 	addi	sp,sp,-28
 100bd98:	df000615 	stw	fp,24(sp)
 100bd9c:	df000604 	addi	fp,sp,24
 100bda0:	e13ffe15 	stw	r4,-8(fp)
 100bda4:	e17fff15 	stw	r5,-4(fp)
 100bda8:	e0bfff17 	ldw	r2,-4(fp)
 100bdac:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bdb0:	0005303a 	rdctl	r2,status
 100bdb4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bdb8:	e0fffb17 	ldw	r3,-20(fp)
 100bdbc:	00bfff84 	movi	r2,-2
 100bdc0:	1884703a 	and	r2,r3,r2
 100bdc4:	1001703a 	wrctl	status,r2
  
  return context;
 100bdc8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100bdcc:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 100bdd0:	e0fffc17 	ldw	r3,-16(fp)
 100bdd4:	00800044 	movi	r2,1
 100bdd8:	10c4983a 	sll	r2,r2,r3
 100bddc:	1007883a 	mov	r3,r2
 100bde0:	00804074 	movhi	r2,257
 100bde4:	10813f04 	addi	r2,r2,1276
 100bde8:	10800017 	ldw	r2,0(r2)
 100bdec:	1886b03a 	or	r3,r3,r2
 100bdf0:	00804074 	movhi	r2,257
 100bdf4:	10813f04 	addi	r2,r2,1276
 100bdf8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100bdfc:	00804074 	movhi	r2,257
 100be00:	10813f04 	addi	r2,r2,1276
 100be04:	10800017 	ldw	r2,0(r2)
 100be08:	100170fa 	wrctl	ienable,r2
 100be0c:	e0bffd17 	ldw	r2,-12(fp)
 100be10:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100be14:	e0bffa17 	ldw	r2,-24(fp)
 100be18:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100be1c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 100be20:	e037883a 	mov	sp,fp
 100be24:	df000017 	ldw	fp,0(sp)
 100be28:	dec00104 	addi	sp,sp,4
 100be2c:	f800283a 	ret

0100be30 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 100be30:	defff904 	addi	sp,sp,-28
 100be34:	df000615 	stw	fp,24(sp)
 100be38:	df000604 	addi	fp,sp,24
 100be3c:	e13ffe15 	stw	r4,-8(fp)
 100be40:	e17fff15 	stw	r5,-4(fp)
 100be44:	e0bfff17 	ldw	r2,-4(fp)
 100be48:	e0bffc15 	stw	r2,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100be4c:	0005303a 	rdctl	r2,status
 100be50:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100be54:	e0fffb17 	ldw	r3,-20(fp)
 100be58:	00bfff84 	movi	r2,-2
 100be5c:	1884703a 	and	r2,r3,r2
 100be60:	1001703a 	wrctl	status,r2
  
  return context;
 100be64:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 100be68:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active &= ~(1 << id);
 100be6c:	e0fffc17 	ldw	r3,-16(fp)
 100be70:	00800044 	movi	r2,1
 100be74:	10c4983a 	sll	r2,r2,r3
 100be78:	0084303a 	nor	r2,zero,r2
 100be7c:	1007883a 	mov	r3,r2
 100be80:	00804074 	movhi	r2,257
 100be84:	10813f04 	addi	r2,r2,1276
 100be88:	10800017 	ldw	r2,0(r2)
 100be8c:	1886703a 	and	r3,r3,r2
 100be90:	00804074 	movhi	r2,257
 100be94:	10813f04 	addi	r2,r2,1276
 100be98:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 100be9c:	00804074 	movhi	r2,257
 100bea0:	10813f04 	addi	r2,r2,1276
 100bea4:	10800017 	ldw	r2,0(r2)
 100bea8:	100170fa 	wrctl	ienable,r2
 100beac:	e0bffd17 	ldw	r2,-12(fp)
 100beb0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100beb4:	e0bffa17 	ldw	r2,-24(fp)
 100beb8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 100bebc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 100bec0:	e037883a 	mov	sp,fp
 100bec4:	df000017 	ldw	fp,0(sp)
 100bec8:	dec00104 	addi	sp,sp,4
 100becc:	f800283a 	ret

0100bed0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 100bed0:	defffc04 	addi	sp,sp,-16
 100bed4:	df000315 	stw	fp,12(sp)
 100bed8:	df000304 	addi	fp,sp,12
 100bedc:	e13ffe15 	stw	r4,-8(fp)
 100bee0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 100bee4:	000530fa 	rdctl	r2,ienable
 100bee8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 100beec:	e0ffff17 	ldw	r3,-4(fp)
 100bef0:	00800044 	movi	r2,1
 100bef4:	10c4983a 	sll	r2,r2,r3
 100bef8:	1007883a 	mov	r3,r2
 100befc:	e0bffd17 	ldw	r2,-12(fp)
 100bf00:	1884703a 	and	r2,r3,r2
 100bf04:	1004c03a 	cmpne	r2,r2,zero
}
 100bf08:	e037883a 	mov	sp,fp
 100bf0c:	df000017 	ldw	fp,0(sp)
 100bf10:	dec00104 	addi	sp,sp,4
 100bf14:	f800283a 	ret

0100bf18 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 100bf18:	defff404 	addi	sp,sp,-48
 100bf1c:	dfc00b15 	stw	ra,44(sp)
 100bf20:	df000a15 	stw	fp,40(sp)
 100bf24:	df000a04 	addi	fp,sp,40
 100bf28:	e13ffb15 	stw	r4,-20(fp)
 100bf2c:	e17ffc15 	stw	r5,-16(fp)
 100bf30:	e1bffd15 	stw	r6,-12(fp)
 100bf34:	e1fffe15 	stw	r7,-8(fp)
  int rc = -EINVAL;  
 100bf38:	00bffa84 	movi	r2,-22
 100bf3c:	e0bffa15 	stw	r2,-24(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 100bf40:	e0bffc17 	ldw	r2,-16(fp)
 100bf44:	e0bff915 	stw	r2,-28(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 100bf48:	e0bff917 	ldw	r2,-28(fp)
 100bf4c:	10800808 	cmpgei	r2,r2,32
 100bf50:	1000291e 	bne	r2,zero,100bff8 <alt_iic_isr_register+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100bf54:	0005303a 	rdctl	r2,status
 100bf58:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100bf5c:	e0fff717 	ldw	r3,-36(fp)
 100bf60:	00bfff84 	movi	r2,-2
 100bf64:	1884703a 	and	r2,r3,r2
 100bf68:	1001703a 	wrctl	status,r2
  
  return context;
 100bf6c:	e0bff717 	ldw	r2,-36(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 100bf70:	e0bff815 	stw	r2,-32(fp)

    alt_irq[id].handler = isr;
 100bf74:	e0bff917 	ldw	r2,-28(fp)
 100bf78:	00c04074 	movhi	r3,257
 100bf7c:	18c14c04 	addi	r3,r3,1328
 100bf80:	100490fa 	slli	r2,r2,3
 100bf84:	10c7883a 	add	r3,r2,r3
 100bf88:	e0bffd17 	ldw	r2,-12(fp)
 100bf8c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = isr_context;
 100bf90:	e0bff917 	ldw	r2,-28(fp)
 100bf94:	00c04074 	movhi	r3,257
 100bf98:	18c14c04 	addi	r3,r3,1328
 100bf9c:	100490fa 	slli	r2,r2,3
 100bfa0:	10c5883a 	add	r2,r2,r3
 100bfa4:	10c00104 	addi	r3,r2,4
 100bfa8:	e0bffe17 	ldw	r2,-8(fp)
 100bfac:	18800015 	stw	r2,0(r3)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 100bfb0:	e0bffd17 	ldw	r2,-12(fp)
 100bfb4:	1005003a 	cmpeq	r2,r2,zero
 100bfb8:	1000051e 	bne	r2,zero,100bfd0 <alt_iic_isr_register+0xb8>
 100bfbc:	e17ff917 	ldw	r5,-28(fp)
 100bfc0:	e13ffb17 	ldw	r4,-20(fp)
 100bfc4:	100bd940 	call	100bd94 <alt_ic_irq_enable>
 100bfc8:	e0bfff15 	stw	r2,-4(fp)
 100bfcc:	00000406 	br	100bfe0 <alt_iic_isr_register+0xc8>
 100bfd0:	e17ff917 	ldw	r5,-28(fp)
 100bfd4:	e13ffb17 	ldw	r4,-20(fp)
 100bfd8:	100be300 	call	100be30 <alt_ic_irq_disable>
 100bfdc:	e0bfff15 	stw	r2,-4(fp)
 100bfe0:	e0bfff17 	ldw	r2,-4(fp)
 100bfe4:	e0bffa15 	stw	r2,-24(fp)
 100bfe8:	e0bff817 	ldw	r2,-32(fp)
 100bfec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100bff0:	e0bff617 	ldw	r2,-40(fp)
 100bff4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 100bff8:	e0bffa17 	ldw	r2,-24(fp)
}
 100bffc:	e037883a 	mov	sp,fp
 100c000:	dfc00117 	ldw	ra,4(sp)
 100c004:	df000017 	ldw	fp,0(sp)
 100c008:	dec00204 	addi	sp,sp,8
 100c00c:	f800283a 	ret

0100c010 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 100c010:	defff804 	addi	sp,sp,-32
 100c014:	dfc00715 	stw	ra,28(sp)
 100c018:	df000615 	stw	fp,24(sp)
 100c01c:	dc000515 	stw	r16,20(sp)
 100c020:	df000504 	addi	fp,sp,20
 100c024:	e13ffc15 	stw	r4,-16(fp)
 100c028:	e17ffd15 	stw	r5,-12(fp)
 100c02c:	e1bffe15 	stw	r6,-8(fp)
 100c030:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100c034:	e13ffd17 	ldw	r4,-12(fp)
 100c038:	e17ffe17 	ldw	r5,-8(fp)
 100c03c:	e1bfff17 	ldw	r6,-4(fp)
 100c040:	100c2580 	call	100c258 <open>
 100c044:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 100c048:	e0bffb17 	ldw	r2,-20(fp)
 100c04c:	1004803a 	cmplt	r2,r2,zero
 100c050:	10001f1e 	bne	r2,zero,100c0d0 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 100c054:	e13ffb17 	ldw	r4,-20(fp)
 100c058:	04004074 	movhi	r16,257
 100c05c:	84360004 	addi	r16,r16,-10240
 100c060:	01400304 	movi	r5,12
 100c064:	10096a40 	call	10096a4 <__mulsi3>
 100c068:	1405883a 	add	r2,r2,r16
 100c06c:	10c00017 	ldw	r3,0(r2)
 100c070:	e0bffc17 	ldw	r2,-16(fp)
 100c074:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 100c078:	e13ffb17 	ldw	r4,-20(fp)
 100c07c:	04004074 	movhi	r16,257
 100c080:	84360004 	addi	r16,r16,-10240
 100c084:	01400304 	movi	r5,12
 100c088:	10096a40 	call	10096a4 <__mulsi3>
 100c08c:	1405883a 	add	r2,r2,r16
 100c090:	10800104 	addi	r2,r2,4
 100c094:	10c00017 	ldw	r3,0(r2)
 100c098:	e0bffc17 	ldw	r2,-16(fp)
 100c09c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 100c0a0:	e13ffb17 	ldw	r4,-20(fp)
 100c0a4:	04004074 	movhi	r16,257
 100c0a8:	84360004 	addi	r16,r16,-10240
 100c0ac:	01400304 	movi	r5,12
 100c0b0:	10096a40 	call	10096a4 <__mulsi3>
 100c0b4:	1405883a 	add	r2,r2,r16
 100c0b8:	10800204 	addi	r2,r2,8
 100c0bc:	10c00017 	ldw	r3,0(r2)
 100c0c0:	e0bffc17 	ldw	r2,-16(fp)
 100c0c4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 100c0c8:	e13ffb17 	ldw	r4,-20(fp)
 100c0cc:	100a5ec0 	call	100a5ec <alt_release_fd>
  }
} 
 100c0d0:	e037883a 	mov	sp,fp
 100c0d4:	dfc00217 	ldw	ra,8(sp)
 100c0d8:	df000117 	ldw	fp,4(sp)
 100c0dc:	dc000017 	ldw	r16,0(sp)
 100c0e0:	dec00304 	addi	sp,sp,12
 100c0e4:	f800283a 	ret

0100c0e8 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 100c0e8:	defffb04 	addi	sp,sp,-20
 100c0ec:	dfc00415 	stw	ra,16(sp)
 100c0f0:	df000315 	stw	fp,12(sp)
 100c0f4:	df000304 	addi	fp,sp,12
 100c0f8:	e13ffd15 	stw	r4,-12(fp)
 100c0fc:	e17ffe15 	stw	r5,-8(fp)
 100c100:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 100c104:	01004074 	movhi	r4,257
 100c108:	21360304 	addi	r4,r4,-10228
 100c10c:	e17ffd17 	ldw	r5,-12(fp)
 100c110:	01800044 	movi	r6,1
 100c114:	01c07fc4 	movi	r7,511
 100c118:	100c0100 	call	100c010 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 100c11c:	01004074 	movhi	r4,257
 100c120:	21360004 	addi	r4,r4,-10240
 100c124:	e17ffe17 	ldw	r5,-8(fp)
 100c128:	000d883a 	mov	r6,zero
 100c12c:	01c07fc4 	movi	r7,511
 100c130:	100c0100 	call	100c010 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 100c134:	01004074 	movhi	r4,257
 100c138:	21360604 	addi	r4,r4,-10216
 100c13c:	e17fff17 	ldw	r5,-4(fp)
 100c140:	01800044 	movi	r6,1
 100c144:	01c07fc4 	movi	r7,511
 100c148:	100c0100 	call	100c010 <alt_open_fd>
}  
 100c14c:	e037883a 	mov	sp,fp
 100c150:	dfc00117 	ldw	ra,4(sp)
 100c154:	df000017 	ldw	fp,0(sp)
 100c158:	dec00204 	addi	sp,sp,8
 100c15c:	f800283a 	ret

0100c160 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 100c160:	defffa04 	addi	sp,sp,-24
 100c164:	dfc00515 	stw	ra,20(sp)
 100c168:	df000415 	stw	fp,16(sp)
 100c16c:	dc000315 	stw	r16,12(sp)
 100c170:	df000304 	addi	fp,sp,12
 100c174:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 100c178:	e0bffe17 	ldw	r2,-8(fp)
 100c17c:	10800217 	ldw	r2,8(r2)
 100c180:	10d00034 	orhi	r3,r2,16384
 100c184:	e0bffe17 	ldw	r2,-8(fp)
 100c188:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100c18c:	e03ffd15 	stw	zero,-12(fp)
 100c190:	00002306 	br	100c220 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 100c194:	e13ffd17 	ldw	r4,-12(fp)
 100c198:	04004074 	movhi	r16,257
 100c19c:	84360004 	addi	r16,r16,-10240
 100c1a0:	01400304 	movi	r5,12
 100c1a4:	10096a40 	call	10096a4 <__mulsi3>
 100c1a8:	1405883a 	add	r2,r2,r16
 100c1ac:	10c00017 	ldw	r3,0(r2)
 100c1b0:	e0bffe17 	ldw	r2,-8(fp)
 100c1b4:	10800017 	ldw	r2,0(r2)
 100c1b8:	1880161e 	bne	r3,r2,100c214 <alt_file_locked+0xb4>
 100c1bc:	e13ffd17 	ldw	r4,-12(fp)
 100c1c0:	04004074 	movhi	r16,257
 100c1c4:	84360004 	addi	r16,r16,-10240
 100c1c8:	01400304 	movi	r5,12
 100c1cc:	10096a40 	call	10096a4 <__mulsi3>
 100c1d0:	1405883a 	add	r2,r2,r16
 100c1d4:	10800204 	addi	r2,r2,8
 100c1d8:	10800017 	ldw	r2,0(r2)
 100c1dc:	1004403a 	cmpge	r2,r2,zero
 100c1e0:	10000c1e 	bne	r2,zero,100c214 <alt_file_locked+0xb4>
 100c1e4:	e13ffd17 	ldw	r4,-12(fp)
 100c1e8:	01400304 	movi	r5,12
 100c1ec:	10096a40 	call	10096a4 <__mulsi3>
 100c1f0:	1007883a 	mov	r3,r2
 100c1f4:	00804074 	movhi	r2,257
 100c1f8:	10b60004 	addi	r2,r2,-10240
 100c1fc:	1887883a 	add	r3,r3,r2
 100c200:	e0bffe17 	ldw	r2,-8(fp)
 100c204:	18800326 	beq	r3,r2,100c214 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 100c208:	00bffcc4 	movi	r2,-13
 100c20c:	e0bfff15 	stw	r2,-4(fp)
 100c210:	00000a06 	br	100c23c <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 100c214:	e0bffd17 	ldw	r2,-12(fp)
 100c218:	10800044 	addi	r2,r2,1
 100c21c:	e0bffd15 	stw	r2,-12(fp)
 100c220:	00804074 	movhi	r2,257
 100c224:	10ba8d04 	addi	r2,r2,-5580
 100c228:	10800017 	ldw	r2,0(r2)
 100c22c:	1007883a 	mov	r3,r2
 100c230:	e0bffd17 	ldw	r2,-12(fp)
 100c234:	18bfd72e 	bgeu	r3,r2,100c194 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 100c238:	e03fff15 	stw	zero,-4(fp)
 100c23c:	e0bfff17 	ldw	r2,-4(fp)
}
 100c240:	e037883a 	mov	sp,fp
 100c244:	dfc00217 	ldw	ra,8(sp)
 100c248:	df000117 	ldw	fp,4(sp)
 100c24c:	dc000017 	ldw	r16,0(sp)
 100c250:	dec00304 	addi	sp,sp,12
 100c254:	f800283a 	ret

0100c258 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 100c258:	defff404 	addi	sp,sp,-48
 100c25c:	dfc00b15 	stw	ra,44(sp)
 100c260:	df000a15 	stw	fp,40(sp)
 100c264:	df000a04 	addi	fp,sp,40
 100c268:	e13ffb15 	stw	r4,-20(fp)
 100c26c:	e17ffc15 	stw	r5,-16(fp)
 100c270:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 100c274:	00bfffc4 	movi	r2,-1
 100c278:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 100c27c:	00bffb44 	movi	r2,-19
 100c280:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 100c284:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 100c288:	e13ffb17 	ldw	r4,-20(fp)
 100c28c:	01404074 	movhi	r5,257
 100c290:	297a8b04 	addi	r5,r5,-5588
 100c294:	100bc940 	call	100bc94 <alt_find_dev>
 100c298:	e0bffa15 	stw	r2,-24(fp)
 100c29c:	e0bffa17 	ldw	r2,-24(fp)
 100c2a0:	1004c03a 	cmpne	r2,r2,zero
 100c2a4:	1000051e 	bne	r2,zero,100c2bc <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 100c2a8:	e13ffb17 	ldw	r4,-20(fp)
 100c2ac:	100c6080 	call	100c608 <alt_find_file>
 100c2b0:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 100c2b4:	00800044 	movi	r2,1
 100c2b8:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 100c2bc:	e0bffa17 	ldw	r2,-24(fp)
 100c2c0:	1005003a 	cmpeq	r2,r2,zero
 100c2c4:	1000311e 	bne	r2,zero,100c38c <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 100c2c8:	e13ffa17 	ldw	r4,-24(fp)
 100c2cc:	100c7280 	call	100c728 <alt_get_fd>
 100c2d0:	e0bff815 	stw	r2,-32(fp)
 100c2d4:	e0bff817 	ldw	r2,-32(fp)
 100c2d8:	1004403a 	cmpge	r2,r2,zero
 100c2dc:	1000031e 	bne	r2,zero,100c2ec <open+0x94>
    {
      status = index;
 100c2e0:	e0bff817 	ldw	r2,-32(fp)
 100c2e4:	e0bff715 	stw	r2,-36(fp)
 100c2e8:	00002a06 	br	100c394 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 100c2ec:	e13ff817 	ldw	r4,-32(fp)
 100c2f0:	01400304 	movi	r5,12
 100c2f4:	10096a40 	call	10096a4 <__mulsi3>
 100c2f8:	1007883a 	mov	r3,r2
 100c2fc:	00804074 	movhi	r2,257
 100c300:	10b60004 	addi	r2,r2,-10240
 100c304:	1885883a 	add	r2,r3,r2
 100c308:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 100c30c:	e0fffc17 	ldw	r3,-16(fp)
 100c310:	00900034 	movhi	r2,16384
 100c314:	10bfffc4 	addi	r2,r2,-1
 100c318:	1886703a 	and	r3,r3,r2
 100c31c:	e0bff917 	ldw	r2,-28(fp)
 100c320:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 100c324:	e0bff617 	ldw	r2,-40(fp)
 100c328:	1004c03a 	cmpne	r2,r2,zero
 100c32c:	1000061e 	bne	r2,zero,100c348 <open+0xf0>
 100c330:	e13ff917 	ldw	r4,-28(fp)
 100c334:	100c1600 	call	100c160 <alt_file_locked>
 100c338:	e0bff715 	stw	r2,-36(fp)
 100c33c:	e0bff717 	ldw	r2,-36(fp)
 100c340:	1004803a 	cmplt	r2,r2,zero
 100c344:	1000131e 	bne	r2,zero,100c394 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 100c348:	e0bffa17 	ldw	r2,-24(fp)
 100c34c:	10800317 	ldw	r2,12(r2)
 100c350:	1005003a 	cmpeq	r2,r2,zero
 100c354:	1000091e 	bne	r2,zero,100c37c <open+0x124>
 100c358:	e0bffa17 	ldw	r2,-24(fp)
 100c35c:	10800317 	ldw	r2,12(r2)
 100c360:	e13ff917 	ldw	r4,-28(fp)
 100c364:	e17ffb17 	ldw	r5,-20(fp)
 100c368:	e1bffc17 	ldw	r6,-16(fp)
 100c36c:	e1fffd17 	ldw	r7,-12(fp)
 100c370:	103ee83a 	callr	r2
 100c374:	e0bfff15 	stw	r2,-4(fp)
 100c378:	00000106 	br	100c380 <open+0x128>
 100c37c:	e03fff15 	stw	zero,-4(fp)
 100c380:	e0bfff17 	ldw	r2,-4(fp)
 100c384:	e0bff715 	stw	r2,-36(fp)
 100c388:	00000206 	br	100c394 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 100c38c:	00bffb44 	movi	r2,-19
 100c390:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 100c394:	e0bff717 	ldw	r2,-36(fp)
 100c398:	1004403a 	cmpge	r2,r2,zero
 100c39c:	1000091e 	bne	r2,zero,100c3c4 <open+0x16c>
  {
    alt_release_fd (index);  
 100c3a0:	e13ff817 	ldw	r4,-32(fp)
 100c3a4:	100a5ec0 	call	100a5ec <alt_release_fd>
    ALT_ERRNO = -status;
 100c3a8:	100c3e40 	call	100c3e4 <alt_get_errno>
 100c3ac:	e0fff717 	ldw	r3,-36(fp)
 100c3b0:	00c7c83a 	sub	r3,zero,r3
 100c3b4:	10c00015 	stw	r3,0(r2)
    return -1;
 100c3b8:	00bfffc4 	movi	r2,-1
 100c3bc:	e0bffe15 	stw	r2,-8(fp)
 100c3c0:	00000206 	br	100c3cc <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 100c3c4:	e0bff817 	ldw	r2,-32(fp)
 100c3c8:	e0bffe15 	stw	r2,-8(fp)
 100c3cc:	e0bffe17 	ldw	r2,-8(fp)
}
 100c3d0:	e037883a 	mov	sp,fp
 100c3d4:	dfc00117 	ldw	ra,4(sp)
 100c3d8:	df000017 	ldw	fp,0(sp)
 100c3dc:	dec00204 	addi	sp,sp,8
 100c3e0:	f800283a 	ret

0100c3e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100c3e4:	defffd04 	addi	sp,sp,-12
 100c3e8:	dfc00215 	stw	ra,8(sp)
 100c3ec:	df000115 	stw	fp,4(sp)
 100c3f0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100c3f4:	00804074 	movhi	r2,257
 100c3f8:	10ba8e04 	addi	r2,r2,-5576
 100c3fc:	10800017 	ldw	r2,0(r2)
 100c400:	1005003a 	cmpeq	r2,r2,zero
 100c404:	1000061e 	bne	r2,zero,100c420 <alt_get_errno+0x3c>
 100c408:	00804074 	movhi	r2,257
 100c40c:	10ba8e04 	addi	r2,r2,-5576
 100c410:	10800017 	ldw	r2,0(r2)
 100c414:	103ee83a 	callr	r2
 100c418:	e0bfff15 	stw	r2,-4(fp)
 100c41c:	00000306 	br	100c42c <alt_get_errno+0x48>
 100c420:	00804074 	movhi	r2,257
 100c424:	10813b04 	addi	r2,r2,1260
 100c428:	e0bfff15 	stw	r2,-4(fp)
 100c42c:	e0bfff17 	ldw	r2,-4(fp)
}
 100c430:	e037883a 	mov	sp,fp
 100c434:	dfc00117 	ldw	ra,4(sp)
 100c438:	df000017 	ldw	fp,0(sp)
 100c43c:	dec00204 	addi	sp,sp,8
 100c440:	f800283a 	ret

0100c444 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 100c444:	defffa04 	addi	sp,sp,-24
 100c448:	df000515 	stw	fp,20(sp)
 100c44c:	df000504 	addi	fp,sp,20
 100c450:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100c454:	0005303a 	rdctl	r2,status
 100c458:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100c45c:	e0fffd17 	ldw	r3,-12(fp)
 100c460:	00bfff84 	movi	r2,-2
 100c464:	1884703a 	and	r2,r3,r2
 100c468:	1001703a 	wrctl	status,r2
  
  return context;
 100c46c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 100c470:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 100c474:	e0bfff17 	ldw	r2,-4(fp)
 100c478:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 100c47c:	e0bffc17 	ldw	r2,-16(fp)
 100c480:	10c00017 	ldw	r3,0(r2)
 100c484:	e0bffc17 	ldw	r2,-16(fp)
 100c488:	10800117 	ldw	r2,4(r2)
 100c48c:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 100c490:	e0bffc17 	ldw	r2,-16(fp)
 100c494:	10c00117 	ldw	r3,4(r2)
 100c498:	e0bffc17 	ldw	r2,-16(fp)
 100c49c:	10800017 	ldw	r2,0(r2)
 100c4a0:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 100c4a4:	e0fffc17 	ldw	r3,-16(fp)
 100c4a8:	e0bffc17 	ldw	r2,-16(fp)
 100c4ac:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 100c4b0:	e0fffc17 	ldw	r3,-16(fp)
 100c4b4:	e0bffc17 	ldw	r2,-16(fp)
 100c4b8:	18800015 	stw	r2,0(r3)
 100c4bc:	e0bffe17 	ldw	r2,-8(fp)
 100c4c0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 100c4c4:	e0bffb17 	ldw	r2,-20(fp)
 100c4c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 100c4cc:	e037883a 	mov	sp,fp
 100c4d0:	df000017 	ldw	fp,0(sp)
 100c4d4:	dec00104 	addi	sp,sp,4
 100c4d8:	f800283a 	ret

0100c4dc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 100c4dc:	defffb04 	addi	sp,sp,-20
 100c4e0:	dfc00415 	stw	ra,16(sp)
 100c4e4:	df000315 	stw	fp,12(sp)
 100c4e8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 100c4ec:	d0a00e17 	ldw	r2,-32712(gp)
 100c4f0:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 100c4f4:	d0a6be17 	ldw	r2,-25864(gp)
 100c4f8:	10800044 	addi	r2,r2,1
 100c4fc:	d0a6be15 	stw	r2,-25864(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100c500:	00003106 	br	100c5c8 <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 100c504:	e0bffe17 	ldw	r2,-8(fp)
 100c508:	10800017 	ldw	r2,0(r2)
 100c50c:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 100c510:	e0bffe17 	ldw	r2,-8(fp)
 100c514:	10800403 	ldbu	r2,16(r2)
 100c518:	10803fcc 	andi	r2,r2,255
 100c51c:	1005003a 	cmpeq	r2,r2,zero
 100c520:	1000051e 	bne	r2,zero,100c538 <alt_tick+0x5c>
 100c524:	d0a6be17 	ldw	r2,-25864(gp)
 100c528:	1004c03a 	cmpne	r2,r2,zero
 100c52c:	1000021e 	bne	r2,zero,100c538 <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 100c530:	e0bffe17 	ldw	r2,-8(fp)
 100c534:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 100c538:	e0bffe17 	ldw	r2,-8(fp)
 100c53c:	10c00217 	ldw	r3,8(r2)
 100c540:	d0a6be17 	ldw	r2,-25864(gp)
 100c544:	10c01e36 	bltu	r2,r3,100c5c0 <alt_tick+0xe4>
 100c548:	e0bffe17 	ldw	r2,-8(fp)
 100c54c:	10800403 	ldbu	r2,16(r2)
 100c550:	10803fcc 	andi	r2,r2,255
 100c554:	1004c03a 	cmpne	r2,r2,zero
 100c558:	1000191e 	bne	r2,zero,100c5c0 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 100c55c:	e0bffe17 	ldw	r2,-8(fp)
 100c560:	10c00317 	ldw	r3,12(r2)
 100c564:	e0bffe17 	ldw	r2,-8(fp)
 100c568:	11000517 	ldw	r4,20(r2)
 100c56c:	183ee83a 	callr	r3
 100c570:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 100c574:	e0bffd17 	ldw	r2,-12(fp)
 100c578:	1004c03a 	cmpne	r2,r2,zero
 100c57c:	1000031e 	bne	r2,zero,100c58c <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 100c580:	e13ffe17 	ldw	r4,-8(fp)
 100c584:	100c4440 	call	100c444 <alt_alarm_stop>
 100c588:	00000d06 	br	100c5c0 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 100c58c:	e0bffe17 	ldw	r2,-8(fp)
 100c590:	10c00217 	ldw	r3,8(r2)
 100c594:	e0bffd17 	ldw	r2,-12(fp)
 100c598:	1887883a 	add	r3,r3,r2
 100c59c:	e0bffe17 	ldw	r2,-8(fp)
 100c5a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 100c5a4:	e0bffe17 	ldw	r2,-8(fp)
 100c5a8:	10c00217 	ldw	r3,8(r2)
 100c5ac:	d0a6be17 	ldw	r2,-25864(gp)
 100c5b0:	1880032e 	bgeu	r3,r2,100c5c0 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 100c5b4:	e0fffe17 	ldw	r3,-8(fp)
 100c5b8:	00800044 	movi	r2,1
 100c5bc:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 100c5c0:	e0bfff17 	ldw	r2,-4(fp)
 100c5c4:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 100c5c8:	d0e00e04 	addi	r3,gp,-32712
 100c5cc:	e0bffe17 	ldw	r2,-8(fp)
 100c5d0:	10ffcc1e 	bne	r2,r3,100c504 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 100c5d4:	e037883a 	mov	sp,fp
 100c5d8:	dfc00117 	ldw	ra,4(sp)
 100c5dc:	df000017 	ldw	fp,0(sp)
 100c5e0:	dec00204 	addi	sp,sp,8
 100c5e4:	f800283a 	ret

0100c5e8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 100c5e8:	deffff04 	addi	sp,sp,-4
 100c5ec:	df000015 	stw	fp,0(sp)
 100c5f0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 100c5f4:	000170fa 	wrctl	ienable,zero
}
 100c5f8:	e037883a 	mov	sp,fp
 100c5fc:	df000017 	ldw	fp,0(sp)
 100c600:	dec00104 	addi	sp,sp,4
 100c604:	f800283a 	ret

0100c608 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 100c608:	defffa04 	addi	sp,sp,-24
 100c60c:	dfc00515 	stw	ra,20(sp)
 100c610:	df000415 	stw	fp,16(sp)
 100c614:	df000404 	addi	fp,sp,16
 100c618:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 100c61c:	00804074 	movhi	r2,257
 100c620:	10ba8904 	addi	r2,r2,-5596
 100c624:	10800017 	ldw	r2,0(r2)
 100c628:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100c62c:	00003306 	br	100c6fc <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 100c630:	e0bffd17 	ldw	r2,-12(fp)
 100c634:	11000217 	ldw	r4,8(r2)
 100c638:	10004540 	call	1000454 <strlen>
 100c63c:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 100c640:	e0bffd17 	ldw	r2,-12(fp)
 100c644:	10c00217 	ldw	r3,8(r2)
 100c648:	e0bffc17 	ldw	r2,-16(fp)
 100c64c:	1885883a 	add	r2,r3,r2
 100c650:	10bfffc4 	addi	r2,r2,-1
 100c654:	10800003 	ldbu	r2,0(r2)
 100c658:	10803fcc 	andi	r2,r2,255
 100c65c:	1080201c 	xori	r2,r2,128
 100c660:	10bfe004 	addi	r2,r2,-128
 100c664:	10800bd8 	cmpnei	r2,r2,47
 100c668:	1000031e 	bne	r2,zero,100c678 <alt_find_file+0x70>
    {
      len -= 1;
 100c66c:	e0bffc17 	ldw	r2,-16(fp)
 100c670:	10bfffc4 	addi	r2,r2,-1
 100c674:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100c678:	e0bffc17 	ldw	r2,-16(fp)
 100c67c:	1007883a 	mov	r3,r2
 100c680:	e0bffe17 	ldw	r2,-8(fp)
 100c684:	1885883a 	add	r2,r3,r2
 100c688:	10800003 	ldbu	r2,0(r2)
 100c68c:	10803fcc 	andi	r2,r2,255
 100c690:	1080201c 	xori	r2,r2,128
 100c694:	10bfe004 	addi	r2,r2,-128
 100c698:	10800be0 	cmpeqi	r2,r2,47
 100c69c:	10000a1e 	bne	r2,zero,100c6c8 <alt_find_file+0xc0>
 100c6a0:	e0bffc17 	ldw	r2,-16(fp)
 100c6a4:	1007883a 	mov	r3,r2
 100c6a8:	e0bffe17 	ldw	r2,-8(fp)
 100c6ac:	1885883a 	add	r2,r3,r2
 100c6b0:	10800003 	ldbu	r2,0(r2)
 100c6b4:	10803fcc 	andi	r2,r2,255
 100c6b8:	1080201c 	xori	r2,r2,128
 100c6bc:	10bfe004 	addi	r2,r2,-128
 100c6c0:	1004c03a 	cmpne	r2,r2,zero
 100c6c4:	10000a1e 	bne	r2,zero,100c6f0 <alt_find_file+0xe8>
 100c6c8:	e0bffd17 	ldw	r2,-12(fp)
 100c6cc:	11000217 	ldw	r4,8(r2)
 100c6d0:	e1bffc17 	ldw	r6,-16(fp)
 100c6d4:	e17ffe17 	ldw	r5,-8(fp)
 100c6d8:	100c8440 	call	100c844 <memcmp>
 100c6dc:	1004c03a 	cmpne	r2,r2,zero
 100c6e0:	1000031e 	bne	r2,zero,100c6f0 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 100c6e4:	e0bffd17 	ldw	r2,-12(fp)
 100c6e8:	e0bfff15 	stw	r2,-4(fp)
 100c6ec:	00000806 	br	100c710 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 100c6f0:	e0bffd17 	ldw	r2,-12(fp)
 100c6f4:	10800017 	ldw	r2,0(r2)
 100c6f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 100c6fc:	00c04074 	movhi	r3,257
 100c700:	18fa8904 	addi	r3,r3,-5596
 100c704:	e0bffd17 	ldw	r2,-12(fp)
 100c708:	10ffc91e 	bne	r2,r3,100c630 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 100c70c:	e03fff15 	stw	zero,-4(fp)
 100c710:	e0bfff17 	ldw	r2,-4(fp)
}
 100c714:	e037883a 	mov	sp,fp
 100c718:	dfc00117 	ldw	ra,4(sp)
 100c71c:	df000017 	ldw	fp,0(sp)
 100c720:	dec00204 	addi	sp,sp,8
 100c724:	f800283a 	ret

0100c728 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100c728:	defffa04 	addi	sp,sp,-24
 100c72c:	dfc00515 	stw	ra,20(sp)
 100c730:	df000415 	stw	fp,16(sp)
 100c734:	dc000315 	stw	r16,12(sp)
 100c738:	df000304 	addi	fp,sp,12
 100c73c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 100c740:	00bffa04 	movi	r2,-24
 100c744:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100c748:	e03ffe15 	stw	zero,-8(fp)
 100c74c:	00002006 	br	100c7d0 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 100c750:	e13ffe17 	ldw	r4,-8(fp)
 100c754:	04004074 	movhi	r16,257
 100c758:	84360004 	addi	r16,r16,-10240
 100c75c:	01400304 	movi	r5,12
 100c760:	10096a40 	call	10096a4 <__mulsi3>
 100c764:	1405883a 	add	r2,r2,r16
 100c768:	10800017 	ldw	r2,0(r2)
 100c76c:	1004c03a 	cmpne	r2,r2,zero
 100c770:	1000141e 	bne	r2,zero,100c7c4 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 100c774:	e13ffe17 	ldw	r4,-8(fp)
 100c778:	04004074 	movhi	r16,257
 100c77c:	84360004 	addi	r16,r16,-10240
 100c780:	01400304 	movi	r5,12
 100c784:	10096a40 	call	10096a4 <__mulsi3>
 100c788:	1407883a 	add	r3,r2,r16
 100c78c:	e0bfff17 	ldw	r2,-4(fp)
 100c790:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 100c794:	00804074 	movhi	r2,257
 100c798:	10ba8d04 	addi	r2,r2,-5580
 100c79c:	10c00017 	ldw	r3,0(r2)
 100c7a0:	e0bffe17 	ldw	r2,-8(fp)
 100c7a4:	1880040e 	bge	r3,r2,100c7b8 <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 100c7a8:	00c04074 	movhi	r3,257
 100c7ac:	18fa8d04 	addi	r3,r3,-5580
 100c7b0:	e0bffe17 	ldw	r2,-8(fp)
 100c7b4:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 100c7b8:	e0bffe17 	ldw	r2,-8(fp)
 100c7bc:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 100c7c0:	00000606 	br	100c7dc <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100c7c4:	e0bffe17 	ldw	r2,-8(fp)
 100c7c8:	10800044 	addi	r2,r2,1
 100c7cc:	e0bffe15 	stw	r2,-8(fp)
 100c7d0:	e0bffe17 	ldw	r2,-8(fp)
 100c7d4:	10800810 	cmplti	r2,r2,32
 100c7d8:	103fdd1e 	bne	r2,zero,100c750 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 100c7dc:	e0bffd17 	ldw	r2,-12(fp)
}
 100c7e0:	e037883a 	mov	sp,fp
 100c7e4:	dfc00217 	ldw	ra,8(sp)
 100c7e8:	df000117 	ldw	fp,4(sp)
 100c7ec:	dc000017 	ldw	r16,0(sp)
 100c7f0:	dec00304 	addi	sp,sp,12
 100c7f4:	f800283a 	ret

0100c7f8 <atexit>:
 100c7f8:	200b883a 	mov	r5,r4
 100c7fc:	000d883a 	mov	r6,zero
 100c800:	0009883a 	mov	r4,zero
 100c804:	000f883a 	mov	r7,zero
 100c808:	100c8b81 	jmpi	100c8b8 <__register_exitproc>

0100c80c <exit>:
 100c80c:	defffe04 	addi	sp,sp,-8
 100c810:	000b883a 	mov	r5,zero
 100c814:	dc000015 	stw	r16,0(sp)
 100c818:	dfc00115 	stw	ra,4(sp)
 100c81c:	2021883a 	mov	r16,r4
 100c820:	100c9f00 	call	100c9f0 <__call_exitprocs>
 100c824:	00804074 	movhi	r2,257
 100c828:	10ba8404 	addi	r2,r2,-5616
 100c82c:	11000017 	ldw	r4,0(r2)
 100c830:	20800f17 	ldw	r2,60(r4)
 100c834:	10000126 	beq	r2,zero,100c83c <exit+0x30>
 100c838:	103ee83a 	callr	r2
 100c83c:	8009883a 	mov	r4,r16
 100c840:	100cbe00 	call	100cbe0 <_exit>

0100c844 <memcmp>:
 100c844:	00c000c4 	movi	r3,3
 100c848:	1980032e 	bgeu	r3,r6,100c858 <memcmp+0x14>
 100c84c:	2144b03a 	or	r2,r4,r5
 100c850:	10c4703a 	and	r2,r2,r3
 100c854:	10000f26 	beq	r2,zero,100c894 <memcmp+0x50>
 100c858:	31ffffc4 	addi	r7,r6,-1
 100c85c:	3000061e 	bne	r6,zero,100c878 <memcmp+0x34>
 100c860:	00000a06 	br	100c88c <memcmp+0x48>
 100c864:	39ffffc4 	addi	r7,r7,-1
 100c868:	00bfffc4 	movi	r2,-1
 100c86c:	21000044 	addi	r4,r4,1
 100c870:	29400044 	addi	r5,r5,1
 100c874:	38800526 	beq	r7,r2,100c88c <memcmp+0x48>
 100c878:	20c00003 	ldbu	r3,0(r4)
 100c87c:	28800003 	ldbu	r2,0(r5)
 100c880:	18bff826 	beq	r3,r2,100c864 <memcmp+0x20>
 100c884:	1885c83a 	sub	r2,r3,r2
 100c888:	f800283a 	ret
 100c88c:	0005883a 	mov	r2,zero
 100c890:	f800283a 	ret
 100c894:	180f883a 	mov	r7,r3
 100c898:	20c00017 	ldw	r3,0(r4)
 100c89c:	28800017 	ldw	r2,0(r5)
 100c8a0:	18bfed1e 	bne	r3,r2,100c858 <memcmp+0x14>
 100c8a4:	31bfff04 	addi	r6,r6,-4
 100c8a8:	21000104 	addi	r4,r4,4
 100c8ac:	29400104 	addi	r5,r5,4
 100c8b0:	39bff936 	bltu	r7,r6,100c898 <memcmp+0x54>
 100c8b4:	003fe806 	br	100c858 <memcmp+0x14>

0100c8b8 <__register_exitproc>:
 100c8b8:	defffa04 	addi	sp,sp,-24
 100c8bc:	00804074 	movhi	r2,257
 100c8c0:	10ba8404 	addi	r2,r2,-5616
 100c8c4:	dc000015 	stw	r16,0(sp)
 100c8c8:	14000017 	ldw	r16,0(r2)
 100c8cc:	dd000415 	stw	r20,16(sp)
 100c8d0:	2829883a 	mov	r20,r5
 100c8d4:	81405217 	ldw	r5,328(r16)
 100c8d8:	dcc00315 	stw	r19,12(sp)
 100c8dc:	dc800215 	stw	r18,8(sp)
 100c8e0:	dc400115 	stw	r17,4(sp)
 100c8e4:	dfc00515 	stw	ra,20(sp)
 100c8e8:	2023883a 	mov	r17,r4
 100c8ec:	3027883a 	mov	r19,r6
 100c8f0:	3825883a 	mov	r18,r7
 100c8f4:	28002526 	beq	r5,zero,100c98c <__register_exitproc+0xd4>
 100c8f8:	29000117 	ldw	r4,4(r5)
 100c8fc:	008007c4 	movi	r2,31
 100c900:	11002716 	blt	r2,r4,100c9a0 <__register_exitproc+0xe8>
 100c904:	8800101e 	bne	r17,zero,100c948 <__register_exitproc+0x90>
 100c908:	2105883a 	add	r2,r4,r4
 100c90c:	1085883a 	add	r2,r2,r2
 100c910:	20c00044 	addi	r3,r4,1
 100c914:	1145883a 	add	r2,r2,r5
 100c918:	0009883a 	mov	r4,zero
 100c91c:	15000215 	stw	r20,8(r2)
 100c920:	28c00115 	stw	r3,4(r5)
 100c924:	2005883a 	mov	r2,r4
 100c928:	dfc00517 	ldw	ra,20(sp)
 100c92c:	dd000417 	ldw	r20,16(sp)
 100c930:	dcc00317 	ldw	r19,12(sp)
 100c934:	dc800217 	ldw	r18,8(sp)
 100c938:	dc400117 	ldw	r17,4(sp)
 100c93c:	dc000017 	ldw	r16,0(sp)
 100c940:	dec00604 	addi	sp,sp,24
 100c944:	f800283a 	ret
 100c948:	29802204 	addi	r6,r5,136
 100c94c:	00800044 	movi	r2,1
 100c950:	110e983a 	sll	r7,r2,r4
 100c954:	30c04017 	ldw	r3,256(r6)
 100c958:	2105883a 	add	r2,r4,r4
 100c95c:	1085883a 	add	r2,r2,r2
 100c960:	1185883a 	add	r2,r2,r6
 100c964:	19c6b03a 	or	r3,r3,r7
 100c968:	14802015 	stw	r18,128(r2)
 100c96c:	14c00015 	stw	r19,0(r2)
 100c970:	00800084 	movi	r2,2
 100c974:	30c04015 	stw	r3,256(r6)
 100c978:	88bfe31e 	bne	r17,r2,100c908 <__register_exitproc+0x50>
 100c97c:	30804117 	ldw	r2,260(r6)
 100c980:	11c4b03a 	or	r2,r2,r7
 100c984:	30804115 	stw	r2,260(r6)
 100c988:	003fdf06 	br	100c908 <__register_exitproc+0x50>
 100c98c:	00804074 	movhi	r2,257
 100c990:	10818c04 	addi	r2,r2,1584
 100c994:	100b883a 	mov	r5,r2
 100c998:	80805215 	stw	r2,328(r16)
 100c99c:	003fd606 	br	100c8f8 <__register_exitproc+0x40>
 100c9a0:	00800034 	movhi	r2,0
 100c9a4:	10800004 	addi	r2,r2,0
 100c9a8:	1000021e 	bne	r2,zero,100c9b4 <__register_exitproc+0xfc>
 100c9ac:	013fffc4 	movi	r4,-1
 100c9b0:	003fdc06 	br	100c924 <__register_exitproc+0x6c>
 100c9b4:	01006404 	movi	r4,400
 100c9b8:	103ee83a 	callr	r2
 100c9bc:	1007883a 	mov	r3,r2
 100c9c0:	103ffa26 	beq	r2,zero,100c9ac <__register_exitproc+0xf4>
 100c9c4:	80805217 	ldw	r2,328(r16)
 100c9c8:	180b883a 	mov	r5,r3
 100c9cc:	18000115 	stw	zero,4(r3)
 100c9d0:	18800015 	stw	r2,0(r3)
 100c9d4:	80c05215 	stw	r3,328(r16)
 100c9d8:	18006215 	stw	zero,392(r3)
 100c9dc:	18006315 	stw	zero,396(r3)
 100c9e0:	0009883a 	mov	r4,zero
 100c9e4:	883fc826 	beq	r17,zero,100c908 <__register_exitproc+0x50>
 100c9e8:	003fd706 	br	100c948 <__register_exitproc+0x90>

0100c9ec <register_fini>:
 100c9ec:	f800283a 	ret

0100c9f0 <__call_exitprocs>:
 100c9f0:	00804074 	movhi	r2,257
 100c9f4:	10ba8404 	addi	r2,r2,-5616
 100c9f8:	10800017 	ldw	r2,0(r2)
 100c9fc:	defff304 	addi	sp,sp,-52
 100ca00:	df000b15 	stw	fp,44(sp)
 100ca04:	d8800115 	stw	r2,4(sp)
 100ca08:	00800034 	movhi	r2,0
 100ca0c:	10800004 	addi	r2,r2,0
 100ca10:	1005003a 	cmpeq	r2,r2,zero
 100ca14:	d8800215 	stw	r2,8(sp)
 100ca18:	d8800117 	ldw	r2,4(sp)
 100ca1c:	dd400815 	stw	r21,32(sp)
 100ca20:	dd000715 	stw	r20,28(sp)
 100ca24:	10805204 	addi	r2,r2,328
 100ca28:	dfc00c15 	stw	ra,48(sp)
 100ca2c:	ddc00a15 	stw	r23,40(sp)
 100ca30:	dd800915 	stw	r22,36(sp)
 100ca34:	dcc00615 	stw	r19,24(sp)
 100ca38:	dc800515 	stw	r18,20(sp)
 100ca3c:	dc400415 	stw	r17,16(sp)
 100ca40:	dc000315 	stw	r16,12(sp)
 100ca44:	282b883a 	mov	r21,r5
 100ca48:	2039883a 	mov	fp,r4
 100ca4c:	d8800015 	stw	r2,0(sp)
 100ca50:	2829003a 	cmpeq	r20,r5,zero
 100ca54:	d8800117 	ldw	r2,4(sp)
 100ca58:	14405217 	ldw	r17,328(r2)
 100ca5c:	88001026 	beq	r17,zero,100caa0 <__call_exitprocs+0xb0>
 100ca60:	ddc00017 	ldw	r23,0(sp)
 100ca64:	88800117 	ldw	r2,4(r17)
 100ca68:	8c802204 	addi	r18,r17,136
 100ca6c:	143fffc4 	addi	r16,r2,-1
 100ca70:	80000916 	blt	r16,zero,100ca98 <__call_exitprocs+0xa8>
 100ca74:	05bfffc4 	movi	r22,-1
 100ca78:	a000151e 	bne	r20,zero,100cad0 <__call_exitprocs+0xe0>
 100ca7c:	8409883a 	add	r4,r16,r16
 100ca80:	2105883a 	add	r2,r4,r4
 100ca84:	1485883a 	add	r2,r2,r18
 100ca88:	10c02017 	ldw	r3,128(r2)
 100ca8c:	a8c01126 	beq	r21,r3,100cad4 <__call_exitprocs+0xe4>
 100ca90:	843fffc4 	addi	r16,r16,-1
 100ca94:	85bff81e 	bne	r16,r22,100ca78 <__call_exitprocs+0x88>
 100ca98:	d8800217 	ldw	r2,8(sp)
 100ca9c:	10003126 	beq	r2,zero,100cb64 <__call_exitprocs+0x174>
 100caa0:	dfc00c17 	ldw	ra,48(sp)
 100caa4:	df000b17 	ldw	fp,44(sp)
 100caa8:	ddc00a17 	ldw	r23,40(sp)
 100caac:	dd800917 	ldw	r22,36(sp)
 100cab0:	dd400817 	ldw	r21,32(sp)
 100cab4:	dd000717 	ldw	r20,28(sp)
 100cab8:	dcc00617 	ldw	r19,24(sp)
 100cabc:	dc800517 	ldw	r18,20(sp)
 100cac0:	dc400417 	ldw	r17,16(sp)
 100cac4:	dc000317 	ldw	r16,12(sp)
 100cac8:	dec00d04 	addi	sp,sp,52
 100cacc:	f800283a 	ret
 100cad0:	8409883a 	add	r4,r16,r16
 100cad4:	88c00117 	ldw	r3,4(r17)
 100cad8:	2105883a 	add	r2,r4,r4
 100cadc:	1445883a 	add	r2,r2,r17
 100cae0:	18ffffc4 	addi	r3,r3,-1
 100cae4:	11800217 	ldw	r6,8(r2)
 100cae8:	1c001526 	beq	r3,r16,100cb40 <__call_exitprocs+0x150>
 100caec:	10000215 	stw	zero,8(r2)
 100caf0:	303fe726 	beq	r6,zero,100ca90 <__call_exitprocs+0xa0>
 100caf4:	00c00044 	movi	r3,1
 100caf8:	1c06983a 	sll	r3,r3,r16
 100cafc:	90804017 	ldw	r2,256(r18)
 100cb00:	8cc00117 	ldw	r19,4(r17)
 100cb04:	1884703a 	and	r2,r3,r2
 100cb08:	10001426 	beq	r2,zero,100cb5c <__call_exitprocs+0x16c>
 100cb0c:	90804117 	ldw	r2,260(r18)
 100cb10:	1884703a 	and	r2,r3,r2
 100cb14:	10000c1e 	bne	r2,zero,100cb48 <__call_exitprocs+0x158>
 100cb18:	2105883a 	add	r2,r4,r4
 100cb1c:	1485883a 	add	r2,r2,r18
 100cb20:	11400017 	ldw	r5,0(r2)
 100cb24:	e009883a 	mov	r4,fp
 100cb28:	303ee83a 	callr	r6
 100cb2c:	88800117 	ldw	r2,4(r17)
 100cb30:	98bfc81e 	bne	r19,r2,100ca54 <__call_exitprocs+0x64>
 100cb34:	b8800017 	ldw	r2,0(r23)
 100cb38:	147fd526 	beq	r2,r17,100ca90 <__call_exitprocs+0xa0>
 100cb3c:	003fc506 	br	100ca54 <__call_exitprocs+0x64>
 100cb40:	8c000115 	stw	r16,4(r17)
 100cb44:	003fea06 	br	100caf0 <__call_exitprocs+0x100>
 100cb48:	2105883a 	add	r2,r4,r4
 100cb4c:	1485883a 	add	r2,r2,r18
 100cb50:	11000017 	ldw	r4,0(r2)
 100cb54:	303ee83a 	callr	r6
 100cb58:	003ff406 	br	100cb2c <__call_exitprocs+0x13c>
 100cb5c:	303ee83a 	callr	r6
 100cb60:	003ff206 	br	100cb2c <__call_exitprocs+0x13c>
 100cb64:	88800117 	ldw	r2,4(r17)
 100cb68:	1000081e 	bne	r2,zero,100cb8c <__call_exitprocs+0x19c>
 100cb6c:	89000017 	ldw	r4,0(r17)
 100cb70:	20000726 	beq	r4,zero,100cb90 <__call_exitprocs+0x1a0>
 100cb74:	b9000015 	stw	r4,0(r23)
 100cb78:	8809883a 	mov	r4,r17
 100cb7c:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 100cb80:	bc400017 	ldw	r17,0(r23)
 100cb84:	883fb71e 	bne	r17,zero,100ca64 <__call_exitprocs+0x74>
 100cb88:	003fc506 	br	100caa0 <__call_exitprocs+0xb0>
 100cb8c:	89000017 	ldw	r4,0(r17)
 100cb90:	882f883a 	mov	r23,r17
 100cb94:	2023883a 	mov	r17,r4
 100cb98:	883fb21e 	bne	r17,zero,100ca64 <__call_exitprocs+0x74>
 100cb9c:	003fc006 	br	100caa0 <__call_exitprocs+0xb0>

0100cba0 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 100cba0:	defffd04 	addi	sp,sp,-12
 100cba4:	df000215 	stw	fp,8(sp)
 100cba8:	df000204 	addi	fp,sp,8
 100cbac:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 100cbb0:	e0bfff17 	ldw	r2,-4(fp)
 100cbb4:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 100cbb8:	e0bffe17 	ldw	r2,-8(fp)
 100cbbc:	1005003a 	cmpeq	r2,r2,zero
 100cbc0:	1000021e 	bne	r2,zero,100cbcc <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 100cbc4:	002af070 	cmpltui	zero,zero,43969
 100cbc8:	00000106 	br	100cbd0 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 100cbcc:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 100cbd0:	e037883a 	mov	sp,fp
 100cbd4:	df000017 	ldw	fp,0(sp)
 100cbd8:	dec00104 	addi	sp,sp,4
 100cbdc:	f800283a 	ret

0100cbe0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 100cbe0:	defffd04 	addi	sp,sp,-12
 100cbe4:	dfc00215 	stw	ra,8(sp)
 100cbe8:	df000115 	stw	fp,4(sp)
 100cbec:	df000104 	addi	fp,sp,4
 100cbf0:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 100cbf4:	e13fff17 	ldw	r4,-4(fp)
 100cbf8:	100cba00 	call	100cba0 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 100cbfc:	003fff06 	br	100cbfc <_exit+0x1c>
 100cc00:	0100c9ec 	andhi	r4,zero,807
