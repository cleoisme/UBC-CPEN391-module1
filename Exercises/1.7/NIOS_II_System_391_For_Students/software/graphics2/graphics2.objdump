
graphics2.elf:     file format elf32-littlenios2
graphics2.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x010001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x01000000 paddr 0x01000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x01000020 paddr 0x01000020 align 2**12
         filesz 0x00014170 memsz 0x00014170 flags r-x
    LOAD off    0x00015190 vaddr 0x01014190 paddr 0x01015ca0 align 2**12
         filesz 0x00001b10 memsz 0x00001b10 flags rw-
    LOAD off    0x000177b0 vaddr 0x010177b0 paddr 0x010177b0 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  01000000  01000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  01000020  01000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008e44  010001b8  010001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000b194  01008ffc  01008ffc  00009ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b10  01014190  01015ca0  00015190  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  010177b0  010177b0  000177b0  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000026  00000000  00000000  00016ca0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 00000b98  00000000  00000000  00016cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00001587  00000000  00000000  00017860  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00026d2d  00000000  00000000  00018de7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00006ede  00000000  00000000  0003fb14  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0001126a  00000000  00000000  000469f2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001990  00000000  00000000  00057c5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001dc5  00000000  00000000  000595ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00005ec5  00000000  00000000  0005b3b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00061278  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000310  00000000  00000000  00061288  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000647d1  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000647d4  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000647e0  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000647e1  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  000647e2  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  000647ed  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  000647f8  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  00064803  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000047  00000000  00000000  0006480e  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000813df  00000000  00000000  00064855  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01000000 l    d  .entry	00000000 .entry
01000020 l    d  .exceptions	00000000 .exceptions
010001b8 l    d  .text	00000000 .text
01008ffc l    d  .rodata	00000000 .rodata
01014190 l    d  .rwdata	00000000 .rwdata
010177b0 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
010001f0 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 ColourPalletteData.c
00000000 l    df *ABS*	00000000 OutGraphicsCharFont.c
00000000 l    df *ABS*	00000000 fonts.c
00000000 l    df *ABS*	00000000 graphics.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
01001400 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 fgetc.c
00000000 l    df *ABS*	00000000 findfp.c
01001a38 l     F .text	00000058 std
01001b44 l     F .text	00000008 __fp_lock
01001b4c l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 fopen.c
00000000 l    df *ABS*	00000000 fread.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fseek.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 getc.c
00000000 l    df *ABS*	00000000 impure.c
01014190 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 openr.c
00000000 l    df *ABS*	00000000 perror.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 refill.c
010039c0 l     F .text	0000001c lflush
00000000 l    df *ABS*	00000000 rget.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strerror.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 u_strerr.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 __call_atexit.c
01004360 l     F .text	00000004 register_fini
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 fputc.c
00000000 l    df *ABS*	00000000 fputs.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 alt_close.c
01005a98 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
01005af8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
01005b24 l     F .text	00000040 alt_sim_halt
00000000 l    df *ABS*	00000000 alt_fstat.c
01005c5c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
01005d80 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
01005e60 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
01005fc0 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_open.c
010060cc l     F .text	000000f8 alt_file_locked
01006350 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_read.c
010064d4 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
01015c48 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0100678c l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
01014b40 l     O .rwdata	00001060 jtag_uart_0
01015ba0 l     O .rwdata	00000028 altera_hostfs
01015bc8 l     O .rwdata	0000002c character_lcd_0
01015bf4 l     O .rwdata	0000002c rs232_0
010068a8 l     F .text	00000038 alt_dev_reg
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
01006ae0 l     F .text	0000022c altera_avalon_jtag_uart_irq
01006d0c l     F .text	000000b0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
01007388 l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_hostfs.c
01015c4c l     O .rwdata	00000004 hcinfo.2279
01015c58 l     O .rwdata	00000004 hcinfo.2321
01015c64 l     O .rwdata	00000004 hcinfo.2334
01015c70 l     O .rwdata	00000004 hcinfo.2356
01015c7c l     O .rwdata	00000004 hcinfo.2378
01015c88 l     O .rwdata	00000004 hcinfo.2413
00000000 l    df *ABS*	00000000 altera_up_avalon_character_lcd.c
00000000 l    df *ABS*	00000000 altera_up_avalon_rs232.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
01008510 l     F .text	00000060 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_fs_reg.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
01008968 l     F .text	000000d8 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
01004c0c g     F .text	00000070 _isatty_r
01006020 g     F .text	0000006c alt_main
01003748 g     F .text	000000a0 _puts_r
01017800 g     O .bss	00000100 alt_irq
01004c7c g     F .text	00000078 _lseek_r
01015ca0 g       *ABS*	00000000 __flash_rwdata_start
01007aa0 g     F .text	00000034 alt_up_character_lcd_send_cmd
01004584 g     F .text	000000a0 __sflags
0100130c g     F .text	0000007c ProgramPalette
01017a90 g       *ABS*	00000000 __alt_heap_start
010004b8 g     F .text	00000068 OutGraphicsCharFont2
01009696 g     O .rodata	00000a64 Font10x14
01003ab4 g     F .text	00000068 __sseek
01001aa0 g     F .text	000000a4 __sinit
01000bc0 g     F .text	000001a0 GetClosetColour
01005710 g     F .text	00000130 __swbuf_r
01001ba0 g     F .text	0000009c __sfmoreglue
010060ac g     F .text	00000020 __malloc_unlock
01008188 g     F .text	00000090 alt_up_rs232_read_fd
01007484 g     F .text	00000154 alt_hostfs_open
01003bf8 g     F .text	00000674 strerror
01000f18 g     F .text	000002b4 DrawMap2
01004dd8 g     F .text	000000e0 memmove
01001b90 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
01007a24 g     F .text	0000007c get_DDRAM_addr
01000000 g     F .entry	0000000c __reset
01000520 g     F .text	00000068 OutGraphicsCharFont3
01000020 g       *ABS*	00000000 __flash_exceptions_start
01002928 g     F .text	00000074 _fstat_r
010177b0 g     O .bss	00000004 errno
01003a28 g     F .text	00000014 __srget
010177c4 g     O .bss	00000004 alt_argv
0101dc20 g       *ABS*	00000000 _gp
010149c0 g     O .rwdata	00000180 alt_fd_list
01002bb4 g     F .text	00000090 _getc_r
01002b1c g     F .text	00000098 getc
0100776c g     F .text	000000a0 alt_hostfs_seek
01008638 g     F .text	00000094 alt_find_dev
01003518 g     F .text	000000a0 memcpy
01007c38 g     F .text	0000004c alt_up_character_lcd_write_fd
01001b84 g     F .text	0000000c _cleanup_r
01003734 g     F .text	00000014 perror
010087ec g     F .text	00000090 alt_fs_reg
01008a40 g     F .text	00000078 alt_io_redirect
01008ffc g       *ABS*	00000000 __DTOR_END__
01008114 g     F .text	00000074 alt_up_rs232_read_data
010037e8 g     F .text	00000014 puts
01006f24 g     F .text	00000224 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0100153c g     F .text	00000008 __udivsi3
01005cbc g     F .text	000000c4 isatty
0100e18c g     O .rodata	00005794 Font38x59
01000764 g     F .text	00000090 DrawHorizontalLine
010177b4 g     O .bss	00000004 __malloc_top_pad
01004770 g     F .text	0000049c __sfvwrite_r
010001f4 g     F .text	0000025c OutGraphicsCharFont
01003a3c g     F .text	00000070 _sbrk_r
0100762c g     F .text	000000a0 alt_hostfs_read
010050a4 g     F .text	00000078 _read_r
01015c40 g     O .rwdata	00000004 alt_max_fd
0100807c g     F .text	00000050 alt_up_rs232_check_parity
010015bc g     F .text	00000110 _fclose_r
010018dc g     F .text	00000034 fflush
010177b8 g     O .bss	00000004 __malloc_max_sbrked_mem
01008ab8 g     F .text	000001c0 alt_irq_register
010019a8 g     F .text	00000090 _fgetc_r
01005ecc g     F .text	000000f4 lseek
01015c24 g     O .rwdata	00000004 _global_impure_ptr
0100511c g     F .text	000005f4 _realloc_r
01017a90 g       *ABS*	00000000 __bss_end
01008d10 g     F .text	0000010c alt_tick
01001b6c g     F .text	00000018 __fp_lock_all
01008c78 g     F .text	00000098 alt_alarm_stop
0100a0fa g     O .rodata	0000140a Font16x27
010177cc g     O .bss	00000004 alt_irq_active
010075d8 g     F .text	00000054 alt_hostfs_close
010000ec g     F .exceptions	000000cc alt_irq_handler
01014998 g     O .rwdata	00000028 alt_dev_null
01000450 g     F .text	00000068 OutGraphicsCharFont1
01007f20 g     F .text	00000034 alt_up_character_lcd_cursor_blink_on
01008440 g     F .text	0000001c alt_dcache_flush_all
01015ca0 g       *ABS*	00000000 __ram_rwdata_end
01015c38 g     O .rwdata	00000008 alt_dev_list
01004688 g     F .text	00000058 _fputc_r
01006668 g     F .text	00000124 write
01004fbc g     F .text	000000e8 _putc_r
010007f4 g     F .text	00000090 DrawVerticalLine
01014190 g       *ABS*	00000000 __ram_rodata_end
01005b84 g     F .text	000000d8 fstat
01008218 g     F .text	00000094 alt_up_rs232_write_fd
01001544 g     F .text	00000008 __umodsi3
01017a90 g       *ABS*	00000000 end
01002904 g     F .text	00000024 fseek
01006a28 g     F .text	000000b8 altera_avalon_jtag_uart_init
01008ff8 g       *ABS*	00000000 __CTOR_LIST__
01800000 g       *ABS*	00000000 __alt_stack_pointer
010073fc g     F .text	00000088 alt_avalon_timer_sc_init
01007148 g     F .text	00000240 altera_avalon_jtag_uart_write
01001a90 g     F .text	00000004 __sfp_lock_acquire
01004cf4 g     F .text	000000e4 memchr
01007b48 g     F .text	00000078 alt_up_character_lcd_write
010021b4 g     F .text	00000314 _free_r
010039dc g     F .text	0000004c __srget_r
01004364 g     F .text	000001b0 __call_exitprocs
01015c2c g     O .rwdata	00000004 __malloc_sbrk_base
010001b8 g     F .text	0000003c _start
010177d0 g     O .bss	00000004 _alt_tick_rate
010042e0 g     F .text	00000008 _user_strerror
010177d4 g     O .bss	00000004 _alt_nticks
010063b0 g     F .text	00000124 read
01006820 g     F .text	00000088 alt_sys_init
01007dac g     F .text	000000b0 alt_up_character_lcd_shift_display
01003650 g     F .text	00000078 _open_r
01008ec4 g     F .text	00000134 __register_exitproc
0100803c g     F .text	00000040 alt_up_rs232_get_available_space_in_write_FIFO
01007e5c g     F .text	00000090 alt_up_character_lcd_erase_pos
01006dbc g     F .text	00000074 altera_avalon_jtag_uart_close
0100154c g     F .text	00000038 __mulsi3
01014190 g       *ABS*	00000000 __ram_rwdata_start
01008ffc g       *ABS*	00000000 __ram_rodata_start
010177d8 g     O .bss	00000028 __malloc_current_mallinfo
010068e0 g     F .text	00000058 altera_avalon_jtag_uart_read_fd
0100887c g     F .text	000000d0 alt_get_fd
01004514 g     F .text	00000070 _close_r
01008e50 g     F .text	00000074 memcmp
01006990 g     F .text	00000048 altera_avalon_jtag_uart_close_fd
01017a90 g       *ABS*	00000000 __alt_stack_base
010069d8 g     F .text	00000050 altera_avalon_jtag_uart_ioctl_fd
0100585c g     F .text	0000013c __swsetup_r
01001c3c g     F .text	000000f0 __sfp
01014590 g     O .rwdata	00000408 __malloc_av_
01001a9c g     F .text	00000004 __sinit_lock_release
01003b98 g     F .text	00000060 __sread
01002048 g     F .text	00000040 fread
01007fa8 g     F .text	00000058 alt_up_rs232_disable_read_interrupt
010086cc g     F .text	00000120 alt_find_file
0100845c g     F .text	000000b4 alt_dev_llist_insert
0100608c g     F .text	00000020 __malloc_lock
010065ac g     F .text	000000bc sbrk
010016e0 g     F .text	000001fc _fflush_r
01001e20 g     F .text	0000001c fopen
010177b0 g       *ABS*	00000000 __bss_start
01000884 g     F .text	000000a0 DrawBresenhamLine
010035b8 g     F .text	00000098 memset
01001388 g     F .text	00000078 main
010177c8 g     O .bss	00000004 alt_envp
010177bc g     O .bss	00000004 __malloc_max_total_mem
01006938 g     F .text	00000058 altera_avalon_jtag_uart_write_fd
01005840 g     F .text	0000001c __swbuf
010006d4 g     F .text	00000090 ReadAPixel
01001e3c g     F .text	0000020c _fread_r
01007cfc g     F .text	000000b0 alt_up_character_lcd_shift_cursor
01003aac g     F .text	00000008 __sclose
01800000 g       *ABS*	00000000 __alt_heap_limit
010016cc g     F .text	00000014 fclose
01017900 g     O .bss	00000190 _atexit0
01002dd8 g     F .text	00000740 _malloc_r
010005f0 g     F .text	00000068 OutGraphicsCharFont5
01015c44 g     O .rwdata	00000004 alt_errno
01002a64 g     F .text	000000b8 _fwalk
01004eb8 g     F .text	00000104 putc
0100147c g     F .text	00000060 __divsi3
01007b08 g     F .text	00000040 alt_up_character_lcd_open_dev
01002088 g     F .text	0000012c _malloc_trim_r
01008ffc g       *ABS*	00000000 __CTOR_END__
01007ad4 g     F .text	00000034 alt_up_character_lcd_init
01008ffc g       *ABS*	00000000 __flash_rodata_start
01008ffc g       *ABS*	00000000 __DTOR_LIST__
010082ac g     F .text	00000040 alt_up_rs232_open_dev
010067ec g     F .text	00000034 alt_irq_init
01006534 g     F .text	00000078 alt_release_fd
01001910 g     F .text	00000098 fgetc
01007eec g     F .text	00000034 alt_up_character_lcd_cursor_off
01008e3c g     F .text	00000014 atexit
010042e8 g     F .text	00000078 _write_r
01015c20 g     O .rwdata	00000004 _impure_ptr
010177c0 g     O .bss	00000004 alt_argc
01000658 g     F .text	0000007c WriteAPixel
010085d4 g     F .text	00000064 _do_dtors
01000924 g     F .text	000000bc DrawString1
010024c8 g     F .text	0000043c _fseek_r
010037fc g     F .text	000001c4 __srefill_r
010093fc g     O .rodata	00000299 Font5x7
01000020 g       .exceptions	00000000 alt_irq_entry
01001b54 g     F .text	00000018 __fp_unlock_all
01004624 g     F .text	00000064 fputc
010009e0 g     F .text	000000bc DrawString2
01015c30 g     O .rwdata	00000008 alt_fs_list
01007f54 g     F .text	00000054 alt_up_rs232_enable_read_interrupt
010076cc g     F .text	000000a0 alt_hostfs_write
010080cc g     F .text	00000048 alt_up_rs232_write_data
01000588 g     F .text	00000068 OutGraphicsCharFont4
01000020 g       *ABS*	00000000 __ram_exceptions_start
01000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
01015ca0 g       *ABS*	00000000 _edata
01017a90 g       *ABS*	00000000 _end
010001b8 g       *ABS*	00000000 __ram_exceptions_end
01006e30 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
010046e0 g     F .text	00000074 _fputs_r
01003b1c g     F .text	0000007c __swrite
01015c28 g     O .rwdata	00000004 __malloc_trim_threshold
010036c8 g     F .text	0000006c _perror_r
01008e1c g     F .text	00000020 altera_nios2_qsys_irq_init
01001584 g     F .text	00000038 exit
0100299c g     F .text	000000c8 _fwalk_reent
010014dc g     F .text	00000060 __modsi3
01800000 g       *ABS*	00000000 __alt_data_end
01000020 g     F .exceptions	00000000 alt_exception
01001a94 g     F .text	00000004 __sfp_lock_release
01008ffc g     O .rodata	00000400 ColourPalletteData
01007bc0 g     F .text	00000078 alt_up_character_lcd_string
0100b504 g     O .rodata	00002c88 Font22x40
01000b20 g     F .text	000000a0 DrawFilledRectangle
01001d2c g     F .text	000000f4 _fopen_r
01005b64 g     F .text	00000020 _exit
010082ec g     F .text	00000154 alt_alarm_start
01002c44 g     F .text	00000194 __smakebuf_r
0100426c g     F .text	00000074 strlen
010061c4 g     F .text	0000018c open
01000a9c g     F .text	00000084 DrawRectangle
0100894c g     F .text	0000001c alt_icache_flush_all
01004754 g     F .text	0000001c fputs
01007c84 g     F .text	00000078 alt_up_character_lcd_set_cursor_pos
01015c94 g     O .rwdata	00000004 alt_priority_mask
01015c98 g     O .rwdata	00000008 alt_alarm_list
01008570 g     F .text	00000064 _do_ctors
01008000 g     F .text	0000003c alt_up_rs232_get_used_space_in_read_FIFO
01005998 g     F .text	00000100 close
01000d60 g     F .text	000001b8 DrawMap
010011cc g     F .text	00000140 TestShapes
01005de0 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
01001a98 g     F .text	00000004 __sinit_lock_acquire
0100780c g     F .text	00000218 alt_hostfs_fstat



Disassembly of section .entry:

01000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 1000000:	00404034 	movhi	at,256
    ori r1, r1, %lo(_start)
 1000004:	08406e14 	ori	at,at,440
    jmp r1
 1000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

01000020 <alt_exception>:
         * Process an exception.  For all exceptions we must preserve all
         * caller saved registers on the stack (See the Nios2 ABI
         * documentation for details).
         */

        addi  sp, sp, -76
 1000020:	deffed04 	addi	sp,sp,-76

#endif

#endif

        stw   ra,  0(sp)
 1000024:	dfc00015 	stw	ra,0(sp)
        /*
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */

        stw   r1,   8(sp)
 1000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 100002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 1000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 1000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 1000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 100003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 1000040:	d9c00815 	stw	r7,32(sp)

        rdctl r5, estatus
 1000044:	000b307a 	rdctl	r5,estatus

        stw   r8,  36(sp)
 1000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 100004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 1000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 1000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 1000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 100005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 1000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 1000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 1000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 100006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 1000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 1000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 1000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 100007c:	10000326 	beq	r2,zero,100008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 1000080:	20000226 	beq	r4,zero,100008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 1000084:	10000ec0 	call	10000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 1000088:	00000306 	br	1000098 <alt_exception+0x78>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 100008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 1000090:	e8bfff17 	ldw	r2,-4(ea)
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 1000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 1000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 100009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 10000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 10000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 10000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 10000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 10000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 10000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 10000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 10000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 10000c0:	d9c00817 	ldw	r7,32(sp)
#ifdef ALT_STACK_CHECK
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif
#endif

        ldw   r8,  36(sp)
 10000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 10000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 10000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 10000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 10000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 10000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 10000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 10000e0:	dbc01017 	ldw	r15,64(sp)
#endif

        ldw   sp,  76(sp)

#else
        addi  sp, sp, 76
 10000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 10000e8:	ef80083a 	eret

010000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 10000ec:	defff904 	addi	sp,sp,-28
 10000f0:	dfc00615 	stw	ra,24(sp)
 10000f4:	df000515 	stw	fp,20(sp)
 10000f8:	df000504 	addi	fp,sp,20
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 10000fc:	0005313a 	rdctl	r2,ipending
 1000100:	e0bffc15 	stw	r2,-16(fp)

  return active;
 1000104:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 1000108:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 100010c:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 1000110:	00800044 	movi	r2,1
 1000114:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 1000118:	e0ffff17 	ldw	r3,-4(fp)
 100011c:	e0bffe17 	ldw	r2,-8(fp)
 1000120:	1884703a 	and	r2,r3,r2
 1000124:	1005003a 	cmpeq	r2,r2,zero
 1000128:	1000171e 	bne	r2,zero,1000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 100012c:	e0bffd17 	ldw	r2,-12(fp)
 1000130:	00c04074 	movhi	r3,257
 1000134:	18de0004 	addi	r3,r3,30720
 1000138:	100490fa 	slli	r2,r2,3
 100013c:	10c5883a 	add	r2,r2,r3
 1000140:	11800017 	ldw	r6,0(r2)
 1000144:	e0bffd17 	ldw	r2,-12(fp)
 1000148:	00c04074 	movhi	r3,257
 100014c:	18de0004 	addi	r3,r3,30720
 1000150:	100490fa 	slli	r2,r2,3
 1000154:	10c5883a 	add	r2,r2,r3
 1000158:	10800104 	addi	r2,r2,4
 100015c:	11000017 	ldw	r4,0(r2)
 1000160:	e17ffd17 	ldw	r5,-12(fp)
 1000164:	303ee83a 	callr	r6
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 1000168:	0005313a 	rdctl	r2,ipending
 100016c:	e0bffb15 	stw	r2,-20(fp)

  return active;
 1000170:	e0bffb17 	ldw	r2,-20(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 1000174:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 1000178:	e0bfff17 	ldw	r2,-4(fp)
 100017c:	1004c03a 	cmpne	r2,r2,zero
 1000180:	103fe21e 	bne	r2,zero,100010c <alt_irq_handler+0x20>
 1000184:	00000706 	br	10001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 1000188:	e0bffe17 	ldw	r2,-8(fp)
 100018c:	1085883a 	add	r2,r2,r2
 1000190:	e0bffe15 	stw	r2,-8(fp)
      i++;
 1000194:	e0bffd17 	ldw	r2,-12(fp)
 1000198:	10800044 	addi	r2,r2,1
 100019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 10001a0:	003fdd06 	br	1000118 <alt_irq_handler+0x2c>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 10001a4:	e037883a 	mov	sp,fp
 10001a8:	dfc00117 	ldw	ra,4(sp)
 10001ac:	df000017 	ldw	fp,0(sp)
 10001b0:	dec00204 	addi	sp,sp,8
 10001b4:	f800283a 	ret

Disassembly of section .text:

010001b8 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 10001b8:	06c06034 	movhi	sp,384
    ori sp, sp, %lo(__alt_stack_pointer)
 10001bc:	dec00014 	ori	sp,sp,0

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
 10001c0:	06804074 	movhi	gp,257
    ori gp, gp, %lo(_gp)
 10001c4:	d6b70814 	ori	gp,gp,56352
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 10001c8:	00804074 	movhi	r2,257
    ori r2, r2, %lo(__bss_start)
 10001cc:	109dec14 	ori	r2,r2,30640

    movhi r3, %hi(__bss_end)
 10001d0:	00c04074 	movhi	r3,257
    ori r3, r3, %lo(__bss_end)
 10001d4:	18dea414 	ori	r3,r3,31376

    beq r2, r3, 1f
 10001d8:	10c00326 	beq	r2,r3,10001e8 <_start+0x30>

0:
    stw zero, (r2)
 10001dc:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 10001e0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 10001e4:	10fffd36 	bltu	r2,r3,10001dc <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 10001e8:	1005de00 	call	1005de0 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 10001ec:	10060200 	call	1006020 <alt_main>

010001f0 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 10001f0:	003fff06 	br	10001f0 <alt_after_alt_main>

010001f4 <OutGraphicsCharFont>:
extern const unsigned short int Font10x14[][14];
extern const unsigned char Font16x27[];
extern const unsigned char Font22x40[];
extern const unsigned char Font38x59[];

void OutGraphicsCharFont(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase, int fontWidth, int fontHeight){
 10001f4:	defff004 	addi	sp,sp,-64
 10001f8:	dfc00f15 	stw	ra,60(sp)
 10001fc:	df000e15 	stw	fp,56(sp)
 1000200:	dc400d15 	stw	r17,52(sp)
 1000204:	dc000c15 	stw	r16,48(sp)
 1000208:	df000c04 	addi	fp,sp,48
 100020c:	e13ff415 	stw	r4,-48(fp)
 1000210:	e17ff515 	stw	r5,-44(fp)
 1000214:	e1bff615 	stw	r6,-40(fp)
 1000218:	e1fff715 	stw	r7,-36(fp)

	register int row, column, theX = x, theY = y ;
 100021c:	e0bff417 	ldw	r2,-48(fp)
 1000220:	e0bffd15 	stw	r2,-12(fp)
 1000224:	e0fff517 	ldw	r3,-44(fp)
 1000228:	e0fffc15 	stw	r3,-16(fp)
	register int pixels ;
	register char theColour = fontcolour  ;
 100022c:	e0bff617 	ldw	r2,-40(fp)
 1000230:	e0bffa05 	stb	r2,-24(fp)
	register int BitMask, theC = c ;
 1000234:	e1000417 	ldw	r4,16(fp)
 1000238:	e13ff815 	stw	r4,-32(fp)

	// if x,y coord off edge of screen don't bother
	// XRES and YRES are #defined to be 800 and 480 respectively
    if(((short)(x) > (short)(XRES-1)) || ((short)(y) > (short)(YRES-1)))
 100023c:	e0bff417 	ldw	r2,-48(fp)
 1000240:	10bfffcc 	andi	r2,r2,65535
 1000244:	10a0001c 	xori	r2,r2,32768
 1000248:	10a00004 	addi	r2,r2,-32768
 100024c:	1080c808 	cmpgei	r2,r2,800
 1000250:	1000781e 	bne	r2,zero,1000434 <OutGraphicsCharFont+0x240>
 1000254:	e0bff517 	ldw	r2,-44(fp)
 1000258:	10bfffcc 	andi	r2,r2,65535
 100025c:	10a0001c 	xori	r2,r2,32768
 1000260:	10a00004 	addi	r2,r2,-32768
 1000264:	10807810 	cmplti	r2,r2,480
 1000268:	1000011e 	bne	r2,zero,1000270 <OutGraphicsCharFont+0x7c>
        return ;
 100026c:	00007106 	br	1000434 <OutGraphicsCharFont+0x240>

	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
 1000270:	e0fff817 	ldw	r3,-32(fp)
 1000274:	1805883a 	mov	r2,r3
 1000278:	10bfffcc 	andi	r2,r2,65535
 100027c:	10a0001c 	xori	r2,r2,32768
 1000280:	10a00004 	addi	r2,r2,-32768
 1000284:	10800810 	cmplti	r2,r2,32
 1000288:	10006a1e 	bne	r2,zero,1000434 <OutGraphicsCharFont+0x240>
 100028c:	e13ff817 	ldw	r4,-32(fp)
 1000290:	2005883a 	mov	r2,r4
 1000294:	10bfffcc 	andi	r2,r2,65535
 1000298:	10a0001c 	xori	r2,r2,32768
 100029c:	10a00004 	addi	r2,r2,-32768
 10002a0:	10801fc8 	cmpgei	r2,r2,127
 10002a4:	1000631e 	bne	r2,zero,1000434 <OutGraphicsCharFont+0x240>
		theC = theC - 0x20 ;
 10002a8:	e0bff817 	ldw	r2,-32(fp)
 10002ac:	10bff804 	addi	r2,r2,-32
 10002b0:	e0bff815 	stw	r2,-32(fp)
		for(row = 0; (char)(row) < (char)(fontHeight); row ++)	{
 10002b4:	e03fff15 	stw	zero,-4(fp)
 10002b8:	00005406 	br	100040c <OutGraphicsCharFont+0x218>

			// get the bit pattern for row 0 of the character from the software font

			if (fontWidth == 5){
 10002bc:	e0800617 	ldw	r2,24(fp)
 10002c0:	10800158 	cmpnei	r2,r2,5
 10002c4:	10000c1e 	bne	r2,zero,10002f8 <OutGraphicsCharFont+0x104>
				pixels = Font5x7[theC][row];
 10002c8:	e13ff817 	ldw	r4,-32(fp)
 10002cc:	e47fff17 	ldw	r17,-4(fp)
 10002d0:	04004074 	movhi	r16,257
 10002d4:	8424ff04 	addi	r16,r16,-27652
 10002d8:	014001c4 	movi	r5,7
 10002dc:	100154c0 	call	100154c <__mulsi3>
 10002e0:	1405883a 	add	r2,r2,r16
 10002e4:	1445883a 	add	r2,r2,r17
 10002e8:	10800003 	ldbu	r2,0(r2)
 10002ec:	10803fcc 	andi	r2,r2,255
 10002f0:	e0bffb15 	stw	r2,-20(fp)
 10002f4:	00000f06 	br	1000334 <OutGraphicsCharFont+0x140>
			}
			else if (fontWidth == 10){
 10002f8:	e0800617 	ldw	r2,24(fp)
 10002fc:	10800298 	cmpnei	r2,r2,10
 1000300:	10000c1e 	bne	r2,zero,1000334 <OutGraphicsCharFont+0x140>
				pixels = Font10x14[theC][row];
 1000304:	e13ff817 	ldw	r4,-32(fp)
 1000308:	e43fff17 	ldw	r16,-4(fp)
 100030c:	04404074 	movhi	r17,257
 1000310:	8c65a584 	addi	r17,r17,-26986
 1000314:	01400384 	movi	r5,14
 1000318:	100154c0 	call	100154c <__mulsi3>
 100031c:	1405883a 	add	r2,r2,r16
 1000320:	1085883a 	add	r2,r2,r2
 1000324:	1445883a 	add	r2,r2,r17
 1000328:	1080000b 	ldhu	r2,0(r2)
 100032c:	10bfffcc 	andi	r2,r2,65535
 1000330:	e0bffb15 	stw	r2,-20(fp)
			}

			BitMask =  1 << fontWidth - 1;
 1000334:	e0800617 	ldw	r2,24(fp)
 1000338:	10ffffc4 	addi	r3,r2,-1
 100033c:	00800044 	movi	r2,1
 1000340:	10c4983a 	sll	r2,r2,r3
 1000344:	e0bff915 	stw	r2,-28(fp)

			for(column = 0; (char)(column) < (char)(fontWidth); column ++)	{
 1000348:	e03ffe15 	stw	zero,-8(fp)
 100034c:	00002206 	br	10003d8 <OutGraphicsCharFont+0x1e4>

				// if a pixel in the character display it
				if((pixels & BitMask))
 1000350:	e0fffb17 	ldw	r3,-20(fp)
 1000354:	e13ff917 	ldw	r4,-28(fp)
 1000358:	1904703a 	and	r2,r3,r4
 100035c:	1005003a 	cmpeq	r2,r2,zero
 1000360:	10000c1e 	bne	r2,zero,1000394 <OutGraphicsCharFont+0x1a0>
					WriteAPixel(theX+column, theY+row, theColour) ;
 1000364:	e0bffd17 	ldw	r2,-12(fp)
 1000368:	e0fffe17 	ldw	r3,-8(fp)
 100036c:	10c9883a 	add	r4,r2,r3
 1000370:	e0bffc17 	ldw	r2,-16(fp)
 1000374:	e0ffff17 	ldw	r3,-4(fp)
 1000378:	10cb883a 	add	r5,r2,r3
 100037c:	e0bffa03 	ldbu	r2,-24(fp)
 1000380:	11803fcc 	andi	r6,r2,255
 1000384:	3180201c 	xori	r6,r6,128
 1000388:	31bfe004 	addi	r6,r6,-128
 100038c:	10006580 	call	1000658 <WriteAPixel>
 1000390:	00000b06 	br	10003c0 <OutGraphicsCharFont+0x1cc>

				else {
					if(Erase == TRUE)
 1000394:	e0800517 	ldw	r2,20(fp)
 1000398:	10800058 	cmpnei	r2,r2,1
 100039c:	1000081e 	bne	r2,zero,10003c0 <OutGraphicsCharFont+0x1cc>

				// if pixel is part of background (not part of character)
				// erase the background to value of variable BackGroundColour

						WriteAPixel(theX+column, theY+row, backgroundcolour) ;
 10003a0:	e0fffd17 	ldw	r3,-12(fp)
 10003a4:	e0bffe17 	ldw	r2,-8(fp)
 10003a8:	1889883a 	add	r4,r3,r2
 10003ac:	e0fffc17 	ldw	r3,-16(fp)
 10003b0:	e0bfff17 	ldw	r2,-4(fp)
 10003b4:	188b883a 	add	r5,r3,r2
 10003b8:	e1bff717 	ldw	r6,-36(fp)
 10003bc:	10006580 	call	1000658 <WriteAPixel>
				}
				BitMask = BitMask >> 1 ;
 10003c0:	e0fff917 	ldw	r3,-28(fp)
 10003c4:	1807d07a 	srai	r3,r3,1
 10003c8:	e0fff915 	stw	r3,-28(fp)
				pixels = Font10x14[theC][row];
			}

			BitMask =  1 << fontWidth - 1;

			for(column = 0; (char)(column) < (char)(fontWidth); column ++)	{
 10003cc:	e13ffe17 	ldw	r4,-8(fp)
 10003d0:	21000044 	addi	r4,r4,1
 10003d4:	e13ffe15 	stw	r4,-8(fp)
 10003d8:	e0bffe17 	ldw	r2,-8(fp)
 10003dc:	1007883a 	mov	r3,r2
 10003e0:	e0800617 	ldw	r2,24(fp)
 10003e4:	18c03fcc 	andi	r3,r3,255
 10003e8:	18c0201c 	xori	r3,r3,128
 10003ec:	18ffe004 	addi	r3,r3,-128
 10003f0:	10803fcc 	andi	r2,r2,255
 10003f4:	1080201c 	xori	r2,r2,128
 10003f8:	10bfe004 	addi	r2,r2,-128
 10003fc:	18bfd416 	blt	r3,r2,1000350 <OutGraphicsCharFont+0x15c>
        return ;

	// if printable character subtract hex 20
	if(((short)(theC) >= (short)(' ')) && ((short)(theC) <= (short)('~'))) {
		theC = theC - 0x20 ;
		for(row = 0; (char)(row) < (char)(fontHeight); row ++)	{
 1000400:	e0ffff17 	ldw	r3,-4(fp)
 1000404:	18c00044 	addi	r3,r3,1
 1000408:	e0ffff15 	stw	r3,-4(fp)
 100040c:	e13fff17 	ldw	r4,-4(fp)
 1000410:	2007883a 	mov	r3,r4
 1000414:	e0800717 	ldw	r2,28(fp)
 1000418:	18c03fcc 	andi	r3,r3,255
 100041c:	18c0201c 	xori	r3,r3,128
 1000420:	18ffe004 	addi	r3,r3,-128
 1000424:	10803fcc 	andi	r2,r2,255
 1000428:	1080201c 	xori	r2,r2,128
 100042c:	10bfe004 	addi	r2,r2,-128
 1000430:	18bfa216 	blt	r3,r2,10002bc <OutGraphicsCharFont+0xc8>
				}
				BitMask = BitMask >> 1 ;
			}
		}
	}
}
 1000434:	e037883a 	mov	sp,fp
 1000438:	dfc00317 	ldw	ra,12(sp)
 100043c:	df000217 	ldw	fp,8(sp)
 1000440:	dc400117 	ldw	r17,4(sp)
 1000444:	dc000017 	ldw	r16,0(sp)
 1000448:	dec00404 	addi	sp,sp,16
 100044c:	f800283a 	ret

01000450 <OutGraphicsCharFont1>:

void OutGraphicsCharFont1(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 1000450:	defff604 	addi	sp,sp,-40
 1000454:	dfc00915 	stw	ra,36(sp)
 1000458:	df000815 	stw	fp,32(sp)
 100045c:	df000804 	addi	fp,sp,32
 1000460:	e13ffc15 	stw	r4,-16(fp)
 1000464:	e17ffd15 	stw	r5,-12(fp)
 1000468:	e1bffe15 	stw	r6,-8(fp)
 100046c:	e1ffff15 	stw	r7,-4(fp)
	OutGraphicsCharFont(x, y, fontcolour, backgroundcolour, c, Erase, 5, 7);
 1000470:	e0800217 	ldw	r2,8(fp)
 1000474:	d8800015 	stw	r2,0(sp)
 1000478:	e0800317 	ldw	r2,12(fp)
 100047c:	d8800115 	stw	r2,4(sp)
 1000480:	00800144 	movi	r2,5
 1000484:	d8800215 	stw	r2,8(sp)
 1000488:	008001c4 	movi	r2,7
 100048c:	d8800315 	stw	r2,12(sp)
 1000490:	e13ffc17 	ldw	r4,-16(fp)
 1000494:	e17ffd17 	ldw	r5,-12(fp)
 1000498:	e1bffe17 	ldw	r6,-8(fp)
 100049c:	e1ffff17 	ldw	r7,-4(fp)
 10004a0:	10001f40 	call	10001f4 <OutGraphicsCharFont>
}
 10004a4:	e037883a 	mov	sp,fp
 10004a8:	dfc00117 	ldw	ra,4(sp)
 10004ac:	df000017 	ldw	fp,0(sp)
 10004b0:	dec00204 	addi	sp,sp,8
 10004b4:	f800283a 	ret

010004b8 <OutGraphicsCharFont2>:

void OutGraphicsCharFont2(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 10004b8:	defff604 	addi	sp,sp,-40
 10004bc:	dfc00915 	stw	ra,36(sp)
 10004c0:	df000815 	stw	fp,32(sp)
 10004c4:	df000804 	addi	fp,sp,32
 10004c8:	e13ffc15 	stw	r4,-16(fp)
 10004cc:	e17ffd15 	stw	r5,-12(fp)
 10004d0:	e1bffe15 	stw	r6,-8(fp)
 10004d4:	e1ffff15 	stw	r7,-4(fp)
	OutGraphicsCharFont(x, y, fontcolour, backgroundcolour, c, Erase, 10, 14);
 10004d8:	e0800217 	ldw	r2,8(fp)
 10004dc:	d8800015 	stw	r2,0(sp)
 10004e0:	e0800317 	ldw	r2,12(fp)
 10004e4:	d8800115 	stw	r2,4(sp)
 10004e8:	00800284 	movi	r2,10
 10004ec:	d8800215 	stw	r2,8(sp)
 10004f0:	00800384 	movi	r2,14
 10004f4:	d8800315 	stw	r2,12(sp)
 10004f8:	e13ffc17 	ldw	r4,-16(fp)
 10004fc:	e17ffd17 	ldw	r5,-12(fp)
 1000500:	e1bffe17 	ldw	r6,-8(fp)
 1000504:	e1ffff17 	ldw	r7,-4(fp)
 1000508:	10001f40 	call	10001f4 <OutGraphicsCharFont>
}
 100050c:	e037883a 	mov	sp,fp
 1000510:	dfc00117 	ldw	ra,4(sp)
 1000514:	df000017 	ldw	fp,0(sp)
 1000518:	dec00204 	addi	sp,sp,8
 100051c:	f800283a 	ret

01000520 <OutGraphicsCharFont3>:

void OutGraphicsCharFont3(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 1000520:	defff604 	addi	sp,sp,-40
 1000524:	dfc00915 	stw	ra,36(sp)
 1000528:	df000815 	stw	fp,32(sp)
 100052c:	df000804 	addi	fp,sp,32
 1000530:	e13ffc15 	stw	r4,-16(fp)
 1000534:	e17ffd15 	stw	r5,-12(fp)
 1000538:	e1bffe15 	stw	r6,-8(fp)
 100053c:	e1ffff15 	stw	r7,-4(fp)
	OutGraphicsCharFont(x, y, fontcolour, backgroundcolour, c, Erase, 16, 27);
 1000540:	e0800217 	ldw	r2,8(fp)
 1000544:	d8800015 	stw	r2,0(sp)
 1000548:	e0800317 	ldw	r2,12(fp)
 100054c:	d8800115 	stw	r2,4(sp)
 1000550:	00800404 	movi	r2,16
 1000554:	d8800215 	stw	r2,8(sp)
 1000558:	008006c4 	movi	r2,27
 100055c:	d8800315 	stw	r2,12(sp)
 1000560:	e13ffc17 	ldw	r4,-16(fp)
 1000564:	e17ffd17 	ldw	r5,-12(fp)
 1000568:	e1bffe17 	ldw	r6,-8(fp)
 100056c:	e1ffff17 	ldw	r7,-4(fp)
 1000570:	10001f40 	call	10001f4 <OutGraphicsCharFont>
}
 1000574:	e037883a 	mov	sp,fp
 1000578:	dfc00117 	ldw	ra,4(sp)
 100057c:	df000017 	ldw	fp,0(sp)
 1000580:	dec00204 	addi	sp,sp,8
 1000584:	f800283a 	ret

01000588 <OutGraphicsCharFont4>:

void OutGraphicsCharFont4(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 1000588:	defff604 	addi	sp,sp,-40
 100058c:	dfc00915 	stw	ra,36(sp)
 1000590:	df000815 	stw	fp,32(sp)
 1000594:	df000804 	addi	fp,sp,32
 1000598:	e13ffc15 	stw	r4,-16(fp)
 100059c:	e17ffd15 	stw	r5,-12(fp)
 10005a0:	e1bffe15 	stw	r6,-8(fp)
 10005a4:	e1ffff15 	stw	r7,-4(fp)
	OutGraphicsCharFont(x, y, fontcolour, backgroundcolour, c, Erase, 22, 40);
 10005a8:	e0800217 	ldw	r2,8(fp)
 10005ac:	d8800015 	stw	r2,0(sp)
 10005b0:	e0800317 	ldw	r2,12(fp)
 10005b4:	d8800115 	stw	r2,4(sp)
 10005b8:	00800584 	movi	r2,22
 10005bc:	d8800215 	stw	r2,8(sp)
 10005c0:	00800a04 	movi	r2,40
 10005c4:	d8800315 	stw	r2,12(sp)
 10005c8:	e13ffc17 	ldw	r4,-16(fp)
 10005cc:	e17ffd17 	ldw	r5,-12(fp)
 10005d0:	e1bffe17 	ldw	r6,-8(fp)
 10005d4:	e1ffff17 	ldw	r7,-4(fp)
 10005d8:	10001f40 	call	10001f4 <OutGraphicsCharFont>
}
 10005dc:	e037883a 	mov	sp,fp
 10005e0:	dfc00117 	ldw	ra,4(sp)
 10005e4:	df000017 	ldw	fp,0(sp)
 10005e8:	dec00204 	addi	sp,sp,8
 10005ec:	f800283a 	ret

010005f0 <OutGraphicsCharFont5>:

void OutGraphicsCharFont5(int x, int y, int fontcolour, int backgroundcolour, int c, int Erase)
{
 10005f0:	defff604 	addi	sp,sp,-40
 10005f4:	dfc00915 	stw	ra,36(sp)
 10005f8:	df000815 	stw	fp,32(sp)
 10005fc:	df000804 	addi	fp,sp,32
 1000600:	e13ffc15 	stw	r4,-16(fp)
 1000604:	e17ffd15 	stw	r5,-12(fp)
 1000608:	e1bffe15 	stw	r6,-8(fp)
 100060c:	e1ffff15 	stw	r7,-4(fp)
	OutGraphicsCharFont(x, y, fontcolour, backgroundcolour, c, Erase, 38, 59);
 1000610:	e0800217 	ldw	r2,8(fp)
 1000614:	d8800015 	stw	r2,0(sp)
 1000618:	e0800317 	ldw	r2,12(fp)
 100061c:	d8800115 	stw	r2,4(sp)
 1000620:	00800984 	movi	r2,38
 1000624:	d8800215 	stw	r2,8(sp)
 1000628:	00800ec4 	movi	r2,59
 100062c:	d8800315 	stw	r2,12(sp)
 1000630:	e13ffc17 	ldw	r4,-16(fp)
 1000634:	e17ffd17 	ldw	r5,-12(fp)
 1000638:	e1bffe17 	ldw	r6,-8(fp)
 100063c:	e1ffff17 	ldw	r7,-4(fp)
 1000640:	10001f40 	call	10001f4 <OutGraphicsCharFont>
}
 1000644:	e037883a 	mov	sp,fp
 1000648:	dfc00117 	ldw	ra,4(sp)
 100064c:	df000017 	ldw	fp,0(sp)
 1000650:	dec00204 	addi	sp,sp,8
 1000654:	f800283a 	ret

01000658 <WriteAPixel>:
/**********************************************************************
* This function writes a single pixel to the x,y coords specified in the specified colour
* Note colour is a palette number (0-255) not a 24 bit RGB value
**********************************************************************/
void WriteAPixel (int x, int y, int Colour)
{
 1000658:	defffc04 	addi	sp,sp,-16
 100065c:	df000315 	stw	fp,12(sp)
 1000660:	df000304 	addi	fp,sp,12
 1000664:	e13ffd15 	stw	r4,-12(fp)
 1000668:	e17ffe15 	stw	r5,-8(fp)
 100066c:	e1bfff15 	stw	r6,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 1000670:	00a10034 	movhi	r2,33792
 1000674:	1080000b 	ldhu	r2,0(r2)
 1000678:	10bfffcc 	andi	r2,r2,65535
 100067c:	1080004c 	andi	r2,r2,1
 1000680:	1005003a 	cmpeq	r2,r2,zero
 1000684:	103ffa1e 	bne	r2,zero,1000670 <WriteAPixel+0x18>

	GraphicsX1Reg = x;			// write coords to x1, y1
 1000688:	00e10034 	movhi	r3,33792
 100068c:	18c00084 	addi	r3,r3,2
 1000690:	e0bffd17 	ldw	r2,-12(fp)
 1000694:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y;
 1000698:	00e10034 	movhi	r3,33792
 100069c:	18c00104 	addi	r3,r3,4
 10006a0:	e0bffe17 	ldw	r2,-8(fp)
 10006a4:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour;		// set pixel colour with a palette number
 10006a8:	00e10034 	movhi	r3,33792
 10006ac:	18c00384 	addi	r3,r3,14
 10006b0:	e0bfff17 	ldw	r2,-4(fp)
 10006b4:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = PutAPixel;		// give graphics a "write pixel" command
 10006b8:	00e10034 	movhi	r3,33792
 10006bc:	00800284 	movi	r2,10
 10006c0:	1880000d 	sth	r2,0(r3)
}
 10006c4:	e037883a 	mov	sp,fp
 10006c8:	df000017 	ldw	fp,0(sp)
 10006cc:	dec00104 	addi	sp,sp,4
 10006d0:	f800283a 	ret

010006d4 <ReadAPixel>:
/*****************************************************************************************
* This function read a single pixel from x,y coords specified and returns its colour
* Note returned colour is a palette number (0-255) not a 24 bit RGB value
******************************************************************************************/
int ReadAPixel (int x, int y)
{
 10006d4:	defffd04 	addi	sp,sp,-12
 10006d8:	df000215 	stw	fp,8(sp)
 10006dc:	df000204 	addi	fp,sp,8
 10006e0:	e13ffe15 	stw	r4,-8(fp)
 10006e4:	e17fff15 	stw	r5,-4(fp)
	WAIT_FOR_GRAPHICS;			// is graphics ready for new command
 10006e8:	00a10034 	movhi	r2,33792
 10006ec:	1080000b 	ldhu	r2,0(r2)
 10006f0:	10bfffcc 	andi	r2,r2,65535
 10006f4:	1080004c 	andi	r2,r2,1
 10006f8:	1005003a 	cmpeq	r2,r2,zero
 10006fc:	103ffa1e 	bne	r2,zero,10006e8 <ReadAPixel+0x14>

	GraphicsX1Reg = x;			// write coords to x1, y1
 1000700:	00e10034 	movhi	r3,33792
 1000704:	18c00084 	addi	r3,r3,2
 1000708:	e0bffe17 	ldw	r2,-8(fp)
 100070c:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y;
 1000710:	00e10034 	movhi	r3,33792
 1000714:	18c00104 	addi	r3,r3,4
 1000718:	e0bfff17 	ldw	r2,-4(fp)
 100071c:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = GetAPixel;		// give graphics a "get pixel" command
 1000720:	00e10034 	movhi	r3,33792
 1000724:	008002c4 	movi	r2,11
 1000728:	1880000d 	sth	r2,0(r3)

	WAIT_FOR_GRAPHICS;			// is graphics done reading pixel
 100072c:	00a10034 	movhi	r2,33792
 1000730:	1080000b 	ldhu	r2,0(r2)
 1000734:	10bfffcc 	andi	r2,r2,65535
 1000738:	1080004c 	andi	r2,r2,1
 100073c:	1005003a 	cmpeq	r2,r2,zero
 1000740:	103ffa1e 	bne	r2,zero,100072c <ReadAPixel+0x58>
	return (int)(GraphicsColourReg) ;		// return the palette number (colour)
 1000744:	00a10034 	movhi	r2,33792
 1000748:	10800384 	addi	r2,r2,14
 100074c:	1080000b 	ldhu	r2,0(r2)
 1000750:	10bfffcc 	andi	r2,r2,65535
}
 1000754:	e037883a 	mov	sp,fp
 1000758:	df000017 	ldw	fp,0(sp)
 100075c:	dec00104 	addi	sp,sp,4
 1000760:	f800283a 	ret

01000764 <DrawHorizontalLine>:

void DrawHorizontalLine(int x1, int x2, int y, int Colour)
{
 1000764:	defffb04 	addi	sp,sp,-20
 1000768:	df000415 	stw	fp,16(sp)
 100076c:	df000404 	addi	fp,sp,16
 1000770:	e13ffc15 	stw	r4,-16(fp)
 1000774:	e17ffd15 	stw	r5,-12(fp)
 1000778:	e1bffe15 	stw	r6,-8(fp)
 100077c:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 1000780:	00a10034 	movhi	r2,33792
 1000784:	1080000b 	ldhu	r2,0(r2)
 1000788:	10bfffcc 	andi	r2,r2,65535
 100078c:	1080004c 	andi	r2,r2,1
 1000790:	1005003a 	cmpeq	r2,r2,zero
 1000794:	103ffa1e 	bne	r2,zero,1000780 <DrawHorizontalLine+0x1c>

	GraphicsX1Reg = x1;
 1000798:	00e10034 	movhi	r3,33792
 100079c:	18c00084 	addi	r3,r3,2
 10007a0:	e0bffc17 	ldw	r2,-16(fp)
 10007a4:	1880000d 	sth	r2,0(r3)
	GraphicsX2Reg = x2;
 10007a8:	00e10034 	movhi	r3,33792
 10007ac:	18c00184 	addi	r3,r3,6
 10007b0:	e0bffd17 	ldw	r2,-12(fp)
 10007b4:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y;
 10007b8:	00e10034 	movhi	r3,33792
 10007bc:	18c00104 	addi	r3,r3,4
 10007c0:	e0bffe17 	ldw	r2,-8(fp)
 10007c4:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour;
 10007c8:	00e10034 	movhi	r3,33792
 10007cc:	18c00384 	addi	r3,r3,14
 10007d0:	e0bfff17 	ldw	r2,-4(fp)
 10007d4:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = DrawHLine;
 10007d8:	00e10034 	movhi	r3,33792
 10007dc:	00800044 	movi	r2,1
 10007e0:	1880000d 	sth	r2,0(r3)
}
 10007e4:	e037883a 	mov	sp,fp
 10007e8:	df000017 	ldw	fp,0(sp)
 10007ec:	dec00104 	addi	sp,sp,4
 10007f0:	f800283a 	ret

010007f4 <DrawVerticalLine>:

void DrawVerticalLine(int y1, int y2, int x, int Colour)
{
 10007f4:	defffb04 	addi	sp,sp,-20
 10007f8:	df000415 	stw	fp,16(sp)
 10007fc:	df000404 	addi	fp,sp,16
 1000800:	e13ffc15 	stw	r4,-16(fp)
 1000804:	e17ffd15 	stw	r5,-12(fp)
 1000808:	e1bffe15 	stw	r6,-8(fp)
 100080c:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 1000810:	00a10034 	movhi	r2,33792
 1000814:	1080000b 	ldhu	r2,0(r2)
 1000818:	10bfffcc 	andi	r2,r2,65535
 100081c:	1080004c 	andi	r2,r2,1
 1000820:	1005003a 	cmpeq	r2,r2,zero
 1000824:	103ffa1e 	bne	r2,zero,1000810 <DrawVerticalLine+0x1c>

	GraphicsY1Reg = y1;
 1000828:	00e10034 	movhi	r3,33792
 100082c:	18c00104 	addi	r3,r3,4
 1000830:	e0bffc17 	ldw	r2,-16(fp)
 1000834:	1880000d 	sth	r2,0(r3)
	GraphicsY2Reg = y2;
 1000838:	00e10034 	movhi	r3,33792
 100083c:	18c00204 	addi	r3,r3,8
 1000840:	e0bffd17 	ldw	r2,-12(fp)
 1000844:	1880000d 	sth	r2,0(r3)
	GraphicsX1Reg = x;
 1000848:	00e10034 	movhi	r3,33792
 100084c:	18c00084 	addi	r3,r3,2
 1000850:	e0bffe17 	ldw	r2,-8(fp)
 1000854:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour;
 1000858:	00e10034 	movhi	r3,33792
 100085c:	18c00384 	addi	r3,r3,14
 1000860:	e0bfff17 	ldw	r2,-4(fp)
 1000864:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = DrawVLine;
 1000868:	00e10034 	movhi	r3,33792
 100086c:	00800084 	movi	r2,2
 1000870:	1880000d 	sth	r2,0(r3)
}
 1000874:	e037883a 	mov	sp,fp
 1000878:	df000017 	ldw	fp,0(sp)
 100087c:	dec00104 	addi	sp,sp,4
 1000880:	f800283a 	ret

01000884 <DrawBresenhamLine>:

void DrawBresenhamLine(int x1, int x2, int y1, int y2, int Colour)
{
 1000884:	defffb04 	addi	sp,sp,-20
 1000888:	df000415 	stw	fp,16(sp)
 100088c:	df000404 	addi	fp,sp,16
 1000890:	e13ffc15 	stw	r4,-16(fp)
 1000894:	e17ffd15 	stw	r5,-12(fp)
 1000898:	e1bffe15 	stw	r6,-8(fp)
 100089c:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 10008a0:	00a10034 	movhi	r2,33792
 10008a4:	1080000b 	ldhu	r2,0(r2)
 10008a8:	10bfffcc 	andi	r2,r2,65535
 10008ac:	1080004c 	andi	r2,r2,1
 10008b0:	1005003a 	cmpeq	r2,r2,zero
 10008b4:	103ffa1e 	bne	r2,zero,10008a0 <DrawBresenhamLine+0x1c>

	GraphicsX1Reg = x1;
 10008b8:	00e10034 	movhi	r3,33792
 10008bc:	18c00084 	addi	r3,r3,2
 10008c0:	e0bffc17 	ldw	r2,-16(fp)
 10008c4:	1880000d 	sth	r2,0(r3)
	GraphicsX2Reg = x2;
 10008c8:	00e10034 	movhi	r3,33792
 10008cc:	18c00184 	addi	r3,r3,6
 10008d0:	e0bffd17 	ldw	r2,-12(fp)
 10008d4:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y1;
 10008d8:	00e10034 	movhi	r3,33792
 10008dc:	18c00104 	addi	r3,r3,4
 10008e0:	e0bffe17 	ldw	r2,-8(fp)
 10008e4:	1880000d 	sth	r2,0(r3)
	GraphicsY2Reg = y2;
 10008e8:	00e10034 	movhi	r3,33792
 10008ec:	18c00204 	addi	r3,r3,8
 10008f0:	e0bfff17 	ldw	r2,-4(fp)
 10008f4:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = Colour;
 10008f8:	00e10034 	movhi	r3,33792
 10008fc:	18c00384 	addi	r3,r3,14
 1000900:	e0800117 	ldw	r2,4(fp)
 1000904:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = DrawLine;
 1000908:	00e10034 	movhi	r3,33792
 100090c:	008000c4 	movi	r2,3
 1000910:	1880000d 	sth	r2,0(r3)
}
 1000914:	e037883a 	mov	sp,fp
 1000918:	df000017 	ldw	fp,0(sp)
 100091c:	dec00104 	addi	sp,sp,4
 1000920:	f800283a 	ret

01000924 <DrawString1>:

void DrawString1(int x, int y, int colour, int background, char* string, int erase){
 1000924:	defff704 	addi	sp,sp,-36
 1000928:	dfc00815 	stw	ra,32(sp)
 100092c:	df000715 	stw	fp,28(sp)
 1000930:	df000704 	addi	fp,sp,28
 1000934:	e13ffc15 	stw	r4,-16(fp)
 1000938:	e17ffd15 	stw	r5,-12(fp)
 100093c:	e1bffe15 	stw	r6,-8(fp)
 1000940:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for (i = 0; string[i] != '\0'; ++i){
 1000944:	e03ffb15 	stw	zero,-20(fp)
 1000948:	00001606 	br	10009a4 <DrawString1+0x80>
		OutGraphicsCharFont1(x, y, colour, background, string[i], erase);
 100094c:	e0bffb17 	ldw	r2,-20(fp)
 1000950:	1007883a 	mov	r3,r2
 1000954:	e0800217 	ldw	r2,8(fp)
 1000958:	1885883a 	add	r2,r3,r2
 100095c:	10800003 	ldbu	r2,0(r2)
 1000960:	10803fcc 	andi	r2,r2,255
 1000964:	1080201c 	xori	r2,r2,128
 1000968:	10bfe004 	addi	r2,r2,-128
 100096c:	d8800015 	stw	r2,0(sp)
 1000970:	e0800317 	ldw	r2,12(fp)
 1000974:	d8800115 	stw	r2,4(sp)
 1000978:	e13ffc17 	ldw	r4,-16(fp)
 100097c:	e17ffd17 	ldw	r5,-12(fp)
 1000980:	e1bffe17 	ldw	r6,-8(fp)
 1000984:	e1ffff17 	ldw	r7,-4(fp)
 1000988:	10004500 	call	1000450 <OutGraphicsCharFont1>
		x += 10;
 100098c:	e0bffc17 	ldw	r2,-16(fp)
 1000990:	10800284 	addi	r2,r2,10
 1000994:	e0bffc15 	stw	r2,-16(fp)
	GraphicsCommandReg = DrawLine;
}

void DrawString1(int x, int y, int colour, int background, char* string, int erase){
	int i;
	for (i = 0; string[i] != '\0'; ++i){
 1000998:	e0bffb17 	ldw	r2,-20(fp)
 100099c:	10800044 	addi	r2,r2,1
 10009a0:	e0bffb15 	stw	r2,-20(fp)
 10009a4:	e0bffb17 	ldw	r2,-20(fp)
 10009a8:	1007883a 	mov	r3,r2
 10009ac:	e0800217 	ldw	r2,8(fp)
 10009b0:	1885883a 	add	r2,r3,r2
 10009b4:	10800003 	ldbu	r2,0(r2)
 10009b8:	10803fcc 	andi	r2,r2,255
 10009bc:	1080201c 	xori	r2,r2,128
 10009c0:	10bfe004 	addi	r2,r2,-128
 10009c4:	1004c03a 	cmpne	r2,r2,zero
 10009c8:	103fe01e 	bne	r2,zero,100094c <DrawString1+0x28>
		OutGraphicsCharFont1(x, y, colour, background, string[i], erase);
		x += 10;
	}
}
 10009cc:	e037883a 	mov	sp,fp
 10009d0:	dfc00117 	ldw	ra,4(sp)
 10009d4:	df000017 	ldw	fp,0(sp)
 10009d8:	dec00204 	addi	sp,sp,8
 10009dc:	f800283a 	ret

010009e0 <DrawString2>:

void DrawString2(int x, int y, int colour, int background, char* string, int erase){
 10009e0:	defff704 	addi	sp,sp,-36
 10009e4:	dfc00815 	stw	ra,32(sp)
 10009e8:	df000715 	stw	fp,28(sp)
 10009ec:	df000704 	addi	fp,sp,28
 10009f0:	e13ffc15 	stw	r4,-16(fp)
 10009f4:	e17ffd15 	stw	r5,-12(fp)
 10009f8:	e1bffe15 	stw	r6,-8(fp)
 10009fc:	e1ffff15 	stw	r7,-4(fp)
	int i;
	for (i = 0; string[i] != '\0'; ++i){
 1000a00:	e03ffb15 	stw	zero,-20(fp)
 1000a04:	00001606 	br	1000a60 <DrawString2+0x80>
		OutGraphicsCharFont2(x, y, colour, background, string[i], erase);
 1000a08:	e0bffb17 	ldw	r2,-20(fp)
 1000a0c:	1007883a 	mov	r3,r2
 1000a10:	e0800217 	ldw	r2,8(fp)
 1000a14:	1885883a 	add	r2,r3,r2
 1000a18:	10800003 	ldbu	r2,0(r2)
 1000a1c:	10803fcc 	andi	r2,r2,255
 1000a20:	1080201c 	xori	r2,r2,128
 1000a24:	10bfe004 	addi	r2,r2,-128
 1000a28:	d8800015 	stw	r2,0(sp)
 1000a2c:	e0800317 	ldw	r2,12(fp)
 1000a30:	d8800115 	stw	r2,4(sp)
 1000a34:	e13ffc17 	ldw	r4,-16(fp)
 1000a38:	e17ffd17 	ldw	r5,-12(fp)
 1000a3c:	e1bffe17 	ldw	r6,-8(fp)
 1000a40:	e1ffff17 	ldw	r7,-4(fp)
 1000a44:	10004b80 	call	10004b8 <OutGraphicsCharFont2>
		x += 14;
 1000a48:	e0bffc17 	ldw	r2,-16(fp)
 1000a4c:	10800384 	addi	r2,r2,14
 1000a50:	e0bffc15 	stw	r2,-16(fp)
	}
}

void DrawString2(int x, int y, int colour, int background, char* string, int erase){
	int i;
	for (i = 0; string[i] != '\0'; ++i){
 1000a54:	e0bffb17 	ldw	r2,-20(fp)
 1000a58:	10800044 	addi	r2,r2,1
 1000a5c:	e0bffb15 	stw	r2,-20(fp)
 1000a60:	e0bffb17 	ldw	r2,-20(fp)
 1000a64:	1007883a 	mov	r3,r2
 1000a68:	e0800217 	ldw	r2,8(fp)
 1000a6c:	1885883a 	add	r2,r3,r2
 1000a70:	10800003 	ldbu	r2,0(r2)
 1000a74:	10803fcc 	andi	r2,r2,255
 1000a78:	1080201c 	xori	r2,r2,128
 1000a7c:	10bfe004 	addi	r2,r2,-128
 1000a80:	1004c03a 	cmpne	r2,r2,zero
 1000a84:	103fe01e 	bne	r2,zero,1000a08 <DrawString2+0x28>
		OutGraphicsCharFont2(x, y, colour, background, string[i], erase);
		x += 14;
	}
}
 1000a88:	e037883a 	mov	sp,fp
 1000a8c:	dfc00117 	ldw	ra,4(sp)
 1000a90:	df000017 	ldw	fp,0(sp)
 1000a94:	dec00204 	addi	sp,sp,8
 1000a98:	f800283a 	ret

01000a9c <DrawRectangle>:

void DrawRectangle(int x1, int x2, int y1, int y2, int colour){
 1000a9c:	defffa04 	addi	sp,sp,-24
 1000aa0:	dfc00515 	stw	ra,20(sp)
 1000aa4:	df000415 	stw	fp,16(sp)
 1000aa8:	df000404 	addi	fp,sp,16
 1000aac:	e13ffc15 	stw	r4,-16(fp)
 1000ab0:	e17ffd15 	stw	r5,-12(fp)
 1000ab4:	e1bffe15 	stw	r6,-8(fp)
 1000ab8:	e1ffff15 	stw	r7,-4(fp)
	DrawHorizontalLine(x1, x2, y1, colour);
 1000abc:	e13ffc17 	ldw	r4,-16(fp)
 1000ac0:	e17ffd17 	ldw	r5,-12(fp)
 1000ac4:	e1bffe17 	ldw	r6,-8(fp)
 1000ac8:	e1c00217 	ldw	r7,8(fp)
 1000acc:	10007640 	call	1000764 <DrawHorizontalLine>
	DrawHorizontalLine(x1, x2, y2, colour);
 1000ad0:	e13ffc17 	ldw	r4,-16(fp)
 1000ad4:	e17ffd17 	ldw	r5,-12(fp)
 1000ad8:	e1bfff17 	ldw	r6,-4(fp)
 1000adc:	e1c00217 	ldw	r7,8(fp)
 1000ae0:	10007640 	call	1000764 <DrawHorizontalLine>
	DrawVerticalLine(y1, y2, x1, colour);
 1000ae4:	e13ffe17 	ldw	r4,-8(fp)
 1000ae8:	e17fff17 	ldw	r5,-4(fp)
 1000aec:	e1bffc17 	ldw	r6,-16(fp)
 1000af0:	e1c00217 	ldw	r7,8(fp)
 1000af4:	10007f40 	call	10007f4 <DrawVerticalLine>
	DrawVerticalLine(y1, y2, x2, colour);
 1000af8:	e13ffe17 	ldw	r4,-8(fp)
 1000afc:	e17fff17 	ldw	r5,-4(fp)
 1000b00:	e1bffd17 	ldw	r6,-12(fp)
 1000b04:	e1c00217 	ldw	r7,8(fp)
 1000b08:	10007f40 	call	10007f4 <DrawVerticalLine>
}
 1000b0c:	e037883a 	mov	sp,fp
 1000b10:	dfc00117 	ldw	ra,4(sp)
 1000b14:	df000017 	ldw	fp,0(sp)
 1000b18:	dec00204 	addi	sp,sp,8
 1000b1c:	f800283a 	ret

01000b20 <DrawFilledRectangle>:

void DrawFilledRectangle(int x1, int x2, int y1, int y2, int colour){
 1000b20:	defffb04 	addi	sp,sp,-20
 1000b24:	df000415 	stw	fp,16(sp)
 1000b28:	df000404 	addi	fp,sp,16
 1000b2c:	e13ffc15 	stw	r4,-16(fp)
 1000b30:	e17ffd15 	stw	r5,-12(fp)
 1000b34:	e1bffe15 	stw	r6,-8(fp)
 1000b38:	e1ffff15 	stw	r7,-4(fp)
	WAIT_FOR_GRAPHICS;
 1000b3c:	00a10034 	movhi	r2,33792
 1000b40:	1080000b 	ldhu	r2,0(r2)
 1000b44:	10bfffcc 	andi	r2,r2,65535
 1000b48:	1080004c 	andi	r2,r2,1
 1000b4c:	1005003a 	cmpeq	r2,r2,zero
 1000b50:	103ffa1e 	bne	r2,zero,1000b3c <DrawFilledRectangle+0x1c>
	GraphicsX1Reg = x1;
 1000b54:	00e10034 	movhi	r3,33792
 1000b58:	18c00084 	addi	r3,r3,2
 1000b5c:	e0bffc17 	ldw	r2,-16(fp)
 1000b60:	1880000d 	sth	r2,0(r3)
	GraphicsX2Reg = x2;
 1000b64:	00e10034 	movhi	r3,33792
 1000b68:	18c00184 	addi	r3,r3,6
 1000b6c:	e0bffd17 	ldw	r2,-12(fp)
 1000b70:	1880000d 	sth	r2,0(r3)
	GraphicsY1Reg = y1;
 1000b74:	00e10034 	movhi	r3,33792
 1000b78:	18c00104 	addi	r3,r3,4
 1000b7c:	e0bffe17 	ldw	r2,-8(fp)
 1000b80:	1880000d 	sth	r2,0(r3)
	GraphicsY2Reg = y2;
 1000b84:	00e10034 	movhi	r3,33792
 1000b88:	18c00204 	addi	r3,r3,8
 1000b8c:	e0bfff17 	ldw	r2,-4(fp)
 1000b90:	1880000d 	sth	r2,0(r3)
	GraphicsColourReg = colour;
 1000b94:	00e10034 	movhi	r3,33792
 1000b98:	18c00384 	addi	r3,r3,14
 1000b9c:	e0800117 	ldw	r2,4(fp)
 1000ba0:	1880000d 	sth	r2,0(r3)
	GraphicsCommandReg = DrawFilledRect;
 1000ba4:	00e10034 	movhi	r3,33792
 1000ba8:	00800104 	movi	r2,4
 1000bac:	1880000d 	sth	r2,0(r3)
}
 1000bb0:	e037883a 	mov	sp,fp
 1000bb4:	df000017 	ldw	fp,0(sp)
 1000bb8:	dec00104 	addi	sp,sp,4
 1000bbc:	f800283a 	ret

01000bc0 <GetClosetColour>:

int GetClosetColour(int r, int g, int b){
 1000bc0:	defff004 	addi	sp,sp,-64
 1000bc4:	df000f15 	stw	fp,60(sp)
 1000bc8:	df000f04 	addi	fp,sp,60
 1000bcc:	e13ff815 	stw	r4,-32(fp)
 1000bd0:	e17ff915 	stw	r5,-28(fp)
 1000bd4:	e1bffa15 	stw	r6,-24(fp)
	Colour c = 0;
 1000bd8:	e03ff715 	stw	zero,-36(fp)
	int minDiff = 256 * 3;
 1000bdc:	0080c004 	movi	r2,768
 1000be0:	e0bff615 	stw	r2,-40(fp)
	Colour minC = 0;
 1000be4:	e03ff515 	stw	zero,-44(fp)
	for (c = BLACK; c <= WHITE_REPEAT; ++c){
 1000be8:	e03ff715 	stw	zero,-36(fp)
 1000bec:	00005206 	br	1000d38 <GetClosetColour+0x178>
		int currR = ColourPalletteData[c] >> 16;
 1000bf0:	e0bff717 	ldw	r2,-36(fp)
 1000bf4:	00c04074 	movhi	r3,257
 1000bf8:	18e3ff04 	addi	r3,r3,-28676
 1000bfc:	1085883a 	add	r2,r2,r2
 1000c00:	1085883a 	add	r2,r2,r2
 1000c04:	10c5883a 	add	r2,r2,r3
 1000c08:	10800017 	ldw	r2,0(r2)
 1000c0c:	1004d43a 	srli	r2,r2,16
 1000c10:	e0bff415 	stw	r2,-48(fp)
		int currG = (ColourPalletteData[c] & 0x00FF00) >> 8;
 1000c14:	e0bff717 	ldw	r2,-36(fp)
 1000c18:	00c04074 	movhi	r3,257
 1000c1c:	18e3ff04 	addi	r3,r3,-28676
 1000c20:	1085883a 	add	r2,r2,r2
 1000c24:	1085883a 	add	r2,r2,r2
 1000c28:	10c5883a 	add	r2,r2,r3
 1000c2c:	10800017 	ldw	r2,0(r2)
 1000c30:	10bfc00c 	andi	r2,r2,65280
 1000c34:	1004d23a 	srli	r2,r2,8
 1000c38:	e0bff315 	stw	r2,-52(fp)
		int currB = ColourPalletteData[c] & 0x0000FF;
 1000c3c:	e0bff717 	ldw	r2,-36(fp)
 1000c40:	00c04074 	movhi	r3,257
 1000c44:	18e3ff04 	addi	r3,r3,-28676
 1000c48:	1085883a 	add	r2,r2,r2
 1000c4c:	1085883a 	add	r2,r2,r2
 1000c50:	10c5883a 	add	r2,r2,r3
 1000c54:	10800017 	ldw	r2,0(r2)
 1000c58:	10803fcc 	andi	r2,r2,255
 1000c5c:	e0bff215 	stw	r2,-56(fp)
		int currDiff = abs(r - currR) + abs(g - currG) + abs(b - currB);
 1000c60:	e0fff817 	ldw	r3,-32(fp)
 1000c64:	e0bff417 	ldw	r2,-48(fp)
 1000c68:	1885c83a 	sub	r2,r3,r2
 1000c6c:	e0bfff15 	stw	r2,-4(fp)
 1000c70:	e0ffff17 	ldw	r3,-4(fp)
 1000c74:	1804403a 	cmpge	r2,r3,zero
 1000c78:	1000031e 	bne	r2,zero,1000c88 <GetClosetColour+0xc8>
 1000c7c:	e13fff17 	ldw	r4,-4(fp)
 1000c80:	0109c83a 	sub	r4,zero,r4
 1000c84:	e13fff15 	stw	r4,-4(fp)
 1000c88:	e0fff917 	ldw	r3,-28(fp)
 1000c8c:	e0bff317 	ldw	r2,-52(fp)
 1000c90:	1885c83a 	sub	r2,r3,r2
 1000c94:	e0bffe15 	stw	r2,-8(fp)
 1000c98:	e0fffe17 	ldw	r3,-8(fp)
 1000c9c:	1804403a 	cmpge	r2,r3,zero
 1000ca0:	1000031e 	bne	r2,zero,1000cb0 <GetClosetColour+0xf0>
 1000ca4:	e13ffe17 	ldw	r4,-8(fp)
 1000ca8:	0109c83a 	sub	r4,zero,r4
 1000cac:	e13ffe15 	stw	r4,-8(fp)
 1000cb0:	e0bfff17 	ldw	r2,-4(fp)
 1000cb4:	e0fffe17 	ldw	r3,-8(fp)
 1000cb8:	10c5883a 	add	r2,r2,r3
 1000cbc:	e0bffd15 	stw	r2,-12(fp)
 1000cc0:	e0fffa17 	ldw	r3,-24(fp)
 1000cc4:	e0bff217 	ldw	r2,-56(fp)
 1000cc8:	1885c83a 	sub	r2,r3,r2
 1000ccc:	e0bffc15 	stw	r2,-16(fp)
 1000cd0:	e13ffc17 	ldw	r4,-16(fp)
 1000cd4:	2004403a 	cmpge	r2,r4,zero
 1000cd8:	1000031e 	bne	r2,zero,1000ce8 <GetClosetColour+0x128>
 1000cdc:	e0bffc17 	ldw	r2,-16(fp)
 1000ce0:	0085c83a 	sub	r2,zero,r2
 1000ce4:	e0bffc15 	stw	r2,-16(fp)
 1000ce8:	e0fffd17 	ldw	r3,-12(fp)
 1000cec:	e13ffc17 	ldw	r4,-16(fp)
 1000cf0:	1905883a 	add	r2,r3,r4
 1000cf4:	e0bff115 	stw	r2,-60(fp)
		if (currDiff < minDiff){
 1000cf8:	e0fff117 	ldw	r3,-60(fp)
 1000cfc:	e0bff617 	ldw	r2,-40(fp)
 1000d00:	1880040e 	bge	r3,r2,1000d14 <GetClosetColour+0x154>
			minDiff = currDiff;
 1000d04:	e0bff117 	ldw	r2,-60(fp)
 1000d08:	e0bff615 	stw	r2,-40(fp)
			minC = c;
 1000d0c:	e0bff717 	ldw	r2,-36(fp)
 1000d10:	e0bff515 	stw	r2,-44(fp)
		}
		if (minDiff <= 70){
 1000d14:	e0bff617 	ldw	r2,-40(fp)
 1000d18:	108011c8 	cmpgei	r2,r2,71
 1000d1c:	1000031e 	bne	r2,zero,1000d2c <GetClosetColour+0x16c>
			return minC;
 1000d20:	e0bff517 	ldw	r2,-44(fp)
 1000d24:	e0bffb15 	stw	r2,-20(fp)
 1000d28:	00000806 	br	1000d4c <GetClosetColour+0x18c>

int GetClosetColour(int r, int g, int b){
	Colour c = 0;
	int minDiff = 256 * 3;
	Colour minC = 0;
	for (c = BLACK; c <= WHITE_REPEAT; ++c){
 1000d2c:	e0bff717 	ldw	r2,-36(fp)
 1000d30:	10800044 	addi	r2,r2,1
 1000d34:	e0bff715 	stw	r2,-36(fp)
 1000d38:	e0bff717 	ldw	r2,-36(fp)
 1000d3c:	108025f0 	cmpltui	r2,r2,151
 1000d40:	103fab1e 	bne	r2,zero,1000bf0 <GetClosetColour+0x30>
		if (minDiff <= 70){
			return minC;
		}
	}

	return minC;
 1000d44:	e0fff517 	ldw	r3,-44(fp)
 1000d48:	e0fffb15 	stw	r3,-20(fp)
 1000d4c:	e0bffb17 	ldw	r2,-20(fp)
}
 1000d50:	e037883a 	mov	sp,fp
 1000d54:	df000017 	ldw	fp,0(sp)
 1000d58:	dec00104 	addi	sp,sp,4
 1000d5c:	f800283a 	ret

01000d60 <DrawMap>:

// Draws a map from a 24-bit bitmap where the lower left is at (x,y) and option to scale the image (stretch)
void DrawMap(char *fileName, int x, int y, int length, int width, int scale){
 1000d60:	deffef04 	addi	sp,sp,-68
 1000d64:	dfc01015 	stw	ra,64(sp)
 1000d68:	df000f15 	stw	fp,60(sp)
 1000d6c:	df000f04 	addi	fp,sp,60
 1000d70:	e13ffc15 	stw	r4,-16(fp)
 1000d74:	e17ffd15 	stw	r5,-12(fp)
 1000d78:	e1bffe15 	stw	r6,-8(fp)
 1000d7c:	e1ffff15 	stw	r7,-4(fp)
	 // super-simplified BMP read algorithm to pull out RGB data
	 // read image for coloring scheme
	 //int image[400*400][3]; // first number here is 1024 pixels in my image, 3 is for RGB values
	 FILE *streamIn;
	 streamIn = fopen(fileName, "r");
 1000d80:	e13ffc17 	ldw	r4,-16(fp)
 1000d84:	01404074 	movhi	r5,257
 1000d88:	294e4804 	addi	r5,r5,14624
 1000d8c:	1001e200 	call	1001e20 <fopen>
 1000d90:	e0bffb15 	stw	r2,-20(fp)
	 if (streamIn == (FILE *)0){
 1000d94:	e0bffb17 	ldw	r2,-20(fp)
 1000d98:	1004c03a 	cmpne	r2,r2,zero
 1000d9c:	1000051e 	bne	r2,zero,1000db4 <DrawMap+0x54>
	   perror("File opening error ocurred. Exiting program.\n");
 1000da0:	01004074 	movhi	r4,257
 1000da4:	210e4904 	addi	r4,r4,14628
 1000da8:	10037340 	call	1003734 <perror>
	   exit(0);
 1000dac:	0009883a 	mov	r4,zero
 1000db0:	10015840 	call	1001584 <exit>
	 }

	 int byte;
	 int i;
	 for(i=0; i<54; i++) byte = getc(streamIn);  // strip out BMP header
 1000db4:	e03ff915 	stw	zero,-28(fp)
 1000db8:	00000606 	br	1000dd4 <DrawMap+0x74>
 1000dbc:	e13ffb17 	ldw	r4,-20(fp)
 1000dc0:	1002b1c0 	call	1002b1c <getc>
 1000dc4:	e0bffa15 	stw	r2,-24(fp)
 1000dc8:	e0bff917 	ldw	r2,-28(fp)
 1000dcc:	10800044 	addi	r2,r2,1
 1000dd0:	e0bff915 	stw	r2,-28(fp)
 1000dd4:	e0bff917 	ldw	r2,-28(fp)
 1000dd8:	10800d90 	cmplti	r2,r2,54
 1000ddc:	103ff71e 	bne	r2,zero,1000dbc <DrawMap+0x5c>

	 int currX = x;
 1000de0:	e0bffd17 	ldw	r2,-12(fp)
 1000de4:	e0bff815 	stw	r2,-32(fp)
	 int currY = y;
 1000de8:	e0bffe17 	ldw	r2,-8(fp)
 1000dec:	e0bff715 	stw	r2,-36(fp)

	 for (i=0; i < length*width; i++){    // foreach pixel
 1000df0:	e03ff915 	stw	zero,-28(fp)
 1000df4:	00003b06 	br	1000ee4 <DrawMap+0x184>
	    int b = fgetc(streamIn);  // use BMP 24bit with no alpha channel
 1000df8:	e13ffb17 	ldw	r4,-20(fp)
 1000dfc:	10019100 	call	1001910 <fgetc>
 1000e00:	e0bff615 	stw	r2,-40(fp)
	    int g = fgetc(streamIn);  // BMP uses BGR but we want RGB, grab byte-by-byte
 1000e04:	e13ffb17 	ldw	r4,-20(fp)
 1000e08:	10019100 	call	1001910 <fgetc>
 1000e0c:	e0bff515 	stw	r2,-44(fp)
	    int r = fgetc(streamIn);  // reverse-order array indexing fixes RGB issue...
 1000e10:	e13ffb17 	ldw	r4,-20(fp)
 1000e14:	10019100 	call	1001910 <fgetc>
 1000e18:	e0bff415 	stw	r2,-48(fp)

	    Colour c = GetClosetColour(r, g, b);
 1000e1c:	e13ff417 	ldw	r4,-48(fp)
 1000e20:	e17ff517 	ldw	r5,-44(fp)
 1000e24:	e1bff617 	ldw	r6,-40(fp)
 1000e28:	1000bc00 	call	1000bc0 <GetClosetColour>
 1000e2c:	e0bff315 	stw	r2,-52(fp)
	    //printf("C: %x, Pixel %d : [%d,%d,%d]\n", ColourPalletteData[c], i+1,r,g,b);

	    if (i % length == 0){
 1000e30:	e13ff917 	ldw	r4,-28(fp)
 1000e34:	e17fff17 	ldw	r5,-4(fp)
 1000e38:	10014dc0 	call	10014dc <__modsi3>
 1000e3c:	1004c03a 	cmpne	r2,r2,zero
 1000e40:	1000071e 	bne	r2,zero,1000e60 <DrawMap+0x100>
	    	currX = x;
 1000e44:	e0bffd17 	ldw	r2,-12(fp)
 1000e48:	e0bff815 	stw	r2,-32(fp)
	    	currY -= scale;
 1000e4c:	e0fff717 	ldw	r3,-36(fp)
 1000e50:	e0800317 	ldw	r2,12(fp)
 1000e54:	1885c83a 	sub	r2,r3,r2
 1000e58:	e0bff715 	stw	r2,-36(fp)
 1000e5c:	00000406 	br	1000e70 <DrawMap+0x110>
	    }
	    else{
	    	currX += scale;
 1000e60:	e0bff817 	ldw	r2,-32(fp)
 1000e64:	e0c00317 	ldw	r3,12(fp)
 1000e68:	10c5883a 	add	r2,r2,r3
 1000e6c:	e0bff815 	stw	r2,-32(fp)
	    }

	    int scaleX;
	    int scaleY;
	    for (scaleY = currY; scaleY > currY - scale; --scaleY){
 1000e70:	e0bff717 	ldw	r2,-36(fp)
 1000e74:	e0bff115 	stw	r2,-60(fp)
 1000e78:	00001206 	br	1000ec4 <DrawMap+0x164>
	    	for (scaleX = currX; scaleX < currX + scale; ++scaleX){
 1000e7c:	e0bff817 	ldw	r2,-32(fp)
 1000e80:	e0bff215 	stw	r2,-56(fp)
 1000e84:	00000706 	br	1000ea4 <DrawMap+0x144>
	    		WriteAPixel(scaleX, scaleY, c);
 1000e88:	e1bff317 	ldw	r6,-52(fp)
 1000e8c:	e13ff217 	ldw	r4,-56(fp)
 1000e90:	e17ff117 	ldw	r5,-60(fp)
 1000e94:	10006580 	call	1000658 <WriteAPixel>
	    }

	    int scaleX;
	    int scaleY;
	    for (scaleY = currY; scaleY > currY - scale; --scaleY){
	    	for (scaleX = currX; scaleX < currX + scale; ++scaleX){
 1000e98:	e0bff217 	ldw	r2,-56(fp)
 1000e9c:	10800044 	addi	r2,r2,1
 1000ea0:	e0bff215 	stw	r2,-56(fp)
 1000ea4:	e0fff817 	ldw	r3,-32(fp)
 1000ea8:	e0800317 	ldw	r2,12(fp)
 1000eac:	1887883a 	add	r3,r3,r2
 1000eb0:	e0bff217 	ldw	r2,-56(fp)
 1000eb4:	10fff416 	blt	r2,r3,1000e88 <DrawMap+0x128>
	    	currX += scale;
	    }

	    int scaleX;
	    int scaleY;
	    for (scaleY = currY; scaleY > currY - scale; --scaleY){
 1000eb8:	e0bff117 	ldw	r2,-60(fp)
 1000ebc:	10bfffc4 	addi	r2,r2,-1
 1000ec0:	e0bff115 	stw	r2,-60(fp)
 1000ec4:	e0fff717 	ldw	r3,-36(fp)
 1000ec8:	e0800317 	ldw	r2,12(fp)
 1000ecc:	1887c83a 	sub	r3,r3,r2
 1000ed0:	e0bff117 	ldw	r2,-60(fp)
 1000ed4:	18bfe916 	blt	r3,r2,1000e7c <DrawMap+0x11c>
	 for(i=0; i<54; i++) byte = getc(streamIn);  // strip out BMP header

	 int currX = x;
	 int currY = y;

	 for (i=0; i < length*width; i++){    // foreach pixel
 1000ed8:	e0bff917 	ldw	r2,-28(fp)
 1000edc:	10800044 	addi	r2,r2,1
 1000ee0:	e0bff915 	stw	r2,-28(fp)
 1000ee4:	e13fff17 	ldw	r4,-4(fp)
 1000ee8:	e1400217 	ldw	r5,8(fp)
 1000eec:	100154c0 	call	100154c <__mulsi3>
 1000ef0:	1007883a 	mov	r3,r2
 1000ef4:	e0bff917 	ldw	r2,-28(fp)
 1000ef8:	10ffbf16 	blt	r2,r3,1000df8 <DrawMap+0x98>
	    		WriteAPixel(scaleX, scaleY, c);
	    	}
	    }
	 }

	 fclose(streamIn);
 1000efc:	e13ffb17 	ldw	r4,-20(fp)
 1000f00:	10016cc0 	call	10016cc <fclose>
}
 1000f04:	e037883a 	mov	sp,fp
 1000f08:	dfc00117 	ldw	ra,4(sp)
 1000f0c:	df000017 	ldw	fp,0(sp)
 1000f10:	dec00204 	addi	sp,sp,8
 1000f14:	f800283a 	ret

01000f18 <DrawMap2>:

// Same as DrawMap but with a more efficient bitmap decoding implementation
void DrawMap2(char *fileName, int x, int y, int length, int width, int scale){
 1000f18:	deffdc04 	addi	sp,sp,-144
 1000f1c:	dfc02315 	stw	ra,140(sp)
 1000f20:	df002215 	stw	fp,136(sp)
 1000f24:	df002204 	addi	fp,sp,136
 1000f28:	e13ff915 	stw	r4,-28(fp)
 1000f2c:	e17ffa15 	stw	r5,-24(fp)
 1000f30:	e1bffb15 	stw	r6,-20(fp)
 1000f34:	e1fffc15 	stw	r7,-16(fp)
 1000f38:	e6ffff15 	stw	sp,-4(fp)
 1000f3c:	d805883a 	mov	r2,sp
 1000f40:	e0bffd15 	stw	r2,-12(fp)
	 // super-simplified BMP read algorithm to pull out RGB data
	 // read image for coloring scheme
	 //int image[400*400][3]; // first number here is 1024 pixels in my image, 3 is for RGB values
	 FILE *streamIn;
	 streamIn = fopen(fileName, "rb");
 1000f44:	e13ff917 	ldw	r4,-28(fp)
 1000f48:	01404074 	movhi	r5,257
 1000f4c:	294e5504 	addi	r5,r5,14676
 1000f50:	1001e200 	call	1001e20 <fopen>
 1000f54:	e0bfe915 	stw	r2,-92(fp)
	 if (streamIn == (FILE *)0){
 1000f58:	e0bfe917 	ldw	r2,-92(fp)
 1000f5c:	1004c03a 	cmpne	r2,r2,zero
 1000f60:	1000051e 	bne	r2,zero,1000f78 <DrawMap2+0x60>
	   perror("File opening error ocurred. Exiting program.\n");
 1000f64:	01004074 	movhi	r4,257
 1000f68:	210e4904 	addi	r4,r4,14628
 1000f6c:	10037340 	call	1003734 <perror>
	   exit(0);
 1000f70:	0009883a 	mov	r4,zero
 1000f74:	10015840 	call	1001584 <exit>
	 }

	 int i;

	 unsigned char info[54];
	 for(i=0; i<54; i++) getc(streamIn);  // strip out BMP header
 1000f78:	e03fe815 	stw	zero,-96(fp)
 1000f7c:	00000506 	br	1000f94 <DrawMap2+0x7c>
 1000f80:	e13fe917 	ldw	r4,-92(fp)
 1000f84:	1002b1c0 	call	1002b1c <getc>
 1000f88:	e0bfe817 	ldw	r2,-96(fp)
 1000f8c:	10800044 	addi	r2,r2,1
 1000f90:	e0bfe815 	stw	r2,-96(fp)
 1000f94:	e0bfe817 	ldw	r2,-96(fp)
 1000f98:	10800d90 	cmplti	r2,r2,54
 1000f9c:	103ff81e 	bne	r2,zero,1000f80 <DrawMap2+0x68>

	 int row_padded = (length*3 + 3) & (~3);
 1000fa0:	e0fffc17 	ldw	r3,-16(fp)
 1000fa4:	1805883a 	mov	r2,r3
 1000fa8:	1085883a 	add	r2,r2,r2
 1000fac:	10c5883a 	add	r2,r2,r3
 1000fb0:	10c000c4 	addi	r3,r2,3
 1000fb4:	00bfff04 	movi	r2,-4
 1000fb8:	1884703a 	and	r2,r3,r2
 1000fbc:	e0bfe715 	stw	r2,-100(fp)
	 unsigned char data[row_padded];
 1000fc0:	e0bfe717 	ldw	r2,-100(fp)
 1000fc4:	108000c4 	addi	r2,r2,3
 1000fc8:	108000c4 	addi	r2,r2,3
 1000fcc:	1004d0ba 	srli	r2,r2,2
 1000fd0:	1085883a 	add	r2,r2,r2
 1000fd4:	1085883a 	add	r2,r2,r2
 1000fd8:	d8b7c83a 	sub	sp,sp,r2
 1000fdc:	e6fffe15 	stw	sp,-8(fp)
 1000fe0:	e0fffe17 	ldw	r3,-8(fp)
 1000fe4:	188000c4 	addi	r2,r3,3
 1000fe8:	1004d0ba 	srli	r2,r2,2
 1000fec:	1085883a 	add	r2,r2,r2
 1000ff0:	1085883a 	add	r2,r2,r2
 1000ff4:	e0bffe15 	stw	r2,-8(fp)
 1000ff8:	e0bffe17 	ldw	r2,-8(fp)
 1000ffc:	e0bfea15 	stw	r2,-88(fp)
	 unsigned char tmp;

	 int row, col, count;
	 row = col = count = 0;
 1001000:	e03fe315 	stw	zero,-116(fp)
 1001004:	e0bfe317 	ldw	r2,-116(fp)
 1001008:	e0bfe415 	stw	r2,-112(fp)
 100100c:	e0bfe417 	ldw	r2,-112(fp)
 1001010:	e0bfe515 	stw	r2,-108(fp)
	 int currX = x;
 1001014:	e0bffa17 	ldw	r2,-24(fp)
 1001018:	e0bfe215 	stw	r2,-120(fp)
	 int currY = y;
 100101c:	e0bffb17 	ldw	r2,-20(fp)
 1001020:	e0bfe115 	stw	r2,-124(fp)
	 for(row = 0; row < width; ++row){
 1001024:	e03fe515 	stw	zero,-108(fp)
 1001028:	00005c06 	br	100119c <DrawMap2+0x284>
		 fread(data, sizeof(unsigned char), row_padded, streamIn);
 100102c:	e13fea17 	ldw	r4,-88(fp)
 1001030:	e1bfe717 	ldw	r6,-100(fp)
 1001034:	01400044 	movi	r5,1
 1001038:	e1ffe917 	ldw	r7,-92(fp)
 100103c:	10020480 	call	1002048 <fread>
		 for(col = 0; col < length * 3; col +=3){
 1001040:	e03fe415 	stw	zero,-112(fp)
 1001044:	00004606 	br	1001160 <DrawMap2+0x248>
			 tmp = data[col];
 1001048:	e0ffe417 	ldw	r3,-112(fp)
 100104c:	e0bfea17 	ldw	r2,-88(fp)
 1001050:	10c5883a 	add	r2,r2,r3
 1001054:	10800003 	ldbu	r2,0(r2)
 1001058:	e0bfe605 	stb	r2,-104(fp)
			 data[col] = data[col + 2];
 100105c:	e13fe417 	ldw	r4,-112(fp)
 1001060:	e0bfe417 	ldw	r2,-112(fp)
 1001064:	10c00084 	addi	r3,r2,2
 1001068:	e0bfea17 	ldw	r2,-88(fp)
 100106c:	10c5883a 	add	r2,r2,r3
 1001070:	10c00003 	ldbu	r3,0(r2)
 1001074:	e0bfea17 	ldw	r2,-88(fp)
 1001078:	1105883a 	add	r2,r2,r4
 100107c:	10c00005 	stb	r3,0(r2)
			 data[col + 2] = tmp;
 1001080:	e0bfe417 	ldw	r2,-112(fp)
 1001084:	10c00084 	addi	r3,r2,2
 1001088:	e0bfea17 	ldw	r2,-88(fp)
 100108c:	10c7883a 	add	r3,r2,r3
 1001090:	e0bfe603 	ldbu	r2,-104(fp)
 1001094:	18800005 	stb	r2,0(r3)

			 Colour c = GetClosetColour(data[col], data[col + 1], data[col + 2]);
 1001098:	e0ffe417 	ldw	r3,-112(fp)
 100109c:	e0bfea17 	ldw	r2,-88(fp)
 10010a0:	10c5883a 	add	r2,r2,r3
 10010a4:	10800003 	ldbu	r2,0(r2)
 10010a8:	11003fcc 	andi	r4,r2,255
 10010ac:	e0bfe417 	ldw	r2,-112(fp)
 10010b0:	10c00044 	addi	r3,r2,1
 10010b4:	e0bfea17 	ldw	r2,-88(fp)
 10010b8:	10c5883a 	add	r2,r2,r3
 10010bc:	10800003 	ldbu	r2,0(r2)
 10010c0:	11403fcc 	andi	r5,r2,255
 10010c4:	e0bfe417 	ldw	r2,-112(fp)
 10010c8:	10c00084 	addi	r3,r2,2
 10010cc:	e0bfea17 	ldw	r2,-88(fp)
 10010d0:	10c5883a 	add	r2,r2,r3
 10010d4:	10800003 	ldbu	r2,0(r2)
 10010d8:	11803fcc 	andi	r6,r2,255
 10010dc:	1000bc00 	call	1000bc0 <GetClosetColour>
 10010e0:	e0bfe015 	stw	r2,-128(fp)

			 int currX2;
			 int currY2;
			 for(currY2 = currY; currY2 > currY - scale; --currY2){
 10010e4:	e0bfe117 	ldw	r2,-124(fp)
 10010e8:	e0bfde15 	stw	r2,-136(fp)
 10010ec:	00001206 	br	1001138 <DrawMap2+0x220>
				 for(currX2 = currX; currX2 < currX + scale; ++currX2){
 10010f0:	e0bfe217 	ldw	r2,-120(fp)
 10010f4:	e0bfdf15 	stw	r2,-132(fp)
 10010f8:	00000706 	br	1001118 <DrawMap2+0x200>
					 WriteAPixel(currX2, currY2, c) ;
 10010fc:	e1bfe017 	ldw	r6,-128(fp)
 1001100:	e13fdf17 	ldw	r4,-132(fp)
 1001104:	e17fde17 	ldw	r5,-136(fp)
 1001108:	10006580 	call	1000658 <WriteAPixel>
			 Colour c = GetClosetColour(data[col], data[col + 1], data[col + 2]);

			 int currX2;
			 int currY2;
			 for(currY2 = currY; currY2 > currY - scale; --currY2){
				 for(currX2 = currX; currX2 < currX + scale; ++currX2){
 100110c:	e0bfdf17 	ldw	r2,-132(fp)
 1001110:	10800044 	addi	r2,r2,1
 1001114:	e0bfdf15 	stw	r2,-132(fp)
 1001118:	e0ffe217 	ldw	r3,-120(fp)
 100111c:	e0800317 	ldw	r2,12(fp)
 1001120:	1887883a 	add	r3,r3,r2
 1001124:	e0bfdf17 	ldw	r2,-132(fp)
 1001128:	10fff416 	blt	r2,r3,10010fc <DrawMap2+0x1e4>

			 Colour c = GetClosetColour(data[col], data[col + 1], data[col + 2]);

			 int currX2;
			 int currY2;
			 for(currY2 = currY; currY2 > currY - scale; --currY2){
 100112c:	e0bfde17 	ldw	r2,-136(fp)
 1001130:	10bfffc4 	addi	r2,r2,-1
 1001134:	e0bfde15 	stw	r2,-136(fp)
 1001138:	e0ffe117 	ldw	r3,-124(fp)
 100113c:	e0800317 	ldw	r2,12(fp)
 1001140:	1887c83a 	sub	r3,r3,r2
 1001144:	e0bfde17 	ldw	r2,-136(fp)
 1001148:	18bfe916 	blt	r3,r2,10010f0 <DrawMap2+0x1d8>
				 for(currX2 = currX; currX2 < currX + scale; ++currX2){
					 WriteAPixel(currX2, currY2, c) ;
				 }
			 }

			 currX = currX2;
 100114c:	e0bfdf17 	ldw	r2,-132(fp)
 1001150:	e0bfe215 	stw	r2,-120(fp)
	 row = col = count = 0;
	 int currX = x;
	 int currY = y;
	 for(row = 0; row < width; ++row){
		 fread(data, sizeof(unsigned char), row_padded, streamIn);
		 for(col = 0; col < length * 3; col +=3){
 1001154:	e0bfe417 	ldw	r2,-112(fp)
 1001158:	108000c4 	addi	r2,r2,3
 100115c:	e0bfe415 	stw	r2,-112(fp)
 1001160:	e0fffc17 	ldw	r3,-16(fp)
 1001164:	1805883a 	mov	r2,r3
 1001168:	1085883a 	add	r2,r2,r2
 100116c:	10c7883a 	add	r3,r2,r3
 1001170:	e0bfe417 	ldw	r2,-112(fp)
 1001174:	10ffb416 	blt	r2,r3,1001048 <DrawMap2+0x130>

			 currX = currX2;
			 //printf("Pixel: %d, R:%d, G:%d, B:%d\n", count++, (int)data[j], (int)data[j + 1], (int)data[j + 2]);
		 }

		 currY -= scale;
 1001178:	e0ffe117 	ldw	r3,-124(fp)
 100117c:	e0800317 	ldw	r2,12(fp)
 1001180:	1885c83a 	sub	r2,r3,r2
 1001184:	e0bfe115 	stw	r2,-124(fp)
		 currX = x;
 1001188:	e0bffa17 	ldw	r2,-24(fp)
 100118c:	e0bfe215 	stw	r2,-120(fp)

	 int row, col, count;
	 row = col = count = 0;
	 int currX = x;
	 int currY = y;
	 for(row = 0; row < width; ++row){
 1001190:	e0bfe517 	ldw	r2,-108(fp)
 1001194:	10800044 	addi	r2,r2,1
 1001198:	e0bfe515 	stw	r2,-108(fp)
 100119c:	e0ffe517 	ldw	r3,-108(fp)
 10011a0:	e0800217 	ldw	r2,8(fp)
 10011a4:	18bfa116 	blt	r3,r2,100102c <DrawMap2+0x114>
	 }




	 fclose(streamIn);
 10011a8:	e13fe917 	ldw	r4,-92(fp)
 10011ac:	10016cc0 	call	10016cc <fclose>
 10011b0:	e6fffd17 	ldw	sp,-12(fp)
}
 10011b4:	e6ffff17 	ldw	sp,-4(fp)
 10011b8:	e037883a 	mov	sp,fp
 10011bc:	dfc00117 	ldw	ra,4(sp)
 10011c0:	df000017 	ldw	fp,0(sp)
 10011c4:	dec00204 	addi	sp,sp,8
 10011c8:	f800283a 	ret

010011cc <TestShapes>:

void TestShapes(){
 10011cc:	defffc04 	addi	sp,sp,-16
 10011d0:	dfc00315 	stw	ra,12(sp)
 10011d4:	df000215 	stw	fp,8(sp)
 10011d8:	df000204 	addi	fp,sp,8

	// read the pixels back and make sure we read 2 (RED) to prove it's working
		//for(i = 0; i < 800; i ++)
			//printf("Colour value (i.e. pallette number) = %d at [%d, 100]\n", ReadAPixel(i, 100), i);

	DrawHorizontalLine(0, 800, 400, CYAN);
 10011dc:	0009883a 	mov	r4,zero
 10011e0:	0140c804 	movi	r5,800
 10011e4:	01806404 	movi	r6,400
 10011e8:	01c00184 	movi	r7,6
 10011ec:	10007640 	call	1000764 <DrawHorizontalLine>
	DrawVerticalLine(0, 480, 400, MAGENTA);
 10011f0:	0009883a 	mov	r4,zero
 10011f4:	01407804 	movi	r5,480
 10011f8:	01806404 	movi	r6,400
 10011fc:	01c001c4 	movi	r7,7
 1001200:	10007f40 	call	10007f4 <DrawVerticalLine>
	DrawBresenhamLine(0, 400, 0, 300, YELLOW);
 1001204:	00800144 	movi	r2,5
 1001208:	d8800015 	stw	r2,0(sp)
 100120c:	0009883a 	mov	r4,zero
 1001210:	01406404 	movi	r5,400
 1001214:	000d883a 	mov	r6,zero
 1001218:	01c04b04 	movi	r7,300
 100121c:	10008840 	call	1000884 <DrawBresenhamLine>
	DrawBresenhamLine(0, 400, 300, 0, YELLOW);
 1001220:	00800144 	movi	r2,5
 1001224:	d8800015 	stw	r2,0(sp)
 1001228:	0009883a 	mov	r4,zero
 100122c:	01406404 	movi	r5,400
 1001230:	01804b04 	movi	r6,300
 1001234:	000f883a 	mov	r7,zero
 1001238:	10008840 	call	1000884 <DrawBresenhamLine>
	DrawBresenhamLine(600, 300, 0, 300, YELLOW);
 100123c:	00800144 	movi	r2,5
 1001240:	d8800015 	stw	r2,0(sp)
 1001244:	01009604 	movi	r4,600
 1001248:	01404b04 	movi	r5,300
 100124c:	000d883a 	mov	r6,zero
 1001250:	01c04b04 	movi	r7,300
 1001254:	10008840 	call	1000884 <DrawBresenhamLine>
	DrawBresenhamLine(600, 300, 300, 0, YELLOW);
 1001258:	00800144 	movi	r2,5
 100125c:	d8800015 	stw	r2,0(sp)
 1001260:	01009604 	movi	r4,600
 1001264:	01404b04 	movi	r5,300
 1001268:	01804b04 	movi	r6,300
 100126c:	000f883a 	mov	r7,zero
 1001270:	10008840 	call	1000884 <DrawBresenhamLine>

	DrawString1(300, 150, RED, WHITE, "abcderfg", 1);
 1001274:	00804074 	movhi	r2,257
 1001278:	108e5604 	addi	r2,r2,14680
 100127c:	d8800015 	stw	r2,0(sp)
 1001280:	00800044 	movi	r2,1
 1001284:	d8800115 	stw	r2,4(sp)
 1001288:	01004b04 	movi	r4,300
 100128c:	01402584 	movi	r5,150
 1001290:	01800084 	movi	r6,2
 1001294:	01c00044 	movi	r7,1
 1001298:	10009240 	call	1000924 <DrawString1>
	DrawString2(300, 150, RED, WHITE, "abcderfg", 0);
 100129c:	00804074 	movhi	r2,257
 10012a0:	108e5604 	addi	r2,r2,14680
 10012a4:	d8800015 	stw	r2,0(sp)
 10012a8:	d8000115 	stw	zero,4(sp)
 10012ac:	01004b04 	movi	r4,300
 10012b0:	01402584 	movi	r5,150
 10012b4:	01800084 	movi	r6,2
 10012b8:	01c00044 	movi	r7,1
 10012bc:	10009e00 	call	10009e0 <DrawString2>

	DrawRectangle(30, 200, 50, 150, CYAN);
 10012c0:	00800184 	movi	r2,6
 10012c4:	d8800015 	stw	r2,0(sp)
 10012c8:	01000784 	movi	r4,30
 10012cc:	01403204 	movi	r5,200
 10012d0:	01800c84 	movi	r6,50
 10012d4:	01c02584 	movi	r7,150
 10012d8:	1000a9c0 	call	1000a9c <DrawRectangle>

	DrawFilledRectangle(100, 200, 300, 350, 12);
 10012dc:	00800304 	movi	r2,12
 10012e0:	d8800015 	stw	r2,0(sp)
 10012e4:	01001904 	movi	r4,100
 10012e8:	01403204 	movi	r5,200
 10012ec:	01804b04 	movi	r6,300
 10012f0:	01c05784 	movi	r7,350
 10012f4:	1000b200 	call	1000b20 <DrawFilledRectangle>
}
 10012f8:	e037883a 	mov	sp,fp
 10012fc:	dfc00117 	ldw	ra,4(sp)
 1001300:	df000017 	ldw	fp,0(sp)
 1001304:	dec00204 	addi	sp,sp,8
 1001308:	f800283a 	ret

0100130c <ProgramPalette>:
** subroutine to program a hardware (graphics chip) palette number with an RGB value
** e.g. ProgramPalette(RED, 0x00FF0000) ;
****************************************************************************************************/

void ProgramPalette(int PaletteNumber, int RGB)
{
 100130c:	defffd04 	addi	sp,sp,-12
 1001310:	df000215 	stw	fp,8(sp)
 1001314:	df000204 	addi	fp,sp,8
 1001318:	e13ffe15 	stw	r4,-8(fp)
 100131c:	e17fff15 	stw	r5,-4(fp)
    WAIT_FOR_GRAPHICS;
 1001320:	00a10034 	movhi	r2,33792
 1001324:	1080000b 	ldhu	r2,0(r2)
 1001328:	10bfffcc 	andi	r2,r2,65535
 100132c:	1080004c 	andi	r2,r2,1
 1001330:	1005003a 	cmpeq	r2,r2,zero
 1001334:	103ffa1e 	bne	r2,zero,1001320 <ProgramPalette+0x14>
    GraphicsColourReg = PaletteNumber;
 1001338:	00e10034 	movhi	r3,33792
 100133c:	18c00384 	addi	r3,r3,14
 1001340:	e0bffe17 	ldw	r2,-8(fp)
 1001344:	1880000d 	sth	r2,0(r3)
    GraphicsX1Reg = RGB >> 16   ;          // program red value in ls.8 bit of X1 reg
 1001348:	00e10034 	movhi	r3,33792
 100134c:	18c00084 	addi	r3,r3,2
 1001350:	e0bfff17 	ldw	r2,-4(fp)
 1001354:	1005d43a 	srai	r2,r2,16
 1001358:	1880000d 	sth	r2,0(r3)
    GraphicsY1Reg = RGB ;                	 // program green and blue into 16 bit of Y1 reg
 100135c:	00e10034 	movhi	r3,33792
 1001360:	18c00104 	addi	r3,r3,4
 1001364:	e0bfff17 	ldw	r2,-4(fp)
 1001368:	1880000d 	sth	r2,0(r3)
    GraphicsCommandReg = ProgramPaletteColour;	// issue command
 100136c:	00e10034 	movhi	r3,33792
 1001370:	00800404 	movi	r2,16
 1001374:	1880000d 	sth	r2,0(r3)
}
 1001378:	e037883a 	mov	sp,fp
 100137c:	df000017 	ldw	fp,0(sp)
 1001380:	dec00104 	addi	sp,sp,4
 1001384:	f800283a 	ret

01001388 <main>:


int main()
{
 1001388:	defffd04 	addi	sp,sp,-12
 100138c:	dfc00215 	stw	ra,8(sp)
 1001390:	df000115 	stw	fp,4(sp)
 1001394:	df000104 	addi	fp,sp,4
	printf("Hello from Nios II!\n");
 1001398:	01004074 	movhi	r4,257
 100139c:	210e5904 	addi	r4,r4,14692
 10013a0:	10037e80 	call	10037e8 <puts>
//	clock_t begin = clock();
//	DrawMap("/mnt/host/map3.bmp", 200, 450, 100, 100, 4);
//	clock_t end = clock();
//	printf("%f\n", (double)(end - begin) / CLOCKS_PER_SEC);

	DrawFilledRectangle(0, 400 , 0 , 300, RED);
 10013a4:	00800084 	movi	r2,2
 10013a8:	d8800015 	stw	r2,0(sp)
 10013ac:	0009883a 	mov	r4,zero
 10013b0:	01406404 	movi	r5,400
 10013b4:	000d883a 	mov	r6,zero
 10013b8:	01c04b04 	movi	r7,300
 10013bc:	1000b200 	call	1000b20 <DrawFilledRectangle>
	DrawHorizontalLine(0, 300, 200, RED);
 10013c0:	0009883a 	mov	r4,zero
 10013c4:	01404b04 	movi	r5,300
 10013c8:	01803204 	movi	r6,200
 10013cc:	01c00084 	movi	r7,2
 10013d0:	10007640 	call	1000764 <DrawHorizontalLine>
	DrawVerticalLine(0, 200, 200, BLACK);
 10013d4:	0009883a 	mov	r4,zero
 10013d8:	01403204 	movi	r5,200
 10013dc:	01803204 	movi	r6,200
 10013e0:	000f883a 	mov	r7,zero
 10013e4:	10007f40 	call	10007f4 <DrawVerticalLine>
//	DrawMap2("/mnt/host/map3.bmp", 300, 400, 100, 100, 4);
	//DrawMap2("/mnt/host/map10.bmp", 300, 400, 300, 300, 1);
//	clock_t end2 = clock();
//	printf("%f\n", (double)(end2 - begin2) / CLOCKS_PER_SEC);

	return 0;
 10013e8:	0005883a 	mov	r2,zero
}
 10013ec:	e037883a 	mov	sp,fp
 10013f0:	dfc00117 	ldw	ra,4(sp)
 10013f4:	df000017 	ldw	fp,0(sp)
 10013f8:	dec00204 	addi	sp,sp,8
 10013fc:	f800283a 	ret

01001400 <udivmodsi4>:
 1001400:	29001b2e 	bgeu	r5,r4,1001470 <udivmodsi4+0x70>
 1001404:	28001a16 	blt	r5,zero,1001470 <udivmodsi4+0x70>
 1001408:	00800044 	movi	r2,1
 100140c:	0007883a 	mov	r3,zero
 1001410:	01c007c4 	movi	r7,31
 1001414:	00000306 	br	1001424 <udivmodsi4+0x24>
 1001418:	19c01326 	beq	r3,r7,1001468 <udivmodsi4+0x68>
 100141c:	18c00044 	addi	r3,r3,1
 1001420:	28000416 	blt	r5,zero,1001434 <udivmodsi4+0x34>
 1001424:	294b883a 	add	r5,r5,r5
 1001428:	1085883a 	add	r2,r2,r2
 100142c:	293ffa36 	bltu	r5,r4,1001418 <udivmodsi4+0x18>
 1001430:	10000d26 	beq	r2,zero,1001468 <udivmodsi4+0x68>
 1001434:	0007883a 	mov	r3,zero
 1001438:	21400236 	bltu	r4,r5,1001444 <udivmodsi4+0x44>
 100143c:	2149c83a 	sub	r4,r4,r5
 1001440:	1886b03a 	or	r3,r3,r2
 1001444:	1004d07a 	srli	r2,r2,1
 1001448:	280ad07a 	srli	r5,r5,1
 100144c:	103ffa1e 	bne	r2,zero,1001438 <udivmodsi4+0x38>
 1001450:	30000226 	beq	r6,zero,100145c <udivmodsi4+0x5c>
 1001454:	2005883a 	mov	r2,r4
 1001458:	f800283a 	ret
 100145c:	1809883a 	mov	r4,r3
 1001460:	2005883a 	mov	r2,r4
 1001464:	f800283a 	ret
 1001468:	0007883a 	mov	r3,zero
 100146c:	003ff806 	br	1001450 <udivmodsi4+0x50>
 1001470:	00800044 	movi	r2,1
 1001474:	0007883a 	mov	r3,zero
 1001478:	003fef06 	br	1001438 <udivmodsi4+0x38>

0100147c <__divsi3>:
 100147c:	defffe04 	addi	sp,sp,-8
 1001480:	dc000015 	stw	r16,0(sp)
 1001484:	dfc00115 	stw	ra,4(sp)
 1001488:	0021883a 	mov	r16,zero
 100148c:	20000c16 	blt	r4,zero,10014c0 <__divsi3+0x44>
 1001490:	000d883a 	mov	r6,zero
 1001494:	28000e16 	blt	r5,zero,10014d0 <__divsi3+0x54>
 1001498:	10014000 	call	1001400 <udivmodsi4>
 100149c:	1007883a 	mov	r3,r2
 10014a0:	8005003a 	cmpeq	r2,r16,zero
 10014a4:	1000011e 	bne	r2,zero,10014ac <__divsi3+0x30>
 10014a8:	00c7c83a 	sub	r3,zero,r3
 10014ac:	1805883a 	mov	r2,r3
 10014b0:	dfc00117 	ldw	ra,4(sp)
 10014b4:	dc000017 	ldw	r16,0(sp)
 10014b8:	dec00204 	addi	sp,sp,8
 10014bc:	f800283a 	ret
 10014c0:	0109c83a 	sub	r4,zero,r4
 10014c4:	04000044 	movi	r16,1
 10014c8:	000d883a 	mov	r6,zero
 10014cc:	283ff20e 	bge	r5,zero,1001498 <__divsi3+0x1c>
 10014d0:	014bc83a 	sub	r5,zero,r5
 10014d4:	8021003a 	cmpeq	r16,r16,zero
 10014d8:	003fef06 	br	1001498 <__divsi3+0x1c>

010014dc <__modsi3>:
 10014dc:	deffff04 	addi	sp,sp,-4
 10014e0:	dfc00015 	stw	ra,0(sp)
 10014e4:	01800044 	movi	r6,1
 10014e8:	2807883a 	mov	r3,r5
 10014ec:	20000416 	blt	r4,zero,1001500 <__modsi3+0x24>
 10014f0:	28000c16 	blt	r5,zero,1001524 <__modsi3+0x48>
 10014f4:	dfc00017 	ldw	ra,0(sp)
 10014f8:	dec00104 	addi	sp,sp,4
 10014fc:	10014001 	jmpi	1001400 <udivmodsi4>
 1001500:	0109c83a 	sub	r4,zero,r4
 1001504:	28000b16 	blt	r5,zero,1001534 <__modsi3+0x58>
 1001508:	180b883a 	mov	r5,r3
 100150c:	01800044 	movi	r6,1
 1001510:	10014000 	call	1001400 <udivmodsi4>
 1001514:	0085c83a 	sub	r2,zero,r2
 1001518:	dfc00017 	ldw	ra,0(sp)
 100151c:	dec00104 	addi	sp,sp,4
 1001520:	f800283a 	ret
 1001524:	014bc83a 	sub	r5,zero,r5
 1001528:	dfc00017 	ldw	ra,0(sp)
 100152c:	dec00104 	addi	sp,sp,4
 1001530:	10014001 	jmpi	1001400 <udivmodsi4>
 1001534:	0147c83a 	sub	r3,zero,r5
 1001538:	003ff306 	br	1001508 <__modsi3+0x2c>

0100153c <__udivsi3>:
 100153c:	000d883a 	mov	r6,zero
 1001540:	10014001 	jmpi	1001400 <udivmodsi4>

01001544 <__umodsi3>:
 1001544:	01800044 	movi	r6,1
 1001548:	10014001 	jmpi	1001400 <udivmodsi4>

0100154c <__mulsi3>:
 100154c:	20000a26 	beq	r4,zero,1001578 <__mulsi3+0x2c>
 1001550:	0007883a 	mov	r3,zero
 1001554:	2080004c 	andi	r2,r4,1
 1001558:	1005003a 	cmpeq	r2,r2,zero
 100155c:	2008d07a 	srli	r4,r4,1
 1001560:	1000011e 	bne	r2,zero,1001568 <__mulsi3+0x1c>
 1001564:	1947883a 	add	r3,r3,r5
 1001568:	294b883a 	add	r5,r5,r5
 100156c:	203ff91e 	bne	r4,zero,1001554 <__mulsi3+0x8>
 1001570:	1805883a 	mov	r2,r3
 1001574:	f800283a 	ret
 1001578:	0007883a 	mov	r3,zero
 100157c:	1805883a 	mov	r2,r3
 1001580:	f800283a 	ret

01001584 <exit>:
 1001584:	defffe04 	addi	sp,sp,-8
 1001588:	000b883a 	mov	r5,zero
 100158c:	dc000015 	stw	r16,0(sp)
 1001590:	dfc00115 	stw	ra,4(sp)
 1001594:	2021883a 	mov	r16,r4
 1001598:	10043640 	call	1004364 <__call_exitprocs>
 100159c:	00804074 	movhi	r2,257
 10015a0:	10970904 	addi	r2,r2,23588
 10015a4:	11000017 	ldw	r4,0(r2)
 10015a8:	20800f17 	ldw	r2,60(r4)
 10015ac:	10000126 	beq	r2,zero,10015b4 <exit+0x30>
 10015b0:	103ee83a 	callr	r2
 10015b4:	8009883a 	mov	r4,r16
 10015b8:	1005b640 	call	1005b64 <_exit>

010015bc <_fclose_r>:
 10015bc:	defffc04 	addi	sp,sp,-16
 10015c0:	dc400115 	stw	r17,4(sp)
 10015c4:	dc000015 	stw	r16,0(sp)
 10015c8:	dfc00315 	stw	ra,12(sp)
 10015cc:	dc800215 	stw	r18,8(sp)
 10015d0:	2821883a 	mov	r16,r5
 10015d4:	2023883a 	mov	r17,r4
 10015d8:	28002926 	beq	r5,zero,1001680 <_fclose_r+0xc4>
 10015dc:	1001a900 	call	1001a90 <__sfp_lock_acquire>
 10015e0:	88000226 	beq	r17,zero,10015ec <_fclose_r+0x30>
 10015e4:	88800e17 	ldw	r2,56(r17)
 10015e8:	10002d26 	beq	r2,zero,10016a0 <_fclose_r+0xe4>
 10015ec:	8080030f 	ldh	r2,12(r16)
 10015f0:	10002226 	beq	r2,zero,100167c <_fclose_r+0xc0>
 10015f4:	8809883a 	mov	r4,r17
 10015f8:	800b883a 	mov	r5,r16
 10015fc:	10016e00 	call	10016e0 <_fflush_r>
 1001600:	1025883a 	mov	r18,r2
 1001604:	80800b17 	ldw	r2,44(r16)
 1001608:	10000426 	beq	r2,zero,100161c <_fclose_r+0x60>
 100160c:	81400717 	ldw	r5,28(r16)
 1001610:	8809883a 	mov	r4,r17
 1001614:	103ee83a 	callr	r2
 1001618:	10002a16 	blt	r2,zero,10016c4 <_fclose_r+0x108>
 100161c:	8080030b 	ldhu	r2,12(r16)
 1001620:	1080200c 	andi	r2,r2,128
 1001624:	1000231e 	bne	r2,zero,10016b4 <_fclose_r+0xf8>
 1001628:	81400c17 	ldw	r5,48(r16)
 100162c:	28000526 	beq	r5,zero,1001644 <_fclose_r+0x88>
 1001630:	80801004 	addi	r2,r16,64
 1001634:	28800226 	beq	r5,r2,1001640 <_fclose_r+0x84>
 1001638:	8809883a 	mov	r4,r17
 100163c:	10021b40 	call	10021b4 <_free_r>
 1001640:	80000c15 	stw	zero,48(r16)
 1001644:	81401117 	ldw	r5,68(r16)
 1001648:	28000326 	beq	r5,zero,1001658 <_fclose_r+0x9c>
 100164c:	8809883a 	mov	r4,r17
 1001650:	10021b40 	call	10021b4 <_free_r>
 1001654:	80001115 	stw	zero,68(r16)
 1001658:	8000030d 	sth	zero,12(r16)
 100165c:	1001a940 	call	1001a94 <__sfp_lock_release>
 1001660:	9005883a 	mov	r2,r18
 1001664:	dfc00317 	ldw	ra,12(sp)
 1001668:	dc800217 	ldw	r18,8(sp)
 100166c:	dc400117 	ldw	r17,4(sp)
 1001670:	dc000017 	ldw	r16,0(sp)
 1001674:	dec00404 	addi	sp,sp,16
 1001678:	f800283a 	ret
 100167c:	1001a940 	call	1001a94 <__sfp_lock_release>
 1001680:	0025883a 	mov	r18,zero
 1001684:	9005883a 	mov	r2,r18
 1001688:	dfc00317 	ldw	ra,12(sp)
 100168c:	dc800217 	ldw	r18,8(sp)
 1001690:	dc400117 	ldw	r17,4(sp)
 1001694:	dc000017 	ldw	r16,0(sp)
 1001698:	dec00404 	addi	sp,sp,16
 100169c:	f800283a 	ret
 10016a0:	8809883a 	mov	r4,r17
 10016a4:	1001aa00 	call	1001aa0 <__sinit>
 10016a8:	8080030f 	ldh	r2,12(r16)
 10016ac:	103fd11e 	bne	r2,zero,10015f4 <_fclose_r+0x38>
 10016b0:	003ff206 	br	100167c <_fclose_r+0xc0>
 10016b4:	81400417 	ldw	r5,16(r16)
 10016b8:	8809883a 	mov	r4,r17
 10016bc:	10021b40 	call	10021b4 <_free_r>
 10016c0:	003fd906 	br	1001628 <_fclose_r+0x6c>
 10016c4:	04bfffc4 	movi	r18,-1
 10016c8:	003fd406 	br	100161c <_fclose_r+0x60>

010016cc <fclose>:
 10016cc:	00804074 	movhi	r2,257
 10016d0:	10970804 	addi	r2,r2,23584
 10016d4:	200b883a 	mov	r5,r4
 10016d8:	11000017 	ldw	r4,0(r2)
 10016dc:	10015bc1 	jmpi	10015bc <_fclose_r>

010016e0 <_fflush_r>:
 10016e0:	defffb04 	addi	sp,sp,-20
 10016e4:	dcc00315 	stw	r19,12(sp)
 10016e8:	dc800215 	stw	r18,8(sp)
 10016ec:	dfc00415 	stw	ra,16(sp)
 10016f0:	dc400115 	stw	r17,4(sp)
 10016f4:	dc000015 	stw	r16,0(sp)
 10016f8:	2027883a 	mov	r19,r4
 10016fc:	2825883a 	mov	r18,r5
 1001700:	20000226 	beq	r4,zero,100170c <_fflush_r+0x2c>
 1001704:	20800e17 	ldw	r2,56(r4)
 1001708:	10005626 	beq	r2,zero,1001864 <_fflush_r+0x184>
 100170c:	9100030b 	ldhu	r4,12(r18)
 1001710:	20ffffcc 	andi	r3,r4,65535
 1001714:	18e0001c 	xori	r3,r3,32768
 1001718:	18e00004 	addi	r3,r3,-32768
 100171c:	1880020c 	andi	r2,r3,8
 1001720:	1000261e 	bne	r2,zero,10017bc <_fflush_r+0xdc>
 1001724:	90c00117 	ldw	r3,4(r18)
 1001728:	20820014 	ori	r2,r4,2048
 100172c:	9080030d 	sth	r2,12(r18)
 1001730:	1009883a 	mov	r4,r2
 1001734:	00c0400e 	bge	zero,r3,1001838 <_fflush_r+0x158>
 1001738:	92000a17 	ldw	r8,40(r18)
 100173c:	40004026 	beq	r8,zero,1001840 <_fflush_r+0x160>
 1001740:	2084000c 	andi	r2,r4,4096
 1001744:	10005326 	beq	r2,zero,1001894 <_fflush_r+0x1b4>
 1001748:	94001417 	ldw	r16,80(r18)
 100174c:	9080030b 	ldhu	r2,12(r18)
 1001750:	1080010c 	andi	r2,r2,4
 1001754:	1000481e 	bne	r2,zero,1001878 <_fflush_r+0x198>
 1001758:	91400717 	ldw	r5,28(r18)
 100175c:	9809883a 	mov	r4,r19
 1001760:	800d883a 	mov	r6,r16
 1001764:	000f883a 	mov	r7,zero
 1001768:	403ee83a 	callr	r8
 100176c:	8080261e 	bne	r16,r2,1001808 <_fflush_r+0x128>
 1001770:	9080030b 	ldhu	r2,12(r18)
 1001774:	91000417 	ldw	r4,16(r18)
 1001778:	90000115 	stw	zero,4(r18)
 100177c:	10bdffcc 	andi	r2,r2,63487
 1001780:	10ffffcc 	andi	r3,r2,65535
 1001784:	18c4000c 	andi	r3,r3,4096
 1001788:	9080030d 	sth	r2,12(r18)
 100178c:	91000015 	stw	r4,0(r18)
 1001790:	18002b26 	beq	r3,zero,1001840 <_fflush_r+0x160>
 1001794:	0007883a 	mov	r3,zero
 1001798:	1805883a 	mov	r2,r3
 100179c:	94001415 	stw	r16,80(r18)
 10017a0:	dfc00417 	ldw	ra,16(sp)
 10017a4:	dcc00317 	ldw	r19,12(sp)
 10017a8:	dc800217 	ldw	r18,8(sp)
 10017ac:	dc400117 	ldw	r17,4(sp)
 10017b0:	dc000017 	ldw	r16,0(sp)
 10017b4:	dec00504 	addi	sp,sp,20
 10017b8:	f800283a 	ret
 10017bc:	94400417 	ldw	r17,16(r18)
 10017c0:	88001f26 	beq	r17,zero,1001840 <_fflush_r+0x160>
 10017c4:	90800017 	ldw	r2,0(r18)
 10017c8:	18c000cc 	andi	r3,r3,3
 10017cc:	94400015 	stw	r17,0(r18)
 10017d0:	1461c83a 	sub	r16,r2,r17
 10017d4:	18002526 	beq	r3,zero,100186c <_fflush_r+0x18c>
 10017d8:	0005883a 	mov	r2,zero
 10017dc:	90800215 	stw	r2,8(r18)
 10017e0:	0400170e 	bge	zero,r16,1001840 <_fflush_r+0x160>
 10017e4:	90c00917 	ldw	r3,36(r18)
 10017e8:	91400717 	ldw	r5,28(r18)
 10017ec:	880d883a 	mov	r6,r17
 10017f0:	800f883a 	mov	r7,r16
 10017f4:	9809883a 	mov	r4,r19
 10017f8:	183ee83a 	callr	r3
 10017fc:	88a3883a 	add	r17,r17,r2
 1001800:	80a1c83a 	sub	r16,r16,r2
 1001804:	00bff616 	blt	zero,r2,10017e0 <_fflush_r+0x100>
 1001808:	9080030b 	ldhu	r2,12(r18)
 100180c:	00ffffc4 	movi	r3,-1
 1001810:	10801014 	ori	r2,r2,64
 1001814:	9080030d 	sth	r2,12(r18)
 1001818:	1805883a 	mov	r2,r3
 100181c:	dfc00417 	ldw	ra,16(sp)
 1001820:	dcc00317 	ldw	r19,12(sp)
 1001824:	dc800217 	ldw	r18,8(sp)
 1001828:	dc400117 	ldw	r17,4(sp)
 100182c:	dc000017 	ldw	r16,0(sp)
 1001830:	dec00504 	addi	sp,sp,20
 1001834:	f800283a 	ret
 1001838:	90800f17 	ldw	r2,60(r18)
 100183c:	00bfbe16 	blt	zero,r2,1001738 <_fflush_r+0x58>
 1001840:	0007883a 	mov	r3,zero
 1001844:	1805883a 	mov	r2,r3
 1001848:	dfc00417 	ldw	ra,16(sp)
 100184c:	dcc00317 	ldw	r19,12(sp)
 1001850:	dc800217 	ldw	r18,8(sp)
 1001854:	dc400117 	ldw	r17,4(sp)
 1001858:	dc000017 	ldw	r16,0(sp)
 100185c:	dec00504 	addi	sp,sp,20
 1001860:	f800283a 	ret
 1001864:	1001aa00 	call	1001aa0 <__sinit>
 1001868:	003fa806 	br	100170c <_fflush_r+0x2c>
 100186c:	90800517 	ldw	r2,20(r18)
 1001870:	90800215 	stw	r2,8(r18)
 1001874:	003fda06 	br	10017e0 <_fflush_r+0x100>
 1001878:	90800117 	ldw	r2,4(r18)
 100187c:	90c00c17 	ldw	r3,48(r18)
 1001880:	80a1c83a 	sub	r16,r16,r2
 1001884:	183fb426 	beq	r3,zero,1001758 <_fflush_r+0x78>
 1001888:	90800f17 	ldw	r2,60(r18)
 100188c:	80a1c83a 	sub	r16,r16,r2
 1001890:	003fb106 	br	1001758 <_fflush_r+0x78>
 1001894:	91400717 	ldw	r5,28(r18)
 1001898:	9809883a 	mov	r4,r19
 100189c:	000d883a 	mov	r6,zero
 10018a0:	01c00044 	movi	r7,1
 10018a4:	403ee83a 	callr	r8
 10018a8:	1021883a 	mov	r16,r2
 10018ac:	00bfffc4 	movi	r2,-1
 10018b0:	80800226 	beq	r16,r2,10018bc <_fflush_r+0x1dc>
 10018b4:	92000a17 	ldw	r8,40(r18)
 10018b8:	003fa406 	br	100174c <_fflush_r+0x6c>
 10018bc:	98c00017 	ldw	r3,0(r19)
 10018c0:	00800744 	movi	r2,29
 10018c4:	18bfde26 	beq	r3,r2,1001840 <_fflush_r+0x160>
 10018c8:	9080030b 	ldhu	r2,12(r18)
 10018cc:	8007883a 	mov	r3,r16
 10018d0:	10801014 	ori	r2,r2,64
 10018d4:	9080030d 	sth	r2,12(r18)
 10018d8:	003fcf06 	br	1001818 <_fflush_r+0x138>

010018dc <fflush>:
 10018dc:	01404034 	movhi	r5,256
 10018e0:	2945b804 	addi	r5,r5,5856
 10018e4:	2007883a 	mov	r3,r4
 10018e8:	20000526 	beq	r4,zero,1001900 <fflush+0x24>
 10018ec:	00804074 	movhi	r2,257
 10018f0:	10970804 	addi	r2,r2,23584
 10018f4:	11000017 	ldw	r4,0(r2)
 10018f8:	180b883a 	mov	r5,r3
 10018fc:	10016e01 	jmpi	10016e0 <_fflush_r>
 1001900:	00804074 	movhi	r2,257
 1001904:	10970904 	addi	r2,r2,23588
 1001908:	11000017 	ldw	r4,0(r2)
 100190c:	100299c1 	jmpi	100299c <_fwalk_reent>

01001910 <fgetc>:
 1001910:	defffd04 	addi	sp,sp,-12
 1001914:	dc400115 	stw	r17,4(sp)
 1001918:	04404074 	movhi	r17,257
 100191c:	8c570804 	addi	r17,r17,23584
 1001920:	88c00017 	ldw	r3,0(r17)
 1001924:	dc000015 	stw	r16,0(sp)
 1001928:	dfc00215 	stw	ra,8(sp)
 100192c:	2021883a 	mov	r16,r4
 1001930:	18000326 	beq	r3,zero,1001940 <fgetc+0x30>
 1001934:	18800e17 	ldw	r2,56(r3)
 1001938:	1809883a 	mov	r4,r3
 100193c:	10000e26 	beq	r2,zero,1001978 <fgetc+0x68>
 1001940:	80800117 	ldw	r2,4(r16)
 1001944:	800b883a 	mov	r5,r16
 1001948:	10bfffc4 	addi	r2,r2,-1
 100194c:	80800115 	stw	r2,4(r16)
 1001950:	10000f16 	blt	r2,zero,1001990 <fgetc+0x80>
 1001954:	80c00017 	ldw	r3,0(r16)
 1001958:	18800003 	ldbu	r2,0(r3)
 100195c:	18c00044 	addi	r3,r3,1
 1001960:	80c00015 	stw	r3,0(r16)
 1001964:	dfc00217 	ldw	ra,8(sp)
 1001968:	dc400117 	ldw	r17,4(sp)
 100196c:	dc000017 	ldw	r16,0(sp)
 1001970:	dec00304 	addi	sp,sp,12
 1001974:	f800283a 	ret
 1001978:	1001aa00 	call	1001aa0 <__sinit>
 100197c:	80800117 	ldw	r2,4(r16)
 1001980:	800b883a 	mov	r5,r16
 1001984:	10bfffc4 	addi	r2,r2,-1
 1001988:	80800115 	stw	r2,4(r16)
 100198c:	103ff10e 	bge	r2,zero,1001954 <fgetc+0x44>
 1001990:	89000017 	ldw	r4,0(r17)
 1001994:	dfc00217 	ldw	ra,8(sp)
 1001998:	dc400117 	ldw	r17,4(sp)
 100199c:	dc000017 	ldw	r16,0(sp)
 10019a0:	dec00304 	addi	sp,sp,12
 10019a4:	10039dc1 	jmpi	10039dc <__srget_r>

010019a8 <_fgetc_r>:
 10019a8:	defffd04 	addi	sp,sp,-12
 10019ac:	dc400115 	stw	r17,4(sp)
 10019b0:	dc000015 	stw	r16,0(sp)
 10019b4:	dfc00215 	stw	ra,8(sp)
 10019b8:	2021883a 	mov	r16,r4
 10019bc:	2823883a 	mov	r17,r5
 10019c0:	20000226 	beq	r4,zero,10019cc <_fgetc_r+0x24>
 10019c4:	20800e17 	ldw	r2,56(r4)
 10019c8:	10000f26 	beq	r2,zero,1001a08 <_fgetc_r+0x60>
 10019cc:	88800117 	ldw	r2,4(r17)
 10019d0:	8009883a 	mov	r4,r16
 10019d4:	880b883a 	mov	r5,r17
 10019d8:	10bfffc4 	addi	r2,r2,-1
 10019dc:	88800115 	stw	r2,4(r17)
 10019e0:	10001016 	blt	r2,zero,1001a24 <_fgetc_r+0x7c>
 10019e4:	88c00017 	ldw	r3,0(r17)
 10019e8:	18800003 	ldbu	r2,0(r3)
 10019ec:	18c00044 	addi	r3,r3,1
 10019f0:	88c00015 	stw	r3,0(r17)
 10019f4:	dfc00217 	ldw	ra,8(sp)
 10019f8:	dc400117 	ldw	r17,4(sp)
 10019fc:	dc000017 	ldw	r16,0(sp)
 1001a00:	dec00304 	addi	sp,sp,12
 1001a04:	f800283a 	ret
 1001a08:	1001aa00 	call	1001aa0 <__sinit>
 1001a0c:	88800117 	ldw	r2,4(r17)
 1001a10:	8009883a 	mov	r4,r16
 1001a14:	880b883a 	mov	r5,r17
 1001a18:	10bfffc4 	addi	r2,r2,-1
 1001a1c:	88800115 	stw	r2,4(r17)
 1001a20:	103ff00e 	bge	r2,zero,10019e4 <_fgetc_r+0x3c>
 1001a24:	dfc00217 	ldw	ra,8(sp)
 1001a28:	dc400117 	ldw	r17,4(sp)
 1001a2c:	dc000017 	ldw	r16,0(sp)
 1001a30:	dec00304 	addi	sp,sp,12
 1001a34:	10039dc1 	jmpi	10039dc <__srget_r>

01001a38 <std>:
 1001a38:	00804034 	movhi	r2,256
 1001a3c:	108eab04 	addi	r2,r2,15020
 1001a40:	20800b15 	stw	r2,44(r4)
 1001a44:	00804034 	movhi	r2,256
 1001a48:	108ee604 	addi	r2,r2,15256
 1001a4c:	20800815 	stw	r2,32(r4)
 1001a50:	00c04034 	movhi	r3,256
 1001a54:	18cec704 	addi	r3,r3,15132
 1001a58:	00804034 	movhi	r2,256
 1001a5c:	108ead04 	addi	r2,r2,15028
 1001a60:	2140030d 	sth	r5,12(r4)
 1001a64:	2180038d 	sth	r6,14(r4)
 1001a68:	20c00915 	stw	r3,36(r4)
 1001a6c:	20800a15 	stw	r2,40(r4)
 1001a70:	20000015 	stw	zero,0(r4)
 1001a74:	20000115 	stw	zero,4(r4)
 1001a78:	20000215 	stw	zero,8(r4)
 1001a7c:	20000415 	stw	zero,16(r4)
 1001a80:	20000515 	stw	zero,20(r4)
 1001a84:	20000615 	stw	zero,24(r4)
 1001a88:	21000715 	stw	r4,28(r4)
 1001a8c:	f800283a 	ret

01001a90 <__sfp_lock_acquire>:
 1001a90:	f800283a 	ret

01001a94 <__sfp_lock_release>:
 1001a94:	f800283a 	ret

01001a98 <__sinit_lock_acquire>:
 1001a98:	f800283a 	ret

01001a9c <__sinit_lock_release>:
 1001a9c:	f800283a 	ret

01001aa0 <__sinit>:
 1001aa0:	20800e17 	ldw	r2,56(r4)
 1001aa4:	defffd04 	addi	sp,sp,-12
 1001aa8:	dc400115 	stw	r17,4(sp)
 1001aac:	dc000015 	stw	r16,0(sp)
 1001ab0:	dfc00215 	stw	ra,8(sp)
 1001ab4:	04400044 	movi	r17,1
 1001ab8:	01400104 	movi	r5,4
 1001abc:	000d883a 	mov	r6,zero
 1001ac0:	2021883a 	mov	r16,r4
 1001ac4:	2200bb04 	addi	r8,r4,748
 1001ac8:	200f883a 	mov	r7,r4
 1001acc:	10000526 	beq	r2,zero,1001ae4 <__sinit+0x44>
 1001ad0:	dfc00217 	ldw	ra,8(sp)
 1001ad4:	dc400117 	ldw	r17,4(sp)
 1001ad8:	dc000017 	ldw	r16,0(sp)
 1001adc:	dec00304 	addi	sp,sp,12
 1001ae0:	f800283a 	ret
 1001ae4:	21000117 	ldw	r4,4(r4)
 1001ae8:	00804034 	movhi	r2,256
 1001aec:	1086e104 	addi	r2,r2,7044
 1001af0:	00c000c4 	movi	r3,3
 1001af4:	80800f15 	stw	r2,60(r16)
 1001af8:	80c0b915 	stw	r3,740(r16)
 1001afc:	8200ba15 	stw	r8,744(r16)
 1001b00:	84400e15 	stw	r17,56(r16)
 1001b04:	8000b815 	stw	zero,736(r16)
 1001b08:	1001a380 	call	1001a38 <std>
 1001b0c:	81000217 	ldw	r4,8(r16)
 1001b10:	880d883a 	mov	r6,r17
 1001b14:	800f883a 	mov	r7,r16
 1001b18:	01400284 	movi	r5,10
 1001b1c:	1001a380 	call	1001a38 <std>
 1001b20:	81000317 	ldw	r4,12(r16)
 1001b24:	800f883a 	mov	r7,r16
 1001b28:	01400484 	movi	r5,18
 1001b2c:	01800084 	movi	r6,2
 1001b30:	dfc00217 	ldw	ra,8(sp)
 1001b34:	dc400117 	ldw	r17,4(sp)
 1001b38:	dc000017 	ldw	r16,0(sp)
 1001b3c:	dec00304 	addi	sp,sp,12
 1001b40:	1001a381 	jmpi	1001a38 <std>

01001b44 <__fp_lock>:
 1001b44:	0005883a 	mov	r2,zero
 1001b48:	f800283a 	ret

01001b4c <__fp_unlock>:
 1001b4c:	0005883a 	mov	r2,zero
 1001b50:	f800283a 	ret

01001b54 <__fp_unlock_all>:
 1001b54:	00804074 	movhi	r2,257
 1001b58:	10970804 	addi	r2,r2,23584
 1001b5c:	11000017 	ldw	r4,0(r2)
 1001b60:	01404034 	movhi	r5,256
 1001b64:	2946d304 	addi	r5,r5,6988
 1001b68:	1002a641 	jmpi	1002a64 <_fwalk>

01001b6c <__fp_lock_all>:
 1001b6c:	00804074 	movhi	r2,257
 1001b70:	10970804 	addi	r2,r2,23584
 1001b74:	11000017 	ldw	r4,0(r2)
 1001b78:	01404034 	movhi	r5,256
 1001b7c:	2946d104 	addi	r5,r5,6980
 1001b80:	1002a641 	jmpi	1002a64 <_fwalk>

01001b84 <_cleanup_r>:
 1001b84:	01404034 	movhi	r5,256
 1001b88:	2945b304 	addi	r5,r5,5836
 1001b8c:	1002a641 	jmpi	1002a64 <_fwalk>

01001b90 <_cleanup>:
 1001b90:	00804074 	movhi	r2,257
 1001b94:	10970904 	addi	r2,r2,23588
 1001b98:	11000017 	ldw	r4,0(r2)
 1001b9c:	1001b841 	jmpi	1001b84 <_cleanup_r>

01001ba0 <__sfmoreglue>:
 1001ba0:	defffc04 	addi	sp,sp,-16
 1001ba4:	dc000015 	stw	r16,0(sp)
 1001ba8:	2821883a 	mov	r16,r5
 1001bac:	dc400115 	stw	r17,4(sp)
 1001bb0:	01401704 	movi	r5,92
 1001bb4:	2023883a 	mov	r17,r4
 1001bb8:	8009883a 	mov	r4,r16
 1001bbc:	dfc00315 	stw	ra,12(sp)
 1001bc0:	dcc00215 	stw	r19,8(sp)
 1001bc4:	100154c0 	call	100154c <__mulsi3>
 1001bc8:	11400304 	addi	r5,r2,12
 1001bcc:	8809883a 	mov	r4,r17
 1001bd0:	1027883a 	mov	r19,r2
 1001bd4:	1002dd80 	call	1002dd8 <_malloc_r>
 1001bd8:	10c00304 	addi	r3,r2,12
 1001bdc:	1023883a 	mov	r17,r2
 1001be0:	1809883a 	mov	r4,r3
 1001be4:	980d883a 	mov	r6,r19
 1001be8:	000b883a 	mov	r5,zero
 1001bec:	10000b26 	beq	r2,zero,1001c1c <__sfmoreglue+0x7c>
 1001bf0:	14000115 	stw	r16,4(r2)
 1001bf4:	10c00215 	stw	r3,8(r2)
 1001bf8:	10000015 	stw	zero,0(r2)
 1001bfc:	10035b80 	call	10035b8 <memset>
 1001c00:	8805883a 	mov	r2,r17
 1001c04:	dfc00317 	ldw	ra,12(sp)
 1001c08:	dcc00217 	ldw	r19,8(sp)
 1001c0c:	dc400117 	ldw	r17,4(sp)
 1001c10:	dc000017 	ldw	r16,0(sp)
 1001c14:	dec00404 	addi	sp,sp,16
 1001c18:	f800283a 	ret
 1001c1c:	0023883a 	mov	r17,zero
 1001c20:	8805883a 	mov	r2,r17
 1001c24:	dfc00317 	ldw	ra,12(sp)
 1001c28:	dcc00217 	ldw	r19,8(sp)
 1001c2c:	dc400117 	ldw	r17,4(sp)
 1001c30:	dc000017 	ldw	r16,0(sp)
 1001c34:	dec00404 	addi	sp,sp,16
 1001c38:	f800283a 	ret

01001c3c <__sfp>:
 1001c3c:	defffd04 	addi	sp,sp,-12
 1001c40:	00804074 	movhi	r2,257
 1001c44:	10970904 	addi	r2,r2,23588
 1001c48:	dc000015 	stw	r16,0(sp)
 1001c4c:	14000017 	ldw	r16,0(r2)
 1001c50:	dc400115 	stw	r17,4(sp)
 1001c54:	dfc00215 	stw	ra,8(sp)
 1001c58:	80800e17 	ldw	r2,56(r16)
 1001c5c:	2023883a 	mov	r17,r4
 1001c60:	10002626 	beq	r2,zero,1001cfc <__sfp+0xc0>
 1001c64:	8400b804 	addi	r16,r16,736
 1001c68:	80800117 	ldw	r2,4(r16)
 1001c6c:	81000217 	ldw	r4,8(r16)
 1001c70:	10ffffc4 	addi	r3,r2,-1
 1001c74:	18000916 	blt	r3,zero,1001c9c <__sfp+0x60>
 1001c78:	2080030f 	ldh	r2,12(r4)
 1001c7c:	10000b26 	beq	r2,zero,1001cac <__sfp+0x70>
 1001c80:	017fffc4 	movi	r5,-1
 1001c84:	00000206 	br	1001c90 <__sfp+0x54>
 1001c88:	2080030f 	ldh	r2,12(r4)
 1001c8c:	10000726 	beq	r2,zero,1001cac <__sfp+0x70>
 1001c90:	18ffffc4 	addi	r3,r3,-1
 1001c94:	21001704 	addi	r4,r4,92
 1001c98:	197ffb1e 	bne	r3,r5,1001c88 <__sfp+0x4c>
 1001c9c:	80800017 	ldw	r2,0(r16)
 1001ca0:	10001926 	beq	r2,zero,1001d08 <__sfp+0xcc>
 1001ca4:	1021883a 	mov	r16,r2
 1001ca8:	003fef06 	br	1001c68 <__sfp+0x2c>
 1001cac:	00bfffc4 	movi	r2,-1
 1001cb0:	00c00044 	movi	r3,1
 1001cb4:	2080038d 	sth	r2,14(r4)
 1001cb8:	20c0030d 	sth	r3,12(r4)
 1001cbc:	20000015 	stw	zero,0(r4)
 1001cc0:	20000215 	stw	zero,8(r4)
 1001cc4:	20000115 	stw	zero,4(r4)
 1001cc8:	20000415 	stw	zero,16(r4)
 1001ccc:	20000515 	stw	zero,20(r4)
 1001cd0:	20000615 	stw	zero,24(r4)
 1001cd4:	20000c15 	stw	zero,48(r4)
 1001cd8:	20000d15 	stw	zero,52(r4)
 1001cdc:	20001115 	stw	zero,68(r4)
 1001ce0:	20001215 	stw	zero,72(r4)
 1001ce4:	2005883a 	mov	r2,r4
 1001ce8:	dfc00217 	ldw	ra,8(sp)
 1001cec:	dc400117 	ldw	r17,4(sp)
 1001cf0:	dc000017 	ldw	r16,0(sp)
 1001cf4:	dec00304 	addi	sp,sp,12
 1001cf8:	f800283a 	ret
 1001cfc:	8009883a 	mov	r4,r16
 1001d00:	1001aa00 	call	1001aa0 <__sinit>
 1001d04:	003fd706 	br	1001c64 <__sfp+0x28>
 1001d08:	8809883a 	mov	r4,r17
 1001d0c:	01400104 	movi	r5,4
 1001d10:	1001ba00 	call	1001ba0 <__sfmoreglue>
 1001d14:	80800015 	stw	r2,0(r16)
 1001d18:	103fe21e 	bne	r2,zero,1001ca4 <__sfp+0x68>
 1001d1c:	00800304 	movi	r2,12
 1001d20:	0009883a 	mov	r4,zero
 1001d24:	88800015 	stw	r2,0(r17)
 1001d28:	003fee06 	br	1001ce4 <__sfp+0xa8>

01001d2c <_fopen_r>:
 1001d2c:	defffa04 	addi	sp,sp,-24
 1001d30:	dcc00415 	stw	r19,16(sp)
 1001d34:	2827883a 	mov	r19,r5
 1001d38:	300b883a 	mov	r5,r6
 1001d3c:	d80d883a 	mov	r6,sp
 1001d40:	dc800315 	stw	r18,12(sp)
 1001d44:	dc400215 	stw	r17,8(sp)
 1001d48:	dc000115 	stw	r16,4(sp)
 1001d4c:	dfc00515 	stw	ra,20(sp)
 1001d50:	2021883a 	mov	r16,r4
 1001d54:	10045840 	call	1004584 <__sflags>
 1001d58:	1025883a 	mov	r18,r2
 1001d5c:	8009883a 	mov	r4,r16
 1001d60:	0023883a 	mov	r17,zero
 1001d64:	1000081e 	bne	r2,zero,1001d88 <_fopen_r+0x5c>
 1001d68:	8805883a 	mov	r2,r17
 1001d6c:	dfc00517 	ldw	ra,20(sp)
 1001d70:	dcc00417 	ldw	r19,16(sp)
 1001d74:	dc800317 	ldw	r18,12(sp)
 1001d78:	dc400217 	ldw	r17,8(sp)
 1001d7c:	dc000117 	ldw	r16,4(sp)
 1001d80:	dec00604 	addi	sp,sp,24
 1001d84:	f800283a 	ret
 1001d88:	1001c3c0 	call	1001c3c <__sfp>
 1001d8c:	1023883a 	mov	r17,r2
 1001d90:	980b883a 	mov	r5,r19
 1001d94:	8009883a 	mov	r4,r16
 1001d98:	01c06d84 	movi	r7,438
 1001d9c:	103ff226 	beq	r2,zero,1001d68 <_fopen_r+0x3c>
 1001da0:	d9800017 	ldw	r6,0(sp)
 1001da4:	10036500 	call	1003650 <_open_r>
 1001da8:	10001816 	blt	r2,zero,1001e0c <_fopen_r+0xe0>
 1001dac:	00c04034 	movhi	r3,256
 1001db0:	18cec704 	addi	r3,r3,15132
 1001db4:	923fffcc 	andi	r8,r18,65535
 1001db8:	8880038d 	sth	r2,14(r17)
 1001dbc:	00804034 	movhi	r2,256
 1001dc0:	108ee604 	addi	r2,r2,15256
 1001dc4:	88800815 	stw	r2,32(r17)
 1001dc8:	88c00915 	stw	r3,36(r17)
 1001dcc:	00804034 	movhi	r2,256
 1001dd0:	108ead04 	addi	r2,r2,15028
 1001dd4:	00c04034 	movhi	r3,256
 1001dd8:	18ceab04 	addi	r3,r3,15020
 1001ddc:	4200400c 	andi	r8,r8,256
 1001de0:	8c80030d 	sth	r18,12(r17)
 1001de4:	8009883a 	mov	r4,r16
 1001de8:	880b883a 	mov	r5,r17
 1001dec:	000d883a 	mov	r6,zero
 1001df0:	01c00084 	movi	r7,2
 1001df4:	88800a15 	stw	r2,40(r17)
 1001df8:	88c00b15 	stw	r3,44(r17)
 1001dfc:	8c400715 	stw	r17,28(r17)
 1001e00:	403fd926 	beq	r8,zero,1001d68 <_fopen_r+0x3c>
 1001e04:	10024c80 	call	10024c8 <_fseek_r>
 1001e08:	003fd706 	br	1001d68 <_fopen_r+0x3c>
 1001e0c:	1001a900 	call	1001a90 <__sfp_lock_acquire>
 1001e10:	8800030d 	sth	zero,12(r17)
 1001e14:	1001a940 	call	1001a94 <__sfp_lock_release>
 1001e18:	0023883a 	mov	r17,zero
 1001e1c:	003fd206 	br	1001d68 <_fopen_r+0x3c>

01001e20 <fopen>:
 1001e20:	01804074 	movhi	r6,257
 1001e24:	31970804 	addi	r6,r6,23584
 1001e28:	2007883a 	mov	r3,r4
 1001e2c:	31000017 	ldw	r4,0(r6)
 1001e30:	280d883a 	mov	r6,r5
 1001e34:	180b883a 	mov	r5,r3
 1001e38:	1001d2c1 	jmpi	1001d2c <_fopen_r>

01001e3c <_fread_r>:
 1001e3c:	defff504 	addi	sp,sp,-44
 1001e40:	dd800715 	stw	r22,28(sp)
 1001e44:	dc000115 	stw	r16,4(sp)
 1001e48:	202d883a 	mov	r22,r4
 1001e4c:	2821883a 	mov	r16,r5
 1001e50:	3809883a 	mov	r4,r7
 1001e54:	300b883a 	mov	r5,r6
 1001e58:	df000915 	stw	fp,36(sp)
 1001e5c:	ddc00815 	stw	r23,32(sp)
 1001e60:	dcc00415 	stw	r19,16(sp)
 1001e64:	dfc00a15 	stw	ra,40(sp)
 1001e68:	dd400615 	stw	r21,24(sp)
 1001e6c:	dd000515 	stw	r20,20(sp)
 1001e70:	dc800315 	stw	r18,12(sp)
 1001e74:	dc400215 	stw	r17,8(sp)
 1001e78:	d9800015 	stw	r6,0(sp)
 1001e7c:	3839883a 	mov	fp,r7
 1001e80:	100154c0 	call	100154c <__mulsi3>
 1001e84:	102f883a 	mov	r23,r2
 1001e88:	dcc00b17 	ldw	r19,44(sp)
 1001e8c:	10005926 	beq	r2,zero,1001ff4 <_fread_r+0x1b8>
 1001e90:	b0000226 	beq	r22,zero,1001e9c <_fread_r+0x60>
 1001e94:	b0800e17 	ldw	r2,56(r22)
 1001e98:	10005826 	beq	r2,zero,1001ffc <_fread_r+0x1c0>
 1001e9c:	9c400117 	ldw	r17,4(r19)
 1001ea0:	88005a16 	blt	r17,zero,100200c <_fread_r+0x1d0>
 1001ea4:	9880030b 	ldhu	r2,12(r19)
 1001ea8:	8029883a 	mov	r20,r16
 1001eac:	1080008c 	andi	r2,r2,2
 1001eb0:	1000221e 	bne	r2,zero,1001f3c <_fread_r+0x100>
 1001eb4:	b825883a 	mov	r18,r23
 1001eb8:	00000106 	br	1001ec0 <_fread_r+0x84>
 1001ebc:	9c400117 	ldw	r17,4(r19)
 1001ec0:	a009883a 	mov	r4,r20
 1001ec4:	880d883a 	mov	r6,r17
 1001ec8:	8c80552e 	bgeu	r17,r18,1002020 <_fread_r+0x1e4>
 1001ecc:	99400017 	ldw	r5,0(r19)
 1001ed0:	a469883a 	add	r20,r20,r17
 1001ed4:	9465c83a 	sub	r18,r18,r17
 1001ed8:	10035180 	call	1003518 <memcpy>
 1001edc:	98800017 	ldw	r2,0(r19)
 1001ee0:	b009883a 	mov	r4,r22
 1001ee4:	980b883a 	mov	r5,r19
 1001ee8:	1461883a 	add	r16,r2,r17
 1001eec:	9c000015 	stw	r16,0(r19)
 1001ef0:	10037fc0 	call	10037fc <__srefill_r>
 1001ef4:	103ff126 	beq	r2,zero,1001ebc <_fread_r+0x80>
 1001ef8:	d9400017 	ldw	r5,0(sp)
 1001efc:	bc89c83a 	sub	r4,r23,r18
 1001f00:	100153c0 	call	100153c <__udivsi3>
 1001f04:	1039883a 	mov	fp,r2
 1001f08:	e005883a 	mov	r2,fp
 1001f0c:	dfc00a17 	ldw	ra,40(sp)
 1001f10:	df000917 	ldw	fp,36(sp)
 1001f14:	ddc00817 	ldw	r23,32(sp)
 1001f18:	dd800717 	ldw	r22,28(sp)
 1001f1c:	dd400617 	ldw	r21,24(sp)
 1001f20:	dd000517 	ldw	r20,20(sp)
 1001f24:	dcc00417 	ldw	r19,16(sp)
 1001f28:	dc800317 	ldw	r18,12(sp)
 1001f2c:	dc400217 	ldw	r17,8(sp)
 1001f30:	dc000117 	ldw	r16,4(sp)
 1001f34:	dec00b04 	addi	sp,sp,44
 1001f38:	f800283a 	ret
 1001f3c:	b825883a 	mov	r18,r23
 1001f40:	8dc03536 	bltu	r17,r23,1002018 <_fread_r+0x1dc>
 1001f44:	99400017 	ldw	r5,0(r19)
 1001f48:	a009883a 	mov	r4,r20
 1001f4c:	900d883a 	mov	r6,r18
 1001f50:	10035180 	call	1003518 <memcpy>
 1001f54:	9c000017 	ldw	r16,0(r19)
 1001f58:	98800117 	ldw	r2,4(r19)
 1001f5c:	99400c17 	ldw	r5,48(r19)
 1001f60:	84a1883a 	add	r16,r16,r18
 1001f64:	14a3c83a 	sub	r17,r2,r18
 1001f68:	a4ab883a 	add	r21,r20,r18
 1001f6c:	9c400115 	stw	r17,4(r19)
 1001f70:	9c000015 	stw	r16,0(r19)
 1001f74:	bca9c83a 	sub	r20,r23,r18
 1001f78:	28000826 	beq	r5,zero,1001f9c <_fread_r+0x160>
 1001f7c:	a03fe226 	beq	r20,zero,1001f08 <_fread_r+0xcc>
 1001f80:	98801004 	addi	r2,r19,64
 1001f84:	28800326 	beq	r5,r2,1001f94 <_fread_r+0x158>
 1001f88:	b009883a 	mov	r4,r22
 1001f8c:	10021b40 	call	10021b4 <_free_r>
 1001f90:	9c000017 	ldw	r16,0(r19)
 1001f94:	98000c15 	stw	zero,48(r19)
 1001f98:	00000106 	br	1001fa0 <_fread_r+0x164>
 1001f9c:	a03fda26 	beq	r20,zero,1001f08 <_fread_r+0xcc>
 1001fa0:	9c800417 	ldw	r18,16(r19)
 1001fa4:	9c400517 	ldw	r17,20(r19)
 1001fa8:	9d400015 	stw	r21,0(r19)
 1001fac:	9d400415 	stw	r21,16(r19)
 1001fb0:	9d000515 	stw	r20,20(r19)
 1001fb4:	b009883a 	mov	r4,r22
 1001fb8:	980b883a 	mov	r5,r19
 1001fbc:	10037fc0 	call	10037fc <__srefill_r>
 1001fc0:	98c00117 	ldw	r3,4(r19)
 1001fc4:	9c800415 	stw	r18,16(r19)
 1001fc8:	9c400515 	stw	r17,20(r19)
 1001fcc:	a8eb883a 	add	r21,r21,r3
 1001fd0:	9c000015 	stw	r16,0(r19)
 1001fd4:	a0e9c83a 	sub	r20,r20,r3
 1001fd8:	98000115 	stw	zero,4(r19)
 1001fdc:	103fef26 	beq	r2,zero,1001f9c <_fread_r+0x160>
 1001fe0:	d9400017 	ldw	r5,0(sp)
 1001fe4:	bd09c83a 	sub	r4,r23,r20
 1001fe8:	100153c0 	call	100153c <__udivsi3>
 1001fec:	1039883a 	mov	fp,r2
 1001ff0:	003fc506 	br	1001f08 <_fread_r+0xcc>
 1001ff4:	0039883a 	mov	fp,zero
 1001ff8:	003fc306 	br	1001f08 <_fread_r+0xcc>
 1001ffc:	b009883a 	mov	r4,r22
 1002000:	1001aa00 	call	1001aa0 <__sinit>
 1002004:	9c400117 	ldw	r17,4(r19)
 1002008:	883fa60e 	bge	r17,zero,1001ea4 <_fread_r+0x68>
 100200c:	0023883a 	mov	r17,zero
 1002010:	98000115 	stw	zero,4(r19)
 1002014:	003fa306 	br	1001ea4 <_fread_r+0x68>
 1002018:	8825883a 	mov	r18,r17
 100201c:	003fc906 	br	1001f44 <_fread_r+0x108>
 1002020:	99400017 	ldw	r5,0(r19)
 1002024:	900d883a 	mov	r6,r18
 1002028:	10035180 	call	1003518 <memcpy>
 100202c:	98c00117 	ldw	r3,4(r19)
 1002030:	98800017 	ldw	r2,0(r19)
 1002034:	1c87c83a 	sub	r3,r3,r18
 1002038:	1485883a 	add	r2,r2,r18
 100203c:	98800015 	stw	r2,0(r19)
 1002040:	98c00115 	stw	r3,4(r19)
 1002044:	003fb006 	br	1001f08 <_fread_r+0xcc>

01002048 <fread>:
 1002048:	00804074 	movhi	r2,257
 100204c:	10970804 	addi	r2,r2,23584
 1002050:	2017883a 	mov	r11,r4
 1002054:	11000017 	ldw	r4,0(r2)
 1002058:	defffe04 	addi	sp,sp,-8
 100205c:	3013883a 	mov	r9,r6
 1002060:	2805883a 	mov	r2,r5
 1002064:	d9c00015 	stw	r7,0(sp)
 1002068:	580b883a 	mov	r5,r11
 100206c:	100d883a 	mov	r6,r2
 1002070:	480f883a 	mov	r7,r9
 1002074:	dfc00115 	stw	ra,4(sp)
 1002078:	1001e3c0 	call	1001e3c <_fread_r>
 100207c:	dfc00117 	ldw	ra,4(sp)
 1002080:	dec00204 	addi	sp,sp,8
 1002084:	f800283a 	ret

01002088 <_malloc_trim_r>:
 1002088:	defffb04 	addi	sp,sp,-20
 100208c:	dcc00315 	stw	r19,12(sp)
 1002090:	04c04074 	movhi	r19,257
 1002094:	9cd16404 	addi	r19,r19,17808
 1002098:	dc800215 	stw	r18,8(sp)
 100209c:	dc400115 	stw	r17,4(sp)
 10020a0:	dc000015 	stw	r16,0(sp)
 10020a4:	2823883a 	mov	r17,r5
 10020a8:	2025883a 	mov	r18,r4
 10020ac:	dfc00415 	stw	ra,16(sp)
 10020b0:	100608c0 	call	100608c <__malloc_lock>
 10020b4:	98800217 	ldw	r2,8(r19)
 10020b8:	9009883a 	mov	r4,r18
 10020bc:	000b883a 	mov	r5,zero
 10020c0:	10c00117 	ldw	r3,4(r2)
 10020c4:	00bfff04 	movi	r2,-4
 10020c8:	18a0703a 	and	r16,r3,r2
 10020cc:	8463c83a 	sub	r17,r16,r17
 10020d0:	8c43fbc4 	addi	r17,r17,4079
 10020d4:	8822d33a 	srli	r17,r17,12
 10020d8:	0083ffc4 	movi	r2,4095
 10020dc:	8c7fffc4 	addi	r17,r17,-1
 10020e0:	8822933a 	slli	r17,r17,12
 10020e4:	1440060e 	bge	r2,r17,1002100 <_malloc_trim_r+0x78>
 10020e8:	1003a3c0 	call	1003a3c <_sbrk_r>
 10020ec:	98c00217 	ldw	r3,8(r19)
 10020f0:	9009883a 	mov	r4,r18
 10020f4:	044bc83a 	sub	r5,zero,r17
 10020f8:	80c7883a 	add	r3,r16,r3
 10020fc:	10c00926 	beq	r2,r3,1002124 <_malloc_trim_r+0x9c>
 1002100:	10060ac0 	call	10060ac <__malloc_unlock>
 1002104:	0005883a 	mov	r2,zero
 1002108:	dfc00417 	ldw	ra,16(sp)
 100210c:	dcc00317 	ldw	r19,12(sp)
 1002110:	dc800217 	ldw	r18,8(sp)
 1002114:	dc400117 	ldw	r17,4(sp)
 1002118:	dc000017 	ldw	r16,0(sp)
 100211c:	dec00504 	addi	sp,sp,20
 1002120:	f800283a 	ret
 1002124:	9009883a 	mov	r4,r18
 1002128:	1003a3c0 	call	1003a3c <_sbrk_r>
 100212c:	844dc83a 	sub	r6,r16,r17
 1002130:	00ffffc4 	movi	r3,-1
 1002134:	9009883a 	mov	r4,r18
 1002138:	000b883a 	mov	r5,zero
 100213c:	01c04074 	movhi	r7,257
 1002140:	39ddf604 	addi	r7,r7,30680
 1002144:	31800054 	ori	r6,r6,1
 1002148:	10c00926 	beq	r2,r3,1002170 <_malloc_trim_r+0xe8>
 100214c:	38800017 	ldw	r2,0(r7)
 1002150:	98c00217 	ldw	r3,8(r19)
 1002154:	9009883a 	mov	r4,r18
 1002158:	1445c83a 	sub	r2,r2,r17
 100215c:	38800015 	stw	r2,0(r7)
 1002160:	19800115 	stw	r6,4(r3)
 1002164:	10060ac0 	call	10060ac <__malloc_unlock>
 1002168:	00800044 	movi	r2,1
 100216c:	003fe606 	br	1002108 <_malloc_trim_r+0x80>
 1002170:	1003a3c0 	call	1003a3c <_sbrk_r>
 1002174:	99800217 	ldw	r6,8(r19)
 1002178:	100f883a 	mov	r7,r2
 100217c:	9009883a 	mov	r4,r18
 1002180:	1187c83a 	sub	r3,r2,r6
 1002184:	008003c4 	movi	r2,15
 1002188:	19400054 	ori	r5,r3,1
 100218c:	10ffdc0e 	bge	r2,r3,1002100 <_malloc_trim_r+0x78>
 1002190:	00804074 	movhi	r2,257
 1002194:	10970b04 	addi	r2,r2,23596
 1002198:	10c00017 	ldw	r3,0(r2)
 100219c:	00804074 	movhi	r2,257
 10021a0:	109df604 	addi	r2,r2,30680
 10021a4:	31400115 	stw	r5,4(r6)
 10021a8:	38c7c83a 	sub	r3,r7,r3
 10021ac:	10c00015 	stw	r3,0(r2)
 10021b0:	003fd306 	br	1002100 <_malloc_trim_r+0x78>

010021b4 <_free_r>:
 10021b4:	defffd04 	addi	sp,sp,-12
 10021b8:	dc400115 	stw	r17,4(sp)
 10021bc:	dc000015 	stw	r16,0(sp)
 10021c0:	dfc00215 	stw	ra,8(sp)
 10021c4:	2821883a 	mov	r16,r5
 10021c8:	2023883a 	mov	r17,r4
 10021cc:	28005a26 	beq	r5,zero,1002338 <_free_r+0x184>
 10021d0:	100608c0 	call	100608c <__malloc_lock>
 10021d4:	823ffe04 	addi	r8,r16,-8
 10021d8:	41400117 	ldw	r5,4(r8)
 10021dc:	00bfff84 	movi	r2,-2
 10021e0:	02804074 	movhi	r10,257
 10021e4:	52916404 	addi	r10,r10,17808
 10021e8:	288e703a 	and	r7,r5,r2
 10021ec:	41cd883a 	add	r6,r8,r7
 10021f0:	30c00117 	ldw	r3,4(r6)
 10021f4:	51000217 	ldw	r4,8(r10)
 10021f8:	00bfff04 	movi	r2,-4
 10021fc:	1892703a 	and	r9,r3,r2
 1002200:	5017883a 	mov	r11,r10
 1002204:	31006726 	beq	r6,r4,10023a4 <_free_r+0x1f0>
 1002208:	2880004c 	andi	r2,r5,1
 100220c:	1005003a 	cmpeq	r2,r2,zero
 1002210:	32400115 	stw	r9,4(r6)
 1002214:	10001a1e 	bne	r2,zero,1002280 <_free_r+0xcc>
 1002218:	000b883a 	mov	r5,zero
 100221c:	3247883a 	add	r3,r6,r9
 1002220:	18800117 	ldw	r2,4(r3)
 1002224:	1080004c 	andi	r2,r2,1
 1002228:	1000231e 	bne	r2,zero,10022b8 <_free_r+0x104>
 100222c:	280ac03a 	cmpne	r5,r5,zero
 1002230:	3a4f883a 	add	r7,r7,r9
 1002234:	2800451e 	bne	r5,zero,100234c <_free_r+0x198>
 1002238:	31000217 	ldw	r4,8(r6)
 100223c:	00804074 	movhi	r2,257
 1002240:	10916604 	addi	r2,r2,17816
 1002244:	20807b26 	beq	r4,r2,1002434 <_free_r+0x280>
 1002248:	30800317 	ldw	r2,12(r6)
 100224c:	3a07883a 	add	r3,r7,r8
 1002250:	19c00015 	stw	r7,0(r3)
 1002254:	11000215 	stw	r4,8(r2)
 1002258:	20800315 	stw	r2,12(r4)
 100225c:	38800054 	ori	r2,r7,1
 1002260:	40800115 	stw	r2,4(r8)
 1002264:	28001a26 	beq	r5,zero,10022d0 <_free_r+0x11c>
 1002268:	8809883a 	mov	r4,r17
 100226c:	dfc00217 	ldw	ra,8(sp)
 1002270:	dc400117 	ldw	r17,4(sp)
 1002274:	dc000017 	ldw	r16,0(sp)
 1002278:	dec00304 	addi	sp,sp,12
 100227c:	10060ac1 	jmpi	10060ac <__malloc_unlock>
 1002280:	80bffe17 	ldw	r2,-8(r16)
 1002284:	50c00204 	addi	r3,r10,8
 1002288:	4091c83a 	sub	r8,r8,r2
 100228c:	41000217 	ldw	r4,8(r8)
 1002290:	388f883a 	add	r7,r7,r2
 1002294:	20c06126 	beq	r4,r3,100241c <_free_r+0x268>
 1002298:	40800317 	ldw	r2,12(r8)
 100229c:	3247883a 	add	r3,r6,r9
 10022a0:	000b883a 	mov	r5,zero
 10022a4:	11000215 	stw	r4,8(r2)
 10022a8:	20800315 	stw	r2,12(r4)
 10022ac:	18800117 	ldw	r2,4(r3)
 10022b0:	1080004c 	andi	r2,r2,1
 10022b4:	103fdd26 	beq	r2,zero,100222c <_free_r+0x78>
 10022b8:	38800054 	ori	r2,r7,1
 10022bc:	3a07883a 	add	r3,r7,r8
 10022c0:	280ac03a 	cmpne	r5,r5,zero
 10022c4:	40800115 	stw	r2,4(r8)
 10022c8:	19c00015 	stw	r7,0(r3)
 10022cc:	283fe61e 	bne	r5,zero,1002268 <_free_r+0xb4>
 10022d0:	00807fc4 	movi	r2,511
 10022d4:	11c01f2e 	bgeu	r2,r7,1002354 <_free_r+0x1a0>
 10022d8:	3806d27a 	srli	r3,r7,9
 10022dc:	1800481e 	bne	r3,zero,1002400 <_free_r+0x24c>
 10022e0:	3804d0fa 	srli	r2,r7,3
 10022e4:	100690fa 	slli	r3,r2,3
 10022e8:	1acd883a 	add	r6,r3,r11
 10022ec:	31400217 	ldw	r5,8(r6)
 10022f0:	31405926 	beq	r6,r5,1002458 <_free_r+0x2a4>
 10022f4:	28800117 	ldw	r2,4(r5)
 10022f8:	00ffff04 	movi	r3,-4
 10022fc:	10c4703a 	and	r2,r2,r3
 1002300:	3880022e 	bgeu	r7,r2,100230c <_free_r+0x158>
 1002304:	29400217 	ldw	r5,8(r5)
 1002308:	317ffa1e 	bne	r6,r5,10022f4 <_free_r+0x140>
 100230c:	29800317 	ldw	r6,12(r5)
 1002310:	41800315 	stw	r6,12(r8)
 1002314:	41400215 	stw	r5,8(r8)
 1002318:	8809883a 	mov	r4,r17
 100231c:	2a000315 	stw	r8,12(r5)
 1002320:	32000215 	stw	r8,8(r6)
 1002324:	dfc00217 	ldw	ra,8(sp)
 1002328:	dc400117 	ldw	r17,4(sp)
 100232c:	dc000017 	ldw	r16,0(sp)
 1002330:	dec00304 	addi	sp,sp,12
 1002334:	10060ac1 	jmpi	10060ac <__malloc_unlock>
 1002338:	dfc00217 	ldw	ra,8(sp)
 100233c:	dc400117 	ldw	r17,4(sp)
 1002340:	dc000017 	ldw	r16,0(sp)
 1002344:	dec00304 	addi	sp,sp,12
 1002348:	f800283a 	ret
 100234c:	31000217 	ldw	r4,8(r6)
 1002350:	003fbd06 	br	1002248 <_free_r+0x94>
 1002354:	3806d0fa 	srli	r3,r7,3
 1002358:	00800044 	movi	r2,1
 100235c:	51400117 	ldw	r5,4(r10)
 1002360:	180890fa 	slli	r4,r3,3
 1002364:	1807d0ba 	srai	r3,r3,2
 1002368:	22c9883a 	add	r4,r4,r11
 100236c:	21800217 	ldw	r6,8(r4)
 1002370:	10c4983a 	sll	r2,r2,r3
 1002374:	41000315 	stw	r4,12(r8)
 1002378:	41800215 	stw	r6,8(r8)
 100237c:	288ab03a 	or	r5,r5,r2
 1002380:	22000215 	stw	r8,8(r4)
 1002384:	8809883a 	mov	r4,r17
 1002388:	51400115 	stw	r5,4(r10)
 100238c:	32000315 	stw	r8,12(r6)
 1002390:	dfc00217 	ldw	ra,8(sp)
 1002394:	dc400117 	ldw	r17,4(sp)
 1002398:	dc000017 	ldw	r16,0(sp)
 100239c:	dec00304 	addi	sp,sp,12
 10023a0:	10060ac1 	jmpi	10060ac <__malloc_unlock>
 10023a4:	2880004c 	andi	r2,r5,1
 10023a8:	3a4d883a 	add	r6,r7,r9
 10023ac:	1000071e 	bne	r2,zero,10023cc <_free_r+0x218>
 10023b0:	80bffe17 	ldw	r2,-8(r16)
 10023b4:	4091c83a 	sub	r8,r8,r2
 10023b8:	41000317 	ldw	r4,12(r8)
 10023bc:	40c00217 	ldw	r3,8(r8)
 10023c0:	308d883a 	add	r6,r6,r2
 10023c4:	20c00215 	stw	r3,8(r4)
 10023c8:	19000315 	stw	r4,12(r3)
 10023cc:	00804074 	movhi	r2,257
 10023d0:	10970a04 	addi	r2,r2,23592
 10023d4:	11000017 	ldw	r4,0(r2)
 10023d8:	30c00054 	ori	r3,r6,1
 10023dc:	52000215 	stw	r8,8(r10)
 10023e0:	40c00115 	stw	r3,4(r8)
 10023e4:	313fa036 	bltu	r6,r4,1002268 <_free_r+0xb4>
 10023e8:	00804074 	movhi	r2,257
 10023ec:	109ded04 	addi	r2,r2,30644
 10023f0:	11400017 	ldw	r5,0(r2)
 10023f4:	8809883a 	mov	r4,r17
 10023f8:	10020880 	call	1002088 <_malloc_trim_r>
 10023fc:	003f9a06 	br	1002268 <_free_r+0xb4>
 1002400:	00800104 	movi	r2,4
 1002404:	10c0072e 	bgeu	r2,r3,1002424 <_free_r+0x270>
 1002408:	00800504 	movi	r2,20
 100240c:	10c01936 	bltu	r2,r3,1002474 <_free_r+0x2c0>
 1002410:	188016c4 	addi	r2,r3,91
 1002414:	100690fa 	slli	r3,r2,3
 1002418:	003fb306 	br	10022e8 <_free_r+0x134>
 100241c:	01400044 	movi	r5,1
 1002420:	003f7e06 	br	100221c <_free_r+0x68>
 1002424:	3804d1ba 	srli	r2,r7,6
 1002428:	10800e04 	addi	r2,r2,56
 100242c:	100690fa 	slli	r3,r2,3
 1002430:	003fad06 	br	10022e8 <_free_r+0x134>
 1002434:	22000315 	stw	r8,12(r4)
 1002438:	22000215 	stw	r8,8(r4)
 100243c:	3a05883a 	add	r2,r7,r8
 1002440:	38c00054 	ori	r3,r7,1
 1002444:	11c00015 	stw	r7,0(r2)
 1002448:	41000215 	stw	r4,8(r8)
 100244c:	40c00115 	stw	r3,4(r8)
 1002450:	41000315 	stw	r4,12(r8)
 1002454:	003f8406 	br	1002268 <_free_r+0xb4>
 1002458:	1005d0ba 	srai	r2,r2,2
 100245c:	00c00044 	movi	r3,1
 1002460:	51000117 	ldw	r4,4(r10)
 1002464:	1886983a 	sll	r3,r3,r2
 1002468:	20c8b03a 	or	r4,r4,r3
 100246c:	51000115 	stw	r4,4(r10)
 1002470:	003fa706 	br	1002310 <_free_r+0x15c>
 1002474:	00801504 	movi	r2,84
 1002478:	10c00436 	bltu	r2,r3,100248c <_free_r+0x2d8>
 100247c:	3804d33a 	srli	r2,r7,12
 1002480:	10801b84 	addi	r2,r2,110
 1002484:	100690fa 	slli	r3,r2,3
 1002488:	003f9706 	br	10022e8 <_free_r+0x134>
 100248c:	00805504 	movi	r2,340
 1002490:	10c00436 	bltu	r2,r3,10024a4 <_free_r+0x2f0>
 1002494:	3804d3fa 	srli	r2,r7,15
 1002498:	10801dc4 	addi	r2,r2,119
 100249c:	100690fa 	slli	r3,r2,3
 10024a0:	003f9106 	br	10022e8 <_free_r+0x134>
 10024a4:	00815504 	movi	r2,1364
 10024a8:	10c0032e 	bgeu	r2,r3,10024b8 <_free_r+0x304>
 10024ac:	00801f84 	movi	r2,126
 10024b0:	00c0fc04 	movi	r3,1008
 10024b4:	003f8c06 	br	10022e8 <_free_r+0x134>
 10024b8:	3804d4ba 	srli	r2,r7,18
 10024bc:	10801f04 	addi	r2,r2,124
 10024c0:	100690fa 	slli	r3,r2,3
 10024c4:	003f8806 	br	10022e8 <_free_r+0x134>

010024c8 <_fseek_r>:
 10024c8:	deffe804 	addi	sp,sp,-96
 10024cc:	dd801515 	stw	r22,84(sp)
 10024d0:	dcc01215 	stw	r19,72(sp)
 10024d4:	dc801115 	stw	r18,68(sp)
 10024d8:	dc000f15 	stw	r16,60(sp)
 10024dc:	dfc01715 	stw	ra,92(sp)
 10024e0:	ddc01615 	stw	r23,88(sp)
 10024e4:	dd401415 	stw	r21,80(sp)
 10024e8:	dd001315 	stw	r20,76(sp)
 10024ec:	dc401015 	stw	r17,64(sp)
 10024f0:	2025883a 	mov	r18,r4
 10024f4:	2821883a 	mov	r16,r5
 10024f8:	302d883a 	mov	r22,r6
 10024fc:	3827883a 	mov	r19,r7
 1002500:	20000226 	beq	r4,zero,100250c <_fseek_r+0x44>
 1002504:	20800e17 	ldw	r2,56(r4)
 1002508:	10007826 	beq	r2,zero,10026ec <_fseek_r+0x224>
 100250c:	8080030b 	ldhu	r2,12(r16)
 1002510:	00c04204 	movi	r3,264
 1002514:	1080420c 	andi	r2,r2,264
 1002518:	10c07926 	beq	r2,r3,1002700 <_fseek_r+0x238>
 100251c:	85400a17 	ldw	r21,40(r16)
 1002520:	a800ea26 	beq	r21,zero,10028cc <_fseek_r+0x404>
 1002524:	00800044 	movi	r2,1
 1002528:	98805f26 	beq	r19,r2,10026a8 <_fseek_r+0x1e0>
 100252c:	00800084 	movi	r2,2
 1002530:	98801026 	beq	r19,r2,1002574 <_fseek_r+0xac>
 1002534:	98000f26 	beq	r19,zero,1002574 <_fseek_r+0xac>
 1002538:	00800584 	movi	r2,22
 100253c:	013fffc4 	movi	r4,-1
 1002540:	90800015 	stw	r2,0(r18)
 1002544:	2005883a 	mov	r2,r4
 1002548:	dfc01717 	ldw	ra,92(sp)
 100254c:	ddc01617 	ldw	r23,88(sp)
 1002550:	dd801517 	ldw	r22,84(sp)
 1002554:	dd401417 	ldw	r21,80(sp)
 1002558:	dd001317 	ldw	r20,76(sp)
 100255c:	dcc01217 	ldw	r19,72(sp)
 1002560:	dc801117 	ldw	r18,68(sp)
 1002564:	dc401017 	ldw	r17,64(sp)
 1002568:	dc000f17 	ldw	r16,60(sp)
 100256c:	dec01804 	addi	sp,sp,96
 1002570:	f800283a 	ret
 1002574:	81800417 	ldw	r6,16(r16)
 1002578:	0023883a 	mov	r17,zero
 100257c:	002f883a 	mov	r23,zero
 1002580:	3000a626 	beq	r6,zero,100281c <_fseek_r+0x354>
 1002584:	8100030b 	ldhu	r4,12(r16)
 1002588:	2082068c 	andi	r2,r4,2074
 100258c:	1000081e 	bne	r2,zero,10025b0 <_fseek_r+0xe8>
 1002590:	2081000c 	andi	r2,r4,1024
 1002594:	10001b1e 	bne	r2,zero,1002604 <_fseek_r+0x13c>
 1002598:	00804034 	movhi	r2,256
 100259c:	108ead04 	addi	r2,r2,15028
 10025a0:	a8800926 	beq	r21,r2,10025c8 <_fseek_r+0x100>
 10025a4:	8080030b 	ldhu	r2,12(r16)
 10025a8:	10820014 	ori	r2,r2,2048
 10025ac:	8080030d 	sth	r2,12(r16)
 10025b0:	9009883a 	mov	r4,r18
 10025b4:	800b883a 	mov	r5,r16
 10025b8:	10016e00 	call	10016e0 <_fflush_r>
 10025bc:	1000a326 	beq	r2,zero,100284c <_fseek_r+0x384>
 10025c0:	013fffc4 	movi	r4,-1
 10025c4:	003fdf06 	br	1002544 <_fseek_r+0x7c>
 10025c8:	8140038f 	ldh	r5,14(r16)
 10025cc:	283ff516 	blt	r5,zero,10025a4 <_fseek_r+0xdc>
 10025d0:	9009883a 	mov	r4,r18
 10025d4:	d80d883a 	mov	r6,sp
 10025d8:	10029280 	call	1002928 <_fstat_r>
 10025dc:	103ff11e 	bne	r2,zero,10025a4 <_fseek_r+0xdc>
 10025e0:	d8800117 	ldw	r2,4(sp)
 10025e4:	00e00014 	movui	r3,32768
 10025e8:	10bc000c 	andi	r2,r2,61440
 10025ec:	10ffed1e 	bne	r2,r3,10025a4 <_fseek_r+0xdc>
 10025f0:	80c0030b 	ldhu	r3,12(r16)
 10025f4:	00810004 	movi	r2,1024
 10025f8:	80801315 	stw	r2,76(r16)
 10025fc:	1886b03a 	or	r3,r3,r2
 1002600:	80c0030d 	sth	r3,12(r16)
 1002604:	9800701e 	bne	r19,zero,10027c8 <_fseek_r+0x300>
 1002608:	b029883a 	mov	r20,r22
 100260c:	b804c03a 	cmpne	r2,r23,zero
 1002610:	10003f1e 	bne	r2,zero,1002710 <_fseek_r+0x248>
 1002614:	8100030b 	ldhu	r4,12(r16)
 1002618:	2084000c 	andi	r2,r4,4096
 100261c:	1000a126 	beq	r2,zero,10028a4 <_fseek_r+0x3dc>
 1002620:	81801417 	ldw	r6,80(r16)
 1002624:	80c00117 	ldw	r3,4(r16)
 1002628:	81400c17 	ldw	r5,48(r16)
 100262c:	30e3c83a 	sub	r17,r6,r3
 1002630:	28008026 	beq	r5,zero,1002834 <_fseek_r+0x36c>
 1002634:	81c00f17 	ldw	r7,60(r16)
 1002638:	89e3c83a 	sub	r17,r17,r7
 100263c:	80800e17 	ldw	r2,56(r16)
 1002640:	81800417 	ldw	r6,16(r16)
 1002644:	88c7883a 	add	r3,r17,r3
 1002648:	1185c83a 	sub	r2,r2,r6
 100264c:	11cf883a 	add	r7,r2,r7
 1002650:	1887c83a 	sub	r3,r3,r2
 1002654:	2088000c 	andi	r2,r4,8192
 1002658:	10003e1e 	bne	r2,zero,1002754 <_fseek_r+0x28c>
 100265c:	a0c03d16 	blt	r20,r3,1002754 <_fseek_r+0x28c>
 1002660:	38c5883a 	add	r2,r7,r3
 1002664:	a0803b2e 	bgeu	r20,r2,1002754 <_fseek_r+0x28c>
 1002668:	a0c5c83a 	sub	r2,r20,r3
 100266c:	3887c83a 	sub	r3,r7,r2
 1002670:	3085883a 	add	r2,r6,r2
 1002674:	80800015 	stw	r2,0(r16)
 1002678:	80c00115 	stw	r3,4(r16)
 100267c:	28000526 	beq	r5,zero,1002694 <_fseek_r+0x1cc>
 1002680:	80801004 	addi	r2,r16,64
 1002684:	28800226 	beq	r5,r2,1002690 <_fseek_r+0x1c8>
 1002688:	9009883a 	mov	r4,r18
 100268c:	10021b40 	call	10021b4 <_free_r>
 1002690:	80000c15 	stw	zero,48(r16)
 1002694:	8080030b 	ldhu	r2,12(r16)
 1002698:	0009883a 	mov	r4,zero
 100269c:	10bff7cc 	andi	r2,r2,65503
 10026a0:	8080030d 	sth	r2,12(r16)
 10026a4:	003fa706 	br	1002544 <_fseek_r+0x7c>
 10026a8:	9009883a 	mov	r4,r18
 10026ac:	800b883a 	mov	r5,r16
 10026b0:	10016e00 	call	10016e0 <_fflush_r>
 10026b4:	8100030b 	ldhu	r4,12(r16)
 10026b8:	2084000c 	andi	r2,r4,4096
 10026bc:	10008726 	beq	r2,zero,10028dc <_fseek_r+0x414>
 10026c0:	84401417 	ldw	r17,80(r16)
 10026c4:	2080010c 	andi	r2,r4,4
 10026c8:	1000171e 	bne	r2,zero,1002728 <_fseek_r+0x260>
 10026cc:	2080020c 	andi	r2,r4,8
 10026d0:	10003b26 	beq	r2,zero,10027c0 <_fseek_r+0x2f8>
 10026d4:	80800017 	ldw	r2,0(r16)
 10026d8:	10003926 	beq	r2,zero,10027c0 <_fseek_r+0x2f8>
 10026dc:	81800417 	ldw	r6,16(r16)
 10026e0:	1185c83a 	sub	r2,r2,r6
 10026e4:	88a3883a 	add	r17,r17,r2
 10026e8:	00001606 	br	1002744 <_fseek_r+0x27c>
 10026ec:	1001aa00 	call	1001aa0 <__sinit>
 10026f0:	8080030b 	ldhu	r2,12(r16)
 10026f4:	00c04204 	movi	r3,264
 10026f8:	1080420c 	andi	r2,r2,264
 10026fc:	10ff871e 	bne	r2,r3,100251c <_fseek_r+0x54>
 1002700:	9009883a 	mov	r4,r18
 1002704:	800b883a 	mov	r5,r16
 1002708:	10016e00 	call	10016e0 <_fflush_r>
 100270c:	003f8306 	br	100251c <_fseek_r+0x54>
 1002710:	81400c17 	ldw	r5,48(r16)
 1002714:	28004526 	beq	r5,zero,100282c <_fseek_r+0x364>
 1002718:	8100030b 	ldhu	r4,12(r16)
 100271c:	80c00117 	ldw	r3,4(r16)
 1002720:	81c00f17 	ldw	r7,60(r16)
 1002724:	003fc506 	br	100263c <_fseek_r+0x174>
 1002728:	80c00117 	ldw	r3,4(r16)
 100272c:	80800c17 	ldw	r2,48(r16)
 1002730:	88e3c83a 	sub	r17,r17,r3
 1002734:	10002226 	beq	r2,zero,10027c0 <_fseek_r+0x2f8>
 1002738:	81c00f17 	ldw	r7,60(r16)
 100273c:	81800417 	ldw	r6,16(r16)
 1002740:	89e3c83a 	sub	r17,r17,r7
 1002744:	b46d883a 	add	r22,r22,r17
 1002748:	0027883a 	mov	r19,zero
 100274c:	05c00044 	movi	r23,1
 1002750:	003f8b06 	br	1002580 <_fseek_r+0xb8>
 1002754:	80801317 	ldw	r2,76(r16)
 1002758:	81400717 	ldw	r5,28(r16)
 100275c:	9009883a 	mov	r4,r18
 1002760:	0085c83a 	sub	r2,zero,r2
 1002764:	a0a2703a 	and	r17,r20,r2
 1002768:	880d883a 	mov	r6,r17
 100276c:	000f883a 	mov	r7,zero
 1002770:	a83ee83a 	callr	r21
 1002774:	00ffffc4 	movi	r3,-1
 1002778:	10ff8d26 	beq	r2,r3,10025b0 <_fseek_r+0xe8>
 100277c:	80800417 	ldw	r2,16(r16)
 1002780:	81400c17 	ldw	r5,48(r16)
 1002784:	80000115 	stw	zero,4(r16)
 1002788:	80800015 	stw	r2,0(r16)
 100278c:	28000526 	beq	r5,zero,10027a4 <_fseek_r+0x2dc>
 1002790:	80801004 	addi	r2,r16,64
 1002794:	28800226 	beq	r5,r2,10027a0 <_fseek_r+0x2d8>
 1002798:	9009883a 	mov	r4,r18
 100279c:	10021b40 	call	10021b4 <_free_r>
 10027a0:	80000c15 	stw	zero,48(r16)
 10027a4:	8080030b 	ldhu	r2,12(r16)
 10027a8:	a463c83a 	sub	r17,r20,r17
 10027ac:	10bff7cc 	andi	r2,r2,65503
 10027b0:	8080030d 	sth	r2,12(r16)
 10027b4:	88000c1e 	bne	r17,zero,10027e8 <_fseek_r+0x320>
 10027b8:	0009883a 	mov	r4,zero
 10027bc:	003f6106 	br	1002544 <_fseek_r+0x7c>
 10027c0:	81800417 	ldw	r6,16(r16)
 10027c4:	003fdf06 	br	1002744 <_fseek_r+0x27c>
 10027c8:	8140038f 	ldh	r5,14(r16)
 10027cc:	9009883a 	mov	r4,r18
 10027d0:	d80d883a 	mov	r6,sp
 10027d4:	10029280 	call	1002928 <_fstat_r>
 10027d8:	103f751e 	bne	r2,zero,10025b0 <_fseek_r+0xe8>
 10027dc:	d8800417 	ldw	r2,16(sp)
 10027e0:	b0a9883a 	add	r20,r22,r2
 10027e4:	003f8906 	br	100260c <_fseek_r+0x144>
 10027e8:	9009883a 	mov	r4,r18
 10027ec:	800b883a 	mov	r5,r16
 10027f0:	10037fc0 	call	10037fc <__srefill_r>
 10027f4:	103f6e1e 	bne	r2,zero,10025b0 <_fseek_r+0xe8>
 10027f8:	80c00117 	ldw	r3,4(r16)
 10027fc:	1c7f6c36 	bltu	r3,r17,10025b0 <_fseek_r+0xe8>
 1002800:	80800017 	ldw	r2,0(r16)
 1002804:	1c47c83a 	sub	r3,r3,r17
 1002808:	0009883a 	mov	r4,zero
 100280c:	1445883a 	add	r2,r2,r17
 1002810:	80c00115 	stw	r3,4(r16)
 1002814:	80800015 	stw	r2,0(r16)
 1002818:	003f4a06 	br	1002544 <_fseek_r+0x7c>
 100281c:	9009883a 	mov	r4,r18
 1002820:	800b883a 	mov	r5,r16
 1002824:	1002c440 	call	1002c44 <__smakebuf_r>
 1002828:	003f5606 	br	1002584 <_fseek_r+0xbc>
 100282c:	8100030b 	ldhu	r4,12(r16)
 1002830:	80c00117 	ldw	r3,4(r16)
 1002834:	80800017 	ldw	r2,0(r16)
 1002838:	81800417 	ldw	r6,16(r16)
 100283c:	1185c83a 	sub	r2,r2,r6
 1002840:	10cf883a 	add	r7,r2,r3
 1002844:	8887c83a 	sub	r3,r17,r2
 1002848:	003f8206 	br	1002654 <_fseek_r+0x18c>
 100284c:	81400717 	ldw	r5,28(r16)
 1002850:	b00d883a 	mov	r6,r22
 1002854:	980f883a 	mov	r7,r19
 1002858:	9009883a 	mov	r4,r18
 100285c:	a83ee83a 	callr	r21
 1002860:	00ffffc4 	movi	r3,-1
 1002864:	10ff5626 	beq	r2,r3,10025c0 <_fseek_r+0xf8>
 1002868:	81400c17 	ldw	r5,48(r16)
 100286c:	28000526 	beq	r5,zero,1002884 <_fseek_r+0x3bc>
 1002870:	80801004 	addi	r2,r16,64
 1002874:	28800226 	beq	r5,r2,1002880 <_fseek_r+0x3b8>
 1002878:	9009883a 	mov	r4,r18
 100287c:	10021b40 	call	10021b4 <_free_r>
 1002880:	80000c15 	stw	zero,48(r16)
 1002884:	8080030b 	ldhu	r2,12(r16)
 1002888:	80c00417 	ldw	r3,16(r16)
 100288c:	0009883a 	mov	r4,zero
 1002890:	10bdf7cc 	andi	r2,r2,63455
 1002894:	8080030d 	sth	r2,12(r16)
 1002898:	80c00015 	stw	r3,0(r16)
 100289c:	80000115 	stw	zero,4(r16)
 10028a0:	003f2806 	br	1002544 <_fseek_r+0x7c>
 10028a4:	81400717 	ldw	r5,28(r16)
 10028a8:	000d883a 	mov	r6,zero
 10028ac:	9009883a 	mov	r4,r18
 10028b0:	01c00044 	movi	r7,1
 10028b4:	a83ee83a 	callr	r21
 10028b8:	100d883a 	mov	r6,r2
 10028bc:	00bfffc4 	movi	r2,-1
 10028c0:	30bf3b26 	beq	r6,r2,10025b0 <_fseek_r+0xe8>
 10028c4:	8100030b 	ldhu	r4,12(r16)
 10028c8:	003f5606 	br	1002624 <_fseek_r+0x15c>
 10028cc:	00800744 	movi	r2,29
 10028d0:	013fffc4 	movi	r4,-1
 10028d4:	90800015 	stw	r2,0(r18)
 10028d8:	003f1a06 	br	1002544 <_fseek_r+0x7c>
 10028dc:	81400717 	ldw	r5,28(r16)
 10028e0:	980f883a 	mov	r7,r19
 10028e4:	9009883a 	mov	r4,r18
 10028e8:	000d883a 	mov	r6,zero
 10028ec:	a83ee83a 	callr	r21
 10028f0:	1023883a 	mov	r17,r2
 10028f4:	00bfffc4 	movi	r2,-1
 10028f8:	88bf3126 	beq	r17,r2,10025c0 <_fseek_r+0xf8>
 10028fc:	8100030b 	ldhu	r4,12(r16)
 1002900:	003f7006 	br	10026c4 <_fseek_r+0x1fc>

01002904 <fseek>:
 1002904:	00804074 	movhi	r2,257
 1002908:	10970804 	addi	r2,r2,23584
 100290c:	2013883a 	mov	r9,r4
 1002910:	11000017 	ldw	r4,0(r2)
 1002914:	2805883a 	mov	r2,r5
 1002918:	300f883a 	mov	r7,r6
 100291c:	480b883a 	mov	r5,r9
 1002920:	100d883a 	mov	r6,r2
 1002924:	10024c81 	jmpi	10024c8 <_fseek_r>

01002928 <_fstat_r>:
 1002928:	defffd04 	addi	sp,sp,-12
 100292c:	dc000015 	stw	r16,0(sp)
 1002930:	04004074 	movhi	r16,257
 1002934:	841dec04 	addi	r16,r16,30640
 1002938:	dc400115 	stw	r17,4(sp)
 100293c:	80000015 	stw	zero,0(r16)
 1002940:	2023883a 	mov	r17,r4
 1002944:	2809883a 	mov	r4,r5
 1002948:	300b883a 	mov	r5,r6
 100294c:	dfc00215 	stw	ra,8(sp)
 1002950:	1005b840 	call	1005b84 <fstat>
 1002954:	1007883a 	mov	r3,r2
 1002958:	00bfffc4 	movi	r2,-1
 100295c:	18800626 	beq	r3,r2,1002978 <_fstat_r+0x50>
 1002960:	1805883a 	mov	r2,r3
 1002964:	dfc00217 	ldw	ra,8(sp)
 1002968:	dc400117 	ldw	r17,4(sp)
 100296c:	dc000017 	ldw	r16,0(sp)
 1002970:	dec00304 	addi	sp,sp,12
 1002974:	f800283a 	ret
 1002978:	80800017 	ldw	r2,0(r16)
 100297c:	103ff826 	beq	r2,zero,1002960 <_fstat_r+0x38>
 1002980:	88800015 	stw	r2,0(r17)
 1002984:	1805883a 	mov	r2,r3
 1002988:	dfc00217 	ldw	ra,8(sp)
 100298c:	dc400117 	ldw	r17,4(sp)
 1002990:	dc000017 	ldw	r16,0(sp)
 1002994:	dec00304 	addi	sp,sp,12
 1002998:	f800283a 	ret

0100299c <_fwalk_reent>:
 100299c:	defff704 	addi	sp,sp,-36
 10029a0:	dcc00315 	stw	r19,12(sp)
 10029a4:	24c0b804 	addi	r19,r4,736
 10029a8:	dd800615 	stw	r22,24(sp)
 10029ac:	dd400515 	stw	r21,20(sp)
 10029b0:	dfc00815 	stw	ra,32(sp)
 10029b4:	ddc00715 	stw	r23,28(sp)
 10029b8:	dd000415 	stw	r20,16(sp)
 10029bc:	dc800215 	stw	r18,8(sp)
 10029c0:	dc400115 	stw	r17,4(sp)
 10029c4:	dc000015 	stw	r16,0(sp)
 10029c8:	202b883a 	mov	r21,r4
 10029cc:	282d883a 	mov	r22,r5
 10029d0:	1001a900 	call	1001a90 <__sfp_lock_acquire>
 10029d4:	98002126 	beq	r19,zero,1002a5c <_fwalk_reent+0xc0>
 10029d8:	002f883a 	mov	r23,zero
 10029dc:	9c800117 	ldw	r18,4(r19)
 10029e0:	9c000217 	ldw	r16,8(r19)
 10029e4:	90bfffc4 	addi	r2,r18,-1
 10029e8:	10000d16 	blt	r2,zero,1002a20 <_fwalk_reent+0x84>
 10029ec:	0023883a 	mov	r17,zero
 10029f0:	053fffc4 	movi	r20,-1
 10029f4:	8080030f 	ldh	r2,12(r16)
 10029f8:	8c400044 	addi	r17,r17,1
 10029fc:	10000626 	beq	r2,zero,1002a18 <_fwalk_reent+0x7c>
 1002a00:	8080038f 	ldh	r2,14(r16)
 1002a04:	800b883a 	mov	r5,r16
 1002a08:	a809883a 	mov	r4,r21
 1002a0c:	15000226 	beq	r2,r20,1002a18 <_fwalk_reent+0x7c>
 1002a10:	b03ee83a 	callr	r22
 1002a14:	b8aeb03a 	or	r23,r23,r2
 1002a18:	84001704 	addi	r16,r16,92
 1002a1c:	947ff51e 	bne	r18,r17,10029f4 <_fwalk_reent+0x58>
 1002a20:	9cc00017 	ldw	r19,0(r19)
 1002a24:	983fed1e 	bne	r19,zero,10029dc <_fwalk_reent+0x40>
 1002a28:	1001a940 	call	1001a94 <__sfp_lock_release>
 1002a2c:	b805883a 	mov	r2,r23
 1002a30:	dfc00817 	ldw	ra,32(sp)
 1002a34:	ddc00717 	ldw	r23,28(sp)
 1002a38:	dd800617 	ldw	r22,24(sp)
 1002a3c:	dd400517 	ldw	r21,20(sp)
 1002a40:	dd000417 	ldw	r20,16(sp)
 1002a44:	dcc00317 	ldw	r19,12(sp)
 1002a48:	dc800217 	ldw	r18,8(sp)
 1002a4c:	dc400117 	ldw	r17,4(sp)
 1002a50:	dc000017 	ldw	r16,0(sp)
 1002a54:	dec00904 	addi	sp,sp,36
 1002a58:	f800283a 	ret
 1002a5c:	002f883a 	mov	r23,zero
 1002a60:	003ff106 	br	1002a28 <_fwalk_reent+0x8c>

01002a64 <_fwalk>:
 1002a64:	defff804 	addi	sp,sp,-32
 1002a68:	dcc00315 	stw	r19,12(sp)
 1002a6c:	24c0b804 	addi	r19,r4,736
 1002a70:	dd400515 	stw	r21,20(sp)
 1002a74:	dfc00715 	stw	ra,28(sp)
 1002a78:	dd800615 	stw	r22,24(sp)
 1002a7c:	dd000415 	stw	r20,16(sp)
 1002a80:	dc800215 	stw	r18,8(sp)
 1002a84:	dc400115 	stw	r17,4(sp)
 1002a88:	dc000015 	stw	r16,0(sp)
 1002a8c:	282b883a 	mov	r21,r5
 1002a90:	1001a900 	call	1001a90 <__sfp_lock_acquire>
 1002a94:	98001f26 	beq	r19,zero,1002b14 <_fwalk+0xb0>
 1002a98:	002d883a 	mov	r22,zero
 1002a9c:	9c800117 	ldw	r18,4(r19)
 1002aa0:	9c000217 	ldw	r16,8(r19)
 1002aa4:	90bfffc4 	addi	r2,r18,-1
 1002aa8:	10000c16 	blt	r2,zero,1002adc <_fwalk+0x78>
 1002aac:	0023883a 	mov	r17,zero
 1002ab0:	053fffc4 	movi	r20,-1
 1002ab4:	8080030f 	ldh	r2,12(r16)
 1002ab8:	8c400044 	addi	r17,r17,1
 1002abc:	10000526 	beq	r2,zero,1002ad4 <_fwalk+0x70>
 1002ac0:	8080038f 	ldh	r2,14(r16)
 1002ac4:	8009883a 	mov	r4,r16
 1002ac8:	15000226 	beq	r2,r20,1002ad4 <_fwalk+0x70>
 1002acc:	a83ee83a 	callr	r21
 1002ad0:	b0acb03a 	or	r22,r22,r2
 1002ad4:	84001704 	addi	r16,r16,92
 1002ad8:	947ff61e 	bne	r18,r17,1002ab4 <_fwalk+0x50>
 1002adc:	9cc00017 	ldw	r19,0(r19)
 1002ae0:	983fee1e 	bne	r19,zero,1002a9c <_fwalk+0x38>
 1002ae4:	1001a940 	call	1001a94 <__sfp_lock_release>
 1002ae8:	b005883a 	mov	r2,r22
 1002aec:	dfc00717 	ldw	ra,28(sp)
 1002af0:	dd800617 	ldw	r22,24(sp)
 1002af4:	dd400517 	ldw	r21,20(sp)
 1002af8:	dd000417 	ldw	r20,16(sp)
 1002afc:	dcc00317 	ldw	r19,12(sp)
 1002b00:	dc800217 	ldw	r18,8(sp)
 1002b04:	dc400117 	ldw	r17,4(sp)
 1002b08:	dc000017 	ldw	r16,0(sp)
 1002b0c:	dec00804 	addi	sp,sp,32
 1002b10:	f800283a 	ret
 1002b14:	002d883a 	mov	r22,zero
 1002b18:	003ff206 	br	1002ae4 <_fwalk+0x80>

01002b1c <getc>:
 1002b1c:	defffd04 	addi	sp,sp,-12
 1002b20:	dc400115 	stw	r17,4(sp)
 1002b24:	04404074 	movhi	r17,257
 1002b28:	8c570804 	addi	r17,r17,23584
 1002b2c:	88c00017 	ldw	r3,0(r17)
 1002b30:	dc000015 	stw	r16,0(sp)
 1002b34:	dfc00215 	stw	ra,8(sp)
 1002b38:	2021883a 	mov	r16,r4
 1002b3c:	18000326 	beq	r3,zero,1002b4c <getc+0x30>
 1002b40:	18800e17 	ldw	r2,56(r3)
 1002b44:	1809883a 	mov	r4,r3
 1002b48:	10000e26 	beq	r2,zero,1002b84 <getc+0x68>
 1002b4c:	80800117 	ldw	r2,4(r16)
 1002b50:	800b883a 	mov	r5,r16
 1002b54:	10bfffc4 	addi	r2,r2,-1
 1002b58:	80800115 	stw	r2,4(r16)
 1002b5c:	10000f16 	blt	r2,zero,1002b9c <getc+0x80>
 1002b60:	80c00017 	ldw	r3,0(r16)
 1002b64:	18800003 	ldbu	r2,0(r3)
 1002b68:	18c00044 	addi	r3,r3,1
 1002b6c:	80c00015 	stw	r3,0(r16)
 1002b70:	dfc00217 	ldw	ra,8(sp)
 1002b74:	dc400117 	ldw	r17,4(sp)
 1002b78:	dc000017 	ldw	r16,0(sp)
 1002b7c:	dec00304 	addi	sp,sp,12
 1002b80:	f800283a 	ret
 1002b84:	1001aa00 	call	1001aa0 <__sinit>
 1002b88:	80800117 	ldw	r2,4(r16)
 1002b8c:	800b883a 	mov	r5,r16
 1002b90:	10bfffc4 	addi	r2,r2,-1
 1002b94:	80800115 	stw	r2,4(r16)
 1002b98:	103ff10e 	bge	r2,zero,1002b60 <getc+0x44>
 1002b9c:	89000017 	ldw	r4,0(r17)
 1002ba0:	dfc00217 	ldw	ra,8(sp)
 1002ba4:	dc400117 	ldw	r17,4(sp)
 1002ba8:	dc000017 	ldw	r16,0(sp)
 1002bac:	dec00304 	addi	sp,sp,12
 1002bb0:	10039dc1 	jmpi	10039dc <__srget_r>

01002bb4 <_getc_r>:
 1002bb4:	defffd04 	addi	sp,sp,-12
 1002bb8:	dc400115 	stw	r17,4(sp)
 1002bbc:	dc000015 	stw	r16,0(sp)
 1002bc0:	dfc00215 	stw	ra,8(sp)
 1002bc4:	2021883a 	mov	r16,r4
 1002bc8:	2823883a 	mov	r17,r5
 1002bcc:	20000226 	beq	r4,zero,1002bd8 <_getc_r+0x24>
 1002bd0:	20800e17 	ldw	r2,56(r4)
 1002bd4:	10000f26 	beq	r2,zero,1002c14 <_getc_r+0x60>
 1002bd8:	88800117 	ldw	r2,4(r17)
 1002bdc:	8009883a 	mov	r4,r16
 1002be0:	880b883a 	mov	r5,r17
 1002be4:	10bfffc4 	addi	r2,r2,-1
 1002be8:	88800115 	stw	r2,4(r17)
 1002bec:	10001016 	blt	r2,zero,1002c30 <_getc_r+0x7c>
 1002bf0:	88c00017 	ldw	r3,0(r17)
 1002bf4:	18800003 	ldbu	r2,0(r3)
 1002bf8:	18c00044 	addi	r3,r3,1
 1002bfc:	88c00015 	stw	r3,0(r17)
 1002c00:	dfc00217 	ldw	ra,8(sp)
 1002c04:	dc400117 	ldw	r17,4(sp)
 1002c08:	dc000017 	ldw	r16,0(sp)
 1002c0c:	dec00304 	addi	sp,sp,12
 1002c10:	f800283a 	ret
 1002c14:	1001aa00 	call	1001aa0 <__sinit>
 1002c18:	88800117 	ldw	r2,4(r17)
 1002c1c:	8009883a 	mov	r4,r16
 1002c20:	880b883a 	mov	r5,r17
 1002c24:	10bfffc4 	addi	r2,r2,-1
 1002c28:	88800115 	stw	r2,4(r17)
 1002c2c:	103ff00e 	bge	r2,zero,1002bf0 <_getc_r+0x3c>
 1002c30:	dfc00217 	ldw	ra,8(sp)
 1002c34:	dc400117 	ldw	r17,4(sp)
 1002c38:	dc000017 	ldw	r16,0(sp)
 1002c3c:	dec00304 	addi	sp,sp,12
 1002c40:	10039dc1 	jmpi	10039dc <__srget_r>

01002c44 <__smakebuf_r>:
 1002c44:	2880030b 	ldhu	r2,12(r5)
 1002c48:	deffed04 	addi	sp,sp,-76
 1002c4c:	dc401015 	stw	r17,64(sp)
 1002c50:	1080008c 	andi	r2,r2,2
 1002c54:	dc000f15 	stw	r16,60(sp)
 1002c58:	dfc01215 	stw	ra,72(sp)
 1002c5c:	dc801115 	stw	r18,68(sp)
 1002c60:	2821883a 	mov	r16,r5
 1002c64:	2023883a 	mov	r17,r4
 1002c68:	10000b26 	beq	r2,zero,1002c98 <__smakebuf_r+0x54>
 1002c6c:	28c010c4 	addi	r3,r5,67
 1002c70:	00800044 	movi	r2,1
 1002c74:	28800515 	stw	r2,20(r5)
 1002c78:	28c00415 	stw	r3,16(r5)
 1002c7c:	28c00015 	stw	r3,0(r5)
 1002c80:	dfc01217 	ldw	ra,72(sp)
 1002c84:	dc801117 	ldw	r18,68(sp)
 1002c88:	dc401017 	ldw	r17,64(sp)
 1002c8c:	dc000f17 	ldw	r16,60(sp)
 1002c90:	dec01304 	addi	sp,sp,76
 1002c94:	f800283a 	ret
 1002c98:	2940038f 	ldh	r5,14(r5)
 1002c9c:	28002116 	blt	r5,zero,1002d24 <__smakebuf_r+0xe0>
 1002ca0:	d80d883a 	mov	r6,sp
 1002ca4:	10029280 	call	1002928 <_fstat_r>
 1002ca8:	10001e16 	blt	r2,zero,1002d24 <__smakebuf_r+0xe0>
 1002cac:	d8800117 	ldw	r2,4(sp)
 1002cb0:	00e00014 	movui	r3,32768
 1002cb4:	113c000c 	andi	r4,r2,61440
 1002cb8:	20c03126 	beq	r4,r3,1002d80 <__smakebuf_r+0x13c>
 1002cbc:	8080030b 	ldhu	r2,12(r16)
 1002cc0:	00c80004 	movi	r3,8192
 1002cc4:	10820014 	ori	r2,r2,2048
 1002cc8:	8080030d 	sth	r2,12(r16)
 1002ccc:	20c01e26 	beq	r4,r3,1002d48 <__smakebuf_r+0x104>
 1002cd0:	04810004 	movi	r18,1024
 1002cd4:	8809883a 	mov	r4,r17
 1002cd8:	900b883a 	mov	r5,r18
 1002cdc:	1002dd80 	call	1002dd8 <_malloc_r>
 1002ce0:	1009883a 	mov	r4,r2
 1002ce4:	10003126 	beq	r2,zero,1002dac <__smakebuf_r+0x168>
 1002ce8:	80c0030b 	ldhu	r3,12(r16)
 1002cec:	00804034 	movhi	r2,256
 1002cf0:	1086e104 	addi	r2,r2,7044
 1002cf4:	88800f15 	stw	r2,60(r17)
 1002cf8:	18c02014 	ori	r3,r3,128
 1002cfc:	84800515 	stw	r18,20(r16)
 1002d00:	80c0030d 	sth	r3,12(r16)
 1002d04:	81000415 	stw	r4,16(r16)
 1002d08:	81000015 	stw	r4,0(r16)
 1002d0c:	dfc01217 	ldw	ra,72(sp)
 1002d10:	dc801117 	ldw	r18,68(sp)
 1002d14:	dc401017 	ldw	r17,64(sp)
 1002d18:	dc000f17 	ldw	r16,60(sp)
 1002d1c:	dec01304 	addi	sp,sp,76
 1002d20:	f800283a 	ret
 1002d24:	80c0030b 	ldhu	r3,12(r16)
 1002d28:	1880200c 	andi	r2,r3,128
 1002d2c:	10000426 	beq	r2,zero,1002d40 <__smakebuf_r+0xfc>
 1002d30:	04801004 	movi	r18,64
 1002d34:	18820014 	ori	r2,r3,2048
 1002d38:	8080030d 	sth	r2,12(r16)
 1002d3c:	003fe506 	br	1002cd4 <__smakebuf_r+0x90>
 1002d40:	04810004 	movi	r18,1024
 1002d44:	003ffb06 	br	1002d34 <__smakebuf_r+0xf0>
 1002d48:	8140038f 	ldh	r5,14(r16)
 1002d4c:	8809883a 	mov	r4,r17
 1002d50:	1004c0c0 	call	1004c0c <_isatty_r>
 1002d54:	103fde26 	beq	r2,zero,1002cd0 <__smakebuf_r+0x8c>
 1002d58:	8080030b 	ldhu	r2,12(r16)
 1002d5c:	80c010c4 	addi	r3,r16,67
 1002d60:	04810004 	movi	r18,1024
 1002d64:	10800054 	ori	r2,r2,1
 1002d68:	8080030d 	sth	r2,12(r16)
 1002d6c:	00800044 	movi	r2,1
 1002d70:	80c00415 	stw	r3,16(r16)
 1002d74:	80800515 	stw	r2,20(r16)
 1002d78:	80c00015 	stw	r3,0(r16)
 1002d7c:	003fd506 	br	1002cd4 <__smakebuf_r+0x90>
 1002d80:	80c00a17 	ldw	r3,40(r16)
 1002d84:	00804034 	movhi	r2,256
 1002d88:	108ead04 	addi	r2,r2,15028
 1002d8c:	18bfcb1e 	bne	r3,r2,1002cbc <__smakebuf_r+0x78>
 1002d90:	8080030b 	ldhu	r2,12(r16)
 1002d94:	00c10004 	movi	r3,1024
 1002d98:	1825883a 	mov	r18,r3
 1002d9c:	10c4b03a 	or	r2,r2,r3
 1002da0:	8080030d 	sth	r2,12(r16)
 1002da4:	80c01315 	stw	r3,76(r16)
 1002da8:	003fca06 	br	1002cd4 <__smakebuf_r+0x90>
 1002dac:	8100030b 	ldhu	r4,12(r16)
 1002db0:	2080800c 	andi	r2,r4,512
 1002db4:	103fb21e 	bne	r2,zero,1002c80 <__smakebuf_r+0x3c>
 1002db8:	80c010c4 	addi	r3,r16,67
 1002dbc:	21000094 	ori	r4,r4,2
 1002dc0:	00800044 	movi	r2,1
 1002dc4:	80800515 	stw	r2,20(r16)
 1002dc8:	8100030d 	sth	r4,12(r16)
 1002dcc:	80c00415 	stw	r3,16(r16)
 1002dd0:	80c00015 	stw	r3,0(r16)
 1002dd4:	003faa06 	br	1002c80 <__smakebuf_r+0x3c>

01002dd8 <_malloc_r>:
 1002dd8:	defff604 	addi	sp,sp,-40
 1002ddc:	28c002c4 	addi	r3,r5,11
 1002de0:	00800584 	movi	r2,22
 1002de4:	dc800215 	stw	r18,8(sp)
 1002de8:	dfc00915 	stw	ra,36(sp)
 1002dec:	df000815 	stw	fp,32(sp)
 1002df0:	ddc00715 	stw	r23,28(sp)
 1002df4:	dd800615 	stw	r22,24(sp)
 1002df8:	dd400515 	stw	r21,20(sp)
 1002dfc:	dd000415 	stw	r20,16(sp)
 1002e00:	dcc00315 	stw	r19,12(sp)
 1002e04:	dc400115 	stw	r17,4(sp)
 1002e08:	dc000015 	stw	r16,0(sp)
 1002e0c:	2025883a 	mov	r18,r4
 1002e10:	10c01236 	bltu	r2,r3,1002e5c <_malloc_r+0x84>
 1002e14:	04400404 	movi	r17,16
 1002e18:	8940142e 	bgeu	r17,r5,1002e6c <_malloc_r+0x94>
 1002e1c:	00800304 	movi	r2,12
 1002e20:	0007883a 	mov	r3,zero
 1002e24:	90800015 	stw	r2,0(r18)
 1002e28:	1805883a 	mov	r2,r3
 1002e2c:	dfc00917 	ldw	ra,36(sp)
 1002e30:	df000817 	ldw	fp,32(sp)
 1002e34:	ddc00717 	ldw	r23,28(sp)
 1002e38:	dd800617 	ldw	r22,24(sp)
 1002e3c:	dd400517 	ldw	r21,20(sp)
 1002e40:	dd000417 	ldw	r20,16(sp)
 1002e44:	dcc00317 	ldw	r19,12(sp)
 1002e48:	dc800217 	ldw	r18,8(sp)
 1002e4c:	dc400117 	ldw	r17,4(sp)
 1002e50:	dc000017 	ldw	r16,0(sp)
 1002e54:	dec00a04 	addi	sp,sp,40
 1002e58:	f800283a 	ret
 1002e5c:	00bffe04 	movi	r2,-8
 1002e60:	18a2703a 	and	r17,r3,r2
 1002e64:	883fed16 	blt	r17,zero,1002e1c <_malloc_r+0x44>
 1002e68:	897fec36 	bltu	r17,r5,1002e1c <_malloc_r+0x44>
 1002e6c:	9009883a 	mov	r4,r18
 1002e70:	100608c0 	call	100608c <__malloc_lock>
 1002e74:	00807dc4 	movi	r2,503
 1002e78:	14402b2e 	bgeu	r2,r17,1002f28 <_malloc_r+0x150>
 1002e7c:	8806d27a 	srli	r3,r17,9
 1002e80:	18003f1e 	bne	r3,zero,1002f80 <_malloc_r+0x1a8>
 1002e84:	880cd0fa 	srli	r6,r17,3
 1002e88:	300490fa 	slli	r2,r6,3
 1002e8c:	02c04074 	movhi	r11,257
 1002e90:	5ad16404 	addi	r11,r11,17808
 1002e94:	12cb883a 	add	r5,r2,r11
 1002e98:	2c000317 	ldw	r16,12(r5)
 1002e9c:	580f883a 	mov	r7,r11
 1002ea0:	2c00041e 	bne	r5,r16,1002eb4 <_malloc_r+0xdc>
 1002ea4:	00000a06 	br	1002ed0 <_malloc_r+0xf8>
 1002ea8:	1800860e 	bge	r3,zero,10030c4 <_malloc_r+0x2ec>
 1002eac:	84000317 	ldw	r16,12(r16)
 1002eb0:	2c000726 	beq	r5,r16,1002ed0 <_malloc_r+0xf8>
 1002eb4:	80800117 	ldw	r2,4(r16)
 1002eb8:	00ffff04 	movi	r3,-4
 1002ebc:	10c8703a 	and	r4,r2,r3
 1002ec0:	2447c83a 	sub	r3,r4,r17
 1002ec4:	008003c4 	movi	r2,15
 1002ec8:	10fff70e 	bge	r2,r3,1002ea8 <_malloc_r+0xd0>
 1002ecc:	31bfffc4 	addi	r6,r6,-1
 1002ed0:	32400044 	addi	r9,r6,1
 1002ed4:	02804074 	movhi	r10,257
 1002ed8:	52916604 	addi	r10,r10,17816
 1002edc:	54000217 	ldw	r16,8(r10)
 1002ee0:	8280a026 	beq	r16,r10,1003164 <_malloc_r+0x38c>
 1002ee4:	80800117 	ldw	r2,4(r16)
 1002ee8:	00ffff04 	movi	r3,-4
 1002eec:	10ca703a 	and	r5,r2,r3
 1002ef0:	2c4dc83a 	sub	r6,r5,r17
 1002ef4:	008003c4 	movi	r2,15
 1002ef8:	11808316 	blt	r2,r6,1003108 <_malloc_r+0x330>
 1002efc:	52800315 	stw	r10,12(r10)
 1002f00:	52800215 	stw	r10,8(r10)
 1002f04:	30002916 	blt	r6,zero,1002fac <_malloc_r+0x1d4>
 1002f08:	8147883a 	add	r3,r16,r5
 1002f0c:	18800117 	ldw	r2,4(r3)
 1002f10:	9009883a 	mov	r4,r18
 1002f14:	10800054 	ori	r2,r2,1
 1002f18:	18800115 	stw	r2,4(r3)
 1002f1c:	10060ac0 	call	10060ac <__malloc_unlock>
 1002f20:	80c00204 	addi	r3,r16,8
 1002f24:	003fc006 	br	1002e28 <_malloc_r+0x50>
 1002f28:	02c04074 	movhi	r11,257
 1002f2c:	5ad16404 	addi	r11,r11,17808
 1002f30:	8ac5883a 	add	r2,r17,r11
 1002f34:	14000317 	ldw	r16,12(r2)
 1002f38:	580f883a 	mov	r7,r11
 1002f3c:	8806d0fa 	srli	r3,r17,3
 1002f40:	14006c26 	beq	r2,r16,10030f4 <_malloc_r+0x31c>
 1002f44:	80c00117 	ldw	r3,4(r16)
 1002f48:	00bfff04 	movi	r2,-4
 1002f4c:	81800317 	ldw	r6,12(r16)
 1002f50:	1886703a 	and	r3,r3,r2
 1002f54:	80c7883a 	add	r3,r16,r3
 1002f58:	18800117 	ldw	r2,4(r3)
 1002f5c:	81400217 	ldw	r5,8(r16)
 1002f60:	9009883a 	mov	r4,r18
 1002f64:	10800054 	ori	r2,r2,1
 1002f68:	18800115 	stw	r2,4(r3)
 1002f6c:	31400215 	stw	r5,8(r6)
 1002f70:	29800315 	stw	r6,12(r5)
 1002f74:	10060ac0 	call	10060ac <__malloc_unlock>
 1002f78:	80c00204 	addi	r3,r16,8
 1002f7c:	003faa06 	br	1002e28 <_malloc_r+0x50>
 1002f80:	00800104 	movi	r2,4
 1002f84:	10c0052e 	bgeu	r2,r3,1002f9c <_malloc_r+0x1c4>
 1002f88:	00800504 	movi	r2,20
 1002f8c:	10c07836 	bltu	r2,r3,1003170 <_malloc_r+0x398>
 1002f90:	198016c4 	addi	r6,r3,91
 1002f94:	300490fa 	slli	r2,r6,3
 1002f98:	003fbc06 	br	1002e8c <_malloc_r+0xb4>
 1002f9c:	8804d1ba 	srli	r2,r17,6
 1002fa0:	11800e04 	addi	r6,r2,56
 1002fa4:	300490fa 	slli	r2,r6,3
 1002fa8:	003fb806 	br	1002e8c <_malloc_r+0xb4>
 1002fac:	00807fc4 	movi	r2,511
 1002fb0:	1140bb36 	bltu	r2,r5,10032a0 <_malloc_r+0x4c8>
 1002fb4:	2806d0fa 	srli	r3,r5,3
 1002fb8:	573ffe04 	addi	fp,r10,-8
 1002fbc:	00800044 	movi	r2,1
 1002fc0:	180890fa 	slli	r4,r3,3
 1002fc4:	1807d0ba 	srai	r3,r3,2
 1002fc8:	e1c00117 	ldw	r7,4(fp)
 1002fcc:	5909883a 	add	r4,r11,r4
 1002fd0:	21400217 	ldw	r5,8(r4)
 1002fd4:	10c4983a 	sll	r2,r2,r3
 1002fd8:	81000315 	stw	r4,12(r16)
 1002fdc:	81400215 	stw	r5,8(r16)
 1002fe0:	388eb03a 	or	r7,r7,r2
 1002fe4:	2c000315 	stw	r16,12(r5)
 1002fe8:	24000215 	stw	r16,8(r4)
 1002fec:	e1c00115 	stw	r7,4(fp)
 1002ff0:	4807883a 	mov	r3,r9
 1002ff4:	4800cd16 	blt	r9,zero,100332c <_malloc_r+0x554>
 1002ff8:	1807d0ba 	srai	r3,r3,2
 1002ffc:	00800044 	movi	r2,1
 1003000:	10c8983a 	sll	r4,r2,r3
 1003004:	39004436 	bltu	r7,r4,1003118 <_malloc_r+0x340>
 1003008:	21c4703a 	and	r2,r4,r7
 100300c:	10000a1e 	bne	r2,zero,1003038 <_malloc_r+0x260>
 1003010:	2109883a 	add	r4,r4,r4
 1003014:	00bfff04 	movi	r2,-4
 1003018:	4884703a 	and	r2,r9,r2
 100301c:	3906703a 	and	r3,r7,r4
 1003020:	12400104 	addi	r9,r2,4
 1003024:	1800041e 	bne	r3,zero,1003038 <_malloc_r+0x260>
 1003028:	2109883a 	add	r4,r4,r4
 100302c:	3904703a 	and	r2,r7,r4
 1003030:	4a400104 	addi	r9,r9,4
 1003034:	103ffc26 	beq	r2,zero,1003028 <_malloc_r+0x250>
 1003038:	480490fa 	slli	r2,r9,3
 100303c:	4819883a 	mov	r12,r9
 1003040:	023fff04 	movi	r8,-4
 1003044:	589b883a 	add	r13,r11,r2
 1003048:	6807883a 	mov	r3,r13
 100304c:	014003c4 	movi	r5,15
 1003050:	1c000317 	ldw	r16,12(r3)
 1003054:	1c00041e 	bne	r3,r16,1003068 <_malloc_r+0x290>
 1003058:	0000a706 	br	10032f8 <_malloc_r+0x520>
 100305c:	3000ab0e 	bge	r6,zero,100330c <_malloc_r+0x534>
 1003060:	84000317 	ldw	r16,12(r16)
 1003064:	1c00a426 	beq	r3,r16,10032f8 <_malloc_r+0x520>
 1003068:	80800117 	ldw	r2,4(r16)
 100306c:	1204703a 	and	r2,r2,r8
 1003070:	144dc83a 	sub	r6,r2,r17
 1003074:	29bff90e 	bge	r5,r6,100305c <_malloc_r+0x284>
 1003078:	81000317 	ldw	r4,12(r16)
 100307c:	80c00217 	ldw	r3,8(r16)
 1003080:	89400054 	ori	r5,r17,1
 1003084:	8445883a 	add	r2,r16,r17
 1003088:	20c00215 	stw	r3,8(r4)
 100308c:	19000315 	stw	r4,12(r3)
 1003090:	81400115 	stw	r5,4(r16)
 1003094:	1187883a 	add	r3,r2,r6
 1003098:	31000054 	ori	r4,r6,1
 100309c:	50800315 	stw	r2,12(r10)
 10030a0:	50800215 	stw	r2,8(r10)
 10030a4:	19800015 	stw	r6,0(r3)
 10030a8:	11000115 	stw	r4,4(r2)
 10030ac:	12800215 	stw	r10,8(r2)
 10030b0:	12800315 	stw	r10,12(r2)
 10030b4:	9009883a 	mov	r4,r18
 10030b8:	10060ac0 	call	10060ac <__malloc_unlock>
 10030bc:	80c00204 	addi	r3,r16,8
 10030c0:	003f5906 	br	1002e28 <_malloc_r+0x50>
 10030c4:	8109883a 	add	r4,r16,r4
 10030c8:	20800117 	ldw	r2,4(r4)
 10030cc:	80c00217 	ldw	r3,8(r16)
 10030d0:	81400317 	ldw	r5,12(r16)
 10030d4:	10800054 	ori	r2,r2,1
 10030d8:	20800115 	stw	r2,4(r4)
 10030dc:	28c00215 	stw	r3,8(r5)
 10030e0:	19400315 	stw	r5,12(r3)
 10030e4:	9009883a 	mov	r4,r18
 10030e8:	10060ac0 	call	10060ac <__malloc_unlock>
 10030ec:	80c00204 	addi	r3,r16,8
 10030f0:	003f4d06 	br	1002e28 <_malloc_r+0x50>
 10030f4:	80800204 	addi	r2,r16,8
 10030f8:	14000317 	ldw	r16,12(r2)
 10030fc:	143f911e 	bne	r2,r16,1002f44 <_malloc_r+0x16c>
 1003100:	1a400084 	addi	r9,r3,2
 1003104:	003f7306 	br	1002ed4 <_malloc_r+0xfc>
 1003108:	88c00054 	ori	r3,r17,1
 100310c:	8445883a 	add	r2,r16,r17
 1003110:	80c00115 	stw	r3,4(r16)
 1003114:	003fdf06 	br	1003094 <_malloc_r+0x2bc>
 1003118:	e4000217 	ldw	r16,8(fp)
 100311c:	00bfff04 	movi	r2,-4
 1003120:	80c00117 	ldw	r3,4(r16)
 1003124:	802d883a 	mov	r22,r16
 1003128:	18aa703a 	and	r21,r3,r2
 100312c:	ac401636 	bltu	r21,r17,1003188 <_malloc_r+0x3b0>
 1003130:	ac49c83a 	sub	r4,r21,r17
 1003134:	008003c4 	movi	r2,15
 1003138:	1100130e 	bge	r2,r4,1003188 <_malloc_r+0x3b0>
 100313c:	88800054 	ori	r2,r17,1
 1003140:	8447883a 	add	r3,r16,r17
 1003144:	80800115 	stw	r2,4(r16)
 1003148:	20800054 	ori	r2,r4,1
 100314c:	18800115 	stw	r2,4(r3)
 1003150:	e0c00215 	stw	r3,8(fp)
 1003154:	9009883a 	mov	r4,r18
 1003158:	10060ac0 	call	10060ac <__malloc_unlock>
 100315c:	80c00204 	addi	r3,r16,8
 1003160:	003f3106 	br	1002e28 <_malloc_r+0x50>
 1003164:	39c00117 	ldw	r7,4(r7)
 1003168:	573ffe04 	addi	fp,r10,-8
 100316c:	003fa006 	br	1002ff0 <_malloc_r+0x218>
 1003170:	00801504 	movi	r2,84
 1003174:	10c06736 	bltu	r2,r3,1003314 <_malloc_r+0x53c>
 1003178:	8804d33a 	srli	r2,r17,12
 100317c:	11801b84 	addi	r6,r2,110
 1003180:	300490fa 	slli	r2,r6,3
 1003184:	003f4106 	br	1002e8c <_malloc_r+0xb4>
 1003188:	d0a6e517 	ldw	r2,-25708(gp)
 100318c:	d0e00317 	ldw	r3,-32756(gp)
 1003190:	053fffc4 	movi	r20,-1
 1003194:	10800404 	addi	r2,r2,16
 1003198:	88a7883a 	add	r19,r17,r2
 100319c:	1d000326 	beq	r3,r20,10031ac <_malloc_r+0x3d4>
 10031a0:	98c3ffc4 	addi	r3,r19,4095
 10031a4:	00bc0004 	movi	r2,-4096
 10031a8:	18a6703a 	and	r19,r3,r2
 10031ac:	9009883a 	mov	r4,r18
 10031b0:	980b883a 	mov	r5,r19
 10031b4:	1003a3c0 	call	1003a3c <_sbrk_r>
 10031b8:	1009883a 	mov	r4,r2
 10031bc:	15000426 	beq	r2,r20,10031d0 <_malloc_r+0x3f8>
 10031c0:	854b883a 	add	r5,r16,r21
 10031c4:	1029883a 	mov	r20,r2
 10031c8:	11405a2e 	bgeu	r2,r5,1003334 <_malloc_r+0x55c>
 10031cc:	87000c26 	beq	r16,fp,1003200 <_malloc_r+0x428>
 10031d0:	e4000217 	ldw	r16,8(fp)
 10031d4:	80c00117 	ldw	r3,4(r16)
 10031d8:	00bfff04 	movi	r2,-4
 10031dc:	1884703a 	and	r2,r3,r2
 10031e0:	14400336 	bltu	r2,r17,10031f0 <_malloc_r+0x418>
 10031e4:	1449c83a 	sub	r4,r2,r17
 10031e8:	008003c4 	movi	r2,15
 10031ec:	113fd316 	blt	r2,r4,100313c <_malloc_r+0x364>
 10031f0:	9009883a 	mov	r4,r18
 10031f4:	10060ac0 	call	10060ac <__malloc_unlock>
 10031f8:	0007883a 	mov	r3,zero
 10031fc:	003f0a06 	br	1002e28 <_malloc_r+0x50>
 1003200:	05c04074 	movhi	r23,257
 1003204:	bdddf604 	addi	r23,r23,30680
 1003208:	b8800017 	ldw	r2,0(r23)
 100320c:	988d883a 	add	r6,r19,r2
 1003210:	b9800015 	stw	r6,0(r23)
 1003214:	d0e00317 	ldw	r3,-32756(gp)
 1003218:	00bfffc4 	movi	r2,-1
 100321c:	18808e26 	beq	r3,r2,1003458 <_malloc_r+0x680>
 1003220:	2145c83a 	sub	r2,r4,r5
 1003224:	3085883a 	add	r2,r6,r2
 1003228:	b8800015 	stw	r2,0(r23)
 100322c:	20c001cc 	andi	r3,r4,7
 1003230:	18005f1e 	bne	r3,zero,10033b0 <_malloc_r+0x5d8>
 1003234:	000b883a 	mov	r5,zero
 1003238:	a4c5883a 	add	r2,r20,r19
 100323c:	1083ffcc 	andi	r2,r2,4095
 1003240:	00c40004 	movi	r3,4096
 1003244:	1887c83a 	sub	r3,r3,r2
 1003248:	28e7883a 	add	r19,r5,r3
 100324c:	9009883a 	mov	r4,r18
 1003250:	980b883a 	mov	r5,r19
 1003254:	1003a3c0 	call	1003a3c <_sbrk_r>
 1003258:	1007883a 	mov	r3,r2
 100325c:	00bfffc4 	movi	r2,-1
 1003260:	18807a26 	beq	r3,r2,100344c <_malloc_r+0x674>
 1003264:	1d05c83a 	sub	r2,r3,r20
 1003268:	9885883a 	add	r2,r19,r2
 100326c:	10c00054 	ori	r3,r2,1
 1003270:	b8800017 	ldw	r2,0(r23)
 1003274:	a021883a 	mov	r16,r20
 1003278:	a0c00115 	stw	r3,4(r20)
 100327c:	9885883a 	add	r2,r19,r2
 1003280:	b8800015 	stw	r2,0(r23)
 1003284:	e5000215 	stw	r20,8(fp)
 1003288:	b7003626 	beq	r22,fp,1003364 <_malloc_r+0x58c>
 100328c:	018003c4 	movi	r6,15
 1003290:	35404b36 	bltu	r6,r21,10033c0 <_malloc_r+0x5e8>
 1003294:	00800044 	movi	r2,1
 1003298:	a0800115 	stw	r2,4(r20)
 100329c:	003fcd06 	br	10031d4 <_malloc_r+0x3fc>
 10032a0:	2808d27a 	srli	r4,r5,9
 10032a4:	2000371e 	bne	r4,zero,1003384 <_malloc_r+0x5ac>
 10032a8:	2808d0fa 	srli	r4,r5,3
 10032ac:	200690fa 	slli	r3,r4,3
 10032b0:	1ad1883a 	add	r8,r3,r11
 10032b4:	41800217 	ldw	r6,8(r8)
 10032b8:	41805b26 	beq	r8,r6,1003428 <_malloc_r+0x650>
 10032bc:	30800117 	ldw	r2,4(r6)
 10032c0:	00ffff04 	movi	r3,-4
 10032c4:	10c4703a 	and	r2,r2,r3
 10032c8:	2880022e 	bgeu	r5,r2,10032d4 <_malloc_r+0x4fc>
 10032cc:	31800217 	ldw	r6,8(r6)
 10032d0:	41bffa1e 	bne	r8,r6,10032bc <_malloc_r+0x4e4>
 10032d4:	32000317 	ldw	r8,12(r6)
 10032d8:	39c00117 	ldw	r7,4(r7)
 10032dc:	82000315 	stw	r8,12(r16)
 10032e0:	81800215 	stw	r6,8(r16)
 10032e4:	07004074 	movhi	fp,257
 10032e8:	e7116404 	addi	fp,fp,17808
 10032ec:	34000315 	stw	r16,12(r6)
 10032f0:	44000215 	stw	r16,8(r8)
 10032f4:	003f3e06 	br	1002ff0 <_malloc_r+0x218>
 10032f8:	63000044 	addi	r12,r12,1
 10032fc:	608000cc 	andi	r2,r12,3
 1003300:	10005d26 	beq	r2,zero,1003478 <_malloc_r+0x6a0>
 1003304:	18c00204 	addi	r3,r3,8
 1003308:	003f5106 	br	1003050 <_malloc_r+0x278>
 100330c:	8089883a 	add	r4,r16,r2
 1003310:	003f6d06 	br	10030c8 <_malloc_r+0x2f0>
 1003314:	00805504 	movi	r2,340
 1003318:	10c02036 	bltu	r2,r3,100339c <_malloc_r+0x5c4>
 100331c:	8804d3fa 	srli	r2,r17,15
 1003320:	11801dc4 	addi	r6,r2,119
 1003324:	300490fa 	slli	r2,r6,3
 1003328:	003ed806 	br	1002e8c <_malloc_r+0xb4>
 100332c:	48c000c4 	addi	r3,r9,3
 1003330:	003f3106 	br	1002ff8 <_malloc_r+0x220>
 1003334:	05c04074 	movhi	r23,257
 1003338:	bdddf604 	addi	r23,r23,30680
 100333c:	b8800017 	ldw	r2,0(r23)
 1003340:	988d883a 	add	r6,r19,r2
 1003344:	b9800015 	stw	r6,0(r23)
 1003348:	293fb21e 	bne	r5,r4,1003214 <_malloc_r+0x43c>
 100334c:	2083ffcc 	andi	r2,r4,4095
 1003350:	103fb01e 	bne	r2,zero,1003214 <_malloc_r+0x43c>
 1003354:	e4000217 	ldw	r16,8(fp)
 1003358:	9d45883a 	add	r2,r19,r21
 100335c:	10800054 	ori	r2,r2,1
 1003360:	80800115 	stw	r2,4(r16)
 1003364:	b8c00017 	ldw	r3,0(r23)
 1003368:	d0a6e617 	ldw	r2,-25704(gp)
 100336c:	10c0012e 	bgeu	r2,r3,1003374 <_malloc_r+0x59c>
 1003370:	d0e6e615 	stw	r3,-25704(gp)
 1003374:	d0a6e717 	ldw	r2,-25700(gp)
 1003378:	10ff962e 	bgeu	r2,r3,10031d4 <_malloc_r+0x3fc>
 100337c:	d0e6e715 	stw	r3,-25700(gp)
 1003380:	003f9406 	br	10031d4 <_malloc_r+0x3fc>
 1003384:	00800104 	movi	r2,4
 1003388:	11001e36 	bltu	r2,r4,1003404 <_malloc_r+0x62c>
 100338c:	2804d1ba 	srli	r2,r5,6
 1003390:	11000e04 	addi	r4,r2,56
 1003394:	200690fa 	slli	r3,r4,3
 1003398:	003fc506 	br	10032b0 <_malloc_r+0x4d8>
 100339c:	00815504 	movi	r2,1364
 10033a0:	10c01d2e 	bgeu	r2,r3,1003418 <_malloc_r+0x640>
 10033a4:	01801f84 	movi	r6,126
 10033a8:	0080fc04 	movi	r2,1008
 10033ac:	003eb706 	br	1002e8c <_malloc_r+0xb4>
 10033b0:	00800204 	movi	r2,8
 10033b4:	10cbc83a 	sub	r5,r2,r3
 10033b8:	2169883a 	add	r20,r4,r5
 10033bc:	003f9e06 	br	1003238 <_malloc_r+0x460>
 10033c0:	00bffe04 	movi	r2,-8
 10033c4:	a93ffd04 	addi	r4,r21,-12
 10033c8:	2088703a 	and	r4,r4,r2
 10033cc:	b10b883a 	add	r5,r22,r4
 10033d0:	00c00144 	movi	r3,5
 10033d4:	28c00215 	stw	r3,8(r5)
 10033d8:	28c00115 	stw	r3,4(r5)
 10033dc:	b0800117 	ldw	r2,4(r22)
 10033e0:	1080004c 	andi	r2,r2,1
 10033e4:	2084b03a 	or	r2,r4,r2
 10033e8:	b0800115 	stw	r2,4(r22)
 10033ec:	313fdd2e 	bgeu	r6,r4,1003364 <_malloc_r+0x58c>
 10033f0:	b1400204 	addi	r5,r22,8
 10033f4:	9009883a 	mov	r4,r18
 10033f8:	10021b40 	call	10021b4 <_free_r>
 10033fc:	e4000217 	ldw	r16,8(fp)
 1003400:	003fd806 	br	1003364 <_malloc_r+0x58c>
 1003404:	00800504 	movi	r2,20
 1003408:	11001536 	bltu	r2,r4,1003460 <_malloc_r+0x688>
 100340c:	210016c4 	addi	r4,r4,91
 1003410:	200690fa 	slli	r3,r4,3
 1003414:	003fa606 	br	10032b0 <_malloc_r+0x4d8>
 1003418:	8804d4ba 	srli	r2,r17,18
 100341c:	11801f04 	addi	r6,r2,124
 1003420:	300490fa 	slli	r2,r6,3
 1003424:	003e9906 	br	1002e8c <_malloc_r+0xb4>
 1003428:	2009d0ba 	srai	r4,r4,2
 100342c:	01404074 	movhi	r5,257
 1003430:	29516404 	addi	r5,r5,17808
 1003434:	00c00044 	movi	r3,1
 1003438:	28800117 	ldw	r2,4(r5)
 100343c:	1906983a 	sll	r3,r3,r4
 1003440:	10c4b03a 	or	r2,r2,r3
 1003444:	28800115 	stw	r2,4(r5)
 1003448:	003fa306 	br	10032d8 <_malloc_r+0x500>
 100344c:	0027883a 	mov	r19,zero
 1003450:	00c00044 	movi	r3,1
 1003454:	003f8606 	br	1003270 <_malloc_r+0x498>
 1003458:	d1200315 	stw	r4,-32756(gp)
 100345c:	003f7306 	br	100322c <_malloc_r+0x454>
 1003460:	00801504 	movi	r2,84
 1003464:	11001936 	bltu	r2,r4,10034cc <_malloc_r+0x6f4>
 1003468:	2804d33a 	srli	r2,r5,12
 100346c:	11001b84 	addi	r4,r2,110
 1003470:	200690fa 	slli	r3,r4,3
 1003474:	003f8e06 	br	10032b0 <_malloc_r+0x4d8>
 1003478:	480b883a 	mov	r5,r9
 100347c:	6807883a 	mov	r3,r13
 1003480:	288000cc 	andi	r2,r5,3
 1003484:	18fffe04 	addi	r3,r3,-8
 1003488:	297fffc4 	addi	r5,r5,-1
 100348c:	10001526 	beq	r2,zero,10034e4 <_malloc_r+0x70c>
 1003490:	18800217 	ldw	r2,8(r3)
 1003494:	10fffa26 	beq	r2,r3,1003480 <_malloc_r+0x6a8>
 1003498:	2109883a 	add	r4,r4,r4
 100349c:	393f1e36 	bltu	r7,r4,1003118 <_malloc_r+0x340>
 10034a0:	203f1d26 	beq	r4,zero,1003118 <_malloc_r+0x340>
 10034a4:	21c4703a 	and	r2,r4,r7
 10034a8:	10000226 	beq	r2,zero,10034b4 <_malloc_r+0x6dc>
 10034ac:	6013883a 	mov	r9,r12
 10034b0:	003ee106 	br	1003038 <_malloc_r+0x260>
 10034b4:	2109883a 	add	r4,r4,r4
 10034b8:	3904703a 	and	r2,r7,r4
 10034bc:	63000104 	addi	r12,r12,4
 10034c0:	103ffc26 	beq	r2,zero,10034b4 <_malloc_r+0x6dc>
 10034c4:	6013883a 	mov	r9,r12
 10034c8:	003edb06 	br	1003038 <_malloc_r+0x260>
 10034cc:	00805504 	movi	r2,340
 10034d0:	11000836 	bltu	r2,r4,10034f4 <_malloc_r+0x71c>
 10034d4:	2804d3fa 	srli	r2,r5,15
 10034d8:	11001dc4 	addi	r4,r2,119
 10034dc:	200690fa 	slli	r3,r4,3
 10034e0:	003f7306 	br	10032b0 <_malloc_r+0x4d8>
 10034e4:	0104303a 	nor	r2,zero,r4
 10034e8:	388e703a 	and	r7,r7,r2
 10034ec:	e1c00115 	stw	r7,4(fp)
 10034f0:	003fe906 	br	1003498 <_malloc_r+0x6c0>
 10034f4:	00815504 	movi	r2,1364
 10034f8:	1100032e 	bgeu	r2,r4,1003508 <_malloc_r+0x730>
 10034fc:	01001f84 	movi	r4,126
 1003500:	00c0fc04 	movi	r3,1008
 1003504:	003f6a06 	br	10032b0 <_malloc_r+0x4d8>
 1003508:	2804d4ba 	srli	r2,r5,18
 100350c:	11001f04 	addi	r4,r2,124
 1003510:	200690fa 	slli	r3,r4,3
 1003514:	003f6606 	br	10032b0 <_malloc_r+0x4d8>

01003518 <memcpy>:
 1003518:	01c003c4 	movi	r7,15
 100351c:	2007883a 	mov	r3,r4
 1003520:	3980032e 	bgeu	r7,r6,1003530 <memcpy+0x18>
 1003524:	2904b03a 	or	r2,r5,r4
 1003528:	108000cc 	andi	r2,r2,3
 100352c:	10000926 	beq	r2,zero,1003554 <memcpy+0x3c>
 1003530:	30000626 	beq	r6,zero,100354c <memcpy+0x34>
 1003534:	30cd883a 	add	r6,r6,r3
 1003538:	28800003 	ldbu	r2,0(r5)
 100353c:	29400044 	addi	r5,r5,1
 1003540:	18800005 	stb	r2,0(r3)
 1003544:	18c00044 	addi	r3,r3,1
 1003548:	30fffb1e 	bne	r6,r3,1003538 <memcpy+0x20>
 100354c:	2005883a 	mov	r2,r4
 1003550:	f800283a 	ret
 1003554:	3811883a 	mov	r8,r7
 1003558:	200f883a 	mov	r7,r4
 100355c:	28c00017 	ldw	r3,0(r5)
 1003560:	31bffc04 	addi	r6,r6,-16
 1003564:	38c00015 	stw	r3,0(r7)
 1003568:	28800117 	ldw	r2,4(r5)
 100356c:	38800115 	stw	r2,4(r7)
 1003570:	28c00217 	ldw	r3,8(r5)
 1003574:	38c00215 	stw	r3,8(r7)
 1003578:	28800317 	ldw	r2,12(r5)
 100357c:	29400404 	addi	r5,r5,16
 1003580:	38800315 	stw	r2,12(r7)
 1003584:	39c00404 	addi	r7,r7,16
 1003588:	41bff436 	bltu	r8,r6,100355c <memcpy+0x44>
 100358c:	008000c4 	movi	r2,3
 1003590:	1180072e 	bgeu	r2,r6,10035b0 <memcpy+0x98>
 1003594:	1007883a 	mov	r3,r2
 1003598:	28800017 	ldw	r2,0(r5)
 100359c:	31bfff04 	addi	r6,r6,-4
 10035a0:	29400104 	addi	r5,r5,4
 10035a4:	38800015 	stw	r2,0(r7)
 10035a8:	39c00104 	addi	r7,r7,4
 10035ac:	19bffa36 	bltu	r3,r6,1003598 <memcpy+0x80>
 10035b0:	3807883a 	mov	r3,r7
 10035b4:	003fde06 	br	1003530 <memcpy+0x18>

010035b8 <memset>:
 10035b8:	008000c4 	movi	r2,3
 10035bc:	29403fcc 	andi	r5,r5,255
 10035c0:	2007883a 	mov	r3,r4
 10035c4:	1180022e 	bgeu	r2,r6,10035d0 <memset+0x18>
 10035c8:	2084703a 	and	r2,r4,r2
 10035cc:	10000826 	beq	r2,zero,10035f0 <memset+0x38>
 10035d0:	30000526 	beq	r6,zero,10035e8 <memset+0x30>
 10035d4:	2805883a 	mov	r2,r5
 10035d8:	30cd883a 	add	r6,r6,r3
 10035dc:	18800005 	stb	r2,0(r3)
 10035e0:	18c00044 	addi	r3,r3,1
 10035e4:	19bffd1e 	bne	r3,r6,10035dc <memset+0x24>
 10035e8:	2005883a 	mov	r2,r4
 10035ec:	f800283a 	ret
 10035f0:	2804923a 	slli	r2,r5,8
 10035f4:	020003c4 	movi	r8,15
 10035f8:	200f883a 	mov	r7,r4
 10035fc:	2884b03a 	or	r2,r5,r2
 1003600:	1006943a 	slli	r3,r2,16
 1003604:	10c6b03a 	or	r3,r2,r3
 1003608:	41800a2e 	bgeu	r8,r6,1003634 <memset+0x7c>
 100360c:	4005883a 	mov	r2,r8
 1003610:	31bffc04 	addi	r6,r6,-16
 1003614:	38c00015 	stw	r3,0(r7)
 1003618:	38c00115 	stw	r3,4(r7)
 100361c:	38c00215 	stw	r3,8(r7)
 1003620:	38c00315 	stw	r3,12(r7)
 1003624:	39c00404 	addi	r7,r7,16
 1003628:	11bff936 	bltu	r2,r6,1003610 <memset+0x58>
 100362c:	008000c4 	movi	r2,3
 1003630:	1180052e 	bgeu	r2,r6,1003648 <memset+0x90>
 1003634:	31bfff04 	addi	r6,r6,-4
 1003638:	008000c4 	movi	r2,3
 100363c:	38c00015 	stw	r3,0(r7)
 1003640:	39c00104 	addi	r7,r7,4
 1003644:	11bffb36 	bltu	r2,r6,1003634 <memset+0x7c>
 1003648:	3807883a 	mov	r3,r7
 100364c:	003fe006 	br	10035d0 <memset+0x18>

01003650 <_open_r>:
 1003650:	defffd04 	addi	sp,sp,-12
 1003654:	dc000015 	stw	r16,0(sp)
 1003658:	04004074 	movhi	r16,257
 100365c:	841dec04 	addi	r16,r16,30640
 1003660:	dc400115 	stw	r17,4(sp)
 1003664:	80000015 	stw	zero,0(r16)
 1003668:	2023883a 	mov	r17,r4
 100366c:	2809883a 	mov	r4,r5
 1003670:	300b883a 	mov	r5,r6
 1003674:	380d883a 	mov	r6,r7
 1003678:	dfc00215 	stw	ra,8(sp)
 100367c:	10061c40 	call	10061c4 <open>
 1003680:	1007883a 	mov	r3,r2
 1003684:	00bfffc4 	movi	r2,-1
 1003688:	18800626 	beq	r3,r2,10036a4 <_open_r+0x54>
 100368c:	1805883a 	mov	r2,r3
 1003690:	dfc00217 	ldw	ra,8(sp)
 1003694:	dc400117 	ldw	r17,4(sp)
 1003698:	dc000017 	ldw	r16,0(sp)
 100369c:	dec00304 	addi	sp,sp,12
 10036a0:	f800283a 	ret
 10036a4:	80800017 	ldw	r2,0(r16)
 10036a8:	103ff826 	beq	r2,zero,100368c <_open_r+0x3c>
 10036ac:	88800015 	stw	r2,0(r17)
 10036b0:	1805883a 	mov	r2,r3
 10036b4:	dfc00217 	ldw	ra,8(sp)
 10036b8:	dc400117 	ldw	r17,4(sp)
 10036bc:	dc000017 	ldw	r16,0(sp)
 10036c0:	dec00304 	addi	sp,sp,12
 10036c4:	f800283a 	ret

010036c8 <_perror_r>:
 10036c8:	defffe04 	addi	sp,sp,-8
 10036cc:	dc000015 	stw	r16,0(sp)
 10036d0:	dfc00115 	stw	ra,4(sp)
 10036d4:	2021883a 	mov	r16,r4
 10036d8:	28000326 	beq	r5,zero,10036e8 <_perror_r+0x20>
 10036dc:	28800007 	ldb	r2,0(r5)
 10036e0:	2809883a 	mov	r4,r5
 10036e4:	10000c1e 	bne	r2,zero,1003718 <_perror_r+0x50>
 10036e8:	81000017 	ldw	r4,0(r16)
 10036ec:	1003bf80 	call	1003bf8 <strerror>
 10036f0:	1009883a 	mov	r4,r2
 10036f4:	10000226 	beq	r2,zero,1003700 <_perror_r+0x38>
 10036f8:	81400317 	ldw	r5,12(r16)
 10036fc:	10047540 	call	1004754 <fputs>
 1003700:	81400317 	ldw	r5,12(r16)
 1003704:	01000284 	movi	r4,10
 1003708:	dfc00117 	ldw	ra,4(sp)
 100370c:	dc000017 	ldw	r16,0(sp)
 1003710:	dec00204 	addi	sp,sp,8
 1003714:	10046241 	jmpi	1004624 <fputc>
 1003718:	81400317 	ldw	r5,12(r16)
 100371c:	10047540 	call	1004754 <fputs>
 1003720:	81400317 	ldw	r5,12(r16)
 1003724:	01004074 	movhi	r4,257
 1003728:	210e5f04 	addi	r4,r4,14716
 100372c:	10047540 	call	1004754 <fputs>
 1003730:	003fed06 	br	10036e8 <_perror_r+0x20>

01003734 <perror>:
 1003734:	00804074 	movhi	r2,257
 1003738:	10970804 	addi	r2,r2,23584
 100373c:	200b883a 	mov	r5,r4
 1003740:	11000017 	ldw	r4,0(r2)
 1003744:	10036c81 	jmpi	10036c8 <_perror_r>

01003748 <_puts_r>:
 1003748:	defff604 	addi	sp,sp,-40
 100374c:	dc400715 	stw	r17,28(sp)
 1003750:	2023883a 	mov	r17,r4
 1003754:	2809883a 	mov	r4,r5
 1003758:	dfc00915 	stw	ra,36(sp)
 100375c:	dcc00815 	stw	r19,32(sp)
 1003760:	2827883a 	mov	r19,r5
 1003764:	100426c0 	call	100426c <strlen>
 1003768:	89400217 	ldw	r5,8(r17)
 100376c:	00c04074 	movhi	r3,257
 1003770:	18ce6004 	addi	r3,r3,14720
 1003774:	01c00044 	movi	r7,1
 1003778:	12000044 	addi	r8,r2,1
 100377c:	d8c00515 	stw	r3,20(sp)
 1003780:	d9c00615 	stw	r7,24(sp)
 1003784:	d8c00304 	addi	r3,sp,12
 1003788:	01c00084 	movi	r7,2
 100378c:	8809883a 	mov	r4,r17
 1003790:	d80d883a 	mov	r6,sp
 1003794:	d8c00015 	stw	r3,0(sp)
 1003798:	dcc00315 	stw	r19,12(sp)
 100379c:	da000215 	stw	r8,8(sp)
 10037a0:	d9c00115 	stw	r7,4(sp)
 10037a4:	d8800415 	stw	r2,16(sp)
 10037a8:	10047700 	call	1004770 <__sfvwrite_r>
 10037ac:	00ffffc4 	movi	r3,-1
 10037b0:	10000626 	beq	r2,zero,10037cc <_puts_r+0x84>
 10037b4:	1805883a 	mov	r2,r3
 10037b8:	dfc00917 	ldw	ra,36(sp)
 10037bc:	dcc00817 	ldw	r19,32(sp)
 10037c0:	dc400717 	ldw	r17,28(sp)
 10037c4:	dec00a04 	addi	sp,sp,40
 10037c8:	f800283a 	ret
 10037cc:	00c00284 	movi	r3,10
 10037d0:	1805883a 	mov	r2,r3
 10037d4:	dfc00917 	ldw	ra,36(sp)
 10037d8:	dcc00817 	ldw	r19,32(sp)
 10037dc:	dc400717 	ldw	r17,28(sp)
 10037e0:	dec00a04 	addi	sp,sp,40
 10037e4:	f800283a 	ret

010037e8 <puts>:
 10037e8:	00804074 	movhi	r2,257
 10037ec:	10970804 	addi	r2,r2,23584
 10037f0:	200b883a 	mov	r5,r4
 10037f4:	11000017 	ldw	r4,0(r2)
 10037f8:	10037481 	jmpi	1003748 <_puts_r>

010037fc <__srefill_r>:
 10037fc:	defffd04 	addi	sp,sp,-12
 1003800:	dc400115 	stw	r17,4(sp)
 1003804:	dc000015 	stw	r16,0(sp)
 1003808:	dfc00215 	stw	ra,8(sp)
 100380c:	2023883a 	mov	r17,r4
 1003810:	2821883a 	mov	r16,r5
 1003814:	20000226 	beq	r4,zero,1003820 <__srefill_r+0x24>
 1003818:	20800e17 	ldw	r2,56(r4)
 100381c:	10004126 	beq	r2,zero,1003924 <__srefill_r+0x128>
 1003820:	80c0030b 	ldhu	r3,12(r16)
 1003824:	80000115 	stw	zero,4(r16)
 1003828:	1880080c 	andi	r2,r3,32
 100382c:	1000361e 	bne	r2,zero,1003908 <__srefill_r+0x10c>
 1003830:	1880010c 	andi	r2,r3,4
 1003834:	1000211e 	bne	r2,zero,10038bc <__srefill_r+0xc0>
 1003838:	1880040c 	andi	r2,r3,16
 100383c:	10005026 	beq	r2,zero,1003980 <__srefill_r+0x184>
 1003840:	1880020c 	andi	r2,r3,8
 1003844:	1000541e 	bne	r2,zero,1003998 <__srefill_r+0x19c>
 1003848:	8080030b 	ldhu	r2,12(r16)
 100384c:	10800114 	ori	r2,r2,4
 1003850:	8080030d 	sth	r2,12(r16)
 1003854:	80800417 	ldw	r2,16(r16)
 1003858:	10004526 	beq	r2,zero,1003970 <__srefill_r+0x174>
 100385c:	8080030b 	ldhu	r2,12(r16)
 1003860:	108000cc 	andi	r2,r2,3
 1003864:	1000361e 	bne	r2,zero,1003940 <__srefill_r+0x144>
 1003868:	81800417 	ldw	r6,16(r16)
 100386c:	80c00817 	ldw	r3,32(r16)
 1003870:	81400717 	ldw	r5,28(r16)
 1003874:	81c00517 	ldw	r7,20(r16)
 1003878:	8809883a 	mov	r4,r17
 100387c:	81800015 	stw	r6,0(r16)
 1003880:	183ee83a 	callr	r3
 1003884:	80c0030b 	ldhu	r3,12(r16)
 1003888:	1009883a 	mov	r4,r2
 100388c:	80800115 	stw	r2,4(r16)
 1003890:	00b7ffc4 	movi	r2,-8193
 1003894:	1884703a 	and	r2,r3,r2
 1003898:	8080030d 	sth	r2,12(r16)
 100389c:	0100230e 	bge	zero,r4,100392c <__srefill_r+0x130>
 10038a0:	0009883a 	mov	r4,zero
 10038a4:	2005883a 	mov	r2,r4
 10038a8:	dfc00217 	ldw	ra,8(sp)
 10038ac:	dc400117 	ldw	r17,4(sp)
 10038b0:	dc000017 	ldw	r16,0(sp)
 10038b4:	dec00304 	addi	sp,sp,12
 10038b8:	f800283a 	ret
 10038bc:	81400c17 	ldw	r5,48(r16)
 10038c0:	283fe426 	beq	r5,zero,1003854 <__srefill_r+0x58>
 10038c4:	80801004 	addi	r2,r16,64
 10038c8:	28800226 	beq	r5,r2,10038d4 <__srefill_r+0xd8>
 10038cc:	8809883a 	mov	r4,r17
 10038d0:	10021b40 	call	10021b4 <_free_r>
 10038d4:	80800f17 	ldw	r2,60(r16)
 10038d8:	80000c15 	stw	zero,48(r16)
 10038dc:	80800115 	stw	r2,4(r16)
 10038e0:	103fdc26 	beq	r2,zero,1003854 <__srefill_r+0x58>
 10038e4:	80800e17 	ldw	r2,56(r16)
 10038e8:	0009883a 	mov	r4,zero
 10038ec:	80800015 	stw	r2,0(r16)
 10038f0:	2005883a 	mov	r2,r4
 10038f4:	dfc00217 	ldw	ra,8(sp)
 10038f8:	dc400117 	ldw	r17,4(sp)
 10038fc:	dc000017 	ldw	r16,0(sp)
 1003900:	dec00304 	addi	sp,sp,12
 1003904:	f800283a 	ret
 1003908:	013fffc4 	movi	r4,-1
 100390c:	2005883a 	mov	r2,r4
 1003910:	dfc00217 	ldw	ra,8(sp)
 1003914:	dc400117 	ldw	r17,4(sp)
 1003918:	dc000017 	ldw	r16,0(sp)
 100391c:	dec00304 	addi	sp,sp,12
 1003920:	f800283a 	ret
 1003924:	1001aa00 	call	1001aa0 <__sinit>
 1003928:	003fbd06 	br	1003820 <__srefill_r+0x24>
 100392c:	20000b1e 	bne	r4,zero,100395c <__srefill_r+0x160>
 1003930:	10800814 	ori	r2,r2,32
 1003934:	013fffc4 	movi	r4,-1
 1003938:	8080030d 	sth	r2,12(r16)
 100393c:	003fd906 	br	10038a4 <__srefill_r+0xa8>
 1003940:	00804074 	movhi	r2,257
 1003944:	10970904 	addi	r2,r2,23588
 1003948:	11000017 	ldw	r4,0(r2)
 100394c:	01404034 	movhi	r5,256
 1003950:	294e7004 	addi	r5,r5,14784
 1003954:	1002a640 	call	1002a64 <_fwalk>
 1003958:	003fc306 	br	1003868 <__srefill_r+0x6c>
 100395c:	10801014 	ori	r2,r2,64
 1003960:	013fffc4 	movi	r4,-1
 1003964:	8080030d 	sth	r2,12(r16)
 1003968:	80000115 	stw	zero,4(r16)
 100396c:	003fcd06 	br	10038a4 <__srefill_r+0xa8>
 1003970:	8809883a 	mov	r4,r17
 1003974:	800b883a 	mov	r5,r16
 1003978:	1002c440 	call	1002c44 <__smakebuf_r>
 100397c:	003fb706 	br	100385c <__srefill_r+0x60>
 1003980:	18c01014 	ori	r3,r3,64
 1003984:	00800244 	movi	r2,9
 1003988:	013fffc4 	movi	r4,-1
 100398c:	88800015 	stw	r2,0(r17)
 1003990:	80c0030d 	sth	r3,12(r16)
 1003994:	003fc306 	br	10038a4 <__srefill_r+0xa8>
 1003998:	8809883a 	mov	r4,r17
 100399c:	800b883a 	mov	r5,r16
 10039a0:	10016e00 	call	10016e0 <_fflush_r>
 10039a4:	103fd81e 	bne	r2,zero,1003908 <__srefill_r+0x10c>
 10039a8:	8080030b 	ldhu	r2,12(r16)
 10039ac:	80000215 	stw	zero,8(r16)
 10039b0:	80000615 	stw	zero,24(r16)
 10039b4:	10bffdcc 	andi	r2,r2,65527
 10039b8:	8080030d 	sth	r2,12(r16)
 10039bc:	003fa206 	br	1003848 <__srefill_r+0x4c>

010039c0 <lflush>:
 10039c0:	20c0030b 	ldhu	r3,12(r4)
 10039c4:	01400244 	movi	r5,9
 10039c8:	0005883a 	mov	r2,zero
 10039cc:	18c0024c 	andi	r3,r3,9
 10039d0:	19400126 	beq	r3,r5,10039d8 <lflush+0x18>
 10039d4:	f800283a 	ret
 10039d8:	10018dc1 	jmpi	10018dc <fflush>

010039dc <__srget_r>:
 10039dc:	defffe04 	addi	sp,sp,-8
 10039e0:	dc000015 	stw	r16,0(sp)
 10039e4:	dfc00115 	stw	ra,4(sp)
 10039e8:	2821883a 	mov	r16,r5
 10039ec:	10037fc0 	call	10037fc <__srefill_r>
 10039f0:	013fffc4 	movi	r4,-1
 10039f4:	1000071e 	bne	r2,zero,1003a14 <__srget_r+0x38>
 10039f8:	80800117 	ldw	r2,4(r16)
 10039fc:	81000017 	ldw	r4,0(r16)
 1003a00:	10bfffc4 	addi	r2,r2,-1
 1003a04:	20c00044 	addi	r3,r4,1
 1003a08:	80800115 	stw	r2,4(r16)
 1003a0c:	21000003 	ldbu	r4,0(r4)
 1003a10:	80c00015 	stw	r3,0(r16)
 1003a14:	2005883a 	mov	r2,r4
 1003a18:	dfc00117 	ldw	ra,4(sp)
 1003a1c:	dc000017 	ldw	r16,0(sp)
 1003a20:	dec00204 	addi	sp,sp,8
 1003a24:	f800283a 	ret

01003a28 <__srget>:
 1003a28:	00804074 	movhi	r2,257
 1003a2c:	10970804 	addi	r2,r2,23584
 1003a30:	200b883a 	mov	r5,r4
 1003a34:	11000017 	ldw	r4,0(r2)
 1003a38:	10039dc1 	jmpi	10039dc <__srget_r>

01003a3c <_sbrk_r>:
 1003a3c:	defffd04 	addi	sp,sp,-12
 1003a40:	dc000015 	stw	r16,0(sp)
 1003a44:	04004074 	movhi	r16,257
 1003a48:	841dec04 	addi	r16,r16,30640
 1003a4c:	dc400115 	stw	r17,4(sp)
 1003a50:	80000015 	stw	zero,0(r16)
 1003a54:	2023883a 	mov	r17,r4
 1003a58:	2809883a 	mov	r4,r5
 1003a5c:	dfc00215 	stw	ra,8(sp)
 1003a60:	10065ac0 	call	10065ac <sbrk>
 1003a64:	1007883a 	mov	r3,r2
 1003a68:	00bfffc4 	movi	r2,-1
 1003a6c:	18800626 	beq	r3,r2,1003a88 <_sbrk_r+0x4c>
 1003a70:	1805883a 	mov	r2,r3
 1003a74:	dfc00217 	ldw	ra,8(sp)
 1003a78:	dc400117 	ldw	r17,4(sp)
 1003a7c:	dc000017 	ldw	r16,0(sp)
 1003a80:	dec00304 	addi	sp,sp,12
 1003a84:	f800283a 	ret
 1003a88:	80800017 	ldw	r2,0(r16)
 1003a8c:	103ff826 	beq	r2,zero,1003a70 <_sbrk_r+0x34>
 1003a90:	88800015 	stw	r2,0(r17)
 1003a94:	1805883a 	mov	r2,r3
 1003a98:	dfc00217 	ldw	ra,8(sp)
 1003a9c:	dc400117 	ldw	r17,4(sp)
 1003aa0:	dc000017 	ldw	r16,0(sp)
 1003aa4:	dec00304 	addi	sp,sp,12
 1003aa8:	f800283a 	ret

01003aac <__sclose>:
 1003aac:	2940038f 	ldh	r5,14(r5)
 1003ab0:	10045141 	jmpi	1004514 <_close_r>

01003ab4 <__sseek>:
 1003ab4:	defffe04 	addi	sp,sp,-8
 1003ab8:	dc000015 	stw	r16,0(sp)
 1003abc:	2821883a 	mov	r16,r5
 1003ac0:	2940038f 	ldh	r5,14(r5)
 1003ac4:	dfc00115 	stw	ra,4(sp)
 1003ac8:	1004c7c0 	call	1004c7c <_lseek_r>
 1003acc:	1007883a 	mov	r3,r2
 1003ad0:	00bfffc4 	movi	r2,-1
 1003ad4:	18800926 	beq	r3,r2,1003afc <__sseek+0x48>
 1003ad8:	8080030b 	ldhu	r2,12(r16)
 1003adc:	80c01415 	stw	r3,80(r16)
 1003ae0:	10840014 	ori	r2,r2,4096
 1003ae4:	8080030d 	sth	r2,12(r16)
 1003ae8:	1805883a 	mov	r2,r3
 1003aec:	dfc00117 	ldw	ra,4(sp)
 1003af0:	dc000017 	ldw	r16,0(sp)
 1003af4:	dec00204 	addi	sp,sp,8
 1003af8:	f800283a 	ret
 1003afc:	8080030b 	ldhu	r2,12(r16)
 1003b00:	10bbffcc 	andi	r2,r2,61439
 1003b04:	8080030d 	sth	r2,12(r16)
 1003b08:	1805883a 	mov	r2,r3
 1003b0c:	dfc00117 	ldw	ra,4(sp)
 1003b10:	dc000017 	ldw	r16,0(sp)
 1003b14:	dec00204 	addi	sp,sp,8
 1003b18:	f800283a 	ret

01003b1c <__swrite>:
 1003b1c:	2880030b 	ldhu	r2,12(r5)
 1003b20:	defffb04 	addi	sp,sp,-20
 1003b24:	dcc00315 	stw	r19,12(sp)
 1003b28:	1080400c 	andi	r2,r2,256
 1003b2c:	dc800215 	stw	r18,8(sp)
 1003b30:	dc400115 	stw	r17,4(sp)
 1003b34:	dc000015 	stw	r16,0(sp)
 1003b38:	3027883a 	mov	r19,r6
 1003b3c:	3825883a 	mov	r18,r7
 1003b40:	dfc00415 	stw	ra,16(sp)
 1003b44:	2821883a 	mov	r16,r5
 1003b48:	000d883a 	mov	r6,zero
 1003b4c:	01c00084 	movi	r7,2
 1003b50:	2023883a 	mov	r17,r4
 1003b54:	10000226 	beq	r2,zero,1003b60 <__swrite+0x44>
 1003b58:	2940038f 	ldh	r5,14(r5)
 1003b5c:	1004c7c0 	call	1004c7c <_lseek_r>
 1003b60:	8080030b 	ldhu	r2,12(r16)
 1003b64:	8140038f 	ldh	r5,14(r16)
 1003b68:	8809883a 	mov	r4,r17
 1003b6c:	10bbffcc 	andi	r2,r2,61439
 1003b70:	980d883a 	mov	r6,r19
 1003b74:	900f883a 	mov	r7,r18
 1003b78:	8080030d 	sth	r2,12(r16)
 1003b7c:	dfc00417 	ldw	ra,16(sp)
 1003b80:	dcc00317 	ldw	r19,12(sp)
 1003b84:	dc800217 	ldw	r18,8(sp)
 1003b88:	dc400117 	ldw	r17,4(sp)
 1003b8c:	dc000017 	ldw	r16,0(sp)
 1003b90:	dec00504 	addi	sp,sp,20
 1003b94:	10042e81 	jmpi	10042e8 <_write_r>

01003b98 <__sread>:
 1003b98:	defffe04 	addi	sp,sp,-8
 1003b9c:	dc000015 	stw	r16,0(sp)
 1003ba0:	2821883a 	mov	r16,r5
 1003ba4:	2940038f 	ldh	r5,14(r5)
 1003ba8:	dfc00115 	stw	ra,4(sp)
 1003bac:	10050a40 	call	10050a4 <_read_r>
 1003bb0:	1007883a 	mov	r3,r2
 1003bb4:	10000816 	blt	r2,zero,1003bd8 <__sread+0x40>
 1003bb8:	80801417 	ldw	r2,80(r16)
 1003bbc:	10c5883a 	add	r2,r2,r3
 1003bc0:	80801415 	stw	r2,80(r16)
 1003bc4:	1805883a 	mov	r2,r3
 1003bc8:	dfc00117 	ldw	ra,4(sp)
 1003bcc:	dc000017 	ldw	r16,0(sp)
 1003bd0:	dec00204 	addi	sp,sp,8
 1003bd4:	f800283a 	ret
 1003bd8:	8080030b 	ldhu	r2,12(r16)
 1003bdc:	10bbffcc 	andi	r2,r2,61439
 1003be0:	8080030d 	sth	r2,12(r16)
 1003be4:	1805883a 	mov	r2,r3
 1003be8:	dfc00117 	ldw	ra,4(sp)
 1003bec:	dc000017 	ldw	r16,0(sp)
 1003bf0:	dec00204 	addi	sp,sp,8
 1003bf4:	f800283a 	ret

01003bf8 <strerror>:
 1003bf8:	deffff04 	addi	sp,sp,-4
 1003bfc:	00802184 	movi	r2,134
 1003c00:	dfc00015 	stw	ra,0(sp)
 1003c04:	200b883a 	mov	r5,r4
 1003c08:	11008e36 	bltu	r2,r4,1003e44 <strerror+0x24c>
 1003c0c:	2105883a 	add	r2,r4,r4
 1003c10:	1085883a 	add	r2,r2,r2
 1003c14:	00c04034 	movhi	r3,256
 1003c18:	18cf0a04 	addi	r3,r3,15400
 1003c1c:	10c5883a 	add	r2,r2,r3
 1003c20:	11000017 	ldw	r4,0(r2)
 1003c24:	2000683a 	jmp	r4
 1003c28:	01003e44 	movi	r4,249
 1003c2c:	01003e7c 	xorhi	r4,zero,249
 1003c30:	01003e88 	cmpgei	r4,zero,250
 1003c34:	01003e94 	movui	r4,250
 1003c38:	01003ea0 	cmpeqi	r4,zero,250
 1003c3c:	01003eac 	andhi	r4,zero,250
 1003c40:	01003eb8 	rdprs	r4,zero,250
 1003c44:	01003ec4 	movi	r4,251
 1003c48:	01003ed0 	cmplti	r4,zero,251
 1003c4c:	01003edc 	xori	r4,zero,251
 1003c50:	01003ee8 	cmpgeui	r4,zero,251
 1003c54:	01003ef4 	movhi	r4,251
 1003c58:	01003f00 	call	1003f0 <__alt_mem_onchip_memory2_0+0x1003f0>
 1003c5c:	01003f0c 	andi	r4,zero,252
 1003c60:	01003f18 	cmpnei	r4,zero,252
 1003c64:	01003f24 	muli	r4,zero,252
 1003c68:	01003f30 	cmpltui	r4,zero,252
 1003c6c:	01003f3c 	xorhi	r4,zero,252
 1003c70:	01003f48 	cmpgei	r4,zero,253
 1003c74:	01003f54 	movui	r4,253
 1003c78:	01003f60 	cmpeqi	r4,zero,253
 1003c7c:	01003f6c 	andhi	r4,zero,253
 1003c80:	01003f78 	rdprs	r4,zero,253
 1003c84:	01003f84 	movi	r4,254
 1003c88:	01003f90 	cmplti	r4,zero,254
 1003c8c:	01003f9c 	xori	r4,zero,254
 1003c90:	01003fa8 	cmpgeui	r4,zero,254
 1003c94:	01003fb4 	movhi	r4,254
 1003c98:	01003fc0 	call	1003fc <__alt_mem_onchip_memory2_0+0x1003fc>
 1003c9c:	01003fcc 	andi	r4,zero,255
 1003ca0:	01003fd8 	cmpnei	r4,zero,255
 1003ca4:	01003fe4 	muli	r4,zero,255
 1003ca8:	01003ff0 	cmpltui	r4,zero,255
 1003cac:	01003ffc 	xorhi	r4,zero,255
 1003cb0:	01004008 	cmpgei	r4,zero,256
 1003cb4:	01004014 	movui	r4,256
 1003cb8:	01004020 	cmpeqi	r4,zero,256
 1003cbc:	01003e44 	movi	r4,249
 1003cc0:	01003e44 	movi	r4,249
 1003cc4:	01003e44 	movi	r4,249
 1003cc8:	01003e44 	movi	r4,249
 1003ccc:	01003e44 	movi	r4,249
 1003cd0:	01003e44 	movi	r4,249
 1003cd4:	01003e44 	movi	r4,249
 1003cd8:	01003e44 	movi	r4,249
 1003cdc:	0100402c 	andhi	r4,zero,256
 1003ce0:	01004038 	rdprs	r4,zero,256
 1003ce4:	01003e44 	movi	r4,249
 1003ce8:	01003e44 	movi	r4,249
 1003cec:	01003e44 	movi	r4,249
 1003cf0:	01003e44 	movi	r4,249
 1003cf4:	01003e44 	movi	r4,249
 1003cf8:	01003e44 	movi	r4,249
 1003cfc:	01003e44 	movi	r4,249
 1003d00:	01003e44 	movi	r4,249
 1003d04:	01003e44 	movi	r4,249
 1003d08:	01003e44 	movi	r4,249
 1003d0c:	01003e44 	movi	r4,249
 1003d10:	01003e44 	movi	r4,249
 1003d14:	01003e44 	movi	r4,249
 1003d18:	01004044 	movi	r4,257
 1003d1c:	01003e44 	movi	r4,249
 1003d20:	01004050 	cmplti	r4,zero,257
 1003d24:	0100405c 	xori	r4,zero,257
 1003d28:	01004068 	cmpgeui	r4,zero,257
 1003d2c:	01004074 	movhi	r4,257
 1003d30:	01004080 	call	100408 <__alt_mem_onchip_memory2_0+0x100408>
 1003d34:	0100408c 	andi	r4,zero,258
 1003d38:	01004098 	cmpnei	r4,zero,258
 1003d3c:	010040a4 	muli	r4,zero,258
 1003d40:	010040b0 	cmpltui	r4,zero,258
 1003d44:	010040bc 	xorhi	r4,zero,258
 1003d48:	01003e44 	movi	r4,249
 1003d4c:	01003e44 	movi	r4,249
 1003d50:	010040c8 	cmpgei	r4,zero,259
 1003d54:	01003e44 	movi	r4,249
 1003d58:	01003e44 	movi	r4,249
 1003d5c:	010040d4 	movui	r4,259
 1003d60:	01003e44 	movi	r4,249
 1003d64:	01003e44 	movi	r4,249
 1003d68:	01003e44 	movi	r4,249
 1003d6c:	01003e44 	movi	r4,249
 1003d70:	01003e44 	movi	r4,249
 1003d74:	010040e0 	cmpeqi	r4,zero,259
 1003d78:	010040ec 	andhi	r4,zero,259
 1003d7c:	010040f8 	rdprs	r4,zero,259
 1003d80:	01004104 	movi	r4,260
 1003d84:	01004110 	cmplti	r4,zero,260
 1003d88:	0100411c 	xori	r4,zero,260
 1003d8c:	01004128 	cmpgeui	r4,zero,260
 1003d90:	01004134 	movhi	r4,260
 1003d94:	01004140 	call	100414 <__alt_mem_onchip_memory2_0+0x100414>
 1003d98:	0100414c 	andi	r4,zero,261
 1003d9c:	01003e44 	movi	r4,249
 1003da0:	01003e44 	movi	r4,249
 1003da4:	01004158 	cmpnei	r4,zero,261
 1003da8:	01003e44 	movi	r4,249
 1003dac:	01003e44 	movi	r4,249
 1003db0:	01003e44 	movi	r4,249
 1003db4:	01003e44 	movi	r4,249
 1003db8:	01003e44 	movi	r4,249
 1003dbc:	01003e44 	movi	r4,249
 1003dc0:	01003e44 	movi	r4,249
 1003dc4:	01003e44 	movi	r4,249
 1003dc8:	01003e44 	movi	r4,249
 1003dcc:	01004164 	muli	r4,zero,261
 1003dd0:	01004170 	cmpltui	r4,zero,261
 1003dd4:	0100417c 	xorhi	r4,zero,261
 1003dd8:	01004188 	cmpgei	r4,zero,262
 1003ddc:	01004194 	movui	r4,262
 1003de0:	010041a0 	cmpeqi	r4,zero,262
 1003de4:	010041ac 	andhi	r4,zero,262
 1003de8:	010041b8 	rdprs	r4,zero,262
 1003dec:	010041c4 	movi	r4,263
 1003df0:	010041d0 	cmplti	r4,zero,263
 1003df4:	010041dc 	xori	r4,zero,263
 1003df8:	010041e8 	cmpgeui	r4,zero,263
 1003dfc:	010041f4 	movhi	r4,263
 1003e00:	01004200 	call	100420 <__alt_mem_onchip_memory2_0+0x100420>
 1003e04:	0100420c 	andi	r4,zero,264
 1003e08:	01004218 	cmpnei	r4,zero,264
 1003e0c:	01004224 	muli	r4,zero,264
 1003e10:	01004230 	cmpltui	r4,zero,264
 1003e14:	0100423c 	xorhi	r4,zero,264
 1003e18:	01004248 	cmpgei	r4,zero,265
 1003e1c:	01003e44 	movi	r4,249
 1003e20:	01003e44 	movi	r4,249
 1003e24:	01004254 	movui	r4,265
 1003e28:	01004260 	cmpeqi	r4,zero,265
 1003e2c:	01003e44 	movi	r4,249
 1003e30:	01003e44 	movi	r4,249
 1003e34:	01003e44 	movi	r4,249
 1003e38:	01003e44 	movi	r4,249
 1003e3c:	01003e44 	movi	r4,249
 1003e40:	01003e70 	cmpltui	r4,zero,249
 1003e44:	2809883a 	mov	r4,r5
 1003e48:	10042e00 	call	10042e0 <_user_strerror>
 1003e4c:	10000326 	beq	r2,zero,1003e5c <strerror+0x264>
 1003e50:	dfc00017 	ldw	ra,0(sp)
 1003e54:	dec00104 	addi	sp,sp,4
 1003e58:	f800283a 	ret
 1003e5c:	00804074 	movhi	r2,257
 1003e60:	108ea904 	addi	r2,r2,15012
 1003e64:	dfc00017 	ldw	ra,0(sp)
 1003e68:	dec00104 	addi	sp,sp,4
 1003e6c:	f800283a 	ret
 1003e70:	00804074 	movhi	r2,257
 1003e74:	108f1c04 	addi	r2,r2,15472
 1003e78:	003ff506 	br	1003e50 <strerror+0x258>
 1003e7c:	00804074 	movhi	r2,257
 1003e80:	108e6c04 	addi	r2,r2,14768
 1003e84:	003ff206 	br	1003e50 <strerror+0x258>
 1003e88:	00804074 	movhi	r2,257
 1003e8c:	108e6f04 	addi	r2,r2,14780
 1003e90:	003fef06 	br	1003e50 <strerror+0x258>
 1003e94:	00804074 	movhi	r2,257
 1003e98:	108e7604 	addi	r2,r2,14808
 1003e9c:	003fec06 	br	1003e50 <strerror+0x258>
 1003ea0:	00804074 	movhi	r2,257
 1003ea4:	108e7a04 	addi	r2,r2,14824
 1003ea8:	003fe906 	br	1003e50 <strerror+0x258>
 1003eac:	00804074 	movhi	r2,257
 1003eb0:	108e8004 	addi	r2,r2,14848
 1003eb4:	003fe606 	br	1003e50 <strerror+0x258>
 1003eb8:	00804074 	movhi	r2,257
 1003ebc:	108e8304 	addi	r2,r2,14860
 1003ec0:	003fe306 	br	1003e50 <strerror+0x258>
 1003ec4:	00804074 	movhi	r2,257
 1003ec8:	108e8a04 	addi	r2,r2,14888
 1003ecc:	003fe006 	br	1003e50 <strerror+0x258>
 1003ed0:	00804074 	movhi	r2,257
 1003ed4:	108e8f04 	addi	r2,r2,14908
 1003ed8:	003fdd06 	br	1003e50 <strerror+0x258>
 1003edc:	00804074 	movhi	r2,257
 1003ee0:	108e9b04 	addi	r2,r2,14956
 1003ee4:	003fda06 	br	1003e50 <strerror+0x258>
 1003ee8:	00804074 	movhi	r2,257
 1003eec:	108e9f04 	addi	r2,r2,14972
 1003ef0:	003fd706 	br	1003e50 <strerror+0x258>
 1003ef4:	00804074 	movhi	r2,257
 1003ef8:	108eaa04 	addi	r2,r2,15016
 1003efc:	003fd406 	br	1003e50 <strerror+0x258>
 1003f00:	00804074 	movhi	r2,257
 1003f04:	108eaf04 	addi	r2,r2,15036
 1003f08:	003fd106 	br	1003e50 <strerror+0x258>
 1003f0c:	00804074 	movhi	r2,257
 1003f10:	108eb404 	addi	r2,r2,15056
 1003f14:	003fce06 	br	1003e50 <strerror+0x258>
 1003f18:	00804074 	movhi	r2,257
 1003f1c:	108eb904 	addi	r2,r2,15076
 1003f20:	003fcb06 	br	1003e50 <strerror+0x258>
 1003f24:	00804074 	movhi	r2,257
 1003f28:	108ebc04 	addi	r2,r2,15088
 1003f2c:	003fc806 	br	1003e50 <strerror+0x258>
 1003f30:	00804074 	movhi	r2,257
 1003f34:	108ec204 	addi	r2,r2,15112
 1003f38:	003fc506 	br	1003e50 <strerror+0x258>
 1003f3c:	00804074 	movhi	r2,257
 1003f40:	108ec804 	addi	r2,r2,15136
 1003f44:	003fc206 	br	1003e50 <strerror+0x258>
 1003f48:	00804074 	movhi	r2,257
 1003f4c:	108ecb04 	addi	r2,r2,15148
 1003f50:	003fbf06 	br	1003e50 <strerror+0x258>
 1003f54:	00804074 	movhi	r2,257
 1003f58:	108ed004 	addi	r2,r2,15168
 1003f5c:	003fbc06 	br	1003e50 <strerror+0x258>
 1003f60:	00804074 	movhi	r2,257
 1003f64:	108ed404 	addi	r2,r2,15184
 1003f68:	003fb906 	br	1003e50 <strerror+0x258>
 1003f6c:	00804074 	movhi	r2,257
 1003f70:	108ee404 	addi	r2,r2,15248
 1003f74:	003fb606 	br	1003e50 <strerror+0x258>
 1003f78:	00804074 	movhi	r2,257
 1003f7c:	108ee804 	addi	r2,r2,15264
 1003f80:	003fb306 	br	1003e50 <strerror+0x258>
 1003f84:	00804074 	movhi	r2,257
 1003f88:	108ef604 	addi	r2,r2,15320
 1003f8c:	003fb006 	br	1003e50 <strerror+0x258>
 1003f90:	00804074 	movhi	r2,257
 1003f94:	108efe04 	addi	r2,r2,15352
 1003f98:	003fad06 	br	1003e50 <strerror+0x258>
 1003f9c:	00804074 	movhi	r2,257
 1003fa0:	108f0304 	addi	r2,r2,15372
 1003fa4:	003faa06 	br	1003e50 <strerror+0x258>
 1003fa8:	00804074 	movhi	r2,257
 1003fac:	108f0904 	addi	r2,r2,15396
 1003fb0:	003fa706 	br	1003e50 <strerror+0x258>
 1003fb4:	00804074 	movhi	r2,257
 1003fb8:	108f0d04 	addi	r2,r2,15412
 1003fbc:	003fa406 	br	1003e50 <strerror+0x258>
 1003fc0:	00804074 	movhi	r2,257
 1003fc4:	108f1604 	addi	r2,r2,15448
 1003fc8:	003fa106 	br	1003e50 <strerror+0x258>
 1003fcc:	00804074 	movhi	r2,257
 1003fd0:	108f2004 	addi	r2,r2,15488
 1003fd4:	003f9e06 	br	1003e50 <strerror+0x258>
 1003fd8:	00804074 	movhi	r2,257
 1003fdc:	108f2404 	addi	r2,r2,15504
 1003fe0:	003f9b06 	br	1003e50 <strerror+0x258>
 1003fe4:	00804074 	movhi	r2,257
 1003fe8:	108f2a04 	addi	r2,r2,15528
 1003fec:	003f9806 	br	1003e50 <strerror+0x258>
 1003ff0:	00804074 	movhi	r2,257
 1003ff4:	108f2e04 	addi	r2,r2,15544
 1003ff8:	003f9506 	br	1003e50 <strerror+0x258>
 1003ffc:	00804074 	movhi	r2,257
 1004000:	108f3104 	addi	r2,r2,15556
 1004004:	003f9206 	br	1003e50 <strerror+0x258>
 1004008:	00804074 	movhi	r2,257
 100400c:	108f3504 	addi	r2,r2,15572
 1004010:	003f8f06 	br	1003e50 <strerror+0x258>
 1004014:	00804074 	movhi	r2,257
 1004018:	108f3a04 	addi	r2,r2,15592
 100401c:	003f8c06 	br	1003e50 <strerror+0x258>
 1004020:	00804074 	movhi	r2,257
 1004024:	108f4104 	addi	r2,r2,15620
 1004028:	003f8906 	br	1003e50 <strerror+0x258>
 100402c:	00804074 	movhi	r2,257
 1004030:	108f4604 	addi	r2,r2,15640
 1004034:	003f8606 	br	1003e50 <strerror+0x258>
 1004038:	00804074 	movhi	r2,257
 100403c:	108f4f04 	addi	r2,r2,15676
 1004040:	003f8306 	br	1003e50 <strerror+0x258>
 1004044:	00804074 	movhi	r2,257
 1004048:	108f5104 	addi	r2,r2,15684
 100404c:	003f8006 	br	1003e50 <strerror+0x258>
 1004050:	00804074 	movhi	r2,257
 1004054:	108f5504 	addi	r2,r2,15700
 1004058:	003f7d06 	br	1003e50 <strerror+0x258>
 100405c:	00804074 	movhi	r2,257
 1004060:	108f5b04 	addi	r2,r2,15724
 1004064:	003f7a06 	br	1003e50 <strerror+0x258>
 1004068:	00804074 	movhi	r2,257
 100406c:	108f6004 	addi	r2,r2,15744
 1004070:	003f7706 	br	1003e50 <strerror+0x258>
 1004074:	00804074 	movhi	r2,257
 1004078:	108f6804 	addi	r2,r2,15776
 100407c:	003f7406 	br	1003e50 <strerror+0x258>
 1004080:	00804074 	movhi	r2,257
 1004084:	108f6b04 	addi	r2,r2,15788
 1004088:	003f7106 	br	1003e50 <strerror+0x258>
 100408c:	00804074 	movhi	r2,257
 1004090:	108f7004 	addi	r2,r2,15808
 1004094:	003f6e06 	br	1003e50 <strerror+0x258>
 1004098:	00804074 	movhi	r2,257
 100409c:	108f7604 	addi	r2,r2,15832
 10040a0:	003f6b06 	br	1003e50 <strerror+0x258>
 10040a4:	00804074 	movhi	r2,257
 10040a8:	108f7a04 	addi	r2,r2,15848
 10040ac:	003f6806 	br	1003e50 <strerror+0x258>
 10040b0:	00804074 	movhi	r2,257
 10040b4:	108f7e04 	addi	r2,r2,15864
 10040b8:	003f6506 	br	1003e50 <strerror+0x258>
 10040bc:	00804074 	movhi	r2,257
 10040c0:	108f8304 	addi	r2,r2,15884
 10040c4:	003f6206 	br	1003e50 <strerror+0x258>
 10040c8:	00804074 	movhi	r2,257
 10040cc:	108f8c04 	addi	r2,r2,15920
 10040d0:	003f5f06 	br	1003e50 <strerror+0x258>
 10040d4:	00804074 	movhi	r2,257
 10040d8:	108f9104 	addi	r2,r2,15940
 10040dc:	003f5c06 	br	1003e50 <strerror+0x258>
 10040e0:	00804074 	movhi	r2,257
 10040e4:	108f9404 	addi	r2,r2,15952
 10040e8:	003f5906 	br	1003e50 <strerror+0x258>
 10040ec:	00804074 	movhi	r2,257
 10040f0:	108f9e04 	addi	r2,r2,15992
 10040f4:	003f5606 	br	1003e50 <strerror+0x258>
 10040f8:	00804074 	movhi	r2,257
 10040fc:	108fa804 	addi	r2,r2,16032
 1004100:	003f5306 	br	1003e50 <strerror+0x258>
 1004104:	00804074 	movhi	r2,257
 1004108:	108fb004 	addi	r2,r2,16064
 100410c:	003f5006 	br	1003e50 <strerror+0x258>
 1004110:	00804074 	movhi	r2,257
 1004114:	108fc004 	addi	r2,r2,16128
 1004118:	003f4d06 	br	1003e50 <strerror+0x258>
 100411c:	00804074 	movhi	r2,257
 1004120:	108fca04 	addi	r2,r2,16168
 1004124:	003f4a06 	br	1003e50 <strerror+0x258>
 1004128:	00804074 	movhi	r2,257
 100412c:	108fd104 	addi	r2,r2,16196
 1004130:	003f4706 	br	1003e50 <strerror+0x258>
 1004134:	00804074 	movhi	r2,257
 1004138:	108fd504 	addi	r2,r2,16212
 100413c:	003f4406 	br	1003e50 <strerror+0x258>
 1004140:	00804074 	movhi	r2,257
 1004144:	108fda04 	addi	r2,r2,16232
 1004148:	003f4106 	br	1003e50 <strerror+0x258>
 100414c:	00804074 	movhi	r2,257
 1004150:	108fe104 	addi	r2,r2,16260
 1004154:	003f3e06 	br	1003e50 <strerror+0x258>
 1004158:	00804074 	movhi	r2,257
 100415c:	10904104 	addi	r2,r2,16644
 1004160:	003f3b06 	br	1003e50 <strerror+0x258>
 1004164:	00804074 	movhi	r2,257
 1004168:	108fe704 	addi	r2,r2,16284
 100416c:	003f3806 	br	1003e50 <strerror+0x258>
 1004170:	00804074 	movhi	r2,257
 1004174:	108fee04 	addi	r2,r2,16312
 1004178:	003f3506 	br	1003e50 <strerror+0x258>
 100417c:	00804074 	movhi	r2,257
 1004180:	108ffa04 	addi	r2,r2,16360
 1004184:	003f3206 	br	1003e50 <strerror+0x258>
 1004188:	00804074 	movhi	r2,257
 100418c:	10900204 	addi	r2,r2,16392
 1004190:	003f2f06 	br	1003e50 <strerror+0x258>
 1004194:	00804074 	movhi	r2,257
 1004198:	10900a04 	addi	r2,r2,16424
 100419c:	003f2c06 	br	1003e50 <strerror+0x258>
 10041a0:	00804074 	movhi	r2,257
 10041a4:	10901004 	addi	r2,r2,16448
 10041a8:	003f2906 	br	1003e50 <strerror+0x258>
 10041ac:	00804074 	movhi	r2,257
 10041b0:	10901904 	addi	r2,r2,16484
 10041b4:	003f2606 	br	1003e50 <strerror+0x258>
 10041b8:	00804074 	movhi	r2,257
 10041bc:	10901e04 	addi	r2,r2,16504
 10041c0:	003f2306 	br	1003e50 <strerror+0x258>
 10041c4:	00804074 	movhi	r2,257
 10041c8:	10902404 	addi	r2,r2,16528
 10041cc:	003f2006 	br	1003e50 <strerror+0x258>
 10041d0:	00804074 	movhi	r2,257
 10041d4:	108f4904 	addi	r2,r2,15652
 10041d8:	003f1d06 	br	1003e50 <strerror+0x258>
 10041dc:	00804074 	movhi	r2,257
 10041e0:	108eed04 	addi	r2,r2,15284
 10041e4:	003f1a06 	br	1003e50 <strerror+0x258>
 10041e8:	00804074 	movhi	r2,257
 10041ec:	108e6604 	addi	r2,r2,14744
 10041f0:	003f1706 	br	1003e50 <strerror+0x258>
 10041f4:	00804074 	movhi	r2,257
 10041f8:	108ed804 	addi	r2,r2,15200
 10041fc:	003f1406 	br	1003e50 <strerror+0x258>
 1004200:	00804074 	movhi	r2,257
 1004204:	108f1104 	addi	r2,r2,15428
 1004208:	003f1106 	br	1003e50 <strerror+0x258>
 100420c:	00804074 	movhi	r2,257
 1004210:	108edc04 	addi	r2,r2,15216
 1004214:	003f0e06 	br	1003e50 <strerror+0x258>
 1004218:	00804074 	movhi	r2,257
 100421c:	108e9404 	addi	r2,r2,14928
 1004220:	003f0b06 	br	1003e50 <strerror+0x258>
 1004224:	00804074 	movhi	r2,257
 1004228:	108ea204 	addi	r2,r2,14984
 100422c:	003f0806 	br	1003e50 <strerror+0x258>
 1004230:	00804074 	movhi	r2,257
 1004234:	108e6104 	addi	r2,r2,14724
 1004238:	003f0506 	br	1003e50 <strerror+0x258>
 100423c:	00804074 	movhi	r2,257
 1004240:	108f8704 	addi	r2,r2,15900
 1004244:	003f0206 	br	1003e50 <strerror+0x258>
 1004248:	00804074 	movhi	r2,257
 100424c:	10903304 	addi	r2,r2,16588
 1004250:	003eff06 	br	1003e50 <strerror+0x258>
 1004254:	00804074 	movhi	r2,257
 1004258:	10903a04 	addi	r2,r2,16616
 100425c:	003efc06 	br	1003e50 <strerror+0x258>
 1004260:	00804074 	movhi	r2,257
 1004264:	10902d04 	addi	r2,r2,16564
 1004268:	003ef906 	br	1003e50 <strerror+0x258>

0100426c <strlen>:
 100426c:	208000cc 	andi	r2,r4,3
 1004270:	2011883a 	mov	r8,r4
 1004274:	1000161e 	bne	r2,zero,10042d0 <strlen+0x64>
 1004278:	20c00017 	ldw	r3,0(r4)
 100427c:	017fbff4 	movhi	r5,65279
 1004280:	297fbfc4 	addi	r5,r5,-257
 1004284:	01e02074 	movhi	r7,32897
 1004288:	39e02004 	addi	r7,r7,-32640
 100428c:	1945883a 	add	r2,r3,r5
 1004290:	11c4703a 	and	r2,r2,r7
 1004294:	00c6303a 	nor	r3,zero,r3
 1004298:	1886703a 	and	r3,r3,r2
 100429c:	18000c1e 	bne	r3,zero,10042d0 <strlen+0x64>
 10042a0:	280d883a 	mov	r6,r5
 10042a4:	380b883a 	mov	r5,r7
 10042a8:	21000104 	addi	r4,r4,4
 10042ac:	20800017 	ldw	r2,0(r4)
 10042b0:	1187883a 	add	r3,r2,r6
 10042b4:	1946703a 	and	r3,r3,r5
 10042b8:	0084303a 	nor	r2,zero,r2
 10042bc:	10c4703a 	and	r2,r2,r3
 10042c0:	103ff926 	beq	r2,zero,10042a8 <strlen+0x3c>
 10042c4:	20800007 	ldb	r2,0(r4)
 10042c8:	10000326 	beq	r2,zero,10042d8 <strlen+0x6c>
 10042cc:	21000044 	addi	r4,r4,1
 10042d0:	20800007 	ldb	r2,0(r4)
 10042d4:	103ffd1e 	bne	r2,zero,10042cc <strlen+0x60>
 10042d8:	2205c83a 	sub	r2,r4,r8
 10042dc:	f800283a 	ret

010042e0 <_user_strerror>:
 10042e0:	0005883a 	mov	r2,zero
 10042e4:	f800283a 	ret

010042e8 <_write_r>:
 10042e8:	defffd04 	addi	sp,sp,-12
 10042ec:	dc000015 	stw	r16,0(sp)
 10042f0:	04004074 	movhi	r16,257
 10042f4:	841dec04 	addi	r16,r16,30640
 10042f8:	dc400115 	stw	r17,4(sp)
 10042fc:	80000015 	stw	zero,0(r16)
 1004300:	2023883a 	mov	r17,r4
 1004304:	2809883a 	mov	r4,r5
 1004308:	300b883a 	mov	r5,r6
 100430c:	380d883a 	mov	r6,r7
 1004310:	dfc00215 	stw	ra,8(sp)
 1004314:	10066680 	call	1006668 <write>
 1004318:	1007883a 	mov	r3,r2
 100431c:	00bfffc4 	movi	r2,-1
 1004320:	18800626 	beq	r3,r2,100433c <_write_r+0x54>
 1004324:	1805883a 	mov	r2,r3
 1004328:	dfc00217 	ldw	ra,8(sp)
 100432c:	dc400117 	ldw	r17,4(sp)
 1004330:	dc000017 	ldw	r16,0(sp)
 1004334:	dec00304 	addi	sp,sp,12
 1004338:	f800283a 	ret
 100433c:	80800017 	ldw	r2,0(r16)
 1004340:	103ff826 	beq	r2,zero,1004324 <_write_r+0x3c>
 1004344:	88800015 	stw	r2,0(r17)
 1004348:	1805883a 	mov	r2,r3
 100434c:	dfc00217 	ldw	ra,8(sp)
 1004350:	dc400117 	ldw	r17,4(sp)
 1004354:	dc000017 	ldw	r16,0(sp)
 1004358:	dec00304 	addi	sp,sp,12
 100435c:	f800283a 	ret

01004360 <register_fini>:
 1004360:	f800283a 	ret

01004364 <__call_exitprocs>:
 1004364:	00804074 	movhi	r2,257
 1004368:	10970904 	addi	r2,r2,23588
 100436c:	10800017 	ldw	r2,0(r2)
 1004370:	defff304 	addi	sp,sp,-52
 1004374:	df000b15 	stw	fp,44(sp)
 1004378:	d8800115 	stw	r2,4(sp)
 100437c:	00800034 	movhi	r2,0
 1004380:	10800004 	addi	r2,r2,0
 1004384:	1005003a 	cmpeq	r2,r2,zero
 1004388:	d8800215 	stw	r2,8(sp)
 100438c:	d8800117 	ldw	r2,4(sp)
 1004390:	dd400815 	stw	r21,32(sp)
 1004394:	dd000715 	stw	r20,28(sp)
 1004398:	10805204 	addi	r2,r2,328
 100439c:	dfc00c15 	stw	ra,48(sp)
 10043a0:	ddc00a15 	stw	r23,40(sp)
 10043a4:	dd800915 	stw	r22,36(sp)
 10043a8:	dcc00615 	stw	r19,24(sp)
 10043ac:	dc800515 	stw	r18,20(sp)
 10043b0:	dc400415 	stw	r17,16(sp)
 10043b4:	dc000315 	stw	r16,12(sp)
 10043b8:	282b883a 	mov	r21,r5
 10043bc:	2039883a 	mov	fp,r4
 10043c0:	d8800015 	stw	r2,0(sp)
 10043c4:	2829003a 	cmpeq	r20,r5,zero
 10043c8:	d8800117 	ldw	r2,4(sp)
 10043cc:	14405217 	ldw	r17,328(r2)
 10043d0:	88001026 	beq	r17,zero,1004414 <__call_exitprocs+0xb0>
 10043d4:	ddc00017 	ldw	r23,0(sp)
 10043d8:	88800117 	ldw	r2,4(r17)
 10043dc:	8c802204 	addi	r18,r17,136
 10043e0:	143fffc4 	addi	r16,r2,-1
 10043e4:	80000916 	blt	r16,zero,100440c <__call_exitprocs+0xa8>
 10043e8:	05bfffc4 	movi	r22,-1
 10043ec:	a000151e 	bne	r20,zero,1004444 <__call_exitprocs+0xe0>
 10043f0:	8409883a 	add	r4,r16,r16
 10043f4:	2105883a 	add	r2,r4,r4
 10043f8:	1485883a 	add	r2,r2,r18
 10043fc:	10c02017 	ldw	r3,128(r2)
 1004400:	a8c01126 	beq	r21,r3,1004448 <__call_exitprocs+0xe4>
 1004404:	843fffc4 	addi	r16,r16,-1
 1004408:	85bff81e 	bne	r16,r22,10043ec <__call_exitprocs+0x88>
 100440c:	d8800217 	ldw	r2,8(sp)
 1004410:	10003126 	beq	r2,zero,10044d8 <__call_exitprocs+0x174>
 1004414:	dfc00c17 	ldw	ra,48(sp)
 1004418:	df000b17 	ldw	fp,44(sp)
 100441c:	ddc00a17 	ldw	r23,40(sp)
 1004420:	dd800917 	ldw	r22,36(sp)
 1004424:	dd400817 	ldw	r21,32(sp)
 1004428:	dd000717 	ldw	r20,28(sp)
 100442c:	dcc00617 	ldw	r19,24(sp)
 1004430:	dc800517 	ldw	r18,20(sp)
 1004434:	dc400417 	ldw	r17,16(sp)
 1004438:	dc000317 	ldw	r16,12(sp)
 100443c:	dec00d04 	addi	sp,sp,52
 1004440:	f800283a 	ret
 1004444:	8409883a 	add	r4,r16,r16
 1004448:	88c00117 	ldw	r3,4(r17)
 100444c:	2105883a 	add	r2,r4,r4
 1004450:	1445883a 	add	r2,r2,r17
 1004454:	18ffffc4 	addi	r3,r3,-1
 1004458:	11800217 	ldw	r6,8(r2)
 100445c:	1c001526 	beq	r3,r16,10044b4 <__call_exitprocs+0x150>
 1004460:	10000215 	stw	zero,8(r2)
 1004464:	303fe726 	beq	r6,zero,1004404 <__call_exitprocs+0xa0>
 1004468:	00c00044 	movi	r3,1
 100446c:	1c06983a 	sll	r3,r3,r16
 1004470:	90804017 	ldw	r2,256(r18)
 1004474:	8cc00117 	ldw	r19,4(r17)
 1004478:	1884703a 	and	r2,r3,r2
 100447c:	10001426 	beq	r2,zero,10044d0 <__call_exitprocs+0x16c>
 1004480:	90804117 	ldw	r2,260(r18)
 1004484:	1884703a 	and	r2,r3,r2
 1004488:	10000c1e 	bne	r2,zero,10044bc <__call_exitprocs+0x158>
 100448c:	2105883a 	add	r2,r4,r4
 1004490:	1485883a 	add	r2,r2,r18
 1004494:	11400017 	ldw	r5,0(r2)
 1004498:	e009883a 	mov	r4,fp
 100449c:	303ee83a 	callr	r6
 10044a0:	88800117 	ldw	r2,4(r17)
 10044a4:	98bfc81e 	bne	r19,r2,10043c8 <__call_exitprocs+0x64>
 10044a8:	b8800017 	ldw	r2,0(r23)
 10044ac:	147fd526 	beq	r2,r17,1004404 <__call_exitprocs+0xa0>
 10044b0:	003fc506 	br	10043c8 <__call_exitprocs+0x64>
 10044b4:	8c000115 	stw	r16,4(r17)
 10044b8:	003fea06 	br	1004464 <__call_exitprocs+0x100>
 10044bc:	2105883a 	add	r2,r4,r4
 10044c0:	1485883a 	add	r2,r2,r18
 10044c4:	11000017 	ldw	r4,0(r2)
 10044c8:	303ee83a 	callr	r6
 10044cc:	003ff406 	br	10044a0 <__call_exitprocs+0x13c>
 10044d0:	303ee83a 	callr	r6
 10044d4:	003ff206 	br	10044a0 <__call_exitprocs+0x13c>
 10044d8:	88800117 	ldw	r2,4(r17)
 10044dc:	1000081e 	bne	r2,zero,1004500 <__call_exitprocs+0x19c>
 10044e0:	89000017 	ldw	r4,0(r17)
 10044e4:	20000726 	beq	r4,zero,1004504 <__call_exitprocs+0x1a0>
 10044e8:	b9000015 	stw	r4,0(r23)
 10044ec:	8809883a 	mov	r4,r17
 10044f0:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
 10044f4:	bc400017 	ldw	r17,0(r23)
 10044f8:	883fb71e 	bne	r17,zero,10043d8 <__call_exitprocs+0x74>
 10044fc:	003fc506 	br	1004414 <__call_exitprocs+0xb0>
 1004500:	89000017 	ldw	r4,0(r17)
 1004504:	882f883a 	mov	r23,r17
 1004508:	2023883a 	mov	r17,r4
 100450c:	883fb21e 	bne	r17,zero,10043d8 <__call_exitprocs+0x74>
 1004510:	003fc006 	br	1004414 <__call_exitprocs+0xb0>

01004514 <_close_r>:
 1004514:	defffd04 	addi	sp,sp,-12
 1004518:	dc000015 	stw	r16,0(sp)
 100451c:	04004074 	movhi	r16,257
 1004520:	841dec04 	addi	r16,r16,30640
 1004524:	dc400115 	stw	r17,4(sp)
 1004528:	80000015 	stw	zero,0(r16)
 100452c:	2023883a 	mov	r17,r4
 1004530:	2809883a 	mov	r4,r5
 1004534:	dfc00215 	stw	ra,8(sp)
 1004538:	10059980 	call	1005998 <close>
 100453c:	1007883a 	mov	r3,r2
 1004540:	00bfffc4 	movi	r2,-1
 1004544:	18800626 	beq	r3,r2,1004560 <_close_r+0x4c>
 1004548:	1805883a 	mov	r2,r3
 100454c:	dfc00217 	ldw	ra,8(sp)
 1004550:	dc400117 	ldw	r17,4(sp)
 1004554:	dc000017 	ldw	r16,0(sp)
 1004558:	dec00304 	addi	sp,sp,12
 100455c:	f800283a 	ret
 1004560:	80800017 	ldw	r2,0(r16)
 1004564:	103ff826 	beq	r2,zero,1004548 <_close_r+0x34>
 1004568:	88800015 	stw	r2,0(r17)
 100456c:	1805883a 	mov	r2,r3
 1004570:	dfc00217 	ldw	ra,8(sp)
 1004574:	dc400117 	ldw	r17,4(sp)
 1004578:	dc000017 	ldw	r16,0(sp)
 100457c:	dec00304 	addi	sp,sp,12
 1004580:	f800283a 	ret

01004584 <__sflags>:
 1004584:	28c00007 	ldb	r3,0(r5)
 1004588:	00801c84 	movi	r2,114
 100458c:	18800926 	beq	r3,r2,10045b4 <__sflags+0x30>
 1004590:	00801dc4 	movi	r2,119
 1004594:	18801426 	beq	r3,r2,10045e8 <__sflags+0x64>
 1004598:	00801844 	movi	r2,97
 100459c:	18801626 	beq	r3,r2,10045f8 <__sflags+0x74>
 10045a0:	0007883a 	mov	r3,zero
 10045a4:	00800584 	movi	r2,22
 10045a8:	20800015 	stw	r2,0(r4)
 10045ac:	1805883a 	mov	r2,r3
 10045b0:	f800283a 	ret
 10045b4:	000f883a 	mov	r7,zero
 10045b8:	0011883a 	mov	r8,zero
 10045bc:	00c00104 	movi	r3,4
 10045c0:	28800047 	ldb	r2,1(r5)
 10045c4:	10000426 	beq	r2,zero,10045d8 <__sflags+0x54>
 10045c8:	01000ac4 	movi	r4,43
 10045cc:	11000e26 	beq	r2,r4,1004608 <__sflags+0x84>
 10045d0:	28800087 	ldb	r2,2(r5)
 10045d4:	11000c26 	beq	r2,r4,1004608 <__sflags+0x84>
 10045d8:	3a04b03a 	or	r2,r7,r8
 10045dc:	30800015 	stw	r2,0(r6)
 10045e0:	1805883a 	mov	r2,r3
 10045e4:	f800283a 	ret
 10045e8:	01c00044 	movi	r7,1
 10045ec:	02018004 	movi	r8,1536
 10045f0:	00c00204 	movi	r3,8
 10045f4:	003ff206 	br	10045c0 <__sflags+0x3c>
 10045f8:	01c00044 	movi	r7,1
 10045fc:	02008204 	movi	r8,520
 1004600:	00c04204 	movi	r3,264
 1004604:	003fee06 	br	10045c0 <__sflags+0x3c>
 1004608:	00bffcc4 	movi	r2,-13
 100460c:	1884703a 	and	r2,r3,r2
 1004610:	01c00084 	movi	r7,2
 1004614:	10c00414 	ori	r3,r2,16
 1004618:	3a04b03a 	or	r2,r7,r8
 100461c:	30800015 	stw	r2,0(r6)
 1004620:	003fef06 	br	10045e0 <__sflags+0x5c>

01004624 <fputc>:
 1004624:	defffc04 	addi	sp,sp,-16
 1004628:	dc800215 	stw	r18,8(sp)
 100462c:	04804074 	movhi	r18,257
 1004630:	94970804 	addi	r18,r18,23584
 1004634:	90c00017 	ldw	r3,0(r18)
 1004638:	dc400115 	stw	r17,4(sp)
 100463c:	dc000015 	stw	r16,0(sp)
 1004640:	dfc00315 	stw	ra,12(sp)
 1004644:	2021883a 	mov	r16,r4
 1004648:	2823883a 	mov	r17,r5
 100464c:	18000326 	beq	r3,zero,100465c <fputc+0x38>
 1004650:	18800e17 	ldw	r2,56(r3)
 1004654:	1809883a 	mov	r4,r3
 1004658:	10000926 	beq	r2,zero,1004680 <fputc+0x5c>
 100465c:	91000017 	ldw	r4,0(r18)
 1004660:	800b883a 	mov	r5,r16
 1004664:	880d883a 	mov	r6,r17
 1004668:	dfc00317 	ldw	ra,12(sp)
 100466c:	dc800217 	ldw	r18,8(sp)
 1004670:	dc400117 	ldw	r17,4(sp)
 1004674:	dc000017 	ldw	r16,0(sp)
 1004678:	dec00404 	addi	sp,sp,16
 100467c:	1004fbc1 	jmpi	1004fbc <_putc_r>
 1004680:	1001aa00 	call	1001aa0 <__sinit>
 1004684:	003ff506 	br	100465c <fputc+0x38>

01004688 <_fputc_r>:
 1004688:	defffc04 	addi	sp,sp,-16
 100468c:	dc800215 	stw	r18,8(sp)
 1004690:	dc400115 	stw	r17,4(sp)
 1004694:	dc000015 	stw	r16,0(sp)
 1004698:	dfc00315 	stw	ra,12(sp)
 100469c:	2021883a 	mov	r16,r4
 10046a0:	2823883a 	mov	r17,r5
 10046a4:	3025883a 	mov	r18,r6
 10046a8:	20000226 	beq	r4,zero,10046b4 <_fputc_r+0x2c>
 10046ac:	20800e17 	ldw	r2,56(r4)
 10046b0:	10000926 	beq	r2,zero,10046d8 <_fputc_r+0x50>
 10046b4:	8009883a 	mov	r4,r16
 10046b8:	880b883a 	mov	r5,r17
 10046bc:	900d883a 	mov	r6,r18
 10046c0:	dfc00317 	ldw	ra,12(sp)
 10046c4:	dc800217 	ldw	r18,8(sp)
 10046c8:	dc400117 	ldw	r17,4(sp)
 10046cc:	dc000017 	ldw	r16,0(sp)
 10046d0:	dec00404 	addi	sp,sp,16
 10046d4:	1004fbc1 	jmpi	1004fbc <_putc_r>
 10046d8:	1001aa00 	call	1001aa0 <__sinit>
 10046dc:	003ff506 	br	10046b4 <_fputc_r+0x2c>

010046e0 <_fputs_r>:
 10046e0:	defff804 	addi	sp,sp,-32
 10046e4:	dc000515 	stw	r16,20(sp)
 10046e8:	2021883a 	mov	r16,r4
 10046ec:	2809883a 	mov	r4,r5
 10046f0:	dc400615 	stw	r17,24(sp)
 10046f4:	dfc00715 	stw	ra,28(sp)
 10046f8:	3023883a 	mov	r17,r6
 10046fc:	d9400015 	stw	r5,0(sp)
 1004700:	100426c0 	call	100426c <strlen>
 1004704:	00c00044 	movi	r3,1
 1004708:	d8800115 	stw	r2,4(sp)
 100470c:	d8c00315 	stw	r3,12(sp)
 1004710:	d8800415 	stw	r2,16(sp)
 1004714:	dec00215 	stw	sp,8(sp)
 1004718:	80000326 	beq	r16,zero,1004728 <_fputs_r+0x48>
 100471c:	80800e17 	ldw	r2,56(r16)
 1004720:	8009883a 	mov	r4,r16
 1004724:	10000926 	beq	r2,zero,100474c <_fputs_r+0x6c>
 1004728:	8009883a 	mov	r4,r16
 100472c:	880b883a 	mov	r5,r17
 1004730:	d9800204 	addi	r6,sp,8
 1004734:	10047700 	call	1004770 <__sfvwrite_r>
 1004738:	dfc00717 	ldw	ra,28(sp)
 100473c:	dc400617 	ldw	r17,24(sp)
 1004740:	dc000517 	ldw	r16,20(sp)
 1004744:	dec00804 	addi	sp,sp,32
 1004748:	f800283a 	ret
 100474c:	1001aa00 	call	1001aa0 <__sinit>
 1004750:	003ff506 	br	1004728 <_fputs_r+0x48>

01004754 <fputs>:
 1004754:	01804074 	movhi	r6,257
 1004758:	31970804 	addi	r6,r6,23584
 100475c:	2007883a 	mov	r3,r4
 1004760:	31000017 	ldw	r4,0(r6)
 1004764:	280d883a 	mov	r6,r5
 1004768:	180b883a 	mov	r5,r3
 100476c:	10046e01 	jmpi	10046e0 <_fputs_r>

01004770 <__sfvwrite_r>:
 1004770:	30800217 	ldw	r2,8(r6)
 1004774:	defff504 	addi	sp,sp,-44
 1004778:	df000915 	stw	fp,36(sp)
 100477c:	dd800715 	stw	r22,28(sp)
 1004780:	dc800315 	stw	r18,12(sp)
 1004784:	dfc00a15 	stw	ra,40(sp)
 1004788:	ddc00815 	stw	r23,32(sp)
 100478c:	dd400615 	stw	r21,24(sp)
 1004790:	dd000515 	stw	r20,20(sp)
 1004794:	dcc00415 	stw	r19,16(sp)
 1004798:	dc400215 	stw	r17,8(sp)
 100479c:	dc000115 	stw	r16,4(sp)
 10047a0:	302d883a 	mov	r22,r6
 10047a4:	2039883a 	mov	fp,r4
 10047a8:	2825883a 	mov	r18,r5
 10047ac:	10001c26 	beq	r2,zero,1004820 <__sfvwrite_r+0xb0>
 10047b0:	29c0030b 	ldhu	r7,12(r5)
 10047b4:	3880020c 	andi	r2,r7,8
 10047b8:	10002726 	beq	r2,zero,1004858 <__sfvwrite_r+0xe8>
 10047bc:	28800417 	ldw	r2,16(r5)
 10047c0:	10002526 	beq	r2,zero,1004858 <__sfvwrite_r+0xe8>
 10047c4:	3880008c 	andi	r2,r7,2
 10047c8:	b5400017 	ldw	r21,0(r22)
 10047cc:	10002826 	beq	r2,zero,1004870 <__sfvwrite_r+0x100>
 10047d0:	0021883a 	mov	r16,zero
 10047d4:	0023883a 	mov	r17,zero
 10047d8:	880d883a 	mov	r6,r17
 10047dc:	e009883a 	mov	r4,fp
 10047e0:	00810004 	movi	r2,1024
 10047e4:	80006e26 	beq	r16,zero,10049a0 <__sfvwrite_r+0x230>
 10047e8:	800f883a 	mov	r7,r16
 10047ec:	91400717 	ldw	r5,28(r18)
 10047f0:	1400012e 	bgeu	r2,r16,10047f8 <__sfvwrite_r+0x88>
 10047f4:	100f883a 	mov	r7,r2
 10047f8:	90c00917 	ldw	r3,36(r18)
 10047fc:	183ee83a 	callr	r3
 1004800:	1007883a 	mov	r3,r2
 1004804:	80a1c83a 	sub	r16,r16,r2
 1004808:	88a3883a 	add	r17,r17,r2
 100480c:	00806d0e 	bge	zero,r2,10049c4 <__sfvwrite_r+0x254>
 1004810:	b0800217 	ldw	r2,8(r22)
 1004814:	10c5c83a 	sub	r2,r2,r3
 1004818:	b0800215 	stw	r2,8(r22)
 100481c:	103fee1e 	bne	r2,zero,10047d8 <__sfvwrite_r+0x68>
 1004820:	0009883a 	mov	r4,zero
 1004824:	2005883a 	mov	r2,r4
 1004828:	dfc00a17 	ldw	ra,40(sp)
 100482c:	df000917 	ldw	fp,36(sp)
 1004830:	ddc00817 	ldw	r23,32(sp)
 1004834:	dd800717 	ldw	r22,28(sp)
 1004838:	dd400617 	ldw	r21,24(sp)
 100483c:	dd000517 	ldw	r20,20(sp)
 1004840:	dcc00417 	ldw	r19,16(sp)
 1004844:	dc800317 	ldw	r18,12(sp)
 1004848:	dc400217 	ldw	r17,8(sp)
 100484c:	dc000117 	ldw	r16,4(sp)
 1004850:	dec00b04 	addi	sp,sp,44
 1004854:	f800283a 	ret
 1004858:	100585c0 	call	100585c <__swsetup_r>
 100485c:	1000e41e 	bne	r2,zero,1004bf0 <__sfvwrite_r+0x480>
 1004860:	91c0030b 	ldhu	r7,12(r18)
 1004864:	b5400017 	ldw	r21,0(r22)
 1004868:	3880008c 	andi	r2,r7,2
 100486c:	103fd81e 	bne	r2,zero,10047d0 <__sfvwrite_r+0x60>
 1004870:	3880004c 	andi	r2,r7,1
 1004874:	1005003a 	cmpeq	r2,r2,zero
 1004878:	10005726 	beq	r2,zero,10049d8 <__sfvwrite_r+0x268>
 100487c:	0029883a 	mov	r20,zero
 1004880:	002f883a 	mov	r23,zero
 1004884:	a0004226 	beq	r20,zero,1004990 <__sfvwrite_r+0x220>
 1004888:	3880800c 	andi	r2,r7,512
 100488c:	94000217 	ldw	r16,8(r18)
 1004890:	10008b26 	beq	r2,zero,1004ac0 <__sfvwrite_r+0x350>
 1004894:	800d883a 	mov	r6,r16
 1004898:	a400a536 	bltu	r20,r16,1004b30 <__sfvwrite_r+0x3c0>
 100489c:	3881200c 	andi	r2,r7,1152
 10048a0:	10002726 	beq	r2,zero,1004940 <__sfvwrite_r+0x1d0>
 10048a4:	90800517 	ldw	r2,20(r18)
 10048a8:	92000417 	ldw	r8,16(r18)
 10048ac:	91400017 	ldw	r5,0(r18)
 10048b0:	1087883a 	add	r3,r2,r2
 10048b4:	1887883a 	add	r3,r3,r2
 10048b8:	1808d7fa 	srli	r4,r3,31
 10048bc:	2a21c83a 	sub	r16,r5,r8
 10048c0:	80800044 	addi	r2,r16,1
 10048c4:	20c9883a 	add	r4,r4,r3
 10048c8:	2027d07a 	srai	r19,r4,1
 10048cc:	a085883a 	add	r2,r20,r2
 10048d0:	980d883a 	mov	r6,r19
 10048d4:	9880022e 	bgeu	r19,r2,10048e0 <__sfvwrite_r+0x170>
 10048d8:	1027883a 	mov	r19,r2
 10048dc:	100d883a 	mov	r6,r2
 10048e0:	3881000c 	andi	r2,r7,1024
 10048e4:	1000b826 	beq	r2,zero,1004bc8 <__sfvwrite_r+0x458>
 10048e8:	300b883a 	mov	r5,r6
 10048ec:	e009883a 	mov	r4,fp
 10048f0:	1002dd80 	call	1002dd8 <_malloc_r>
 10048f4:	10003126 	beq	r2,zero,10049bc <__sfvwrite_r+0x24c>
 10048f8:	91400417 	ldw	r5,16(r18)
 10048fc:	1009883a 	mov	r4,r2
 1004900:	800d883a 	mov	r6,r16
 1004904:	1023883a 	mov	r17,r2
 1004908:	10035180 	call	1003518 <memcpy>
 100490c:	90c0030b 	ldhu	r3,12(r18)
 1004910:	00beffc4 	movi	r2,-1025
 1004914:	1886703a 	and	r3,r3,r2
 1004918:	18c02014 	ori	r3,r3,128
 100491c:	90c0030d 	sth	r3,12(r18)
 1004920:	9c07c83a 	sub	r3,r19,r16
 1004924:	8c05883a 	add	r2,r17,r16
 1004928:	a00d883a 	mov	r6,r20
 100492c:	a021883a 	mov	r16,r20
 1004930:	90800015 	stw	r2,0(r18)
 1004934:	90c00215 	stw	r3,8(r18)
 1004938:	94400415 	stw	r17,16(r18)
 100493c:	94c00515 	stw	r19,20(r18)
 1004940:	91000017 	ldw	r4,0(r18)
 1004944:	b80b883a 	mov	r5,r23
 1004948:	a023883a 	mov	r17,r20
 100494c:	1004dd80 	call	1004dd8 <memmove>
 1004950:	90c00217 	ldw	r3,8(r18)
 1004954:	90800017 	ldw	r2,0(r18)
 1004958:	a027883a 	mov	r19,r20
 100495c:	1c07c83a 	sub	r3,r3,r16
 1004960:	1405883a 	add	r2,r2,r16
 1004964:	90c00215 	stw	r3,8(r18)
 1004968:	a021883a 	mov	r16,r20
 100496c:	90800015 	stw	r2,0(r18)
 1004970:	b0800217 	ldw	r2,8(r22)
 1004974:	1405c83a 	sub	r2,r2,r16
 1004978:	b0800215 	stw	r2,8(r22)
 100497c:	103fa826 	beq	r2,zero,1004820 <__sfvwrite_r+0xb0>
 1004980:	a469c83a 	sub	r20,r20,r17
 1004984:	91c0030b 	ldhu	r7,12(r18)
 1004988:	bcef883a 	add	r23,r23,r19
 100498c:	a03fbe1e 	bne	r20,zero,1004888 <__sfvwrite_r+0x118>
 1004990:	adc00017 	ldw	r23,0(r21)
 1004994:	ad000117 	ldw	r20,4(r21)
 1004998:	ad400204 	addi	r21,r21,8
 100499c:	003fb906 	br	1004884 <__sfvwrite_r+0x114>
 10049a0:	ac400017 	ldw	r17,0(r21)
 10049a4:	ac000117 	ldw	r16,4(r21)
 10049a8:	ad400204 	addi	r21,r21,8
 10049ac:	003f8a06 	br	10047d8 <__sfvwrite_r+0x68>
 10049b0:	91400417 	ldw	r5,16(r18)
 10049b4:	e009883a 	mov	r4,fp
 10049b8:	10021b40 	call	10021b4 <_free_r>
 10049bc:	00800304 	movi	r2,12
 10049c0:	e0800015 	stw	r2,0(fp)
 10049c4:	9080030b 	ldhu	r2,12(r18)
 10049c8:	013fffc4 	movi	r4,-1
 10049cc:	10801014 	ori	r2,r2,64
 10049d0:	9080030d 	sth	r2,12(r18)
 10049d4:	003f9306 	br	1004824 <__sfvwrite_r+0xb4>
 10049d8:	0027883a 	mov	r19,zero
 10049dc:	002f883a 	mov	r23,zero
 10049e0:	d8000015 	stw	zero,0(sp)
 10049e4:	0029883a 	mov	r20,zero
 10049e8:	98001e26 	beq	r19,zero,1004a64 <__sfvwrite_r+0x2f4>
 10049ec:	d8c00017 	ldw	r3,0(sp)
 10049f0:	1804c03a 	cmpne	r2,r3,zero
 10049f4:	10005e26 	beq	r2,zero,1004b70 <__sfvwrite_r+0x400>
 10049f8:	9821883a 	mov	r16,r19
 10049fc:	a4c0012e 	bgeu	r20,r19,1004a04 <__sfvwrite_r+0x294>
 1004a00:	a021883a 	mov	r16,r20
 1004a04:	91000017 	ldw	r4,0(r18)
 1004a08:	90800417 	ldw	r2,16(r18)
 1004a0c:	91800217 	ldw	r6,8(r18)
 1004a10:	91c00517 	ldw	r7,20(r18)
 1004a14:	1100022e 	bgeu	r2,r4,1004a20 <__sfvwrite_r+0x2b0>
 1004a18:	31e3883a 	add	r17,r6,r7
 1004a1c:	8c001616 	blt	r17,r16,1004a78 <__sfvwrite_r+0x308>
 1004a20:	81c03816 	blt	r16,r7,1004b04 <__sfvwrite_r+0x394>
 1004a24:	90c00917 	ldw	r3,36(r18)
 1004a28:	91400717 	ldw	r5,28(r18)
 1004a2c:	e009883a 	mov	r4,fp
 1004a30:	b80d883a 	mov	r6,r23
 1004a34:	183ee83a 	callr	r3
 1004a38:	1023883a 	mov	r17,r2
 1004a3c:	00bfe10e 	bge	zero,r2,10049c4 <__sfvwrite_r+0x254>
 1004a40:	a469c83a 	sub	r20,r20,r17
 1004a44:	a0001826 	beq	r20,zero,1004aa8 <__sfvwrite_r+0x338>
 1004a48:	b0800217 	ldw	r2,8(r22)
 1004a4c:	1445c83a 	sub	r2,r2,r17
 1004a50:	b0800215 	stw	r2,8(r22)
 1004a54:	103f7226 	beq	r2,zero,1004820 <__sfvwrite_r+0xb0>
 1004a58:	9c67c83a 	sub	r19,r19,r17
 1004a5c:	bc6f883a 	add	r23,r23,r17
 1004a60:	983fe21e 	bne	r19,zero,10049ec <__sfvwrite_r+0x27c>
 1004a64:	adc00017 	ldw	r23,0(r21)
 1004a68:	acc00117 	ldw	r19,4(r21)
 1004a6c:	ad400204 	addi	r21,r21,8
 1004a70:	d8000015 	stw	zero,0(sp)
 1004a74:	003fdc06 	br	10049e8 <__sfvwrite_r+0x278>
 1004a78:	b80b883a 	mov	r5,r23
 1004a7c:	880d883a 	mov	r6,r17
 1004a80:	1004dd80 	call	1004dd8 <memmove>
 1004a84:	90c00017 	ldw	r3,0(r18)
 1004a88:	e009883a 	mov	r4,fp
 1004a8c:	900b883a 	mov	r5,r18
 1004a90:	1c47883a 	add	r3,r3,r17
 1004a94:	90c00015 	stw	r3,0(r18)
 1004a98:	10016e00 	call	10016e0 <_fflush_r>
 1004a9c:	103fc91e 	bne	r2,zero,10049c4 <__sfvwrite_r+0x254>
 1004aa0:	a469c83a 	sub	r20,r20,r17
 1004aa4:	a03fe81e 	bne	r20,zero,1004a48 <__sfvwrite_r+0x2d8>
 1004aa8:	e009883a 	mov	r4,fp
 1004aac:	900b883a 	mov	r5,r18
 1004ab0:	10016e00 	call	10016e0 <_fflush_r>
 1004ab4:	103fc31e 	bne	r2,zero,10049c4 <__sfvwrite_r+0x254>
 1004ab8:	d8000015 	stw	zero,0(sp)
 1004abc:	003fe206 	br	1004a48 <__sfvwrite_r+0x2d8>
 1004ac0:	91000017 	ldw	r4,0(r18)
 1004ac4:	90800417 	ldw	r2,16(r18)
 1004ac8:	1100022e 	bgeu	r2,r4,1004ad4 <__sfvwrite_r+0x364>
 1004acc:	8023883a 	mov	r17,r16
 1004ad0:	85003136 	bltu	r16,r20,1004b98 <__sfvwrite_r+0x428>
 1004ad4:	91c00517 	ldw	r7,20(r18)
 1004ad8:	a1c01836 	bltu	r20,r7,1004b3c <__sfvwrite_r+0x3cc>
 1004adc:	90c00917 	ldw	r3,36(r18)
 1004ae0:	91400717 	ldw	r5,28(r18)
 1004ae4:	e009883a 	mov	r4,fp
 1004ae8:	b80d883a 	mov	r6,r23
 1004aec:	183ee83a 	callr	r3
 1004af0:	1021883a 	mov	r16,r2
 1004af4:	00bfb30e 	bge	zero,r2,10049c4 <__sfvwrite_r+0x254>
 1004af8:	1023883a 	mov	r17,r2
 1004afc:	1027883a 	mov	r19,r2
 1004b00:	003f9b06 	br	1004970 <__sfvwrite_r+0x200>
 1004b04:	b80b883a 	mov	r5,r23
 1004b08:	800d883a 	mov	r6,r16
 1004b0c:	1004dd80 	call	1004dd8 <memmove>
 1004b10:	90c00217 	ldw	r3,8(r18)
 1004b14:	90800017 	ldw	r2,0(r18)
 1004b18:	8023883a 	mov	r17,r16
 1004b1c:	1c07c83a 	sub	r3,r3,r16
 1004b20:	1405883a 	add	r2,r2,r16
 1004b24:	90c00215 	stw	r3,8(r18)
 1004b28:	90800015 	stw	r2,0(r18)
 1004b2c:	003fc406 	br	1004a40 <__sfvwrite_r+0x2d0>
 1004b30:	a00d883a 	mov	r6,r20
 1004b34:	a021883a 	mov	r16,r20
 1004b38:	003f8106 	br	1004940 <__sfvwrite_r+0x1d0>
 1004b3c:	b80b883a 	mov	r5,r23
 1004b40:	a00d883a 	mov	r6,r20
 1004b44:	1004dd80 	call	1004dd8 <memmove>
 1004b48:	90c00217 	ldw	r3,8(r18)
 1004b4c:	90800017 	ldw	r2,0(r18)
 1004b50:	a021883a 	mov	r16,r20
 1004b54:	1d07c83a 	sub	r3,r3,r20
 1004b58:	1505883a 	add	r2,r2,r20
 1004b5c:	a023883a 	mov	r17,r20
 1004b60:	a027883a 	mov	r19,r20
 1004b64:	90c00215 	stw	r3,8(r18)
 1004b68:	90800015 	stw	r2,0(r18)
 1004b6c:	003f8006 	br	1004970 <__sfvwrite_r+0x200>
 1004b70:	b809883a 	mov	r4,r23
 1004b74:	01400284 	movi	r5,10
 1004b78:	980d883a 	mov	r6,r19
 1004b7c:	1004cf40 	call	1004cf4 <memchr>
 1004b80:	10001726 	beq	r2,zero,1004be0 <__sfvwrite_r+0x470>
 1004b84:	15c5c83a 	sub	r2,r2,r23
 1004b88:	15000044 	addi	r20,r2,1
 1004b8c:	00800044 	movi	r2,1
 1004b90:	d8800015 	stw	r2,0(sp)
 1004b94:	003f9806 	br	10049f8 <__sfvwrite_r+0x288>
 1004b98:	b80b883a 	mov	r5,r23
 1004b9c:	800d883a 	mov	r6,r16
 1004ba0:	1004dd80 	call	1004dd8 <memmove>
 1004ba4:	90c00017 	ldw	r3,0(r18)
 1004ba8:	e009883a 	mov	r4,fp
 1004bac:	900b883a 	mov	r5,r18
 1004bb0:	1c07883a 	add	r3,r3,r16
 1004bb4:	90c00015 	stw	r3,0(r18)
 1004bb8:	8027883a 	mov	r19,r16
 1004bbc:	10016e00 	call	10016e0 <_fflush_r>
 1004bc0:	103f6b26 	beq	r2,zero,1004970 <__sfvwrite_r+0x200>
 1004bc4:	003f7f06 	br	10049c4 <__sfvwrite_r+0x254>
 1004bc8:	400b883a 	mov	r5,r8
 1004bcc:	e009883a 	mov	r4,fp
 1004bd0:	100511c0 	call	100511c <_realloc_r>
 1004bd4:	103f7626 	beq	r2,zero,10049b0 <__sfvwrite_r+0x240>
 1004bd8:	1023883a 	mov	r17,r2
 1004bdc:	003f5006 	br	1004920 <__sfvwrite_r+0x1b0>
 1004be0:	00c00044 	movi	r3,1
 1004be4:	9d000044 	addi	r20,r19,1
 1004be8:	d8c00015 	stw	r3,0(sp)
 1004bec:	003f8206 	br	10049f8 <__sfvwrite_r+0x288>
 1004bf0:	9080030b 	ldhu	r2,12(r18)
 1004bf4:	00c00244 	movi	r3,9
 1004bf8:	013fffc4 	movi	r4,-1
 1004bfc:	10801014 	ori	r2,r2,64
 1004c00:	9080030d 	sth	r2,12(r18)
 1004c04:	e0c00015 	stw	r3,0(fp)
 1004c08:	003f0606 	br	1004824 <__sfvwrite_r+0xb4>

01004c0c <_isatty_r>:
 1004c0c:	defffd04 	addi	sp,sp,-12
 1004c10:	dc000015 	stw	r16,0(sp)
 1004c14:	04004074 	movhi	r16,257
 1004c18:	841dec04 	addi	r16,r16,30640
 1004c1c:	dc400115 	stw	r17,4(sp)
 1004c20:	80000015 	stw	zero,0(r16)
 1004c24:	2023883a 	mov	r17,r4
 1004c28:	2809883a 	mov	r4,r5
 1004c2c:	dfc00215 	stw	ra,8(sp)
 1004c30:	1005cbc0 	call	1005cbc <isatty>
 1004c34:	1007883a 	mov	r3,r2
 1004c38:	00bfffc4 	movi	r2,-1
 1004c3c:	18800626 	beq	r3,r2,1004c58 <_isatty_r+0x4c>
 1004c40:	1805883a 	mov	r2,r3
 1004c44:	dfc00217 	ldw	ra,8(sp)
 1004c48:	dc400117 	ldw	r17,4(sp)
 1004c4c:	dc000017 	ldw	r16,0(sp)
 1004c50:	dec00304 	addi	sp,sp,12
 1004c54:	f800283a 	ret
 1004c58:	80800017 	ldw	r2,0(r16)
 1004c5c:	103ff826 	beq	r2,zero,1004c40 <_isatty_r+0x34>
 1004c60:	88800015 	stw	r2,0(r17)
 1004c64:	1805883a 	mov	r2,r3
 1004c68:	dfc00217 	ldw	ra,8(sp)
 1004c6c:	dc400117 	ldw	r17,4(sp)
 1004c70:	dc000017 	ldw	r16,0(sp)
 1004c74:	dec00304 	addi	sp,sp,12
 1004c78:	f800283a 	ret

01004c7c <_lseek_r>:
 1004c7c:	defffd04 	addi	sp,sp,-12
 1004c80:	dc000015 	stw	r16,0(sp)
 1004c84:	04004074 	movhi	r16,257
 1004c88:	841dec04 	addi	r16,r16,30640
 1004c8c:	dc400115 	stw	r17,4(sp)
 1004c90:	80000015 	stw	zero,0(r16)
 1004c94:	2023883a 	mov	r17,r4
 1004c98:	2809883a 	mov	r4,r5
 1004c9c:	300b883a 	mov	r5,r6
 1004ca0:	380d883a 	mov	r6,r7
 1004ca4:	dfc00215 	stw	ra,8(sp)
 1004ca8:	1005ecc0 	call	1005ecc <lseek>
 1004cac:	1007883a 	mov	r3,r2
 1004cb0:	00bfffc4 	movi	r2,-1
 1004cb4:	18800626 	beq	r3,r2,1004cd0 <_lseek_r+0x54>
 1004cb8:	1805883a 	mov	r2,r3
 1004cbc:	dfc00217 	ldw	ra,8(sp)
 1004cc0:	dc400117 	ldw	r17,4(sp)
 1004cc4:	dc000017 	ldw	r16,0(sp)
 1004cc8:	dec00304 	addi	sp,sp,12
 1004ccc:	f800283a 	ret
 1004cd0:	80800017 	ldw	r2,0(r16)
 1004cd4:	103ff826 	beq	r2,zero,1004cb8 <_lseek_r+0x3c>
 1004cd8:	88800015 	stw	r2,0(r17)
 1004cdc:	1805883a 	mov	r2,r3
 1004ce0:	dfc00217 	ldw	ra,8(sp)
 1004ce4:	dc400117 	ldw	r17,4(sp)
 1004ce8:	dc000017 	ldw	r16,0(sp)
 1004cec:	dec00304 	addi	sp,sp,12
 1004cf0:	f800283a 	ret

01004cf4 <memchr>:
 1004cf4:	008000c4 	movi	r2,3
 1004cf8:	29403fcc 	andi	r5,r5,255
 1004cfc:	2007883a 	mov	r3,r4
 1004d00:	1180022e 	bgeu	r2,r6,1004d0c <memchr+0x18>
 1004d04:	2084703a 	and	r2,r4,r2
 1004d08:	10000b26 	beq	r2,zero,1004d38 <memchr+0x44>
 1004d0c:	313fffc4 	addi	r4,r6,-1
 1004d10:	3000051e 	bne	r6,zero,1004d28 <memchr+0x34>
 1004d14:	00002c06 	br	1004dc8 <memchr+0xd4>
 1004d18:	213fffc4 	addi	r4,r4,-1
 1004d1c:	00bfffc4 	movi	r2,-1
 1004d20:	18c00044 	addi	r3,r3,1
 1004d24:	20802826 	beq	r4,r2,1004dc8 <memchr+0xd4>
 1004d28:	18800003 	ldbu	r2,0(r3)
 1004d2c:	28bffa1e 	bne	r5,r2,1004d18 <memchr+0x24>
 1004d30:	1805883a 	mov	r2,r3
 1004d34:	f800283a 	ret
 1004d38:	0011883a 	mov	r8,zero
 1004d3c:	0007883a 	mov	r3,zero
 1004d40:	01c00104 	movi	r7,4
 1004d44:	4004923a 	slli	r2,r8,8
 1004d48:	18c00044 	addi	r3,r3,1
 1004d4c:	1151883a 	add	r8,r2,r5
 1004d50:	19fffc1e 	bne	r3,r7,1004d44 <memchr+0x50>
 1004d54:	02bfbff4 	movhi	r10,65279
 1004d58:	52bfbfc4 	addi	r10,r10,-257
 1004d5c:	02602074 	movhi	r9,32897
 1004d60:	4a602004 	addi	r9,r9,-32640
 1004d64:	02c000c4 	movi	r11,3
 1004d68:	20800017 	ldw	r2,0(r4)
 1004d6c:	31bfff04 	addi	r6,r6,-4
 1004d70:	200f883a 	mov	r7,r4
 1004d74:	1204f03a 	xor	r2,r2,r8
 1004d78:	1287883a 	add	r3,r2,r10
 1004d7c:	1a46703a 	and	r3,r3,r9
 1004d80:	0084303a 	nor	r2,zero,r2
 1004d84:	10c4703a 	and	r2,r2,r3
 1004d88:	10000b26 	beq	r2,zero,1004db8 <memchr+0xc4>
 1004d8c:	20800003 	ldbu	r2,0(r4)
 1004d90:	28800f26 	beq	r5,r2,1004dd0 <memchr+0xdc>
 1004d94:	20800043 	ldbu	r2,1(r4)
 1004d98:	21c00044 	addi	r7,r4,1
 1004d9c:	28800c26 	beq	r5,r2,1004dd0 <memchr+0xdc>
 1004da0:	20800083 	ldbu	r2,2(r4)
 1004da4:	21c00084 	addi	r7,r4,2
 1004da8:	28800926 	beq	r5,r2,1004dd0 <memchr+0xdc>
 1004dac:	208000c3 	ldbu	r2,3(r4)
 1004db0:	21c000c4 	addi	r7,r4,3
 1004db4:	28800626 	beq	r5,r2,1004dd0 <memchr+0xdc>
 1004db8:	21000104 	addi	r4,r4,4
 1004dbc:	59bfea36 	bltu	r11,r6,1004d68 <memchr+0x74>
 1004dc0:	2007883a 	mov	r3,r4
 1004dc4:	003fd106 	br	1004d0c <memchr+0x18>
 1004dc8:	0005883a 	mov	r2,zero
 1004dcc:	f800283a 	ret
 1004dd0:	3805883a 	mov	r2,r7
 1004dd4:	f800283a 	ret

01004dd8 <memmove>:
 1004dd8:	2807883a 	mov	r3,r5
 1004ddc:	2011883a 	mov	r8,r4
 1004de0:	29000c2e 	bgeu	r5,r4,1004e14 <memmove+0x3c>
 1004de4:	298f883a 	add	r7,r5,r6
 1004de8:	21c00a2e 	bgeu	r4,r7,1004e14 <memmove+0x3c>
 1004dec:	30000726 	beq	r6,zero,1004e0c <memmove+0x34>
 1004df0:	2187883a 	add	r3,r4,r6
 1004df4:	198dc83a 	sub	r6,r3,r6
 1004df8:	39ffffc4 	addi	r7,r7,-1
 1004dfc:	38800003 	ldbu	r2,0(r7)
 1004e00:	18ffffc4 	addi	r3,r3,-1
 1004e04:	18800005 	stb	r2,0(r3)
 1004e08:	19bffb1e 	bne	r3,r6,1004df8 <memmove+0x20>
 1004e0c:	2005883a 	mov	r2,r4
 1004e10:	f800283a 	ret
 1004e14:	01c003c4 	movi	r7,15
 1004e18:	39800a36 	bltu	r7,r6,1004e44 <memmove+0x6c>
 1004e1c:	303ffb26 	beq	r6,zero,1004e0c <memmove+0x34>
 1004e20:	400f883a 	mov	r7,r8
 1004e24:	320d883a 	add	r6,r6,r8
 1004e28:	28800003 	ldbu	r2,0(r5)
 1004e2c:	29400044 	addi	r5,r5,1
 1004e30:	38800005 	stb	r2,0(r7)
 1004e34:	39c00044 	addi	r7,r7,1
 1004e38:	39bffb1e 	bne	r7,r6,1004e28 <memmove+0x50>
 1004e3c:	2005883a 	mov	r2,r4
 1004e40:	f800283a 	ret
 1004e44:	1904b03a 	or	r2,r3,r4
 1004e48:	108000cc 	andi	r2,r2,3
 1004e4c:	103ff31e 	bne	r2,zero,1004e1c <memmove+0x44>
 1004e50:	3811883a 	mov	r8,r7
 1004e54:	180b883a 	mov	r5,r3
 1004e58:	200f883a 	mov	r7,r4
 1004e5c:	28c00017 	ldw	r3,0(r5)
 1004e60:	31bffc04 	addi	r6,r6,-16
 1004e64:	38c00015 	stw	r3,0(r7)
 1004e68:	28800117 	ldw	r2,4(r5)
 1004e6c:	38800115 	stw	r2,4(r7)
 1004e70:	28c00217 	ldw	r3,8(r5)
 1004e74:	38c00215 	stw	r3,8(r7)
 1004e78:	28800317 	ldw	r2,12(r5)
 1004e7c:	29400404 	addi	r5,r5,16
 1004e80:	38800315 	stw	r2,12(r7)
 1004e84:	39c00404 	addi	r7,r7,16
 1004e88:	41bff436 	bltu	r8,r6,1004e5c <memmove+0x84>
 1004e8c:	008000c4 	movi	r2,3
 1004e90:	1180072e 	bgeu	r2,r6,1004eb0 <memmove+0xd8>
 1004e94:	1007883a 	mov	r3,r2
 1004e98:	28800017 	ldw	r2,0(r5)
 1004e9c:	31bfff04 	addi	r6,r6,-4
 1004ea0:	29400104 	addi	r5,r5,4
 1004ea4:	38800015 	stw	r2,0(r7)
 1004ea8:	39c00104 	addi	r7,r7,4
 1004eac:	19bffa36 	bltu	r3,r6,1004e98 <memmove+0xc0>
 1004eb0:	3811883a 	mov	r8,r7
 1004eb4:	003fd906 	br	1004e1c <memmove+0x44>

01004eb8 <putc>:
 1004eb8:	defffc04 	addi	sp,sp,-16
 1004ebc:	dc800215 	stw	r18,8(sp)
 1004ec0:	04804074 	movhi	r18,257
 1004ec4:	94970804 	addi	r18,r18,23584
 1004ec8:	90c00017 	ldw	r3,0(r18)
 1004ecc:	dc400115 	stw	r17,4(sp)
 1004ed0:	dc000015 	stw	r16,0(sp)
 1004ed4:	dfc00315 	stw	ra,12(sp)
 1004ed8:	2023883a 	mov	r17,r4
 1004edc:	2821883a 	mov	r16,r5
 1004ee0:	18000226 	beq	r3,zero,1004eec <putc+0x34>
 1004ee4:	18800e17 	ldw	r2,56(r3)
 1004ee8:	10001126 	beq	r2,zero,1004f30 <putc+0x78>
 1004eec:	80800217 	ldw	r2,8(r16)
 1004ef0:	10ffffc4 	addi	r3,r2,-1
 1004ef4:	80c00215 	stw	r3,8(r16)
 1004ef8:	18001316 	blt	r3,zero,1004f48 <putc+0x90>
 1004efc:	80800017 	ldw	r2,0(r16)
 1004f00:	14400005 	stb	r17,0(r2)
 1004f04:	80c00017 	ldw	r3,0(r16)
 1004f08:	18800044 	addi	r2,r3,1
 1004f0c:	18c00003 	ldbu	r3,0(r3)
 1004f10:	80800015 	stw	r2,0(r16)
 1004f14:	1805883a 	mov	r2,r3
 1004f18:	dfc00317 	ldw	ra,12(sp)
 1004f1c:	dc800217 	ldw	r18,8(sp)
 1004f20:	dc400117 	ldw	r17,4(sp)
 1004f24:	dc000017 	ldw	r16,0(sp)
 1004f28:	dec00404 	addi	sp,sp,16
 1004f2c:	f800283a 	ret
 1004f30:	1809883a 	mov	r4,r3
 1004f34:	1001aa00 	call	1001aa0 <__sinit>
 1004f38:	80800217 	ldw	r2,8(r16)
 1004f3c:	10ffffc4 	addi	r3,r2,-1
 1004f40:	80c00215 	stw	r3,8(r16)
 1004f44:	183fed0e 	bge	r3,zero,1004efc <putc+0x44>
 1004f48:	80800617 	ldw	r2,24(r16)
 1004f4c:	18800f16 	blt	r3,r2,1004f8c <putc+0xd4>
 1004f50:	80800017 	ldw	r2,0(r16)
 1004f54:	14400005 	stb	r17,0(r2)
 1004f58:	81000017 	ldw	r4,0(r16)
 1004f5c:	00800284 	movi	r2,10
 1004f60:	20c00003 	ldbu	r3,0(r4)
 1004f64:	18801226 	beq	r3,r2,1004fb0 <putc+0xf8>
 1004f68:	20800044 	addi	r2,r4,1
 1004f6c:	80800015 	stw	r2,0(r16)
 1004f70:	1805883a 	mov	r2,r3
 1004f74:	dfc00317 	ldw	ra,12(sp)
 1004f78:	dc800217 	ldw	r18,8(sp)
 1004f7c:	dc400117 	ldw	r17,4(sp)
 1004f80:	dc000017 	ldw	r16,0(sp)
 1004f84:	dec00404 	addi	sp,sp,16
 1004f88:	f800283a 	ret
 1004f8c:	91000017 	ldw	r4,0(r18)
 1004f90:	880b883a 	mov	r5,r17
 1004f94:	800d883a 	mov	r6,r16
 1004f98:	dfc00317 	ldw	ra,12(sp)
 1004f9c:	dc800217 	ldw	r18,8(sp)
 1004fa0:	dc400117 	ldw	r17,4(sp)
 1004fa4:	dc000017 	ldw	r16,0(sp)
 1004fa8:	dec00404 	addi	sp,sp,16
 1004fac:	10057101 	jmpi	1005710 <__swbuf_r>
 1004fb0:	91000017 	ldw	r4,0(r18)
 1004fb4:	180b883a 	mov	r5,r3
 1004fb8:	003ff606 	br	1004f94 <putc+0xdc>

01004fbc <_putc_r>:
 1004fbc:	defffc04 	addi	sp,sp,-16
 1004fc0:	dc400215 	stw	r17,8(sp)
 1004fc4:	dc000115 	stw	r16,4(sp)
 1004fc8:	dfc00315 	stw	ra,12(sp)
 1004fcc:	2021883a 	mov	r16,r4
 1004fd0:	2823883a 	mov	r17,r5
 1004fd4:	20000226 	beq	r4,zero,1004fe0 <_putc_r+0x24>
 1004fd8:	20800e17 	ldw	r2,56(r4)
 1004fdc:	10001026 	beq	r2,zero,1005020 <_putc_r+0x64>
 1004fe0:	30800217 	ldw	r2,8(r6)
 1004fe4:	10ffffc4 	addi	r3,r2,-1
 1004fe8:	30c00215 	stw	r3,8(r6)
 1004fec:	18001316 	blt	r3,zero,100503c <_putc_r+0x80>
 1004ff0:	30800017 	ldw	r2,0(r6)
 1004ff4:	14400005 	stb	r17,0(r2)
 1004ff8:	30c00017 	ldw	r3,0(r6)
 1004ffc:	18800044 	addi	r2,r3,1
 1005000:	18c00003 	ldbu	r3,0(r3)
 1005004:	30800015 	stw	r2,0(r6)
 1005008:	1805883a 	mov	r2,r3
 100500c:	dfc00317 	ldw	ra,12(sp)
 1005010:	dc400217 	ldw	r17,8(sp)
 1005014:	dc000117 	ldw	r16,4(sp)
 1005018:	dec00404 	addi	sp,sp,16
 100501c:	f800283a 	ret
 1005020:	d9800015 	stw	r6,0(sp)
 1005024:	1001aa00 	call	1001aa0 <__sinit>
 1005028:	d9800017 	ldw	r6,0(sp)
 100502c:	30800217 	ldw	r2,8(r6)
 1005030:	10ffffc4 	addi	r3,r2,-1
 1005034:	30c00215 	stw	r3,8(r6)
 1005038:	183fed0e 	bge	r3,zero,1004ff0 <_putc_r+0x34>
 100503c:	30800617 	ldw	r2,24(r6)
 1005040:	18800e16 	blt	r3,r2,100507c <_putc_r+0xc0>
 1005044:	30800017 	ldw	r2,0(r6)
 1005048:	14400005 	stb	r17,0(r2)
 100504c:	31000017 	ldw	r4,0(r6)
 1005050:	00800284 	movi	r2,10
 1005054:	20c00003 	ldbu	r3,0(r4)
 1005058:	18800f26 	beq	r3,r2,1005098 <_putc_r+0xdc>
 100505c:	20800044 	addi	r2,r4,1
 1005060:	30800015 	stw	r2,0(r6)
 1005064:	1805883a 	mov	r2,r3
 1005068:	dfc00317 	ldw	ra,12(sp)
 100506c:	dc400217 	ldw	r17,8(sp)
 1005070:	dc000117 	ldw	r16,4(sp)
 1005074:	dec00404 	addi	sp,sp,16
 1005078:	f800283a 	ret
 100507c:	8009883a 	mov	r4,r16
 1005080:	880b883a 	mov	r5,r17
 1005084:	dfc00317 	ldw	ra,12(sp)
 1005088:	dc400217 	ldw	r17,8(sp)
 100508c:	dc000117 	ldw	r16,4(sp)
 1005090:	dec00404 	addi	sp,sp,16
 1005094:	10057101 	jmpi	1005710 <__swbuf_r>
 1005098:	8009883a 	mov	r4,r16
 100509c:	180b883a 	mov	r5,r3
 10050a0:	003ff806 	br	1005084 <_putc_r+0xc8>

010050a4 <_read_r>:
 10050a4:	defffd04 	addi	sp,sp,-12
 10050a8:	dc000015 	stw	r16,0(sp)
 10050ac:	04004074 	movhi	r16,257
 10050b0:	841dec04 	addi	r16,r16,30640
 10050b4:	dc400115 	stw	r17,4(sp)
 10050b8:	80000015 	stw	zero,0(r16)
 10050bc:	2023883a 	mov	r17,r4
 10050c0:	2809883a 	mov	r4,r5
 10050c4:	300b883a 	mov	r5,r6
 10050c8:	380d883a 	mov	r6,r7
 10050cc:	dfc00215 	stw	ra,8(sp)
 10050d0:	10063b00 	call	10063b0 <read>
 10050d4:	1007883a 	mov	r3,r2
 10050d8:	00bfffc4 	movi	r2,-1
 10050dc:	18800626 	beq	r3,r2,10050f8 <_read_r+0x54>
 10050e0:	1805883a 	mov	r2,r3
 10050e4:	dfc00217 	ldw	ra,8(sp)
 10050e8:	dc400117 	ldw	r17,4(sp)
 10050ec:	dc000017 	ldw	r16,0(sp)
 10050f0:	dec00304 	addi	sp,sp,12
 10050f4:	f800283a 	ret
 10050f8:	80800017 	ldw	r2,0(r16)
 10050fc:	103ff826 	beq	r2,zero,10050e0 <_read_r+0x3c>
 1005100:	88800015 	stw	r2,0(r17)
 1005104:	1805883a 	mov	r2,r3
 1005108:	dfc00217 	ldw	ra,8(sp)
 100510c:	dc400117 	ldw	r17,4(sp)
 1005110:	dc000017 	ldw	r16,0(sp)
 1005114:	dec00304 	addi	sp,sp,12
 1005118:	f800283a 	ret

0100511c <_realloc_r>:
 100511c:	defff404 	addi	sp,sp,-48
 1005120:	dd800815 	stw	r22,32(sp)
 1005124:	dc800415 	stw	r18,16(sp)
 1005128:	dc400315 	stw	r17,12(sp)
 100512c:	dfc00b15 	stw	ra,44(sp)
 1005130:	df000a15 	stw	fp,40(sp)
 1005134:	ddc00915 	stw	r23,36(sp)
 1005138:	dd400715 	stw	r21,28(sp)
 100513c:	dd000615 	stw	r20,24(sp)
 1005140:	dcc00515 	stw	r19,20(sp)
 1005144:	dc000215 	stw	r16,8(sp)
 1005148:	2825883a 	mov	r18,r5
 100514c:	3023883a 	mov	r17,r6
 1005150:	202d883a 	mov	r22,r4
 1005154:	2800c926 	beq	r5,zero,100547c <_realloc_r+0x360>
 1005158:	100608c0 	call	100608c <__malloc_lock>
 100515c:	943ffe04 	addi	r16,r18,-8
 1005160:	88c002c4 	addi	r3,r17,11
 1005164:	00800584 	movi	r2,22
 1005168:	82000117 	ldw	r8,4(r16)
 100516c:	10c01b2e 	bgeu	r2,r3,10051dc <_realloc_r+0xc0>
 1005170:	00bffe04 	movi	r2,-8
 1005174:	188e703a 	and	r7,r3,r2
 1005178:	3839883a 	mov	fp,r7
 100517c:	38001a16 	blt	r7,zero,10051e8 <_realloc_r+0xcc>
 1005180:	e4401936 	bltu	fp,r17,10051e8 <_realloc_r+0xcc>
 1005184:	013fff04 	movi	r4,-4
 1005188:	4126703a 	and	r19,r8,r4
 100518c:	99c02616 	blt	r19,r7,1005228 <_realloc_r+0x10c>
 1005190:	802b883a 	mov	r21,r16
 1005194:	9829883a 	mov	r20,r19
 1005198:	84000204 	addi	r16,r16,8
 100519c:	a80f883a 	mov	r7,r21
 10051a0:	a70dc83a 	sub	r6,r20,fp
 10051a4:	008003c4 	movi	r2,15
 10051a8:	1180c136 	bltu	r2,r6,10054b0 <_realloc_r+0x394>
 10051ac:	38800117 	ldw	r2,4(r7)
 10051b0:	a549883a 	add	r4,r20,r21
 10051b4:	1080004c 	andi	r2,r2,1
 10051b8:	a084b03a 	or	r2,r20,r2
 10051bc:	38800115 	stw	r2,4(r7)
 10051c0:	20c00117 	ldw	r3,4(r4)
 10051c4:	18c00054 	ori	r3,r3,1
 10051c8:	20c00115 	stw	r3,4(r4)
 10051cc:	b009883a 	mov	r4,r22
 10051d0:	10060ac0 	call	10060ac <__malloc_unlock>
 10051d4:	8023883a 	mov	r17,r16
 10051d8:	00000606 	br	10051f4 <_realloc_r+0xd8>
 10051dc:	01c00404 	movi	r7,16
 10051e0:	3839883a 	mov	fp,r7
 10051e4:	e47fe72e 	bgeu	fp,r17,1005184 <_realloc_r+0x68>
 10051e8:	00800304 	movi	r2,12
 10051ec:	0023883a 	mov	r17,zero
 10051f0:	b0800015 	stw	r2,0(r22)
 10051f4:	8805883a 	mov	r2,r17
 10051f8:	dfc00b17 	ldw	ra,44(sp)
 10051fc:	df000a17 	ldw	fp,40(sp)
 1005200:	ddc00917 	ldw	r23,36(sp)
 1005204:	dd800817 	ldw	r22,32(sp)
 1005208:	dd400717 	ldw	r21,28(sp)
 100520c:	dd000617 	ldw	r20,24(sp)
 1005210:	dcc00517 	ldw	r19,20(sp)
 1005214:	dc800417 	ldw	r18,16(sp)
 1005218:	dc400317 	ldw	r17,12(sp)
 100521c:	dc000217 	ldw	r16,8(sp)
 1005220:	dec00c04 	addi	sp,sp,48
 1005224:	f800283a 	ret
 1005228:	00804074 	movhi	r2,257
 100522c:	10916404 	addi	r2,r2,17808
 1005230:	12400217 	ldw	r9,8(r2)
 1005234:	84cd883a 	add	r6,r16,r19
 1005238:	802b883a 	mov	r21,r16
 100523c:	3240b926 	beq	r6,r9,1005524 <_realloc_r+0x408>
 1005240:	31400117 	ldw	r5,4(r6)
 1005244:	00bfff84 	movi	r2,-2
 1005248:	2884703a 	and	r2,r5,r2
 100524c:	1185883a 	add	r2,r2,r6
 1005250:	10c00117 	ldw	r3,4(r2)
 1005254:	18c0004c 	andi	r3,r3,1
 1005258:	1807003a 	cmpeq	r3,r3,zero
 100525c:	1800a326 	beq	r3,zero,10054ec <_realloc_r+0x3d0>
 1005260:	2908703a 	and	r4,r5,r4
 1005264:	9929883a 	add	r20,r19,r4
 1005268:	a1c0a30e 	bge	r20,r7,10054f8 <_realloc_r+0x3dc>
 100526c:	4080004c 	andi	r2,r8,1
 1005270:	1000551e 	bne	r2,zero,10053c8 <_realloc_r+0x2ac>
 1005274:	80800017 	ldw	r2,0(r16)
 1005278:	80afc83a 	sub	r23,r16,r2
 100527c:	b8c00117 	ldw	r3,4(r23)
 1005280:	00bfff04 	movi	r2,-4
 1005284:	1884703a 	and	r2,r3,r2
 1005288:	30002e26 	beq	r6,zero,1005344 <_realloc_r+0x228>
 100528c:	3240b926 	beq	r6,r9,1005574 <_realloc_r+0x458>
 1005290:	98a9883a 	add	r20,r19,r2
 1005294:	2509883a 	add	r4,r4,r20
 1005298:	d9000015 	stw	r4,0(sp)
 100529c:	21c02a16 	blt	r4,r7,1005348 <_realloc_r+0x22c>
 10052a0:	30800317 	ldw	r2,12(r6)
 10052a4:	30c00217 	ldw	r3,8(r6)
 10052a8:	01400904 	movi	r5,36
 10052ac:	99bfff04 	addi	r6,r19,-4
 10052b0:	18800315 	stw	r2,12(r3)
 10052b4:	10c00215 	stw	r3,8(r2)
 10052b8:	b9000317 	ldw	r4,12(r23)
 10052bc:	b8800217 	ldw	r2,8(r23)
 10052c0:	b82b883a 	mov	r21,r23
 10052c4:	bc000204 	addi	r16,r23,8
 10052c8:	20800215 	stw	r2,8(r4)
 10052cc:	11000315 	stw	r4,12(r2)
 10052d0:	2980e436 	bltu	r5,r6,1005664 <_realloc_r+0x548>
 10052d4:	008004c4 	movi	r2,19
 10052d8:	9009883a 	mov	r4,r18
 10052dc:	8011883a 	mov	r8,r16
 10052e0:	11800f2e 	bgeu	r2,r6,1005320 <_realloc_r+0x204>
 10052e4:	90800017 	ldw	r2,0(r18)
 10052e8:	ba000404 	addi	r8,r23,16
 10052ec:	91000204 	addi	r4,r18,8
 10052f0:	b8800215 	stw	r2,8(r23)
 10052f4:	90c00117 	ldw	r3,4(r18)
 10052f8:	008006c4 	movi	r2,27
 10052fc:	b8c00315 	stw	r3,12(r23)
 1005300:	1180072e 	bgeu	r2,r6,1005320 <_realloc_r+0x204>
 1005304:	90c00217 	ldw	r3,8(r18)
 1005308:	ba000604 	addi	r8,r23,24
 100530c:	91000404 	addi	r4,r18,16
 1005310:	b8c00415 	stw	r3,16(r23)
 1005314:	90800317 	ldw	r2,12(r18)
 1005318:	b8800515 	stw	r2,20(r23)
 100531c:	3140e726 	beq	r6,r5,10056bc <_realloc_r+0x5a0>
 1005320:	20800017 	ldw	r2,0(r4)
 1005324:	dd000017 	ldw	r20,0(sp)
 1005328:	b80f883a 	mov	r7,r23
 100532c:	40800015 	stw	r2,0(r8)
 1005330:	20c00117 	ldw	r3,4(r4)
 1005334:	40c00115 	stw	r3,4(r8)
 1005338:	20800217 	ldw	r2,8(r4)
 100533c:	40800215 	stw	r2,8(r8)
 1005340:	003f9706 	br	10051a0 <_realloc_r+0x84>
 1005344:	98a9883a 	add	r20,r19,r2
 1005348:	a1c01f16 	blt	r20,r7,10053c8 <_realloc_r+0x2ac>
 100534c:	b8c00317 	ldw	r3,12(r23)
 1005350:	b8800217 	ldw	r2,8(r23)
 1005354:	99bfff04 	addi	r6,r19,-4
 1005358:	01400904 	movi	r5,36
 100535c:	b82b883a 	mov	r21,r23
 1005360:	18800215 	stw	r2,8(r3)
 1005364:	10c00315 	stw	r3,12(r2)
 1005368:	bc000204 	addi	r16,r23,8
 100536c:	2980c336 	bltu	r5,r6,100567c <_realloc_r+0x560>
 1005370:	008004c4 	movi	r2,19
 1005374:	9009883a 	mov	r4,r18
 1005378:	8011883a 	mov	r8,r16
 100537c:	11800f2e 	bgeu	r2,r6,10053bc <_realloc_r+0x2a0>
 1005380:	90800017 	ldw	r2,0(r18)
 1005384:	ba000404 	addi	r8,r23,16
 1005388:	91000204 	addi	r4,r18,8
 100538c:	b8800215 	stw	r2,8(r23)
 1005390:	90c00117 	ldw	r3,4(r18)
 1005394:	008006c4 	movi	r2,27
 1005398:	b8c00315 	stw	r3,12(r23)
 100539c:	1180072e 	bgeu	r2,r6,10053bc <_realloc_r+0x2a0>
 10053a0:	90c00217 	ldw	r3,8(r18)
 10053a4:	ba000604 	addi	r8,r23,24
 10053a8:	91000404 	addi	r4,r18,16
 10053ac:	b8c00415 	stw	r3,16(r23)
 10053b0:	90800317 	ldw	r2,12(r18)
 10053b4:	b8800515 	stw	r2,20(r23)
 10053b8:	3140c726 	beq	r6,r5,10056d8 <_realloc_r+0x5bc>
 10053bc:	20800017 	ldw	r2,0(r4)
 10053c0:	b80f883a 	mov	r7,r23
 10053c4:	003fd906 	br	100532c <_realloc_r+0x210>
 10053c8:	880b883a 	mov	r5,r17
 10053cc:	b009883a 	mov	r4,r22
 10053d0:	1002dd80 	call	1002dd8 <_malloc_r>
 10053d4:	1023883a 	mov	r17,r2
 10053d8:	10002526 	beq	r2,zero,1005470 <_realloc_r+0x354>
 10053dc:	80800117 	ldw	r2,4(r16)
 10053e0:	00ffff84 	movi	r3,-2
 10053e4:	893ffe04 	addi	r4,r17,-8
 10053e8:	10c4703a 	and	r2,r2,r3
 10053ec:	8085883a 	add	r2,r16,r2
 10053f0:	20809526 	beq	r4,r2,1005648 <_realloc_r+0x52c>
 10053f4:	99bfff04 	addi	r6,r19,-4
 10053f8:	01c00904 	movi	r7,36
 10053fc:	39804536 	bltu	r7,r6,1005514 <_realloc_r+0x3f8>
 1005400:	008004c4 	movi	r2,19
 1005404:	9009883a 	mov	r4,r18
 1005408:	880b883a 	mov	r5,r17
 100540c:	11800f2e 	bgeu	r2,r6,100544c <_realloc_r+0x330>
 1005410:	90800017 	ldw	r2,0(r18)
 1005414:	89400204 	addi	r5,r17,8
 1005418:	91000204 	addi	r4,r18,8
 100541c:	88800015 	stw	r2,0(r17)
 1005420:	90c00117 	ldw	r3,4(r18)
 1005424:	008006c4 	movi	r2,27
 1005428:	88c00115 	stw	r3,4(r17)
 100542c:	1180072e 	bgeu	r2,r6,100544c <_realloc_r+0x330>
 1005430:	90c00217 	ldw	r3,8(r18)
 1005434:	89400404 	addi	r5,r17,16
 1005438:	91000404 	addi	r4,r18,16
 100543c:	88c00215 	stw	r3,8(r17)
 1005440:	90800317 	ldw	r2,12(r18)
 1005444:	88800315 	stw	r2,12(r17)
 1005448:	31c09126 	beq	r6,r7,1005690 <_realloc_r+0x574>
 100544c:	20800017 	ldw	r2,0(r4)
 1005450:	28800015 	stw	r2,0(r5)
 1005454:	20c00117 	ldw	r3,4(r4)
 1005458:	28c00115 	stw	r3,4(r5)
 100545c:	20800217 	ldw	r2,8(r4)
 1005460:	28800215 	stw	r2,8(r5)
 1005464:	900b883a 	mov	r5,r18
 1005468:	b009883a 	mov	r4,r22
 100546c:	10021b40 	call	10021b4 <_free_r>
 1005470:	b009883a 	mov	r4,r22
 1005474:	10060ac0 	call	10060ac <__malloc_unlock>
 1005478:	003f5e06 	br	10051f4 <_realloc_r+0xd8>
 100547c:	300b883a 	mov	r5,r6
 1005480:	dfc00b17 	ldw	ra,44(sp)
 1005484:	df000a17 	ldw	fp,40(sp)
 1005488:	ddc00917 	ldw	r23,36(sp)
 100548c:	dd800817 	ldw	r22,32(sp)
 1005490:	dd400717 	ldw	r21,28(sp)
 1005494:	dd000617 	ldw	r20,24(sp)
 1005498:	dcc00517 	ldw	r19,20(sp)
 100549c:	dc800417 	ldw	r18,16(sp)
 10054a0:	dc400317 	ldw	r17,12(sp)
 10054a4:	dc000217 	ldw	r16,8(sp)
 10054a8:	dec00c04 	addi	sp,sp,48
 10054ac:	1002dd81 	jmpi	1002dd8 <_malloc_r>
 10054b0:	38800117 	ldw	r2,4(r7)
 10054b4:	e54b883a 	add	r5,fp,r21
 10054b8:	31000054 	ori	r4,r6,1
 10054bc:	1080004c 	andi	r2,r2,1
 10054c0:	1704b03a 	or	r2,r2,fp
 10054c4:	38800115 	stw	r2,4(r7)
 10054c8:	29000115 	stw	r4,4(r5)
 10054cc:	2987883a 	add	r3,r5,r6
 10054d0:	18800117 	ldw	r2,4(r3)
 10054d4:	29400204 	addi	r5,r5,8
 10054d8:	b009883a 	mov	r4,r22
 10054dc:	10800054 	ori	r2,r2,1
 10054e0:	18800115 	stw	r2,4(r3)
 10054e4:	10021b40 	call	10021b4 <_free_r>
 10054e8:	003f3806 	br	10051cc <_realloc_r+0xb0>
 10054ec:	000d883a 	mov	r6,zero
 10054f0:	0009883a 	mov	r4,zero
 10054f4:	003f5d06 	br	100526c <_realloc_r+0x150>
 10054f8:	30c00217 	ldw	r3,8(r6)
 10054fc:	30800317 	ldw	r2,12(r6)
 1005500:	800f883a 	mov	r7,r16
 1005504:	84000204 	addi	r16,r16,8
 1005508:	10c00215 	stw	r3,8(r2)
 100550c:	18800315 	stw	r2,12(r3)
 1005510:	003f2306 	br	10051a0 <_realloc_r+0x84>
 1005514:	8809883a 	mov	r4,r17
 1005518:	900b883a 	mov	r5,r18
 100551c:	1004dd80 	call	1004dd8 <memmove>
 1005520:	003fd006 	br	1005464 <_realloc_r+0x348>
 1005524:	30800117 	ldw	r2,4(r6)
 1005528:	e0c00404 	addi	r3,fp,16
 100552c:	1108703a 	and	r4,r2,r4
 1005530:	9905883a 	add	r2,r19,r4
 1005534:	10ff4d16 	blt	r2,r3,100526c <_realloc_r+0x150>
 1005538:	1705c83a 	sub	r2,r2,fp
 100553c:	870b883a 	add	r5,r16,fp
 1005540:	10800054 	ori	r2,r2,1
 1005544:	28800115 	stw	r2,4(r5)
 1005548:	80c00117 	ldw	r3,4(r16)
 100554c:	00804074 	movhi	r2,257
 1005550:	10916404 	addi	r2,r2,17808
 1005554:	b009883a 	mov	r4,r22
 1005558:	18c0004c 	andi	r3,r3,1
 100555c:	e0c6b03a 	or	r3,fp,r3
 1005560:	11400215 	stw	r5,8(r2)
 1005564:	80c00115 	stw	r3,4(r16)
 1005568:	10060ac0 	call	10060ac <__malloc_unlock>
 100556c:	84400204 	addi	r17,r16,8
 1005570:	003f2006 	br	10051f4 <_realloc_r+0xd8>
 1005574:	98a9883a 	add	r20,r19,r2
 1005578:	2509883a 	add	r4,r4,r20
 100557c:	e0800404 	addi	r2,fp,16
 1005580:	d9000115 	stw	r4,4(sp)
 1005584:	20bf7016 	blt	r4,r2,1005348 <_realloc_r+0x22c>
 1005588:	b8c00317 	ldw	r3,12(r23)
 100558c:	b8800217 	ldw	r2,8(r23)
 1005590:	99bfff04 	addi	r6,r19,-4
 1005594:	01400904 	movi	r5,36
 1005598:	18800215 	stw	r2,8(r3)
 100559c:	10c00315 	stw	r3,12(r2)
 10055a0:	bc400204 	addi	r17,r23,8
 10055a4:	29804136 	bltu	r5,r6,10056ac <_realloc_r+0x590>
 10055a8:	008004c4 	movi	r2,19
 10055ac:	9009883a 	mov	r4,r18
 10055b0:	880f883a 	mov	r7,r17
 10055b4:	11800f2e 	bgeu	r2,r6,10055f4 <_realloc_r+0x4d8>
 10055b8:	90800017 	ldw	r2,0(r18)
 10055bc:	b9c00404 	addi	r7,r23,16
 10055c0:	91000204 	addi	r4,r18,8
 10055c4:	b8800215 	stw	r2,8(r23)
 10055c8:	90c00117 	ldw	r3,4(r18)
 10055cc:	008006c4 	movi	r2,27
 10055d0:	b8c00315 	stw	r3,12(r23)
 10055d4:	1180072e 	bgeu	r2,r6,10055f4 <_realloc_r+0x4d8>
 10055d8:	90c00217 	ldw	r3,8(r18)
 10055dc:	b9c00604 	addi	r7,r23,24
 10055e0:	91000404 	addi	r4,r18,16
 10055e4:	b8c00415 	stw	r3,16(r23)
 10055e8:	90800317 	ldw	r2,12(r18)
 10055ec:	b8800515 	stw	r2,20(r23)
 10055f0:	31404026 	beq	r6,r5,10056f4 <_realloc_r+0x5d8>
 10055f4:	20800017 	ldw	r2,0(r4)
 10055f8:	38800015 	stw	r2,0(r7)
 10055fc:	20c00117 	ldw	r3,4(r4)
 1005600:	38c00115 	stw	r3,4(r7)
 1005604:	20800217 	ldw	r2,8(r4)
 1005608:	38800215 	stw	r2,8(r7)
 100560c:	d8c00117 	ldw	r3,4(sp)
 1005610:	bf0b883a 	add	r5,r23,fp
 1005614:	b009883a 	mov	r4,r22
 1005618:	1f05c83a 	sub	r2,r3,fp
 100561c:	10800054 	ori	r2,r2,1
 1005620:	28800115 	stw	r2,4(r5)
 1005624:	b8c00117 	ldw	r3,4(r23)
 1005628:	00804074 	movhi	r2,257
 100562c:	10916404 	addi	r2,r2,17808
 1005630:	11400215 	stw	r5,8(r2)
 1005634:	18c0004c 	andi	r3,r3,1
 1005638:	e0c6b03a 	or	r3,fp,r3
 100563c:	b8c00115 	stw	r3,4(r23)
 1005640:	10060ac0 	call	10060ac <__malloc_unlock>
 1005644:	003eeb06 	br	10051f4 <_realloc_r+0xd8>
 1005648:	20800117 	ldw	r2,4(r4)
 100564c:	00ffff04 	movi	r3,-4
 1005650:	800f883a 	mov	r7,r16
 1005654:	10c4703a 	and	r2,r2,r3
 1005658:	98a9883a 	add	r20,r19,r2
 100565c:	84000204 	addi	r16,r16,8
 1005660:	003ecf06 	br	10051a0 <_realloc_r+0x84>
 1005664:	900b883a 	mov	r5,r18
 1005668:	8009883a 	mov	r4,r16
 100566c:	1004dd80 	call	1004dd8 <memmove>
 1005670:	dd000017 	ldw	r20,0(sp)
 1005674:	b80f883a 	mov	r7,r23
 1005678:	003ec906 	br	10051a0 <_realloc_r+0x84>
 100567c:	900b883a 	mov	r5,r18
 1005680:	8009883a 	mov	r4,r16
 1005684:	1004dd80 	call	1004dd8 <memmove>
 1005688:	b80f883a 	mov	r7,r23
 100568c:	003ec406 	br	10051a0 <_realloc_r+0x84>
 1005690:	90c00417 	ldw	r3,16(r18)
 1005694:	89400604 	addi	r5,r17,24
 1005698:	91000604 	addi	r4,r18,24
 100569c:	88c00415 	stw	r3,16(r17)
 10056a0:	90800517 	ldw	r2,20(r18)
 10056a4:	88800515 	stw	r2,20(r17)
 10056a8:	003f6806 	br	100544c <_realloc_r+0x330>
 10056ac:	900b883a 	mov	r5,r18
 10056b0:	8809883a 	mov	r4,r17
 10056b4:	1004dd80 	call	1004dd8 <memmove>
 10056b8:	003fd406 	br	100560c <_realloc_r+0x4f0>
 10056bc:	90c00417 	ldw	r3,16(r18)
 10056c0:	91000604 	addi	r4,r18,24
 10056c4:	ba000804 	addi	r8,r23,32
 10056c8:	b8c00615 	stw	r3,24(r23)
 10056cc:	90800517 	ldw	r2,20(r18)
 10056d0:	b8800715 	stw	r2,28(r23)
 10056d4:	003f1206 	br	1005320 <_realloc_r+0x204>
 10056d8:	90c00417 	ldw	r3,16(r18)
 10056dc:	91000604 	addi	r4,r18,24
 10056e0:	ba000804 	addi	r8,r23,32
 10056e4:	b8c00615 	stw	r3,24(r23)
 10056e8:	90800517 	ldw	r2,20(r18)
 10056ec:	b8800715 	stw	r2,28(r23)
 10056f0:	003f3206 	br	10053bc <_realloc_r+0x2a0>
 10056f4:	90c00417 	ldw	r3,16(r18)
 10056f8:	91000604 	addi	r4,r18,24
 10056fc:	b9c00804 	addi	r7,r23,32
 1005700:	b8c00615 	stw	r3,24(r23)
 1005704:	90800517 	ldw	r2,20(r18)
 1005708:	b8800715 	stw	r2,28(r23)
 100570c:	003fb906 	br	10055f4 <_realloc_r+0x4d8>

01005710 <__swbuf_r>:
 1005710:	defffc04 	addi	sp,sp,-16
 1005714:	dc400215 	stw	r17,8(sp)
 1005718:	dc000115 	stw	r16,4(sp)
 100571c:	dfc00315 	stw	ra,12(sp)
 1005720:	2023883a 	mov	r17,r4
 1005724:	2821883a 	mov	r16,r5
 1005728:	20000226 	beq	r4,zero,1005734 <__swbuf_r+0x24>
 100572c:	20800e17 	ldw	r2,56(r4)
 1005730:	10002f26 	beq	r2,zero,10057f0 <__swbuf_r+0xe0>
 1005734:	3080030b 	ldhu	r2,12(r6)
 1005738:	30c00617 	ldw	r3,24(r6)
 100573c:	1080020c 	andi	r2,r2,8
 1005740:	30c00215 	stw	r3,8(r6)
 1005744:	10002226 	beq	r2,zero,10057d0 <__swbuf_r+0xc0>
 1005748:	30c00417 	ldw	r3,16(r6)
 100574c:	18002026 	beq	r3,zero,10057d0 <__swbuf_r+0xc0>
 1005750:	31000017 	ldw	r4,0(r6)
 1005754:	30800517 	ldw	r2,20(r6)
 1005758:	20c7c83a 	sub	r3,r4,r3
 100575c:	18802f0e 	bge	r3,r2,100581c <__swbuf_r+0x10c>
 1005760:	19400044 	addi	r5,r3,1
 1005764:	30800217 	ldw	r2,8(r6)
 1005768:	84003fcc 	andi	r16,r16,255
 100576c:	20c00044 	addi	r3,r4,1
 1005770:	10bfffc4 	addi	r2,r2,-1
 1005774:	30800215 	stw	r2,8(r6)
 1005778:	24000005 	stb	r16,0(r4)
 100577c:	30800517 	ldw	r2,20(r6)
 1005780:	30c00015 	stw	r3,0(r6)
 1005784:	11400c26 	beq	r2,r5,10057b8 <__swbuf_r+0xa8>
 1005788:	3080030b 	ldhu	r2,12(r6)
 100578c:	1080004c 	andi	r2,r2,1
 1005790:	1005003a 	cmpeq	r2,r2,zero
 1005794:	10000626 	beq	r2,zero,10057b0 <__swbuf_r+0xa0>
 1005798:	8005883a 	mov	r2,r16
 100579c:	dfc00317 	ldw	ra,12(sp)
 10057a0:	dc400217 	ldw	r17,8(sp)
 10057a4:	dc000117 	ldw	r16,4(sp)
 10057a8:	dec00404 	addi	sp,sp,16
 10057ac:	f800283a 	ret
 10057b0:	00800284 	movi	r2,10
 10057b4:	80bff81e 	bne	r16,r2,1005798 <__swbuf_r+0x88>
 10057b8:	8809883a 	mov	r4,r17
 10057bc:	300b883a 	mov	r5,r6
 10057c0:	10016e00 	call	10016e0 <_fflush_r>
 10057c4:	103ff426 	beq	r2,zero,1005798 <__swbuf_r+0x88>
 10057c8:	043fffc4 	movi	r16,-1
 10057cc:	003ff206 	br	1005798 <__swbuf_r+0x88>
 10057d0:	300b883a 	mov	r5,r6
 10057d4:	8809883a 	mov	r4,r17
 10057d8:	d9800015 	stw	r6,0(sp)
 10057dc:	100585c0 	call	100585c <__swsetup_r>
 10057e0:	d9800017 	ldw	r6,0(sp)
 10057e4:	1000061e 	bne	r2,zero,1005800 <__swbuf_r+0xf0>
 10057e8:	30c00417 	ldw	r3,16(r6)
 10057ec:	003fd806 	br	1005750 <__swbuf_r+0x40>
 10057f0:	d9800015 	stw	r6,0(sp)
 10057f4:	1001aa00 	call	1001aa0 <__sinit>
 10057f8:	d9800017 	ldw	r6,0(sp)
 10057fc:	003fcd06 	br	1005734 <__swbuf_r+0x24>
 1005800:	3080030b 	ldhu	r2,12(r6)
 1005804:	00c00244 	movi	r3,9
 1005808:	043fffc4 	movi	r16,-1
 100580c:	10801014 	ori	r2,r2,64
 1005810:	3080030d 	sth	r2,12(r6)
 1005814:	88c00015 	stw	r3,0(r17)
 1005818:	003fdf06 	br	1005798 <__swbuf_r+0x88>
 100581c:	300b883a 	mov	r5,r6
 1005820:	8809883a 	mov	r4,r17
 1005824:	d9800015 	stw	r6,0(sp)
 1005828:	10016e00 	call	10016e0 <_fflush_r>
 100582c:	d9800017 	ldw	r6,0(sp)
 1005830:	103fe51e 	bne	r2,zero,10057c8 <__swbuf_r+0xb8>
 1005834:	31000017 	ldw	r4,0(r6)
 1005838:	01400044 	movi	r5,1
 100583c:	003fc906 	br	1005764 <__swbuf_r+0x54>

01005840 <__swbuf>:
 1005840:	01804074 	movhi	r6,257
 1005844:	31970804 	addi	r6,r6,23584
 1005848:	2007883a 	mov	r3,r4
 100584c:	31000017 	ldw	r4,0(r6)
 1005850:	280d883a 	mov	r6,r5
 1005854:	180b883a 	mov	r5,r3
 1005858:	10057101 	jmpi	1005710 <__swbuf_r>

0100585c <__swsetup_r>:
 100585c:	00804074 	movhi	r2,257
 1005860:	10970804 	addi	r2,r2,23584
 1005864:	10c00017 	ldw	r3,0(r2)
 1005868:	defffd04 	addi	sp,sp,-12
 100586c:	dc400115 	stw	r17,4(sp)
 1005870:	dc000015 	stw	r16,0(sp)
 1005874:	dfc00215 	stw	ra,8(sp)
 1005878:	2023883a 	mov	r17,r4
 100587c:	2821883a 	mov	r16,r5
 1005880:	18000226 	beq	r3,zero,100588c <__swsetup_r+0x30>
 1005884:	18800e17 	ldw	r2,56(r3)
 1005888:	10001f26 	beq	r2,zero,1005908 <__swsetup_r+0xac>
 100588c:	8100030b 	ldhu	r4,12(r16)
 1005890:	2080020c 	andi	r2,r4,8
 1005894:	10002826 	beq	r2,zero,1005938 <__swsetup_r+0xdc>
 1005898:	81400417 	ldw	r5,16(r16)
 100589c:	28001d26 	beq	r5,zero,1005914 <__swsetup_r+0xb8>
 10058a0:	2080004c 	andi	r2,r4,1
 10058a4:	1005003a 	cmpeq	r2,r2,zero
 10058a8:	10000b26 	beq	r2,zero,10058d8 <__swsetup_r+0x7c>
 10058ac:	2080008c 	andi	r2,r4,2
 10058b0:	10001226 	beq	r2,zero,10058fc <__swsetup_r+0xa0>
 10058b4:	0005883a 	mov	r2,zero
 10058b8:	80800215 	stw	r2,8(r16)
 10058bc:	28000b26 	beq	r5,zero,10058ec <__swsetup_r+0x90>
 10058c0:	0005883a 	mov	r2,zero
 10058c4:	dfc00217 	ldw	ra,8(sp)
 10058c8:	dc400117 	ldw	r17,4(sp)
 10058cc:	dc000017 	ldw	r16,0(sp)
 10058d0:	dec00304 	addi	sp,sp,12
 10058d4:	f800283a 	ret
 10058d8:	80800517 	ldw	r2,20(r16)
 10058dc:	80000215 	stw	zero,8(r16)
 10058e0:	0085c83a 	sub	r2,zero,r2
 10058e4:	80800615 	stw	r2,24(r16)
 10058e8:	283ff51e 	bne	r5,zero,10058c0 <__swsetup_r+0x64>
 10058ec:	2080200c 	andi	r2,r4,128
 10058f0:	103ff326 	beq	r2,zero,10058c0 <__swsetup_r+0x64>
 10058f4:	00bfffc4 	movi	r2,-1
 10058f8:	003ff206 	br	10058c4 <__swsetup_r+0x68>
 10058fc:	80800517 	ldw	r2,20(r16)
 1005900:	80800215 	stw	r2,8(r16)
 1005904:	003fed06 	br	10058bc <__swsetup_r+0x60>
 1005908:	1809883a 	mov	r4,r3
 100590c:	1001aa00 	call	1001aa0 <__sinit>
 1005910:	003fde06 	br	100588c <__swsetup_r+0x30>
 1005914:	20c0a00c 	andi	r3,r4,640
 1005918:	00808004 	movi	r2,512
 100591c:	18bfe026 	beq	r3,r2,10058a0 <__swsetup_r+0x44>
 1005920:	8809883a 	mov	r4,r17
 1005924:	800b883a 	mov	r5,r16
 1005928:	1002c440 	call	1002c44 <__smakebuf_r>
 100592c:	8100030b 	ldhu	r4,12(r16)
 1005930:	81400417 	ldw	r5,16(r16)
 1005934:	003fda06 	br	10058a0 <__swsetup_r+0x44>
 1005938:	2080040c 	andi	r2,r4,16
 100593c:	103fed26 	beq	r2,zero,10058f4 <__swsetup_r+0x98>
 1005940:	2080010c 	andi	r2,r4,4
 1005944:	10001226 	beq	r2,zero,1005990 <__swsetup_r+0x134>
 1005948:	81400c17 	ldw	r5,48(r16)
 100594c:	28000526 	beq	r5,zero,1005964 <__swsetup_r+0x108>
 1005950:	80801004 	addi	r2,r16,64
 1005954:	28800226 	beq	r5,r2,1005960 <__swsetup_r+0x104>
 1005958:	8809883a 	mov	r4,r17
 100595c:	10021b40 	call	10021b4 <_free_r>
 1005960:	80000c15 	stw	zero,48(r16)
 1005964:	8080030b 	ldhu	r2,12(r16)
 1005968:	81400417 	ldw	r5,16(r16)
 100596c:	80000115 	stw	zero,4(r16)
 1005970:	10bff6cc 	andi	r2,r2,65499
 1005974:	8080030d 	sth	r2,12(r16)
 1005978:	81400015 	stw	r5,0(r16)
 100597c:	8080030b 	ldhu	r2,12(r16)
 1005980:	10800214 	ori	r2,r2,8
 1005984:	113fffcc 	andi	r4,r2,65535
 1005988:	8080030d 	sth	r2,12(r16)
 100598c:	003fc306 	br	100589c <__swsetup_r+0x40>
 1005990:	81400417 	ldw	r5,16(r16)
 1005994:	003ff906 	br	100597c <__swsetup_r+0x120>

01005998 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 1005998:	defff804 	addi	sp,sp,-32
 100599c:	dfc00715 	stw	ra,28(sp)
 10059a0:	df000615 	stw	fp,24(sp)
 10059a4:	df000604 	addi	fp,sp,24
 10059a8:	e13ffc15 	stw	r4,-16(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 10059ac:	e0bffc17 	ldw	r2,-16(fp)
 10059b0:	1004803a 	cmplt	r2,r2,zero
 10059b4:	1000091e 	bne	r2,zero,10059dc <close+0x44>
 10059b8:	e13ffc17 	ldw	r4,-16(fp)
 10059bc:	01400304 	movi	r5,12
 10059c0:	100154c0 	call	100154c <__mulsi3>
 10059c4:	1007883a 	mov	r3,r2
 10059c8:	00804074 	movhi	r2,257
 10059cc:	10927004 	addi	r2,r2,18880
 10059d0:	1887883a 	add	r3,r3,r2
 10059d4:	e0ffff15 	stw	r3,-4(fp)
 10059d8:	00000106 	br	10059e0 <close+0x48>
 10059dc:	e03fff15 	stw	zero,-4(fp)
 10059e0:	e0bfff17 	ldw	r2,-4(fp)
 10059e4:	e0bffb15 	stw	r2,-20(fp)

  if (fd)
 10059e8:	e0bffb17 	ldw	r2,-20(fp)
 10059ec:	1005003a 	cmpeq	r2,r2,zero
 10059f0:	10001d1e 	bne	r2,zero,1005a68 <close+0xd0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 10059f4:	e0bffb17 	ldw	r2,-20(fp)
 10059f8:	10800017 	ldw	r2,0(r2)
 10059fc:	10800417 	ldw	r2,16(r2)
 1005a00:	1005003a 	cmpeq	r2,r2,zero
 1005a04:	1000071e 	bne	r2,zero,1005a24 <close+0x8c>
 1005a08:	e0bffb17 	ldw	r2,-20(fp)
 1005a0c:	10800017 	ldw	r2,0(r2)
 1005a10:	10800417 	ldw	r2,16(r2)
 1005a14:	e13ffb17 	ldw	r4,-20(fp)
 1005a18:	103ee83a 	callr	r2
 1005a1c:	e0bffe15 	stw	r2,-8(fp)
 1005a20:	00000106 	br	1005a28 <close+0x90>
 1005a24:	e03ffe15 	stw	zero,-8(fp)
 1005a28:	e0bffe17 	ldw	r2,-8(fp)
 1005a2c:	e0bffa15 	stw	r2,-24(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 1005a30:	e13ffc17 	ldw	r4,-16(fp)
 1005a34:	10065340 	call	1006534 <alt_release_fd>
    if (rval < 0)
 1005a38:	e0bffa17 	ldw	r2,-24(fp)
 1005a3c:	1004403a 	cmpge	r2,r2,zero
 1005a40:	1000071e 	bne	r2,zero,1005a60 <close+0xc8>
    {
      ALT_ERRNO = -rval;
 1005a44:	1005a980 	call	1005a98 <alt_get_errno>
 1005a48:	e0fffa17 	ldw	r3,-24(fp)
 1005a4c:	00c7c83a 	sub	r3,zero,r3
 1005a50:	10c00015 	stw	r3,0(r2)
      return -1;
 1005a54:	00bfffc4 	movi	r2,-1
 1005a58:	e0bffd15 	stw	r2,-12(fp)
 1005a5c:	00000806 	br	1005a80 <close+0xe8>
    }
    return 0;
 1005a60:	e03ffd15 	stw	zero,-12(fp)
 1005a64:	00000606 	br	1005a80 <close+0xe8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1005a68:	1005a980 	call	1005a98 <alt_get_errno>
 1005a6c:	1007883a 	mov	r3,r2
 1005a70:	00801444 	movi	r2,81
 1005a74:	18800015 	stw	r2,0(r3)
    return -1;
 1005a78:	00bfffc4 	movi	r2,-1
 1005a7c:	e0bffd15 	stw	r2,-12(fp)
 1005a80:	e0bffd17 	ldw	r2,-12(fp)
  }
}
 1005a84:	e037883a 	mov	sp,fp
 1005a88:	dfc00117 	ldw	ra,4(sp)
 1005a8c:	df000017 	ldw	fp,0(sp)
 1005a90:	dec00204 	addi	sp,sp,8
 1005a94:	f800283a 	ret

01005a98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1005a98:	defffd04 	addi	sp,sp,-12
 1005a9c:	dfc00215 	stw	ra,8(sp)
 1005aa0:	df000115 	stw	fp,4(sp)
 1005aa4:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1005aa8:	00804074 	movhi	r2,257
 1005aac:	10971104 	addi	r2,r2,23620
 1005ab0:	10800017 	ldw	r2,0(r2)
 1005ab4:	1005003a 	cmpeq	r2,r2,zero
 1005ab8:	1000061e 	bne	r2,zero,1005ad4 <alt_get_errno+0x3c>
 1005abc:	00804074 	movhi	r2,257
 1005ac0:	10971104 	addi	r2,r2,23620
 1005ac4:	10800017 	ldw	r2,0(r2)
 1005ac8:	103ee83a 	callr	r2
 1005acc:	e0bfff15 	stw	r2,-4(fp)
 1005ad0:	00000306 	br	1005ae0 <alt_get_errno+0x48>
 1005ad4:	00804074 	movhi	r2,257
 1005ad8:	109dec04 	addi	r2,r2,30640
 1005adc:	e0bfff15 	stw	r2,-4(fp)
 1005ae0:	e0bfff17 	ldw	r2,-4(fp)
}
 1005ae4:	e037883a 	mov	sp,fp
 1005ae8:	dfc00117 	ldw	ra,4(sp)
 1005aec:	df000017 	ldw	fp,0(sp)
 1005af0:	dec00204 	addi	sp,sp,8
 1005af4:	f800283a 	ret

01005af8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 1005af8:	defffc04 	addi	sp,sp,-16
 1005afc:	df000315 	stw	fp,12(sp)
 1005b00:	df000304 	addi	fp,sp,12
 1005b04:	e13ffd15 	stw	r4,-12(fp)
 1005b08:	e17ffe15 	stw	r5,-8(fp)
 1005b0c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 1005b10:	e0bfff17 	ldw	r2,-4(fp)
}
 1005b14:	e037883a 	mov	sp,fp
 1005b18:	df000017 	ldw	fp,0(sp)
 1005b1c:	dec00104 	addi	sp,sp,4
 1005b20:	f800283a 	ret

01005b24 <alt_sim_halt>:

/*
 * Routine called on exit.
 */
static ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
 1005b24:	defffd04 	addi	sp,sp,-12
 1005b28:	df000215 	stw	fp,8(sp)
 1005b2c:	df000204 	addi	fp,sp,8
 1005b30:	e13fff15 	stw	r4,-4(fp)
  int r2 = exit_code;
 1005b34:	e0bfff17 	ldw	r2,-4(fp)
 1005b38:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 1005b3c:	e0bffe17 	ldw	r2,-8(fp)
 1005b40:	1005003a 	cmpeq	r2,r2,zero
 1005b44:	1000021e 	bne	r2,zero,1005b50 <alt_sim_halt+0x2c>
    ALT_SIM_FAIL();
 1005b48:	002af070 	cmpltui	zero,zero,43969
 1005b4c:	00000106 	br	1005b54 <alt_sim_halt+0x30>
  } else {
    ALT_SIM_PASS();
 1005b50:	002af0b0 	cmpltui	zero,zero,43970
  }
#endif /* DEBUG_STUB */
}
 1005b54:	e037883a 	mov	sp,fp
 1005b58:	df000017 	ldw	fp,0(sp)
 1005b5c:	dec00104 	addi	sp,sp,4
 1005b60:	f800283a 	ret

01005b64 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 1005b64:	defffd04 	addi	sp,sp,-12
 1005b68:	dfc00215 	stw	ra,8(sp)
 1005b6c:	df000115 	stw	fp,4(sp)
 1005b70:	df000104 	addi	fp,sp,4
 1005b74:	e13fff15 	stw	r4,-4(fp)
  ALT_OS_STOP();

  /* Provide notification to the simulator that we've stopped */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_SIM_HALT().\r\n");
  ALT_SIM_HALT(exit_code);
 1005b78:	e13fff17 	ldw	r4,-4(fp)
 1005b7c:	1005b240 	call	1005b24 <alt_sim_halt>

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 1005b80:	003fff06 	br	1005b80 <_exit+0x1c>

01005b84 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 1005b84:	defff904 	addi	sp,sp,-28
 1005b88:	dfc00615 	stw	ra,24(sp)
 1005b8c:	df000515 	stw	fp,20(sp)
 1005b90:	df000504 	addi	fp,sp,20
 1005b94:	e13ffc15 	stw	r4,-16(fp)
 1005b98:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1005b9c:	e0bffc17 	ldw	r2,-16(fp)
 1005ba0:	1004803a 	cmplt	r2,r2,zero
 1005ba4:	1000091e 	bne	r2,zero,1005bcc <fstat+0x48>
 1005ba8:	e13ffc17 	ldw	r4,-16(fp)
 1005bac:	01400304 	movi	r5,12
 1005bb0:	100154c0 	call	100154c <__mulsi3>
 1005bb4:	1007883a 	mov	r3,r2
 1005bb8:	00804074 	movhi	r2,257
 1005bbc:	10927004 	addi	r2,r2,18880
 1005bc0:	1887883a 	add	r3,r3,r2
 1005bc4:	e0ffff15 	stw	r3,-4(fp)
 1005bc8:	00000106 	br	1005bd0 <fstat+0x4c>
 1005bcc:	e03fff15 	stw	zero,-4(fp)
 1005bd0:	e0bfff17 	ldw	r2,-4(fp)
 1005bd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 1005bd8:	e0bffb17 	ldw	r2,-20(fp)
 1005bdc:	1005003a 	cmpeq	r2,r2,zero
 1005be0:	1000121e 	bne	r2,zero,1005c2c <fstat+0xa8>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 1005be4:	e0bffb17 	ldw	r2,-20(fp)
 1005be8:	10800017 	ldw	r2,0(r2)
 1005bec:	10800817 	ldw	r2,32(r2)
 1005bf0:	1005003a 	cmpeq	r2,r2,zero
 1005bf4:	1000081e 	bne	r2,zero,1005c18 <fstat+0x94>
    {
      return fd->dev->fstat(fd, st);
 1005bf8:	e0bffb17 	ldw	r2,-20(fp)
 1005bfc:	10800017 	ldw	r2,0(r2)
 1005c00:	10800817 	ldw	r2,32(r2)
 1005c04:	e13ffb17 	ldw	r4,-20(fp)
 1005c08:	e17ffd17 	ldw	r5,-12(fp)
 1005c0c:	103ee83a 	callr	r2
 1005c10:	e0bffe15 	stw	r2,-8(fp)
 1005c14:	00000b06 	br	1005c44 <fstat+0xc0>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 1005c18:	e0fffd17 	ldw	r3,-12(fp)
 1005c1c:	00880004 	movi	r2,8192
 1005c20:	18800115 	stw	r2,4(r3)
      return 0;
 1005c24:	e03ffe15 	stw	zero,-8(fp)
 1005c28:	00000606 	br	1005c44 <fstat+0xc0>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1005c2c:	1005c5c0 	call	1005c5c <alt_get_errno>
 1005c30:	1007883a 	mov	r3,r2
 1005c34:	00801444 	movi	r2,81
 1005c38:	18800015 	stw	r2,0(r3)
    return -1;
 1005c3c:	00bfffc4 	movi	r2,-1
 1005c40:	e0bffe15 	stw	r2,-8(fp)
 1005c44:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1005c48:	e037883a 	mov	sp,fp
 1005c4c:	dfc00117 	ldw	ra,4(sp)
 1005c50:	df000017 	ldw	fp,0(sp)
 1005c54:	dec00204 	addi	sp,sp,8
 1005c58:	f800283a 	ret

01005c5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1005c5c:	defffd04 	addi	sp,sp,-12
 1005c60:	dfc00215 	stw	ra,8(sp)
 1005c64:	df000115 	stw	fp,4(sp)
 1005c68:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1005c6c:	00804074 	movhi	r2,257
 1005c70:	10971104 	addi	r2,r2,23620
 1005c74:	10800017 	ldw	r2,0(r2)
 1005c78:	1005003a 	cmpeq	r2,r2,zero
 1005c7c:	1000061e 	bne	r2,zero,1005c98 <alt_get_errno+0x3c>
 1005c80:	00804074 	movhi	r2,257
 1005c84:	10971104 	addi	r2,r2,23620
 1005c88:	10800017 	ldw	r2,0(r2)
 1005c8c:	103ee83a 	callr	r2
 1005c90:	e0bfff15 	stw	r2,-4(fp)
 1005c94:	00000306 	br	1005ca4 <alt_get_errno+0x48>
 1005c98:	00804074 	movhi	r2,257
 1005c9c:	109dec04 	addi	r2,r2,30640
 1005ca0:	e0bfff15 	stw	r2,-4(fp)
 1005ca4:	e0bfff17 	ldw	r2,-4(fp)
}
 1005ca8:	e037883a 	mov	sp,fp
 1005cac:	dfc00117 	ldw	ra,4(sp)
 1005cb0:	df000017 	ldw	fp,0(sp)
 1005cb4:	dec00204 	addi	sp,sp,8
 1005cb8:	f800283a 	ret

01005cbc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 1005cbc:	deffeb04 	addi	sp,sp,-84
 1005cc0:	dfc01415 	stw	ra,80(sp)
 1005cc4:	df001315 	stw	fp,76(sp)
 1005cc8:	df001304 	addi	fp,sp,76
 1005ccc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1005cd0:	e0bffd17 	ldw	r2,-12(fp)
 1005cd4:	1004803a 	cmplt	r2,r2,zero
 1005cd8:	1000091e 	bne	r2,zero,1005d00 <isatty+0x44>
 1005cdc:	e13ffd17 	ldw	r4,-12(fp)
 1005ce0:	01400304 	movi	r5,12
 1005ce4:	100154c0 	call	100154c <__mulsi3>
 1005ce8:	1007883a 	mov	r3,r2
 1005cec:	00804074 	movhi	r2,257
 1005cf0:	10927004 	addi	r2,r2,18880
 1005cf4:	1887883a 	add	r3,r3,r2
 1005cf8:	e0ffff15 	stw	r3,-4(fp)
 1005cfc:	00000106 	br	1005d04 <isatty+0x48>
 1005d00:	e03fff15 	stw	zero,-4(fp)
 1005d04:	e0bfff17 	ldw	r2,-4(fp)
 1005d08:	e0bfed15 	stw	r2,-76(fp)
  
  if (fd)
 1005d0c:	e0bfed17 	ldw	r2,-76(fp)
 1005d10:	1005003a 	cmpeq	r2,r2,zero
 1005d14:	10000f1e 	bne	r2,zero,1005d54 <isatty+0x98>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 1005d18:	e0bfed17 	ldw	r2,-76(fp)
 1005d1c:	10800017 	ldw	r2,0(r2)
 1005d20:	10800817 	ldw	r2,32(r2)
 1005d24:	1004c03a 	cmpne	r2,r2,zero
 1005d28:	1000031e 	bne	r2,zero,1005d38 <isatty+0x7c>
    {
      return 1;
 1005d2c:	00800044 	movi	r2,1
 1005d30:	e0bffe15 	stw	r2,-8(fp)
 1005d34:	00000c06 	br	1005d68 <isatty+0xac>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 1005d38:	e17fee04 	addi	r5,fp,-72
 1005d3c:	e13ffd17 	ldw	r4,-12(fp)
 1005d40:	1005b840 	call	1005b84 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 1005d44:	e0bfef17 	ldw	r2,-68(fp)
 1005d48:	10880020 	cmpeqi	r2,r2,8192
 1005d4c:	e0bffe15 	stw	r2,-8(fp)
 1005d50:	00000506 	br	1005d68 <isatty+0xac>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 1005d54:	1005d800 	call	1005d80 <alt_get_errno>
 1005d58:	1007883a 	mov	r3,r2
 1005d5c:	00801444 	movi	r2,81
 1005d60:	18800015 	stw	r2,0(r3)
    return 0;
 1005d64:	e03ffe15 	stw	zero,-8(fp)
 1005d68:	e0bffe17 	ldw	r2,-8(fp)
  }
}
 1005d6c:	e037883a 	mov	sp,fp
 1005d70:	dfc00117 	ldw	ra,4(sp)
 1005d74:	df000017 	ldw	fp,0(sp)
 1005d78:	dec00204 	addi	sp,sp,8
 1005d7c:	f800283a 	ret

01005d80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1005d80:	defffd04 	addi	sp,sp,-12
 1005d84:	dfc00215 	stw	ra,8(sp)
 1005d88:	df000115 	stw	fp,4(sp)
 1005d8c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1005d90:	00804074 	movhi	r2,257
 1005d94:	10971104 	addi	r2,r2,23620
 1005d98:	10800017 	ldw	r2,0(r2)
 1005d9c:	1005003a 	cmpeq	r2,r2,zero
 1005da0:	1000061e 	bne	r2,zero,1005dbc <alt_get_errno+0x3c>
 1005da4:	00804074 	movhi	r2,257
 1005da8:	10971104 	addi	r2,r2,23620
 1005dac:	10800017 	ldw	r2,0(r2)
 1005db0:	103ee83a 	callr	r2
 1005db4:	e0bfff15 	stw	r2,-4(fp)
 1005db8:	00000306 	br	1005dc8 <alt_get_errno+0x48>
 1005dbc:	00804074 	movhi	r2,257
 1005dc0:	109dec04 	addi	r2,r2,30640
 1005dc4:	e0bfff15 	stw	r2,-4(fp)
 1005dc8:	e0bfff17 	ldw	r2,-4(fp)
}
 1005dcc:	e037883a 	mov	sp,fp
 1005dd0:	dfc00117 	ldw	ra,4(sp)
 1005dd4:	df000017 	ldw	fp,0(sp)
 1005dd8:	dec00204 	addi	sp,sp,8
 1005ddc:	f800283a 	ret

01005de0 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 1005de0:	defffe04 	addi	sp,sp,-8
 1005de4:	dfc00115 	stw	ra,4(sp)
 1005de8:	df000015 	stw	fp,0(sp)
 1005dec:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 1005df0:	01004074 	movhi	r4,257
 1005df4:	21172804 	addi	r4,r4,23712
 1005df8:	01404074 	movhi	r5,257
 1005dfc:	29506404 	addi	r5,r5,16784
 1005e00:	01804074 	movhi	r6,257
 1005e04:	31972804 	addi	r6,r6,23712
 1005e08:	1005e600 	call	1005e60 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 1005e0c:	01004034 	movhi	r4,256
 1005e10:	21000804 	addi	r4,r4,32
 1005e14:	01404034 	movhi	r5,256
 1005e18:	29400804 	addi	r5,r5,32
 1005e1c:	01804034 	movhi	r6,256
 1005e20:	31806e04 	addi	r6,r6,440
 1005e24:	1005e600 	call	1005e60 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 1005e28:	01004074 	movhi	r4,257
 1005e2c:	2123ff04 	addi	r4,r4,-28676
 1005e30:	01404074 	movhi	r5,257
 1005e34:	2963ff04 	addi	r5,r5,-28676
 1005e38:	01804074 	movhi	r6,257
 1005e3c:	31906404 	addi	r6,r6,16784
 1005e40:	1005e600 	call	1005e60 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 1005e44:	10084400 	call	1008440 <alt_dcache_flush_all>
  alt_icache_flush_all();
 1005e48:	100894c0 	call	100894c <alt_icache_flush_all>
}
 1005e4c:	e037883a 	mov	sp,fp
 1005e50:	dfc00117 	ldw	ra,4(sp)
 1005e54:	df000017 	ldw	fp,0(sp)
 1005e58:	dec00204 	addi	sp,sp,8
 1005e5c:	f800283a 	ret

01005e60 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 1005e60:	defffc04 	addi	sp,sp,-16
 1005e64:	df000315 	stw	fp,12(sp)
 1005e68:	df000304 	addi	fp,sp,12
 1005e6c:	e13ffd15 	stw	r4,-12(fp)
 1005e70:	e17ffe15 	stw	r5,-8(fp)
 1005e74:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 1005e78:	e0fffe17 	ldw	r3,-8(fp)
 1005e7c:	e0bffd17 	ldw	r2,-12(fp)
 1005e80:	18800e26 	beq	r3,r2,1005ebc <alt_load_section+0x5c>
  {
    while( to != end )
 1005e84:	00000a06 	br	1005eb0 <alt_load_section+0x50>
    {
      *to++ = *from++;
 1005e88:	e0bffd17 	ldw	r2,-12(fp)
 1005e8c:	10c00017 	ldw	r3,0(r2)
 1005e90:	e0bffe17 	ldw	r2,-8(fp)
 1005e94:	10c00015 	stw	r3,0(r2)
 1005e98:	e0bffe17 	ldw	r2,-8(fp)
 1005e9c:	10800104 	addi	r2,r2,4
 1005ea0:	e0bffe15 	stw	r2,-8(fp)
 1005ea4:	e0bffd17 	ldw	r2,-12(fp)
 1005ea8:	10800104 	addi	r2,r2,4
 1005eac:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 1005eb0:	e0fffe17 	ldw	r3,-8(fp)
 1005eb4:	e0bfff17 	ldw	r2,-4(fp)
 1005eb8:	18bff31e 	bne	r3,r2,1005e88 <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 1005ebc:	e037883a 	mov	sp,fp
 1005ec0:	df000017 	ldw	fp,0(sp)
 1005ec4:	dec00104 	addi	sp,sp,4
 1005ec8:	f800283a 	ret

01005ecc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 1005ecc:	defff804 	addi	sp,sp,-32
 1005ed0:	dfc00715 	stw	ra,28(sp)
 1005ed4:	df000615 	stw	fp,24(sp)
 1005ed8:	df000604 	addi	fp,sp,24
 1005edc:	e13ffc15 	stw	r4,-16(fp)
 1005ee0:	e17ffd15 	stw	r5,-12(fp)
 1005ee4:	e1bffe15 	stw	r6,-8(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 1005ee8:	e03ffa15 	stw	zero,-24(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1005eec:	e0bffc17 	ldw	r2,-16(fp)
 1005ef0:	1004803a 	cmplt	r2,r2,zero
 1005ef4:	1000091e 	bne	r2,zero,1005f1c <lseek+0x50>
 1005ef8:	e13ffc17 	ldw	r4,-16(fp)
 1005efc:	01400304 	movi	r5,12
 1005f00:	100154c0 	call	100154c <__mulsi3>
 1005f04:	1007883a 	mov	r3,r2
 1005f08:	00804074 	movhi	r2,257
 1005f0c:	10927004 	addi	r2,r2,18880
 1005f10:	1887883a 	add	r3,r3,r2
 1005f14:	e0ffff15 	stw	r3,-4(fp)
 1005f18:	00000106 	br	1005f20 <lseek+0x54>
 1005f1c:	e03fff15 	stw	zero,-4(fp)
 1005f20:	e0bfff17 	ldw	r2,-4(fp)
 1005f24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd) 
 1005f28:	e0bffb17 	ldw	r2,-20(fp)
 1005f2c:	1005003a 	cmpeq	r2,r2,zero
 1005f30:	1000111e 	bne	r2,zero,1005f78 <lseek+0xac>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 1005f34:	e0bffb17 	ldw	r2,-20(fp)
 1005f38:	10800017 	ldw	r2,0(r2)
 1005f3c:	10800717 	ldw	r2,28(r2)
 1005f40:	1005003a 	cmpeq	r2,r2,zero
 1005f44:	1000091e 	bne	r2,zero,1005f6c <lseek+0xa0>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 1005f48:	e0bffb17 	ldw	r2,-20(fp)
 1005f4c:	10800017 	ldw	r2,0(r2)
 1005f50:	10800717 	ldw	r2,28(r2)
 1005f54:	e13ffb17 	ldw	r4,-20(fp)
 1005f58:	e17ffd17 	ldw	r5,-12(fp)
 1005f5c:	e1bffe17 	ldw	r6,-8(fp)
 1005f60:	103ee83a 	callr	r2
 1005f64:	e0bffa15 	stw	r2,-24(fp)
 1005f68:	00000506 	br	1005f80 <lseek+0xb4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 1005f6c:	00bfde84 	movi	r2,-134
 1005f70:	e0bffa15 	stw	r2,-24(fp)
 1005f74:	00000206 	br	1005f80 <lseek+0xb4>
    }
  }
  else  
  {
    rc = -EBADFD;
 1005f78:	00bfebc4 	movi	r2,-81
 1005f7c:	e0bffa15 	stw	r2,-24(fp)
  }

  if (rc < 0)
 1005f80:	e0bffa17 	ldw	r2,-24(fp)
 1005f84:	1004403a 	cmpge	r2,r2,zero
 1005f88:	1000071e 	bne	r2,zero,1005fa8 <lseek+0xdc>
  {
    ALT_ERRNO = -rc;
 1005f8c:	1005fc00 	call	1005fc0 <alt_get_errno>
 1005f90:	1007883a 	mov	r3,r2
 1005f94:	e0bffa17 	ldw	r2,-24(fp)
 1005f98:	0085c83a 	sub	r2,zero,r2
 1005f9c:	18800015 	stw	r2,0(r3)
    rc = -1;
 1005fa0:	00bfffc4 	movi	r2,-1
 1005fa4:	e0bffa15 	stw	r2,-24(fp)
  }

  return rc;
 1005fa8:	e0bffa17 	ldw	r2,-24(fp)
}
 1005fac:	e037883a 	mov	sp,fp
 1005fb0:	dfc00117 	ldw	ra,4(sp)
 1005fb4:	df000017 	ldw	fp,0(sp)
 1005fb8:	dec00204 	addi	sp,sp,8
 1005fbc:	f800283a 	ret

01005fc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1005fc0:	defffd04 	addi	sp,sp,-12
 1005fc4:	dfc00215 	stw	ra,8(sp)
 1005fc8:	df000115 	stw	fp,4(sp)
 1005fcc:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1005fd0:	00804074 	movhi	r2,257
 1005fd4:	10971104 	addi	r2,r2,23620
 1005fd8:	10800017 	ldw	r2,0(r2)
 1005fdc:	1005003a 	cmpeq	r2,r2,zero
 1005fe0:	1000061e 	bne	r2,zero,1005ffc <alt_get_errno+0x3c>
 1005fe4:	00804074 	movhi	r2,257
 1005fe8:	10971104 	addi	r2,r2,23620
 1005fec:	10800017 	ldw	r2,0(r2)
 1005ff0:	103ee83a 	callr	r2
 1005ff4:	e0bfff15 	stw	r2,-4(fp)
 1005ff8:	00000306 	br	1006008 <alt_get_errno+0x48>
 1005ffc:	00804074 	movhi	r2,257
 1006000:	109dec04 	addi	r2,r2,30640
 1006004:	e0bfff15 	stw	r2,-4(fp)
 1006008:	e0bfff17 	ldw	r2,-4(fp)
}
 100600c:	e037883a 	mov	sp,fp
 1006010:	dfc00117 	ldw	ra,4(sp)
 1006014:	df000017 	ldw	fp,0(sp)
 1006018:	dec00204 	addi	sp,sp,8
 100601c:	f800283a 	ret

01006020 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 1006020:	defffd04 	addi	sp,sp,-12
 1006024:	dfc00215 	stw	ra,8(sp)
 1006028:	df000115 	stw	fp,4(sp)
 100602c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 1006030:	0009883a 	mov	r4,zero
 1006034:	10067ec0 	call	10067ec <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 1006038:	10068200 	call	1006820 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 100603c:	01004074 	movhi	r4,257
 1006040:	21104d04 	addi	r4,r4,16692
 1006044:	01404074 	movhi	r5,257
 1006048:	29504d04 	addi	r5,r5,16692
 100604c:	01804074 	movhi	r6,257
 1006050:	31904d04 	addi	r6,r6,16692
 1006054:	1008a400 	call	1008a40 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 1006058:	10085700 	call	1008570 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 100605c:	01004074 	movhi	r4,257
 1006060:	21217504 	addi	r4,r4,-31276
 1006064:	1008e3c0 	call	1008e3c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 1006068:	d126e817 	ldw	r4,-25696(gp)
 100606c:	d166e917 	ldw	r5,-25692(gp)
 1006070:	d1a6ea17 	ldw	r6,-25688(gp)
 1006074:	10013880 	call	1001388 <main>
 1006078:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 100607c:	01000044 	movi	r4,1
 1006080:	10059980 	call	1005998 <close>
  exit (result);
 1006084:	e13fff17 	ldw	r4,-4(fp)
 1006088:	10015840 	call	1001584 <exit>

0100608c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 100608c:	defffe04 	addi	sp,sp,-8
 1006090:	df000115 	stw	fp,4(sp)
 1006094:	df000104 	addi	fp,sp,4
 1006098:	e13fff15 	stw	r4,-4(fp)
}
 100609c:	e037883a 	mov	sp,fp
 10060a0:	df000017 	ldw	fp,0(sp)
 10060a4:	dec00104 	addi	sp,sp,4
 10060a8:	f800283a 	ret

010060ac <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 10060ac:	defffe04 	addi	sp,sp,-8
 10060b0:	df000115 	stw	fp,4(sp)
 10060b4:	df000104 	addi	fp,sp,4
 10060b8:	e13fff15 	stw	r4,-4(fp)
}
 10060bc:	e037883a 	mov	sp,fp
 10060c0:	df000017 	ldw	fp,0(sp)
 10060c4:	dec00104 	addi	sp,sp,4
 10060c8:	f800283a 	ret

010060cc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 10060cc:	defffa04 	addi	sp,sp,-24
 10060d0:	dfc00515 	stw	ra,20(sp)
 10060d4:	df000415 	stw	fp,16(sp)
 10060d8:	dc000315 	stw	r16,12(sp)
 10060dc:	df000304 	addi	fp,sp,12
 10060e0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 10060e4:	e0bffe17 	ldw	r2,-8(fp)
 10060e8:	10800217 	ldw	r2,8(r2)
 10060ec:	10d00034 	orhi	r3,r2,16384
 10060f0:	e0bffe17 	ldw	r2,-8(fp)
 10060f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 10060f8:	e03ffd15 	stw	zero,-12(fp)
 10060fc:	00002306 	br	100618c <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 1006100:	e13ffd17 	ldw	r4,-12(fp)
 1006104:	04004074 	movhi	r16,257
 1006108:	84127004 	addi	r16,r16,18880
 100610c:	01400304 	movi	r5,12
 1006110:	100154c0 	call	100154c <__mulsi3>
 1006114:	1405883a 	add	r2,r2,r16
 1006118:	10c00017 	ldw	r3,0(r2)
 100611c:	e0bffe17 	ldw	r2,-8(fp)
 1006120:	10800017 	ldw	r2,0(r2)
 1006124:	1880161e 	bne	r3,r2,1006180 <alt_file_locked+0xb4>
 1006128:	e13ffd17 	ldw	r4,-12(fp)
 100612c:	04004074 	movhi	r16,257
 1006130:	84127004 	addi	r16,r16,18880
 1006134:	01400304 	movi	r5,12
 1006138:	100154c0 	call	100154c <__mulsi3>
 100613c:	1405883a 	add	r2,r2,r16
 1006140:	10800204 	addi	r2,r2,8
 1006144:	10800017 	ldw	r2,0(r2)
 1006148:	1004403a 	cmpge	r2,r2,zero
 100614c:	10000c1e 	bne	r2,zero,1006180 <alt_file_locked+0xb4>
 1006150:	e13ffd17 	ldw	r4,-12(fp)
 1006154:	01400304 	movi	r5,12
 1006158:	100154c0 	call	100154c <__mulsi3>
 100615c:	1007883a 	mov	r3,r2
 1006160:	00804074 	movhi	r2,257
 1006164:	10927004 	addi	r2,r2,18880
 1006168:	1887883a 	add	r3,r3,r2
 100616c:	e0bffe17 	ldw	r2,-8(fp)
 1006170:	18800326 	beq	r3,r2,1006180 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 1006174:	00bffcc4 	movi	r2,-13
 1006178:	e0bfff15 	stw	r2,-4(fp)
 100617c:	00000a06 	br	10061a8 <alt_file_locked+0xdc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 1006180:	e0bffd17 	ldw	r2,-12(fp)
 1006184:	10800044 	addi	r2,r2,1
 1006188:	e0bffd15 	stw	r2,-12(fp)
 100618c:	00804074 	movhi	r2,257
 1006190:	10971004 	addi	r2,r2,23616
 1006194:	10800017 	ldw	r2,0(r2)
 1006198:	1007883a 	mov	r3,r2
 100619c:	e0bffd17 	ldw	r2,-12(fp)
 10061a0:	18bfd72e 	bgeu	r3,r2,1006100 <alt_file_locked+0x34>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 10061a4:	e03fff15 	stw	zero,-4(fp)
 10061a8:	e0bfff17 	ldw	r2,-4(fp)
}
 10061ac:	e037883a 	mov	sp,fp
 10061b0:	dfc00217 	ldw	ra,8(sp)
 10061b4:	df000117 	ldw	fp,4(sp)
 10061b8:	dc000017 	ldw	r16,0(sp)
 10061bc:	dec00304 	addi	sp,sp,12
 10061c0:	f800283a 	ret

010061c4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 10061c4:	defff404 	addi	sp,sp,-48
 10061c8:	dfc00b15 	stw	ra,44(sp)
 10061cc:	df000a15 	stw	fp,40(sp)
 10061d0:	df000a04 	addi	fp,sp,40
 10061d4:	e13ffb15 	stw	r4,-20(fp)
 10061d8:	e17ffc15 	stw	r5,-16(fp)
 10061dc:	e1bffd15 	stw	r6,-12(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 10061e0:	00bfffc4 	movi	r2,-1
 10061e4:	e0bff815 	stw	r2,-32(fp)
  int status = -ENODEV;
 10061e8:	00bffb44 	movi	r2,-19
 10061ec:	e0bff715 	stw	r2,-36(fp)
  int isafs = 0;
 10061f0:	e03ff615 	stw	zero,-40(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 10061f4:	e13ffb17 	ldw	r4,-20(fp)
 10061f8:	01404074 	movhi	r5,257
 10061fc:	29570e04 	addi	r5,r5,23608
 1006200:	10086380 	call	1008638 <alt_find_dev>
 1006204:	e0bffa15 	stw	r2,-24(fp)
 1006208:	e0bffa17 	ldw	r2,-24(fp)
 100620c:	1004c03a 	cmpne	r2,r2,zero
 1006210:	1000051e 	bne	r2,zero,1006228 <open+0x64>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 1006214:	e13ffb17 	ldw	r4,-20(fp)
 1006218:	10086cc0 	call	10086cc <alt_find_file>
 100621c:	e0bffa15 	stw	r2,-24(fp)
    isafs = 1;
 1006220:	00800044 	movi	r2,1
 1006224:	e0bff615 	stw	r2,-40(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 1006228:	e0bffa17 	ldw	r2,-24(fp)
 100622c:	1005003a 	cmpeq	r2,r2,zero
 1006230:	1000311e 	bne	r2,zero,10062f8 <open+0x134>
  {
    if ((index = alt_get_fd (dev)) < 0)
 1006234:	e13ffa17 	ldw	r4,-24(fp)
 1006238:	100887c0 	call	100887c <alt_get_fd>
 100623c:	e0bff815 	stw	r2,-32(fp)
 1006240:	e0bff817 	ldw	r2,-32(fp)
 1006244:	1004403a 	cmpge	r2,r2,zero
 1006248:	1000031e 	bne	r2,zero,1006258 <open+0x94>
    {
      status = index;
 100624c:	e0bff817 	ldw	r2,-32(fp)
 1006250:	e0bff715 	stw	r2,-36(fp)
 1006254:	00002a06 	br	1006300 <open+0x13c>
    }
    else
    {
      fd = &alt_fd_list[index];
 1006258:	e13ff817 	ldw	r4,-32(fp)
 100625c:	01400304 	movi	r5,12
 1006260:	100154c0 	call	100154c <__mulsi3>
 1006264:	1007883a 	mov	r3,r2
 1006268:	00804074 	movhi	r2,257
 100626c:	10927004 	addi	r2,r2,18880
 1006270:	1885883a 	add	r2,r3,r2
 1006274:	e0bff915 	stw	r2,-28(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 1006278:	e0fffc17 	ldw	r3,-16(fp)
 100627c:	00900034 	movhi	r2,16384
 1006280:	10bfffc4 	addi	r2,r2,-1
 1006284:	1886703a 	and	r3,r3,r2
 1006288:	e0bff917 	ldw	r2,-28(fp)
 100628c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 1006290:	e0bff617 	ldw	r2,-40(fp)
 1006294:	1004c03a 	cmpne	r2,r2,zero
 1006298:	1000061e 	bne	r2,zero,10062b4 <open+0xf0>
 100629c:	e13ff917 	ldw	r4,-28(fp)
 10062a0:	10060cc0 	call	10060cc <alt_file_locked>
 10062a4:	e0bff715 	stw	r2,-36(fp)
 10062a8:	e0bff717 	ldw	r2,-36(fp)
 10062ac:	1004803a 	cmplt	r2,r2,zero
 10062b0:	1000131e 	bne	r2,zero,1006300 <open+0x13c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 10062b4:	e0bffa17 	ldw	r2,-24(fp)
 10062b8:	10800317 	ldw	r2,12(r2)
 10062bc:	1005003a 	cmpeq	r2,r2,zero
 10062c0:	1000091e 	bne	r2,zero,10062e8 <open+0x124>
 10062c4:	e0bffa17 	ldw	r2,-24(fp)
 10062c8:	10800317 	ldw	r2,12(r2)
 10062cc:	e13ff917 	ldw	r4,-28(fp)
 10062d0:	e17ffb17 	ldw	r5,-20(fp)
 10062d4:	e1bffc17 	ldw	r6,-16(fp)
 10062d8:	e1fffd17 	ldw	r7,-12(fp)
 10062dc:	103ee83a 	callr	r2
 10062e0:	e0bfff15 	stw	r2,-4(fp)
 10062e4:	00000106 	br	10062ec <open+0x128>
 10062e8:	e03fff15 	stw	zero,-4(fp)
 10062ec:	e0bfff17 	ldw	r2,-4(fp)
 10062f0:	e0bff715 	stw	r2,-36(fp)
 10062f4:	00000206 	br	1006300 <open+0x13c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 10062f8:	00bffb44 	movi	r2,-19
 10062fc:	e0bff715 	stw	r2,-36(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 1006300:	e0bff717 	ldw	r2,-36(fp)
 1006304:	1004403a 	cmpge	r2,r2,zero
 1006308:	1000091e 	bne	r2,zero,1006330 <open+0x16c>
  {
    alt_release_fd (index);  
 100630c:	e13ff817 	ldw	r4,-32(fp)
 1006310:	10065340 	call	1006534 <alt_release_fd>
    ALT_ERRNO = -status;
 1006314:	10063500 	call	1006350 <alt_get_errno>
 1006318:	e0fff717 	ldw	r3,-36(fp)
 100631c:	00c7c83a 	sub	r3,zero,r3
 1006320:	10c00015 	stw	r3,0(r2)
    return -1;
 1006324:	00bfffc4 	movi	r2,-1
 1006328:	e0bffe15 	stw	r2,-8(fp)
 100632c:	00000206 	br	1006338 <open+0x174>
  }
  
  /* return the reference upon success */

  return index;
 1006330:	e0bff817 	ldw	r2,-32(fp)
 1006334:	e0bffe15 	stw	r2,-8(fp)
 1006338:	e0bffe17 	ldw	r2,-8(fp)
}
 100633c:	e037883a 	mov	sp,fp
 1006340:	dfc00117 	ldw	ra,4(sp)
 1006344:	df000017 	ldw	fp,0(sp)
 1006348:	dec00204 	addi	sp,sp,8
 100634c:	f800283a 	ret

01006350 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1006350:	defffd04 	addi	sp,sp,-12
 1006354:	dfc00215 	stw	ra,8(sp)
 1006358:	df000115 	stw	fp,4(sp)
 100635c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1006360:	00804074 	movhi	r2,257
 1006364:	10971104 	addi	r2,r2,23620
 1006368:	10800017 	ldw	r2,0(r2)
 100636c:	1005003a 	cmpeq	r2,r2,zero
 1006370:	1000061e 	bne	r2,zero,100638c <alt_get_errno+0x3c>
 1006374:	00804074 	movhi	r2,257
 1006378:	10971104 	addi	r2,r2,23620
 100637c:	10800017 	ldw	r2,0(r2)
 1006380:	103ee83a 	callr	r2
 1006384:	e0bfff15 	stw	r2,-4(fp)
 1006388:	00000306 	br	1006398 <alt_get_errno+0x48>
 100638c:	00804074 	movhi	r2,257
 1006390:	109dec04 	addi	r2,r2,30640
 1006394:	e0bfff15 	stw	r2,-4(fp)
 1006398:	e0bfff17 	ldw	r2,-4(fp)
}
 100639c:	e037883a 	mov	sp,fp
 10063a0:	dfc00117 	ldw	ra,4(sp)
 10063a4:	df000017 	ldw	fp,0(sp)
 10063a8:	dec00204 	addi	sp,sp,8
 10063ac:	f800283a 	ret

010063b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 10063b0:	defff704 	addi	sp,sp,-36
 10063b4:	dfc00815 	stw	ra,32(sp)
 10063b8:	df000715 	stw	fp,28(sp)
 10063bc:	df000704 	addi	fp,sp,28
 10063c0:	e13ffb15 	stw	r4,-20(fp)
 10063c4:	e17ffc15 	stw	r5,-16(fp)
 10063c8:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 10063cc:	e0bffb17 	ldw	r2,-20(fp)
 10063d0:	1004803a 	cmplt	r2,r2,zero
 10063d4:	1000091e 	bne	r2,zero,10063fc <read+0x4c>
 10063d8:	e13ffb17 	ldw	r4,-20(fp)
 10063dc:	01400304 	movi	r5,12
 10063e0:	100154c0 	call	100154c <__mulsi3>
 10063e4:	1007883a 	mov	r3,r2
 10063e8:	00804074 	movhi	r2,257
 10063ec:	10927004 	addi	r2,r2,18880
 10063f0:	1887883a 	add	r3,r3,r2
 10063f4:	e0ffff15 	stw	r3,-4(fp)
 10063f8:	00000106 	br	1006400 <read+0x50>
 10063fc:	e03fff15 	stw	zero,-4(fp)
 1006400:	e0bfff17 	ldw	r2,-4(fp)
 1006404:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 1006408:	e0bffa17 	ldw	r2,-24(fp)
 100640c:	1005003a 	cmpeq	r2,r2,zero
 1006410:	1000241e 	bne	r2,zero,10064a4 <read+0xf4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 1006414:	e0bffa17 	ldw	r2,-24(fp)
 1006418:	10800217 	ldw	r2,8(r2)
 100641c:	108000cc 	andi	r2,r2,3
 1006420:	10800060 	cmpeqi	r2,r2,1
 1006424:	10001a1e 	bne	r2,zero,1006490 <read+0xe0>
 1006428:	e0bffa17 	ldw	r2,-24(fp)
 100642c:	10800017 	ldw	r2,0(r2)
 1006430:	10800517 	ldw	r2,20(r2)
 1006434:	1005003a 	cmpeq	r2,r2,zero
 1006438:	1000151e 	bne	r2,zero,1006490 <read+0xe0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 100643c:	e0bffa17 	ldw	r2,-24(fp)
 1006440:	10800017 	ldw	r2,0(r2)
 1006444:	10800517 	ldw	r2,20(r2)
 1006448:	e17ffc17 	ldw	r5,-16(fp)
 100644c:	e1bffd17 	ldw	r6,-12(fp)
 1006450:	e13ffa17 	ldw	r4,-24(fp)
 1006454:	103ee83a 	callr	r2
 1006458:	e0bff915 	stw	r2,-28(fp)
 100645c:	e0bff917 	ldw	r2,-28(fp)
 1006460:	1004403a 	cmpge	r2,r2,zero
 1006464:	1000071e 	bne	r2,zero,1006484 <read+0xd4>
        {
          ALT_ERRNO = -rval;
 1006468:	10064d40 	call	10064d4 <alt_get_errno>
 100646c:	e0fff917 	ldw	r3,-28(fp)
 1006470:	00c7c83a 	sub	r3,zero,r3
 1006474:	10c00015 	stw	r3,0(r2)
          return -1;
 1006478:	00bfffc4 	movi	r2,-1
 100647c:	e0bffe15 	stw	r2,-8(fp)
 1006480:	00000e06 	br	10064bc <read+0x10c>
        }
        return rval;
 1006484:	e0bff917 	ldw	r2,-28(fp)
 1006488:	e0bffe15 	stw	r2,-8(fp)
 100648c:	00000b06 	br	10064bc <read+0x10c>
      }
      else
      {
        ALT_ERRNO = EACCES;
 1006490:	10064d40 	call	10064d4 <alt_get_errno>
 1006494:	1007883a 	mov	r3,r2
 1006498:	00800344 	movi	r2,13
 100649c:	18800015 	stw	r2,0(r3)
 10064a0:	00000406 	br	10064b4 <read+0x104>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 10064a4:	10064d40 	call	10064d4 <alt_get_errno>
 10064a8:	1007883a 	mov	r3,r2
 10064ac:	00801444 	movi	r2,81
 10064b0:	18800015 	stw	r2,0(r3)
  }
  return -1;
 10064b4:	00bfffc4 	movi	r2,-1
 10064b8:	e0bffe15 	stw	r2,-8(fp)
 10064bc:	e0bffe17 	ldw	r2,-8(fp)
}
 10064c0:	e037883a 	mov	sp,fp
 10064c4:	dfc00117 	ldw	ra,4(sp)
 10064c8:	df000017 	ldw	fp,0(sp)
 10064cc:	dec00204 	addi	sp,sp,8
 10064d0:	f800283a 	ret

010064d4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 10064d4:	defffd04 	addi	sp,sp,-12
 10064d8:	dfc00215 	stw	ra,8(sp)
 10064dc:	df000115 	stw	fp,4(sp)
 10064e0:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 10064e4:	00804074 	movhi	r2,257
 10064e8:	10971104 	addi	r2,r2,23620
 10064ec:	10800017 	ldw	r2,0(r2)
 10064f0:	1005003a 	cmpeq	r2,r2,zero
 10064f4:	1000061e 	bne	r2,zero,1006510 <alt_get_errno+0x3c>
 10064f8:	00804074 	movhi	r2,257
 10064fc:	10971104 	addi	r2,r2,23620
 1006500:	10800017 	ldw	r2,0(r2)
 1006504:	103ee83a 	callr	r2
 1006508:	e0bfff15 	stw	r2,-4(fp)
 100650c:	00000306 	br	100651c <alt_get_errno+0x48>
 1006510:	00804074 	movhi	r2,257
 1006514:	109dec04 	addi	r2,r2,30640
 1006518:	e0bfff15 	stw	r2,-4(fp)
 100651c:	e0bfff17 	ldw	r2,-4(fp)
}
 1006520:	e037883a 	mov	sp,fp
 1006524:	dfc00117 	ldw	ra,4(sp)
 1006528:	df000017 	ldw	fp,0(sp)
 100652c:	dec00204 	addi	sp,sp,8
 1006530:	f800283a 	ret

01006534 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 1006534:	defffc04 	addi	sp,sp,-16
 1006538:	dfc00315 	stw	ra,12(sp)
 100653c:	df000215 	stw	fp,8(sp)
 1006540:	dc000115 	stw	r16,4(sp)
 1006544:	df000104 	addi	fp,sp,4
 1006548:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 100654c:	e0bfff17 	ldw	r2,-4(fp)
 1006550:	108000d0 	cmplti	r2,r2,3
 1006554:	10000f1e 	bne	r2,zero,1006594 <alt_release_fd+0x60>
  {
    alt_fd_list[fd].fd_flags = 0;
 1006558:	e13fff17 	ldw	r4,-4(fp)
 100655c:	04004074 	movhi	r16,257
 1006560:	84127004 	addi	r16,r16,18880
 1006564:	01400304 	movi	r5,12
 1006568:	100154c0 	call	100154c <__mulsi3>
 100656c:	1405883a 	add	r2,r2,r16
 1006570:	10800204 	addi	r2,r2,8
 1006574:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 1006578:	e13fff17 	ldw	r4,-4(fp)
 100657c:	04004074 	movhi	r16,257
 1006580:	84127004 	addi	r16,r16,18880
 1006584:	01400304 	movi	r5,12
 1006588:	100154c0 	call	100154c <__mulsi3>
 100658c:	1405883a 	add	r2,r2,r16
 1006590:	10000015 	stw	zero,0(r2)
  }
}
 1006594:	e037883a 	mov	sp,fp
 1006598:	dfc00217 	ldw	ra,8(sp)
 100659c:	df000117 	ldw	fp,4(sp)
 10065a0:	dc000017 	ldw	r16,0(sp)
 10065a4:	dec00304 	addi	sp,sp,12
 10065a8:	f800283a 	ret

010065ac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 10065ac:	defff804 	addi	sp,sp,-32
 10065b0:	df000715 	stw	fp,28(sp)
 10065b4:	df000704 	addi	fp,sp,28
 10065b8:	e13ffe15 	stw	r4,-8(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10065bc:	0005303a 	rdctl	r2,status
 10065c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10065c4:	e0fffb17 	ldw	r3,-20(fp)
 10065c8:	00bfff84 	movi	r2,-2
 10065cc:	1884703a 	and	r2,r3,r2
 10065d0:	1001703a 	wrctl	status,r2
  
  return context;
 10065d4:	e0bffb17 	ldw	r2,-20(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 10065d8:	e0bffd15 	stw	r2,-12(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 10065dc:	d0a00a17 	ldw	r2,-32728(gp)
 10065e0:	10c000c4 	addi	r3,r2,3
 10065e4:	00bfff04 	movi	r2,-4
 10065e8:	1884703a 	and	r2,r3,r2
 10065ec:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 10065f0:	d0e00a17 	ldw	r3,-32728(gp)
 10065f4:	e0bffe17 	ldw	r2,-8(fp)
 10065f8:	1887883a 	add	r3,r3,r2
 10065fc:	00806034 	movhi	r2,384
 1006600:	10800004 	addi	r2,r2,0
 1006604:	10c0072e 	bgeu	r2,r3,1006624 <sbrk+0x78>
 1006608:	e0bffd17 	ldw	r2,-12(fp)
 100660c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1006610:	e0bffa17 	ldw	r2,-24(fp)
 1006614:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 1006618:	00bfffc4 	movi	r2,-1
 100661c:	e0bfff15 	stw	r2,-4(fp)
 1006620:	00000c06 	br	1006654 <sbrk+0xa8>
  }
#endif

  prev_heap_end = heap_end; 
 1006624:	d0a00a17 	ldw	r2,-32728(gp)
 1006628:	e0bffc15 	stw	r2,-16(fp)
  heap_end += incr; 
 100662c:	d0e00a17 	ldw	r3,-32728(gp)
 1006630:	e0bffe17 	ldw	r2,-8(fp)
 1006634:	1885883a 	add	r2,r3,r2
 1006638:	d0a00a15 	stw	r2,-32728(gp)
 100663c:	e0bffd17 	ldw	r2,-12(fp)
 1006640:	e0bff915 	stw	r2,-28(fp)
 1006644:	e0bff917 	ldw	r2,-28(fp)
 1006648:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 100664c:	e0bffc17 	ldw	r2,-16(fp)
 1006650:	e0bfff15 	stw	r2,-4(fp)
 1006654:	e0bfff17 	ldw	r2,-4(fp)
} 
 1006658:	e037883a 	mov	sp,fp
 100665c:	df000017 	ldw	fp,0(sp)
 1006660:	dec00104 	addi	sp,sp,4
 1006664:	f800283a 	ret

01006668 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 1006668:	defff704 	addi	sp,sp,-36
 100666c:	dfc00815 	stw	ra,32(sp)
 1006670:	df000715 	stw	fp,28(sp)
 1006674:	df000704 	addi	fp,sp,28
 1006678:	e13ffb15 	stw	r4,-20(fp)
 100667c:	e17ffc15 	stw	r5,-16(fp)
 1006680:	e1bffd15 	stw	r6,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 1006684:	e0bffb17 	ldw	r2,-20(fp)
 1006688:	1004803a 	cmplt	r2,r2,zero
 100668c:	1000091e 	bne	r2,zero,10066b4 <write+0x4c>
 1006690:	e13ffb17 	ldw	r4,-20(fp)
 1006694:	01400304 	movi	r5,12
 1006698:	100154c0 	call	100154c <__mulsi3>
 100669c:	1007883a 	mov	r3,r2
 10066a0:	00804074 	movhi	r2,257
 10066a4:	10927004 	addi	r2,r2,18880
 10066a8:	1887883a 	add	r3,r3,r2
 10066ac:	e0ffff15 	stw	r3,-4(fp)
 10066b0:	00000106 	br	10066b8 <write+0x50>
 10066b4:	e03fff15 	stw	zero,-4(fp)
 10066b8:	e0bfff17 	ldw	r2,-4(fp)
 10066bc:	e0bffa15 	stw	r2,-24(fp)
  
  if (fd)
 10066c0:	e0bffa17 	ldw	r2,-24(fp)
 10066c4:	1005003a 	cmpeq	r2,r2,zero
 10066c8:	1000241e 	bne	r2,zero,100675c <write+0xf4>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 10066cc:	e0bffa17 	ldw	r2,-24(fp)
 10066d0:	10800217 	ldw	r2,8(r2)
 10066d4:	108000cc 	andi	r2,r2,3
 10066d8:	1005003a 	cmpeq	r2,r2,zero
 10066dc:	10001a1e 	bne	r2,zero,1006748 <write+0xe0>
 10066e0:	e0bffa17 	ldw	r2,-24(fp)
 10066e4:	10800017 	ldw	r2,0(r2)
 10066e8:	10800617 	ldw	r2,24(r2)
 10066ec:	1005003a 	cmpeq	r2,r2,zero
 10066f0:	1000151e 	bne	r2,zero,1006748 <write+0xe0>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 10066f4:	e0bffa17 	ldw	r2,-24(fp)
 10066f8:	10800017 	ldw	r2,0(r2)
 10066fc:	10800617 	ldw	r2,24(r2)
 1006700:	e17ffc17 	ldw	r5,-16(fp)
 1006704:	e1bffd17 	ldw	r6,-12(fp)
 1006708:	e13ffa17 	ldw	r4,-24(fp)
 100670c:	103ee83a 	callr	r2
 1006710:	e0bff915 	stw	r2,-28(fp)
 1006714:	e0bff917 	ldw	r2,-28(fp)
 1006718:	1004403a 	cmpge	r2,r2,zero
 100671c:	1000071e 	bne	r2,zero,100673c <write+0xd4>
      {
        ALT_ERRNO = -rval;
 1006720:	100678c0 	call	100678c <alt_get_errno>
 1006724:	e0fff917 	ldw	r3,-28(fp)
 1006728:	00c7c83a 	sub	r3,zero,r3
 100672c:	10c00015 	stw	r3,0(r2)
        return -1;
 1006730:	00bfffc4 	movi	r2,-1
 1006734:	e0bffe15 	stw	r2,-8(fp)
 1006738:	00000e06 	br	1006774 <write+0x10c>
      }
      return rval;
 100673c:	e0bff917 	ldw	r2,-28(fp)
 1006740:	e0bffe15 	stw	r2,-8(fp)
 1006744:	00000b06 	br	1006774 <write+0x10c>
    }
    else
    {
      ALT_ERRNO = EACCES;
 1006748:	100678c0 	call	100678c <alt_get_errno>
 100674c:	1007883a 	mov	r3,r2
 1006750:	00800344 	movi	r2,13
 1006754:	18800015 	stw	r2,0(r3)
 1006758:	00000406 	br	100676c <write+0x104>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 100675c:	100678c0 	call	100678c <alt_get_errno>
 1006760:	1007883a 	mov	r3,r2
 1006764:	00801444 	movi	r2,81
 1006768:	18800015 	stw	r2,0(r3)
  }
  return -1;
 100676c:	00bfffc4 	movi	r2,-1
 1006770:	e0bffe15 	stw	r2,-8(fp)
 1006774:	e0bffe17 	ldw	r2,-8(fp)
}
 1006778:	e037883a 	mov	sp,fp
 100677c:	dfc00117 	ldw	ra,4(sp)
 1006780:	df000017 	ldw	fp,0(sp)
 1006784:	dec00204 	addi	sp,sp,8
 1006788:	f800283a 	ret

0100678c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 100678c:	defffd04 	addi	sp,sp,-12
 1006790:	dfc00215 	stw	ra,8(sp)
 1006794:	df000115 	stw	fp,4(sp)
 1006798:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 100679c:	00804074 	movhi	r2,257
 10067a0:	10971104 	addi	r2,r2,23620
 10067a4:	10800017 	ldw	r2,0(r2)
 10067a8:	1005003a 	cmpeq	r2,r2,zero
 10067ac:	1000061e 	bne	r2,zero,10067c8 <alt_get_errno+0x3c>
 10067b0:	00804074 	movhi	r2,257
 10067b4:	10971104 	addi	r2,r2,23620
 10067b8:	10800017 	ldw	r2,0(r2)
 10067bc:	103ee83a 	callr	r2
 10067c0:	e0bfff15 	stw	r2,-4(fp)
 10067c4:	00000306 	br	10067d4 <alt_get_errno+0x48>
 10067c8:	00804074 	movhi	r2,257
 10067cc:	109dec04 	addi	r2,r2,30640
 10067d0:	e0bfff15 	stw	r2,-4(fp)
 10067d4:	e0bfff17 	ldw	r2,-4(fp)
}
 10067d8:	e037883a 	mov	sp,fp
 10067dc:	dfc00117 	ldw	ra,4(sp)
 10067e0:	df000017 	ldw	fp,0(sp)
 10067e4:	dec00204 	addi	sp,sp,8
 10067e8:	f800283a 	ret

010067ec <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 10067ec:	defffd04 	addi	sp,sp,-12
 10067f0:	dfc00215 	stw	ra,8(sp)
 10067f4:	df000115 	stw	fp,4(sp)
 10067f8:	df000104 	addi	fp,sp,4
 10067fc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 1006800:	1008e1c0 	call	1008e1c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 1006804:	00800044 	movi	r2,1
 1006808:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 100680c:	e037883a 	mov	sp,fp
 1006810:	dfc00117 	ldw	ra,4(sp)
 1006814:	df000017 	ldw	fp,0(sp)
 1006818:	dec00204 	addi	sp,sp,8
 100681c:	f800283a 	ret

01006820 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 1006820:	defffe04 	addi	sp,sp,-8
 1006824:	dfc00115 	stw	ra,4(sp)
 1006828:	df000015 	stw	fp,0(sp)
 100682c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 1006830:	01043804 	movi	r4,4320
 1006834:	000b883a 	mov	r5,zero
 1006838:	018000c4 	movi	r6,3
 100683c:	01c0fa04 	movi	r7,1000
 1006840:	10073fc0 	call	10073fc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 1006844:	01004074 	movhi	r4,257
 1006848:	2112da04 	addi	r4,r4,19304
 100684c:	000b883a 	mov	r5,zero
 1006850:	000d883a 	mov	r6,zero
 1006854:	1006a280 	call	1006a28 <altera_avalon_jtag_uart_init>
 1006858:	01004074 	movhi	r4,257
 100685c:	2112d004 	addi	r4,r4,19264
 1006860:	10068a80 	call	10068a8 <alt_dev_reg>
    ALTERA_HOSTFS_INIT ( ALTERA_HOSTFS, altera_hostfs);
 1006864:	01004074 	movhi	r4,257
 1006868:	2116e804 	addi	r4,r4,23456
 100686c:	10087ec0 	call	10087ec <alt_fs_reg>
    ALTERA_UP_AVALON_CHARACTER_LCD_INIT ( CHARACTER_LCD_0, character_lcd_0);
 1006870:	01004074 	movhi	r4,257
 1006874:	2116f204 	addi	r4,r4,23496
 1006878:	1007ad40 	call	1007ad4 <alt_up_character_lcd_init>
 100687c:	01004074 	movhi	r4,257
 1006880:	2116f204 	addi	r4,r4,23496
 1006884:	10068a80 	call	10068a8 <alt_dev_reg>
    ALTERA_UP_AVALON_RS232_INIT ( RS232_0, rs232_0);
 1006888:	01004074 	movhi	r4,257
 100688c:	2116fd04 	addi	r4,r4,23540
 1006890:	10068a80 	call	10068a8 <alt_dev_reg>
}
 1006894:	e037883a 	mov	sp,fp
 1006898:	dfc00117 	ldw	ra,4(sp)
 100689c:	df000017 	ldw	fp,0(sp)
 10068a0:	dec00204 	addi	sp,sp,8
 10068a4:	f800283a 	ret

010068a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 10068a8:	defffd04 	addi	sp,sp,-12
 10068ac:	dfc00215 	stw	ra,8(sp)
 10068b0:	df000115 	stw	fp,4(sp)
 10068b4:	df000104 	addi	fp,sp,4
 10068b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 10068bc:	e13fff17 	ldw	r4,-4(fp)
 10068c0:	01404074 	movhi	r5,257
 10068c4:	29570e04 	addi	r5,r5,23608
 10068c8:	100845c0 	call	100845c <alt_dev_llist_insert>
}
 10068cc:	e037883a 	mov	sp,fp
 10068d0:	dfc00117 	ldw	ra,4(sp)
 10068d4:	df000017 	ldw	fp,0(sp)
 10068d8:	dec00204 	addi	sp,sp,8
 10068dc:	f800283a 	ret

010068e0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 10068e0:	defffa04 	addi	sp,sp,-24
 10068e4:	dfc00515 	stw	ra,20(sp)
 10068e8:	df000415 	stw	fp,16(sp)
 10068ec:	df000404 	addi	fp,sp,16
 10068f0:	e13ffd15 	stw	r4,-12(fp)
 10068f4:	e17ffe15 	stw	r5,-8(fp)
 10068f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10068fc:	e0bffd17 	ldw	r2,-12(fp)
 1006900:	10800017 	ldw	r2,0(r2)
 1006904:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 1006908:	e0bffc17 	ldw	r2,-16(fp)
 100690c:	11000a04 	addi	r4,r2,40
 1006910:	e0bffd17 	ldw	r2,-12(fp)
 1006914:	11c00217 	ldw	r7,8(r2)
 1006918:	e17ffe17 	ldw	r5,-8(fp)
 100691c:	e1bfff17 	ldw	r6,-4(fp)
 1006920:	1006f240 	call	1006f24 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 1006924:	e037883a 	mov	sp,fp
 1006928:	dfc00117 	ldw	ra,4(sp)
 100692c:	df000017 	ldw	fp,0(sp)
 1006930:	dec00204 	addi	sp,sp,8
 1006934:	f800283a 	ret

01006938 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 1006938:	defffa04 	addi	sp,sp,-24
 100693c:	dfc00515 	stw	ra,20(sp)
 1006940:	df000415 	stw	fp,16(sp)
 1006944:	df000404 	addi	fp,sp,16
 1006948:	e13ffd15 	stw	r4,-12(fp)
 100694c:	e17ffe15 	stw	r5,-8(fp)
 1006950:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 1006954:	e0bffd17 	ldw	r2,-12(fp)
 1006958:	10800017 	ldw	r2,0(r2)
 100695c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 1006960:	e0bffc17 	ldw	r2,-16(fp)
 1006964:	11000a04 	addi	r4,r2,40
 1006968:	e0bffd17 	ldw	r2,-12(fp)
 100696c:	11c00217 	ldw	r7,8(r2)
 1006970:	e17ffe17 	ldw	r5,-8(fp)
 1006974:	e1bfff17 	ldw	r6,-4(fp)
 1006978:	10071480 	call	1007148 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 100697c:	e037883a 	mov	sp,fp
 1006980:	dfc00117 	ldw	ra,4(sp)
 1006984:	df000017 	ldw	fp,0(sp)
 1006988:	dec00204 	addi	sp,sp,8
 100698c:	f800283a 	ret

01006990 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 1006990:	defffc04 	addi	sp,sp,-16
 1006994:	dfc00315 	stw	ra,12(sp)
 1006998:	df000215 	stw	fp,8(sp)
 100699c:	df000204 	addi	fp,sp,8
 10069a0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 10069a4:	e0bfff17 	ldw	r2,-4(fp)
 10069a8:	10800017 	ldw	r2,0(r2)
 10069ac:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 10069b0:	e0bffe17 	ldw	r2,-8(fp)
 10069b4:	11000a04 	addi	r4,r2,40
 10069b8:	e0bfff17 	ldw	r2,-4(fp)
 10069bc:	11400217 	ldw	r5,8(r2)
 10069c0:	1006dbc0 	call	1006dbc <altera_avalon_jtag_uart_close>
}
 10069c4:	e037883a 	mov	sp,fp
 10069c8:	dfc00117 	ldw	ra,4(sp)
 10069cc:	df000017 	ldw	fp,0(sp)
 10069d0:	dec00204 	addi	sp,sp,8
 10069d4:	f800283a 	ret

010069d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 10069d8:	defffa04 	addi	sp,sp,-24
 10069dc:	dfc00515 	stw	ra,20(sp)
 10069e0:	df000415 	stw	fp,16(sp)
 10069e4:	df000404 	addi	fp,sp,16
 10069e8:	e13ffd15 	stw	r4,-12(fp)
 10069ec:	e17ffe15 	stw	r5,-8(fp)
 10069f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 10069f4:	e0bffd17 	ldw	r2,-12(fp)
 10069f8:	10800017 	ldw	r2,0(r2)
 10069fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 1006a00:	e0bffc17 	ldw	r2,-16(fp)
 1006a04:	11000a04 	addi	r4,r2,40
 1006a08:	e17ffe17 	ldw	r5,-8(fp)
 1006a0c:	e1bfff17 	ldw	r6,-4(fp)
 1006a10:	1006e300 	call	1006e30 <altera_avalon_jtag_uart_ioctl>
}
 1006a14:	e037883a 	mov	sp,fp
 1006a18:	dfc00117 	ldw	ra,4(sp)
 1006a1c:	df000017 	ldw	fp,0(sp)
 1006a20:	dec00204 	addi	sp,sp,8
 1006a24:	f800283a 	ret

01006a28 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 1006a28:	defffb04 	addi	sp,sp,-20
 1006a2c:	dfc00415 	stw	ra,16(sp)
 1006a30:	df000315 	stw	fp,12(sp)
 1006a34:	df000304 	addi	fp,sp,12
 1006a38:	e13ffd15 	stw	r4,-12(fp)
 1006a3c:	e17ffe15 	stw	r5,-8(fp)
 1006a40:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1006a44:	e0fffd17 	ldw	r3,-12(fp)
 1006a48:	00800044 	movi	r2,1
 1006a4c:	18800815 	stw	r2,32(r3)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 1006a50:	e0bffd17 	ldw	r2,-12(fp)
 1006a54:	10800017 	ldw	r2,0(r2)
 1006a58:	11000104 	addi	r4,r2,4
 1006a5c:	e0bffd17 	ldw	r2,-12(fp)
 1006a60:	10800817 	ldw	r2,32(r2)
 1006a64:	1007883a 	mov	r3,r2
 1006a68:	2005883a 	mov	r2,r4
 1006a6c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
                      sp, NULL);
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
 1006a70:	e13fff17 	ldw	r4,-4(fp)
 1006a74:	e17ffd17 	ldw	r5,-12(fp)
 1006a78:	01804034 	movhi	r6,256
 1006a7c:	319ab804 	addi	r6,r6,27360
 1006a80:	1008ab80 	call	1008ab8 <alt_irq_register>
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 1006a84:	e0bffd17 	ldw	r2,-12(fp)
 1006a88:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 1006a8c:	e0bffd17 	ldw	r2,-12(fp)
 1006a90:	11000204 	addi	r4,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 1006a94:	00804074 	movhi	r2,257
 1006a98:	109df404 	addi	r2,r2,30672
 1006a9c:	10800017 	ldw	r2,0(r2)
 1006aa0:	100b883a 	mov	r5,r2
 1006aa4:	01804034 	movhi	r6,256
 1006aa8:	319b4304 	addi	r6,r6,27916
 1006aac:	e1fffd17 	ldw	r7,-12(fp)
 1006ab0:	10082ec0 	call	10082ec <alt_alarm_start>
 1006ab4:	1004403a 	cmpge	r2,r2,zero
 1006ab8:	1000041e 	bne	r2,zero,1006acc <altera_avalon_jtag_uart_init+0xa4>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 1006abc:	e0fffd17 	ldw	r3,-12(fp)
 1006ac0:	00a00034 	movhi	r2,32768
 1006ac4:	10bfffc4 	addi	r2,r2,-1
 1006ac8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 1006acc:	e037883a 	mov	sp,fp
 1006ad0:	dfc00117 	ldw	ra,4(sp)
 1006ad4:	df000017 	ldw	fp,0(sp)
 1006ad8:	dec00204 	addi	sp,sp,8
 1006adc:	f800283a 	ret

01006ae0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 1006ae0:	defff704 	addi	sp,sp,-36
 1006ae4:	df000815 	stw	fp,32(sp)
 1006ae8:	df000804 	addi	fp,sp,32
 1006aec:	e13ffe15 	stw	r4,-8(fp)
 1006af0:	e17fff15 	stw	r5,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 1006af4:	e0bffe17 	ldw	r2,-8(fp)
 1006af8:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 1006afc:	e0bffd17 	ldw	r2,-12(fp)
 1006b00:	10800017 	ldw	r2,0(r2)
 1006b04:	e0bffc15 	stw	r2,-16(fp)
 1006b08:	00000006 	br	1006b0c <altera_avalon_jtag_uart_irq+0x2c>
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1006b0c:	e0bffc17 	ldw	r2,-16(fp)
 1006b10:	10800104 	addi	r2,r2,4
 1006b14:	10800037 	ldwio	r2,0(r2)
 1006b18:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 1006b1c:	e0bffb17 	ldw	r2,-20(fp)
 1006b20:	1080c00c 	andi	r2,r2,768
 1006b24:	1005003a 	cmpeq	r2,r2,zero
 1006b28:	1000741e 	bne	r2,zero,1006cfc <altera_avalon_jtag_uart_irq+0x21c>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 1006b2c:	e0bffb17 	ldw	r2,-20(fp)
 1006b30:	1080400c 	andi	r2,r2,256
 1006b34:	1005003a 	cmpeq	r2,r2,zero
 1006b38:	1000351e 	bne	r2,zero,1006c10 <altera_avalon_jtag_uart_irq+0x130>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 1006b3c:	00800074 	movhi	r2,1
 1006b40:	e0bffa15 	stw	r2,-24(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1006b44:	e0bffd17 	ldw	r2,-12(fp)
 1006b48:	10800a17 	ldw	r2,40(r2)
 1006b4c:	10800044 	addi	r2,r2,1
 1006b50:	1081ffcc 	andi	r2,r2,2047
 1006b54:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 1006b58:	e0bffd17 	ldw	r2,-12(fp)
 1006b5c:	10c00b17 	ldw	r3,44(r2)
 1006b60:	e0bff917 	ldw	r2,-28(fp)
 1006b64:	18801626 	beq	r3,r2,1006bc0 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 1006b68:	e0bffc17 	ldw	r2,-16(fp)
 1006b6c:	10800037 	ldwio	r2,0(r2)
 1006b70:	e0bffa15 	stw	r2,-24(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 1006b74:	e0bffa17 	ldw	r2,-24(fp)
 1006b78:	10a0000c 	andi	r2,r2,32768
 1006b7c:	1005003a 	cmpeq	r2,r2,zero
 1006b80:	10000f1e 	bne	r2,zero,1006bc0 <altera_avalon_jtag_uart_irq+0xe0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 1006b84:	e0bffd17 	ldw	r2,-12(fp)
 1006b88:	10c00a17 	ldw	r3,40(r2)
 1006b8c:	e0bffa17 	ldw	r2,-24(fp)
 1006b90:	1009883a 	mov	r4,r2
 1006b94:	e0bffd17 	ldw	r2,-12(fp)
 1006b98:	1885883a 	add	r2,r3,r2
 1006b9c:	10800e04 	addi	r2,r2,56
 1006ba0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1006ba4:	e0bffd17 	ldw	r2,-12(fp)
 1006ba8:	10800a17 	ldw	r2,40(r2)
 1006bac:	10800044 	addi	r2,r2,1
 1006bb0:	10c1ffcc 	andi	r3,r2,2047
 1006bb4:	e0bffd17 	ldw	r2,-12(fp)
 1006bb8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 1006bbc:	003fe106 	br	1006b44 <altera_avalon_jtag_uart_irq+0x64>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 1006bc0:	e0bffa17 	ldw	r2,-24(fp)
 1006bc4:	10bfffec 	andhi	r2,r2,65535
 1006bc8:	1005003a 	cmpeq	r2,r2,zero
 1006bcc:	1000101e 	bne	r2,zero,1006c10 <altera_avalon_jtag_uart_irq+0x130>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 1006bd0:	e0bffd17 	ldw	r2,-12(fp)
 1006bd4:	10c00817 	ldw	r3,32(r2)
 1006bd8:	00bfff84 	movi	r2,-2
 1006bdc:	1886703a 	and	r3,r3,r2
 1006be0:	e0bffd17 	ldw	r2,-12(fp)
 1006be4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 1006be8:	e0bffc17 	ldw	r2,-16(fp)
 1006bec:	11000104 	addi	r4,r2,4
 1006bf0:	e0bffd17 	ldw	r2,-12(fp)
 1006bf4:	10800817 	ldw	r2,32(r2)
 1006bf8:	1007883a 	mov	r3,r2
 1006bfc:	2005883a 	mov	r2,r4
 1006c00:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1006c04:	e0bffc17 	ldw	r2,-16(fp)
 1006c08:	10800104 	addi	r2,r2,4
 1006c0c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 1006c10:	e0bffb17 	ldw	r2,-20(fp)
 1006c14:	1080800c 	andi	r2,r2,512
 1006c18:	1005003a 	cmpeq	r2,r2,zero
 1006c1c:	103fbb1e 	bne	r2,zero,1006b0c <altera_avalon_jtag_uart_irq+0x2c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 1006c20:	e0bffb17 	ldw	r2,-20(fp)
 1006c24:	10bfffec 	andhi	r2,r2,65535
 1006c28:	1004d43a 	srli	r2,r2,16
 1006c2c:	e0bff815 	stw	r2,-32(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 1006c30:	00001506 	br	1006c88 <altera_avalon_jtag_uart_irq+0x1a8>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 1006c34:	e13ffc17 	ldw	r4,-16(fp)
 1006c38:	e0bffd17 	ldw	r2,-12(fp)
 1006c3c:	10c00d17 	ldw	r3,52(r2)
 1006c40:	e0bffd17 	ldw	r2,-12(fp)
 1006c44:	1885883a 	add	r2,r3,r2
 1006c48:	10820e04 	addi	r2,r2,2104
 1006c4c:	10800003 	ldbu	r2,0(r2)
 1006c50:	10c03fcc 	andi	r3,r2,255
 1006c54:	18c0201c 	xori	r3,r3,128
 1006c58:	18ffe004 	addi	r3,r3,-128
 1006c5c:	2005883a 	mov	r2,r4
 1006c60:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1006c64:	e0bffd17 	ldw	r2,-12(fp)
 1006c68:	10800d17 	ldw	r2,52(r2)
 1006c6c:	10800044 	addi	r2,r2,1
 1006c70:	10c1ffcc 	andi	r3,r2,2047
 1006c74:	e0bffd17 	ldw	r2,-12(fp)
 1006c78:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 1006c7c:	e0bff817 	ldw	r2,-32(fp)
 1006c80:	10bfffc4 	addi	r2,r2,-1
 1006c84:	e0bff815 	stw	r2,-32(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 1006c88:	e0bff817 	ldw	r2,-32(fp)
 1006c8c:	1005003a 	cmpeq	r2,r2,zero
 1006c90:	1000051e 	bne	r2,zero,1006ca8 <altera_avalon_jtag_uart_irq+0x1c8>
 1006c94:	e0bffd17 	ldw	r2,-12(fp)
 1006c98:	10c00d17 	ldw	r3,52(r2)
 1006c9c:	e0bffd17 	ldw	r2,-12(fp)
 1006ca0:	10800c17 	ldw	r2,48(r2)
 1006ca4:	18bfe31e 	bne	r3,r2,1006c34 <altera_avalon_jtag_uart_irq+0x154>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 1006ca8:	e0bff817 	ldw	r2,-32(fp)
 1006cac:	1005003a 	cmpeq	r2,r2,zero
 1006cb0:	103f961e 	bne	r2,zero,1006b0c <altera_avalon_jtag_uart_irq+0x2c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 1006cb4:	e0bffd17 	ldw	r2,-12(fp)
 1006cb8:	10c00817 	ldw	r3,32(r2)
 1006cbc:	00bfff44 	movi	r2,-3
 1006cc0:	1886703a 	and	r3,r3,r2
 1006cc4:	e0bffd17 	ldw	r2,-12(fp)
 1006cc8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 1006ccc:	e0bffd17 	ldw	r2,-12(fp)
 1006cd0:	10800017 	ldw	r2,0(r2)
 1006cd4:	11000104 	addi	r4,r2,4
 1006cd8:	e0bffd17 	ldw	r2,-12(fp)
 1006cdc:	10800817 	ldw	r2,32(r2)
 1006ce0:	1007883a 	mov	r3,r2
 1006ce4:	2005883a 	mov	r2,r4
 1006ce8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 1006cec:	e0bffc17 	ldw	r2,-16(fp)
 1006cf0:	10800104 	addi	r2,r2,4
 1006cf4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 1006cf8:	003f8406 	br	1006b0c <altera_avalon_jtag_uart_irq+0x2c>
}
 1006cfc:	e037883a 	mov	sp,fp
 1006d00:	df000017 	ldw	fp,0(sp)
 1006d04:	dec00104 	addi	sp,sp,4
 1006d08:	f800283a 	ret

01006d0c <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 1006d0c:	defffc04 	addi	sp,sp,-16
 1006d10:	df000315 	stw	fp,12(sp)
 1006d14:	df000304 	addi	fp,sp,12
 1006d18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 1006d1c:	e0bfff17 	ldw	r2,-4(fp)
 1006d20:	e0bffe15 	stw	r2,-8(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 1006d24:	e0bffe17 	ldw	r2,-8(fp)
 1006d28:	10800017 	ldw	r2,0(r2)
 1006d2c:	10800104 	addi	r2,r2,4
 1006d30:	10800037 	ldwio	r2,0(r2)
 1006d34:	e0bffd15 	stw	r2,-12(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 1006d38:	e0bffd17 	ldw	r2,-12(fp)
 1006d3c:	1081000c 	andi	r2,r2,1024
 1006d40:	1005003a 	cmpeq	r2,r2,zero
 1006d44:	10000c1e 	bne	r2,zero,1006d78 <altera_avalon_jtag_uart_timeout+0x6c>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 1006d48:	e0bffe17 	ldw	r2,-8(fp)
 1006d4c:	10800017 	ldw	r2,0(r2)
 1006d50:	11000104 	addi	r4,r2,4
 1006d54:	e0bffe17 	ldw	r2,-8(fp)
 1006d58:	10800817 	ldw	r2,32(r2)
 1006d5c:	10810014 	ori	r2,r2,1024
 1006d60:	1007883a 	mov	r3,r2
 1006d64:	2005883a 	mov	r2,r4
 1006d68:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 1006d6c:	e0bffe17 	ldw	r2,-8(fp)
 1006d70:	10000915 	stw	zero,36(r2)
 1006d74:	00000a06 	br	1006da0 <altera_avalon_jtag_uart_timeout+0x94>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 1006d78:	e0bffe17 	ldw	r2,-8(fp)
 1006d7c:	10c00917 	ldw	r3,36(r2)
 1006d80:	00a00034 	movhi	r2,32768
 1006d84:	10bfff04 	addi	r2,r2,-4
 1006d88:	10c00536 	bltu	r2,r3,1006da0 <altera_avalon_jtag_uart_timeout+0x94>
    sp->host_inactive++;
 1006d8c:	e0bffe17 	ldw	r2,-8(fp)
 1006d90:	10800917 	ldw	r2,36(r2)
 1006d94:	10c00044 	addi	r3,r2,1
 1006d98:	e0bffe17 	ldw	r2,-8(fp)
 1006d9c:	10c00915 	stw	r3,36(r2)
 1006da0:	00804074 	movhi	r2,257
 1006da4:	109df404 	addi	r2,r2,30672
 1006da8:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 1006dac:	e037883a 	mov	sp,fp
 1006db0:	df000017 	ldw	fp,0(sp)
 1006db4:	dec00104 	addi	sp,sp,4
 1006db8:	f800283a 	ret

01006dbc <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 1006dbc:	defffc04 	addi	sp,sp,-16
 1006dc0:	df000315 	stw	fp,12(sp)
 1006dc4:	df000304 	addi	fp,sp,12
 1006dc8:	e13ffd15 	stw	r4,-12(fp)
 1006dcc:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1006dd0:	00000706 	br	1006df0 <altera_avalon_jtag_uart_close+0x34>
    if (flags & O_NONBLOCK) {
 1006dd4:	e0bffe17 	ldw	r2,-8(fp)
 1006dd8:	1090000c 	andi	r2,r2,16384
 1006ddc:	1005003a 	cmpeq	r2,r2,zero
 1006de0:	1000031e 	bne	r2,zero,1006df0 <altera_avalon_jtag_uart_close+0x34>
      return -EWOULDBLOCK; 
 1006de4:	00bffd44 	movi	r2,-11
 1006de8:	e0bfff15 	stw	r2,-4(fp)
 1006dec:	00000b06 	br	1006e1c <altera_avalon_jtag_uart_close+0x60>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 1006df0:	e0bffd17 	ldw	r2,-12(fp)
 1006df4:	10c00d17 	ldw	r3,52(r2)
 1006df8:	e0bffd17 	ldw	r2,-12(fp)
 1006dfc:	10800c17 	ldw	r2,48(r2)
 1006e00:	18800526 	beq	r3,r2,1006e18 <altera_avalon_jtag_uart_close+0x5c>
 1006e04:	e0bffd17 	ldw	r2,-12(fp)
 1006e08:	10c00917 	ldw	r3,36(r2)
 1006e0c:	e0bffd17 	ldw	r2,-12(fp)
 1006e10:	10800117 	ldw	r2,4(r2)
 1006e14:	18bfef36 	bltu	r3,r2,1006dd4 <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 1006e18:	e03fff15 	stw	zero,-4(fp)
 1006e1c:	e0bfff17 	ldw	r2,-4(fp)
}
 1006e20:	e037883a 	mov	sp,fp
 1006e24:	df000017 	ldw	fp,0(sp)
 1006e28:	dec00104 	addi	sp,sp,4
 1006e2c:	f800283a 	ret

01006e30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 1006e30:	defff804 	addi	sp,sp,-32
 1006e34:	df000715 	stw	fp,28(sp)
 1006e38:	df000704 	addi	fp,sp,28
 1006e3c:	e13ffb15 	stw	r4,-20(fp)
 1006e40:	e17ffc15 	stw	r5,-16(fp)
 1006e44:	e1bffd15 	stw	r6,-12(fp)
  int rc = -ENOTTY;
 1006e48:	00bff9c4 	movi	r2,-25
 1006e4c:	e0bffa15 	stw	r2,-24(fp)

  switch (req)
 1006e50:	e0bffc17 	ldw	r2,-16(fp)
 1006e54:	e0bfff15 	stw	r2,-4(fp)
 1006e58:	e0ffff17 	ldw	r3,-4(fp)
 1006e5c:	189a8060 	cmpeqi	r2,r3,27137
 1006e60:	1000041e 	bne	r2,zero,1006e74 <altera_avalon_jtag_uart_ioctl+0x44>
 1006e64:	e0ffff17 	ldw	r3,-4(fp)
 1006e68:	189a80a0 	cmpeqi	r2,r3,27138
 1006e6c:	10001b1e 	bne	r2,zero,1006edc <altera_avalon_jtag_uart_ioctl+0xac>
 1006e70:	00002706 	br	1006f10 <altera_avalon_jtag_uart_ioctl+0xe0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 1006e74:	e0bffb17 	ldw	r2,-20(fp)
 1006e78:	10c00117 	ldw	r3,4(r2)
 1006e7c:	00a00034 	movhi	r2,32768
 1006e80:	10bfffc4 	addi	r2,r2,-1
 1006e84:	18802226 	beq	r3,r2,1006f10 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
 1006e88:	e0bffd17 	ldw	r2,-12(fp)
 1006e8c:	10800017 	ldw	r2,0(r2)
 1006e90:	e0bff915 	stw	r2,-28(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 1006e94:	e0bff917 	ldw	r2,-28(fp)
 1006e98:	10800090 	cmplti	r2,r2,2
 1006e9c:	1000071e 	bne	r2,zero,1006ebc <altera_avalon_jtag_uart_ioctl+0x8c>
 1006ea0:	e0fff917 	ldw	r3,-28(fp)
 1006ea4:	00a00034 	movhi	r2,32768
 1006ea8:	10bfffc4 	addi	r2,r2,-1
 1006eac:	18800326 	beq	r3,r2,1006ebc <altera_avalon_jtag_uart_ioctl+0x8c>
 1006eb0:	e0bff917 	ldw	r2,-28(fp)
 1006eb4:	e0bffe15 	stw	r2,-8(fp)
 1006eb8:	00000306 	br	1006ec8 <altera_avalon_jtag_uart_ioctl+0x98>
 1006ebc:	00e00034 	movhi	r3,32768
 1006ec0:	18ffff84 	addi	r3,r3,-2
 1006ec4:	e0fffe15 	stw	r3,-8(fp)
 1006ec8:	e0bffb17 	ldw	r2,-20(fp)
 1006ecc:	e0fffe17 	ldw	r3,-8(fp)
 1006ed0:	10c00115 	stw	r3,4(r2)
      rc = 0;
 1006ed4:	e03ffa15 	stw	zero,-24(fp)
    }
    break;
 1006ed8:	00000d06 	br	1006f10 <altera_avalon_jtag_uart_ioctl+0xe0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 1006edc:	e0bffb17 	ldw	r2,-20(fp)
 1006ee0:	10c00117 	ldw	r3,4(r2)
 1006ee4:	00a00034 	movhi	r2,32768
 1006ee8:	10bfffc4 	addi	r2,r2,-1
 1006eec:	18800826 	beq	r3,r2,1006f10 <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 1006ef0:	e13ffd17 	ldw	r4,-12(fp)
 1006ef4:	e0bffb17 	ldw	r2,-20(fp)
 1006ef8:	10c00917 	ldw	r3,36(r2)
 1006efc:	e0bffb17 	ldw	r2,-20(fp)
 1006f00:	10800117 	ldw	r2,4(r2)
 1006f04:	1885803a 	cmpltu	r2,r3,r2
 1006f08:	20800015 	stw	r2,0(r4)
      rc = 0;
 1006f0c:	e03ffa15 	stw	zero,-24(fp)

  default:
    break;
  }

  return rc;
 1006f10:	e0bffa17 	ldw	r2,-24(fp)
}
 1006f14:	e037883a 	mov	sp,fp
 1006f18:	df000017 	ldw	fp,0(sp)
 1006f1c:	dec00104 	addi	sp,sp,4
 1006f20:	f800283a 	ret

01006f24 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 1006f24:	defff204 	addi	sp,sp,-56
 1006f28:	dfc00d15 	stw	ra,52(sp)
 1006f2c:	df000c15 	stw	fp,48(sp)
 1006f30:	df000c04 	addi	fp,sp,48
 1006f34:	e13ffb15 	stw	r4,-20(fp)
 1006f38:	e17ffc15 	stw	r5,-16(fp)
 1006f3c:	e1bffd15 	stw	r6,-12(fp)
 1006f40:	e1fffe15 	stw	r7,-8(fp)
  char * ptr = buffer;
 1006f44:	e0bffc17 	ldw	r2,-16(fp)
 1006f48:	e0bffa15 	stw	r2,-24(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1006f4c:	00004806 	br	1007070 <altera_avalon_jtag_uart_read+0x14c>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 1006f50:	e0bffb17 	ldw	r2,-20(fp)
 1006f54:	10800a17 	ldw	r2,40(r2)
 1006f58:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 1006f5c:	e0bffb17 	ldw	r2,-20(fp)
 1006f60:	10800b17 	ldw	r2,44(r2)
 1006f64:	e0bff615 	stw	r2,-40(fp)

      if (in >= out)
 1006f68:	e0fff717 	ldw	r3,-36(fp)
 1006f6c:	e0bff617 	ldw	r2,-40(fp)
 1006f70:	18800536 	bltu	r3,r2,1006f88 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 1006f74:	e0bff717 	ldw	r2,-36(fp)
 1006f78:	e0fff617 	ldw	r3,-40(fp)
 1006f7c:	10c5c83a 	sub	r2,r2,r3
 1006f80:	e0bff815 	stw	r2,-32(fp)
 1006f84:	00000406 	br	1006f98 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 1006f88:	00820004 	movi	r2,2048
 1006f8c:	e0fff617 	ldw	r3,-40(fp)
 1006f90:	10c5c83a 	sub	r2,r2,r3
 1006f94:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 1006f98:	e0bff817 	ldw	r2,-32(fp)
 1006f9c:	1005003a 	cmpeq	r2,r2,zero
 1006fa0:	10001f1e 	bne	r2,zero,1007020 <altera_avalon_jtag_uart_read+0xfc>
        break; /* No more data available */

      if (n > space)
 1006fa4:	e0fffd17 	ldw	r3,-12(fp)
 1006fa8:	e0bff817 	ldw	r2,-32(fp)
 1006fac:	1880022e 	bgeu	r3,r2,1006fb8 <altera_avalon_jtag_uart_read+0x94>
        n = space;
 1006fb0:	e0bffd17 	ldw	r2,-12(fp)
 1006fb4:	e0bff815 	stw	r2,-32(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 1006fb8:	e0bffb17 	ldw	r2,-20(fp)
 1006fbc:	10c00e04 	addi	r3,r2,56
 1006fc0:	e0bff617 	ldw	r2,-40(fp)
 1006fc4:	1887883a 	add	r3,r3,r2
 1006fc8:	e0bffa17 	ldw	r2,-24(fp)
 1006fcc:	1009883a 	mov	r4,r2
 1006fd0:	180b883a 	mov	r5,r3
 1006fd4:	e1bff817 	ldw	r6,-32(fp)
 1006fd8:	10035180 	call	1003518 <memcpy>
      ptr   += n;
 1006fdc:	e0fff817 	ldw	r3,-32(fp)
 1006fe0:	e0bffa17 	ldw	r2,-24(fp)
 1006fe4:	10c5883a 	add	r2,r2,r3
 1006fe8:	e0bffa15 	stw	r2,-24(fp)
      space -= n;
 1006fec:	e0fffd17 	ldw	r3,-12(fp)
 1006ff0:	e0bff817 	ldw	r2,-32(fp)
 1006ff4:	1885c83a 	sub	r2,r3,r2
 1006ff8:	e0bffd15 	stw	r2,-12(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1006ffc:	e0fff617 	ldw	r3,-40(fp)
 1007000:	e0bff817 	ldw	r2,-32(fp)
 1007004:	1885883a 	add	r2,r3,r2
 1007008:	10c1ffcc 	andi	r3,r2,2047
 100700c:	e0bffb17 	ldw	r2,-20(fp)
 1007010:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 1007014:	e0bffd17 	ldw	r2,-12(fp)
 1007018:	10800048 	cmpgei	r2,r2,1
 100701c:	103fcc1e 	bne	r2,zero,1006f50 <altera_avalon_jtag_uart_read+0x2c>

    /* If we read any data then return it */
    if (ptr != buffer)
 1007020:	e0fffa17 	ldw	r3,-24(fp)
 1007024:	e0bffc17 	ldw	r2,-16(fp)
 1007028:	1880141e 	bne	r3,r2,100707c <altera_avalon_jtag_uart_read+0x158>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 100702c:	e0bffe17 	ldw	r2,-8(fp)
 1007030:	1090000c 	andi	r2,r2,16384
 1007034:	1004c03a 	cmpne	r2,r2,zero
 1007038:	1000101e 	bne	r2,zero,100707c <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 100703c:	e0bffb17 	ldw	r2,-20(fp)
 1007040:	10c00a17 	ldw	r3,40(r2)
 1007044:	e0bff717 	ldw	r2,-36(fp)
 1007048:	1880051e 	bne	r3,r2,1007060 <altera_avalon_jtag_uart_read+0x13c>
 100704c:	e0bffb17 	ldw	r2,-20(fp)
 1007050:	10c00917 	ldw	r3,36(r2)
 1007054:	e0bffb17 	ldw	r2,-20(fp)
 1007058:	10800117 	ldw	r2,4(r2)
 100705c:	18bff736 	bltu	r3,r2,100703c <altera_avalon_jtag_uart_read+0x118>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 1007060:	e0bffb17 	ldw	r2,-20(fp)
 1007064:	10c00a17 	ldw	r3,40(r2)
 1007068:	e0bff717 	ldw	r2,-36(fp)
 100706c:	18800326 	beq	r3,r2,100707c <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 1007070:	e0bffd17 	ldw	r2,-12(fp)
 1007074:	10800048 	cmpgei	r2,r2,1
 1007078:	103fb51e 	bne	r2,zero,1006f50 <altera_avalon_jtag_uart_read+0x2c>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 100707c:	e0fffa17 	ldw	r3,-24(fp)
 1007080:	e0bffc17 	ldw	r2,-16(fp)
 1007084:	18801926 	beq	r3,r2,10070ec <altera_avalon_jtag_uart_read+0x1c8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1007088:	0005303a 	rdctl	r2,status
 100708c:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007090:	e0fff517 	ldw	r3,-44(fp)
 1007094:	00bfff84 	movi	r2,-2
 1007098:	1884703a 	and	r2,r3,r2
 100709c:	1001703a 	wrctl	status,r2
  
  return context;
 10070a0:	e0bff517 	ldw	r2,-44(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 10070a4:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 10070a8:	e0bffb17 	ldw	r2,-20(fp)
 10070ac:	10800817 	ldw	r2,32(r2)
 10070b0:	10c00054 	ori	r3,r2,1
 10070b4:	e0bffb17 	ldw	r2,-20(fp)
 10070b8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10070bc:	e0bffb17 	ldw	r2,-20(fp)
 10070c0:	10800017 	ldw	r2,0(r2)
 10070c4:	11000104 	addi	r4,r2,4
 10070c8:	e0bffb17 	ldw	r2,-20(fp)
 10070cc:	10800817 	ldw	r2,32(r2)
 10070d0:	1007883a 	mov	r3,r2
 10070d4:	2005883a 	mov	r2,r4
 10070d8:	10c00035 	stwio	r3,0(r2)
 10070dc:	e0bff917 	ldw	r2,-28(fp)
 10070e0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10070e4:	e0bff417 	ldw	r2,-48(fp)
 10070e8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 10070ec:	e0fffa17 	ldw	r3,-24(fp)
 10070f0:	e0bffc17 	ldw	r2,-16(fp)
 10070f4:	18800526 	beq	r3,r2,100710c <altera_avalon_jtag_uart_read+0x1e8>
    return ptr - buffer;
 10070f8:	e0fffa17 	ldw	r3,-24(fp)
 10070fc:	e0bffc17 	ldw	r2,-16(fp)
 1007100:	1887c83a 	sub	r3,r3,r2
 1007104:	e0ffff15 	stw	r3,-4(fp)
 1007108:	00000906 	br	1007130 <altera_avalon_jtag_uart_read+0x20c>
  else if (flags & O_NONBLOCK)
 100710c:	e0bffe17 	ldw	r2,-8(fp)
 1007110:	1090000c 	andi	r2,r2,16384
 1007114:	1005003a 	cmpeq	r2,r2,zero
 1007118:	1000031e 	bne	r2,zero,1007128 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 100711c:	00bffd44 	movi	r2,-11
 1007120:	e0bfff15 	stw	r2,-4(fp)
 1007124:	00000206 	br	1007130 <altera_avalon_jtag_uart_read+0x20c>
  else
    return -EIO;
 1007128:	00bffec4 	movi	r2,-5
 100712c:	e0bfff15 	stw	r2,-4(fp)
 1007130:	e0bfff17 	ldw	r2,-4(fp)
}
 1007134:	e037883a 	mov	sp,fp
 1007138:	dfc00117 	ldw	ra,4(sp)
 100713c:	df000017 	ldw	fp,0(sp)
 1007140:	dec00204 	addi	sp,sp,8
 1007144:	f800283a 	ret

01007148 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 1007148:	defff204 	addi	sp,sp,-56
 100714c:	dfc00d15 	stw	ra,52(sp)
 1007150:	df000c15 	stw	fp,48(sp)
 1007154:	df000c04 	addi	fp,sp,48
 1007158:	e13ffb15 	stw	r4,-20(fp)
 100715c:	e17ffc15 	stw	r5,-16(fp)
 1007160:	e1bffd15 	stw	r6,-12(fp)
 1007164:	e1fffe15 	stw	r7,-8(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 1007168:	e03ff915 	stw	zero,-28(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 100716c:	e0bffc17 	ldw	r2,-16(fp)
 1007170:	e0bff615 	stw	r2,-40(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1007174:	00003a06 	br	1007260 <altera_avalon_jtag_uart_write+0x118>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 1007178:	e0bffb17 	ldw	r2,-20(fp)
 100717c:	10800c17 	ldw	r2,48(r2)
 1007180:	e0bffa15 	stw	r2,-24(fp)
      out = sp->tx_out;
 1007184:	e0bffb17 	ldw	r2,-20(fp)
 1007188:	10800d17 	ldw	r2,52(r2)
 100718c:	e0bff915 	stw	r2,-28(fp)

      if (in < out)
 1007190:	e0fffa17 	ldw	r3,-24(fp)
 1007194:	e0bff917 	ldw	r2,-28(fp)
 1007198:	1880062e 	bgeu	r3,r2,10071b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 100719c:	e0fff917 	ldw	r3,-28(fp)
 10071a0:	e0bffa17 	ldw	r2,-24(fp)
 10071a4:	1885c83a 	sub	r2,r3,r2
 10071a8:	10bfffc4 	addi	r2,r2,-1
 10071ac:	e0bff815 	stw	r2,-32(fp)
 10071b0:	00000c06 	br	10071e4 <altera_avalon_jtag_uart_write+0x9c>
      else if (out > 0)
 10071b4:	e0bff917 	ldw	r2,-28(fp)
 10071b8:	1005003a 	cmpeq	r2,r2,zero
 10071bc:	1000051e 	bne	r2,zero,10071d4 <altera_avalon_jtag_uart_write+0x8c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 10071c0:	00820004 	movi	r2,2048
 10071c4:	e0fffa17 	ldw	r3,-24(fp)
 10071c8:	10c5c83a 	sub	r2,r2,r3
 10071cc:	e0bff815 	stw	r2,-32(fp)
 10071d0:	00000406 	br	10071e4 <altera_avalon_jtag_uart_write+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 10071d4:	0081ffc4 	movi	r2,2047
 10071d8:	e0fffa17 	ldw	r3,-24(fp)
 10071dc:	10c5c83a 	sub	r2,r2,r3
 10071e0:	e0bff815 	stw	r2,-32(fp)

      if (n == 0)
 10071e4:	e0bff817 	ldw	r2,-32(fp)
 10071e8:	1005003a 	cmpeq	r2,r2,zero
 10071ec:	10001f1e 	bne	r2,zero,100726c <altera_avalon_jtag_uart_write+0x124>
        break;

      if (n > count)
 10071f0:	e0fffd17 	ldw	r3,-12(fp)
 10071f4:	e0bff817 	ldw	r2,-32(fp)
 10071f8:	1880022e 	bgeu	r3,r2,1007204 <altera_avalon_jtag_uart_write+0xbc>
        n = count;
 10071fc:	e0bffd17 	ldw	r2,-12(fp)
 1007200:	e0bff815 	stw	r2,-32(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 1007204:	e0bffb17 	ldw	r2,-20(fp)
 1007208:	10c20e04 	addi	r3,r2,2104
 100720c:	e0bffa17 	ldw	r2,-24(fp)
 1007210:	1885883a 	add	r2,r3,r2
 1007214:	e0fffc17 	ldw	r3,-16(fp)
 1007218:	1009883a 	mov	r4,r2
 100721c:	180b883a 	mov	r5,r3
 1007220:	e1bff817 	ldw	r6,-32(fp)
 1007224:	10035180 	call	1003518 <memcpy>
      ptr   += n;
 1007228:	e0fff817 	ldw	r3,-32(fp)
 100722c:	e0bffc17 	ldw	r2,-16(fp)
 1007230:	10c5883a 	add	r2,r2,r3
 1007234:	e0bffc15 	stw	r2,-16(fp)
      count -= n;
 1007238:	e0fffd17 	ldw	r3,-12(fp)
 100723c:	e0bff817 	ldw	r2,-32(fp)
 1007240:	1885c83a 	sub	r2,r3,r2
 1007244:	e0bffd15 	stw	r2,-12(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 1007248:	e0fffa17 	ldw	r3,-24(fp)
 100724c:	e0bff817 	ldw	r2,-32(fp)
 1007250:	1885883a 	add	r2,r3,r2
 1007254:	10c1ffcc 	andi	r3,r2,2047
 1007258:	e0bffb17 	ldw	r2,-20(fp)
 100725c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 1007260:	e0bffd17 	ldw	r2,-12(fp)
 1007264:	10800048 	cmpgei	r2,r2,1
 1007268:	103fc31e 	bne	r2,zero,1007178 <altera_avalon_jtag_uart_write+0x30>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 100726c:	0005303a 	rdctl	r2,status
 1007270:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1007274:	e0fff517 	ldw	r3,-44(fp)
 1007278:	00bfff84 	movi	r2,-2
 100727c:	1884703a 	and	r2,r3,r2
 1007280:	1001703a 	wrctl	status,r2
  
  return context;
 1007284:	e0bff517 	ldw	r2,-44(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 1007288:	e0bff715 	stw	r2,-36(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 100728c:	e0bffb17 	ldw	r2,-20(fp)
 1007290:	10800817 	ldw	r2,32(r2)
 1007294:	10c00094 	ori	r3,r2,2
 1007298:	e0bffb17 	ldw	r2,-20(fp)
 100729c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 10072a0:	e0bffb17 	ldw	r2,-20(fp)
 10072a4:	10800017 	ldw	r2,0(r2)
 10072a8:	11000104 	addi	r4,r2,4
 10072ac:	e0bffb17 	ldw	r2,-20(fp)
 10072b0:	10800817 	ldw	r2,32(r2)
 10072b4:	1007883a 	mov	r3,r2
 10072b8:	2005883a 	mov	r2,r4
 10072bc:	10c00035 	stwio	r3,0(r2)
 10072c0:	e0bff717 	ldw	r2,-36(fp)
 10072c4:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10072c8:	e0bff417 	ldw	r2,-48(fp)
 10072cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 10072d0:	e0bffd17 	ldw	r2,-12(fp)
 10072d4:	10800050 	cmplti	r2,r2,1
 10072d8:	1000111e 	bne	r2,zero,1007320 <altera_avalon_jtag_uart_write+0x1d8>
    {
      if (flags & O_NONBLOCK)
 10072dc:	e0bffe17 	ldw	r2,-8(fp)
 10072e0:	1090000c 	andi	r2,r2,16384
 10072e4:	1004c03a 	cmpne	r2,r2,zero
 10072e8:	1000101e 	bne	r2,zero,100732c <altera_avalon_jtag_uart_write+0x1e4>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 10072ec:	e0bffb17 	ldw	r2,-20(fp)
 10072f0:	10c00d17 	ldw	r3,52(r2)
 10072f4:	e0bff917 	ldw	r2,-28(fp)
 10072f8:	1880051e 	bne	r3,r2,1007310 <altera_avalon_jtag_uart_write+0x1c8>
 10072fc:	e0bffb17 	ldw	r2,-20(fp)
 1007300:	10c00917 	ldw	r3,36(r2)
 1007304:	e0bffb17 	ldw	r2,-20(fp)
 1007308:	10800117 	ldw	r2,4(r2)
 100730c:	18bff736 	bltu	r3,r2,10072ec <altera_avalon_jtag_uart_write+0x1a4>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 1007310:	e0bffb17 	ldw	r2,-20(fp)
 1007314:	10c00d17 	ldw	r3,52(r2)
 1007318:	e0bff917 	ldw	r2,-28(fp)
 100731c:	18800326 	beq	r3,r2,100732c <altera_avalon_jtag_uart_write+0x1e4>
         break;
    }
  }
  while (count > 0);
 1007320:	e0bffd17 	ldw	r2,-12(fp)
 1007324:	10800048 	cmpgei	r2,r2,1
 1007328:	103fcd1e 	bne	r2,zero,1007260 <altera_avalon_jtag_uart_write+0x118>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 100732c:	e0fffc17 	ldw	r3,-16(fp)
 1007330:	e0bff617 	ldw	r2,-40(fp)
 1007334:	18800526 	beq	r3,r2,100734c <altera_avalon_jtag_uart_write+0x204>
    return ptr - start;
 1007338:	e0fffc17 	ldw	r3,-16(fp)
 100733c:	e0bff617 	ldw	r2,-40(fp)
 1007340:	1887c83a 	sub	r3,r3,r2
 1007344:	e0ffff15 	stw	r3,-4(fp)
 1007348:	00000906 	br	1007370 <altera_avalon_jtag_uart_write+0x228>
  else if (flags & O_NONBLOCK)
 100734c:	e0bffe17 	ldw	r2,-8(fp)
 1007350:	1090000c 	andi	r2,r2,16384
 1007354:	1005003a 	cmpeq	r2,r2,zero
 1007358:	1000031e 	bne	r2,zero,1007368 <altera_avalon_jtag_uart_write+0x220>
    return -EWOULDBLOCK;
 100735c:	00bffd44 	movi	r2,-11
 1007360:	e0bfff15 	stw	r2,-4(fp)
 1007364:	00000206 	br	1007370 <altera_avalon_jtag_uart_write+0x228>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 1007368:	00bffec4 	movi	r2,-5
 100736c:	e0bfff15 	stw	r2,-4(fp)
 1007370:	e0bfff17 	ldw	r2,-4(fp)
}
 1007374:	e037883a 	mov	sp,fp
 1007378:	dfc00117 	ldw	ra,4(sp)
 100737c:	df000017 	ldw	fp,0(sp)
 1007380:	dec00204 	addi	sp,sp,8
 1007384:	f800283a 	ret

01007388 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 1007388:	defff904 	addi	sp,sp,-28
 100738c:	dfc00615 	stw	ra,24(sp)
 1007390:	df000515 	stw	fp,20(sp)
 1007394:	df000504 	addi	fp,sp,20
 1007398:	e13ffe15 	stw	r4,-8(fp)
 100739c:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 10073a0:	e0bffe17 	ldw	r2,-8(fp)
 10073a4:	10000035 	stwio	zero,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 10073a8:	e0bffe17 	ldw	r2,-8(fp)
 10073ac:	10800104 	addi	r2,r2,4
 10073b0:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 10073b4:	0005303a 	rdctl	r2,status
 10073b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 10073bc:	e0fffc17 	ldw	r3,-16(fp)
 10073c0:	00bfff84 	movi	r2,-2
 10073c4:	1884703a 	and	r2,r3,r2
 10073c8:	1001703a 	wrctl	status,r2
  
  return context;
 10073cc:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 10073d0:	e0bffd15 	stw	r2,-12(fp)
  alt_tick ();
 10073d4:	1008d100 	call	1008d10 <alt_tick>
 10073d8:	e0bffd17 	ldw	r2,-12(fp)
 10073dc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 10073e0:	e0bffb17 	ldw	r2,-20(fp)
 10073e4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 10073e8:	e037883a 	mov	sp,fp
 10073ec:	dfc00117 	ldw	ra,4(sp)
 10073f0:	df000017 	ldw	fp,0(sp)
 10073f4:	dec00204 	addi	sp,sp,8
 10073f8:	f800283a 	ret

010073fc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 10073fc:	defff904 	addi	sp,sp,-28
 1007400:	dfc00615 	stw	ra,24(sp)
 1007404:	df000515 	stw	fp,20(sp)
 1007408:	df000504 	addi	fp,sp,20
 100740c:	e13ffc15 	stw	r4,-16(fp)
 1007410:	e17ffd15 	stw	r5,-12(fp)
 1007414:	e1bffe15 	stw	r6,-8(fp)
 1007418:	e1ffff15 	stw	r7,-4(fp)
 100741c:	e0bfff17 	ldw	r2,-4(fp)
 1007420:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 1007424:	00804074 	movhi	r2,257
 1007428:	109df404 	addi	r2,r2,30672
 100742c:	10800017 	ldw	r2,0(r2)
 1007430:	1004c03a 	cmpne	r2,r2,zero
 1007434:	1000041e 	bne	r2,zero,1007448 <alt_avalon_timer_sc_init+0x4c>
  {
    _alt_tick_rate = nticks;
 1007438:	00c04074 	movhi	r3,257
 100743c:	18ddf404 	addi	r3,r3,30672
 1007440:	e0bffb17 	ldw	r2,-20(fp)
 1007444:	18800015 	stw	r2,0(r3)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 1007448:	e0bffc17 	ldw	r2,-16(fp)
 100744c:	10800104 	addi	r2,r2,4
 1007450:	1007883a 	mov	r3,r2
 1007454:	008001c4 	movi	r2,7
 1007458:	18800035 	stwio	r2,0(r3)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 100745c:	e13ffe17 	ldw	r4,-8(fp)
 1007460:	e17ffc17 	ldw	r5,-16(fp)
 1007464:	01804034 	movhi	r6,256
 1007468:	319ce204 	addi	r6,r6,29576
 100746c:	1008ab80 	call	1008ab8 <alt_irq_register>
#endif  
}
 1007470:	e037883a 	mov	sp,fp
 1007474:	dfc00117 	ldw	ra,4(sp)
 1007478:	df000017 	ldw	fp,0(sp)
 100747c:	dec00204 	addi	sp,sp,8
 1007480:	f800283a 	ret

01007484 <alt_hostfs_open>:
* alt_hostfs_open
*
* If we can't find anything return -1
*/
int alt_hostfs_open(alt_fd* fd, const char * name, int flags, int mode)
{
 1007484:	deffee04 	addi	sp,sp,-72
 1007488:	df001115 	stw	fp,68(sp)
 100748c:	df001104 	addi	fp,sp,68
 1007490:	e13ffc15 	stw	r4,-16(fp)
 1007494:	e17ffd15 	stw	r5,-12(fp)
 1007498:	e1bffe15 	stw	r6,-8(fp)
 100749c:	e1ffff15 	stw	r7,-4(fp)
  static const struct HOSTCALL_INFO hcinfo = { 0x0103, "open" };

  alt_hostfs_dev* dev= (alt_hostfs_dev*)fd->dev;
 10074a0:	e0bffc17 	ldw	r2,-16(fp)
 10074a4:	10800017 	ldw	r2,0(r2)
 10074a8:	e0bffb15 	stw	r2,-20(fp)
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 10074ac:	e0bffb17 	ldw	r2,-20(fp)
 10074b0:	10800217 	ldw	r2,8(r2)
 10074b4:	e0bff115 	stw	r2,-60(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 10074b8:	e0bff117 	ldw	r2,-60(fp)
 10074bc:	10bfffc4 	addi	r2,r2,-1
 10074c0:	e0bff215 	stw	r2,-56(fp)

  while (*++ptr != 0)
 10074c4:	e0bff217 	ldw	r2,-56(fp)
 10074c8:	10800044 	addi	r2,r2,1
 10074cc:	e0bff215 	stw	r2,-56(fp)
 10074d0:	e0bff217 	ldw	r2,-56(fp)
 10074d4:	10800003 	ldbu	r2,0(r2)
 10074d8:	10803fcc 	andi	r2,r2,255
 10074dc:	1080201c 	xori	r2,r2,128
 10074e0:	10bfe004 	addi	r2,r2,-128
 10074e4:	1004c03a 	cmpne	r2,r2,zero
 10074e8:	103ff61e 	bne	r2,zero,10074c4 <alt_hostfs_open+0x40>
    ;

  return ptr - string;
 10074ec:	e0fff217 	ldw	r3,-56(fp)
 10074f0:	e0bff117 	ldw	r2,-60(fp)
 10074f4:	1885c83a 	sub	r2,r3,r2
#endif

  /* Mount point names don't end with a slash, so we must skip over the
   * slash following the mount point name.
  */
  name += inline_strlen(dev->fs_dev.name) + 1;
 10074f8:	1007883a 	mov	r3,r2
 10074fc:	e0bffd17 	ldw	r2,-12(fp)
 1007500:	1885883a 	add	r2,r3,r2
 1007504:	10800044 	addi	r2,r2,1
 1007508:	e0bffd15 	stw	r2,-12(fp)

  r3 = (int)&hcinfo;
 100750c:	d0a00b04 	addi	r2,gp,-32724
 1007510:	e0bff715 	stw	r2,-36(fp)
  r4 = (int)name;
 1007514:	e0bffd17 	ldw	r2,-12(fp)
 1007518:	e0bff615 	stw	r2,-40(fp)
  r5 = flags;
 100751c:	e0bffe17 	ldw	r2,-8(fp)
 1007520:	e0bff515 	stw	r2,-44(fp)
  r6 = mode;
 1007524:	e0bfff17 	ldw	r2,-4(fp)
 1007528:	e0bff415 	stw	r2,-48(fp)
 100752c:	e0bffd17 	ldw	r2,-12(fp)
 1007530:	e0bfef15 	stw	r2,-68(fp)
};

static inline int inline_strlen(const char * string) ALT_ALWAYS_INLINE;
static inline int inline_strlen(const char * string)
{
  const char * ptr = string - 1;
 1007534:	e0bfef17 	ldw	r2,-68(fp)
 1007538:	10bfffc4 	addi	r2,r2,-1
 100753c:	e0bff015 	stw	r2,-64(fp)

  while (*++ptr != 0)
 1007540:	e0bff017 	ldw	r2,-64(fp)
 1007544:	10800044 	addi	r2,r2,1
 1007548:	e0bff015 	stw	r2,-64(fp)
 100754c:	e0bff017 	ldw	r2,-64(fp)
 1007550:	10800003 	ldbu	r2,0(r2)
 1007554:	10803fcc 	andi	r2,r2,255
 1007558:	1080201c 	xori	r2,r2,128
 100755c:	10bfe004 	addi	r2,r2,-128
 1007560:	1004c03a 	cmpne	r2,r2,zero
 1007564:	103ff61e 	bne	r2,zero,1007540 <alt_hostfs_open+0xbc>
    ;

  return ptr - string;
 1007568:	e0fff017 	ldw	r3,-64(fp)
 100756c:	e0bfef17 	ldw	r2,-68(fp)
 1007570:	1885c83a 	sub	r2,r3,r2

  r3 = (int)&hcinfo;
  r4 = (int)name;
  r5 = flags;
  r6 = mode;
  r7 = inline_strlen(name);
 1007574:	e0bff315 	stw	r2,-52(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6), "D07" (r7) : "memory" );
 1007578:	e13ff617 	ldw	r4,-40(fp)
 100757c:	e17ff517 	ldw	r5,-44(fp)
 1007580:	e1bff417 	ldw	r6,-48(fp)
 1007584:	e1fff317 	ldw	r7,-52(fp)
 1007588:	e0fff717 	ldw	r3,-36(fp)
 100758c:	003da07a 	break	1
 1007590:	e0bff815 	stw	r2,-32(fp)
 1007594:	e0fff715 	stw	r3,-36(fp)

  handle = (void *)r2;
 1007598:	e0bff817 	ldw	r2,-32(fp)
 100759c:	e0bff915 	stw	r2,-28(fp)
  error = r3;
 10075a0:	e0bff717 	ldw	r2,-36(fp)
 10075a4:	e0bffa15 	stw	r2,-24(fp)

  if (error == 0)
 10075a8:	e0bffa17 	ldw	r2,-24(fp)
 10075ac:	1004c03a 	cmpne	r2,r2,zero
 10075b0:	1000031e 	bne	r2,zero,10075c0 <alt_hostfs_open+0x13c>
    fd->priv = handle;
 10075b4:	e0fff917 	ldw	r3,-28(fp)
 10075b8:	e0bffc17 	ldw	r2,-16(fp)
 10075bc:	10c00115 	stw	r3,4(r2)

  return -error;
 10075c0:	e0bffa17 	ldw	r2,-24(fp)
 10075c4:	0085c83a 	sub	r2,zero,r2
}
 10075c8:	e037883a 	mov	sp,fp
 10075cc:	df000017 	ldw	fp,0(sp)
 10075d0:	dec00104 	addi	sp,sp,4
 10075d4:	f800283a 	ret

010075d8 <alt_hostfs_close>:
* alt_hostfs_close
*
* Read the file
*/
int alt_hostfs_close(alt_fd* fd)
{
 10075d8:	defffb04 	addi	sp,sp,-20
 10075dc:	df000415 	stw	fp,16(sp)
 10075e0:	df000404 	addi	fp,sp,16
 10075e4:	e13fff15 	stw	r4,-4(fp)
  int error;

  /* Input and output parameters for the hostcall */
  int r3, r4;

  r3 = (int)&hcinfo;
 10075e8:	d0a00e04 	addi	r2,gp,-32712
 10075ec:	e0bffd15 	stw	r2,-12(fp)
  r4 = (int)fd->priv;
 10075f0:	e0bfff17 	ldw	r2,-4(fp)
 10075f4:	10800117 	ldw	r2,4(r2)
 10075f8:	e0bffc15 	stw	r2,-16(fp)

  __asm__ volatile("break 1" : "+D03" (r3) : "D04" (r4) );
 10075fc:	e13ffc17 	ldw	r4,-16(fp)
 1007600:	e0fffd17 	ldw	r3,-12(fp)
 1007604:	003da07a 	break	1
 1007608:	e0fffd15 	stw	r3,-12(fp)

  error = r3;
 100760c:	e0bffd17 	ldw	r2,-12(fp)
 1007610:	e0bffe15 	stw	r2,-8(fp)

  return -error;
 1007614:	e0bffe17 	ldw	r2,-8(fp)
 1007618:	0085c83a 	sub	r2,zero,r2
}
 100761c:	e037883a 	mov	sp,fp
 1007620:	df000017 	ldw	fp,0(sp)
 1007624:	dec00104 	addi	sp,sp,4
 1007628:	f800283a 	ret

0100762c <alt_hostfs_read>:
* alt_hostfs_read
*
* Read the file
*/
int alt_hostfs_read(alt_fd* fd, char * ptr, int len)
{
 100762c:	defff404 	addi	sp,sp,-48
 1007630:	df000b15 	stw	fp,44(sp)
 1007634:	df000b04 	addi	fp,sp,44
 1007638:	e13ffc15 	stw	r4,-16(fp)
 100763c:	e17ffd15 	stw	r5,-12(fp)
 1007640:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
 1007644:	d0a01104 	addi	r2,gp,-32700
 1007648:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
 100764c:	e0bffc17 	ldw	r2,-16(fp)
 1007650:	10800117 	ldw	r2,4(r2)
 1007654:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
 1007658:	e0bffd17 	ldw	r2,-12(fp)
 100765c:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
 1007660:	e0bffe17 	ldw	r2,-8(fp)
 1007664:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
 1007668:	e13ff717 	ldw	r4,-36(fp)
 100766c:	e17ff617 	ldw	r5,-40(fp)
 1007670:	e1bff517 	ldw	r6,-44(fp)
 1007674:	e0fff817 	ldw	r3,-32(fp)
 1007678:	003da07a 	break	1
 100767c:	e0bff915 	stw	r2,-28(fp)
 1007680:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
 1007684:	e0bff917 	ldw	r2,-28(fp)
 1007688:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
 100768c:	e0bff817 	ldw	r2,-32(fp)
 1007690:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
 1007694:	e0bffb17 	ldw	r2,-20(fp)
 1007698:	1005003a 	cmpeq	r2,r2,zero
 100769c:	1000041e 	bne	r2,zero,10076b0 <alt_hostfs_read+0x84>
 10076a0:	e0bffb17 	ldw	r2,-20(fp)
 10076a4:	0085c83a 	sub	r2,zero,r2
 10076a8:	e0bfff15 	stw	r2,-4(fp)
 10076ac:	00000206 	br	10076b8 <alt_hostfs_read+0x8c>
 10076b0:	e0bffa17 	ldw	r2,-24(fp)
 10076b4:	e0bfff15 	stw	r2,-4(fp)
 10076b8:	e0bfff17 	ldw	r2,-4(fp)
}
 10076bc:	e037883a 	mov	sp,fp
 10076c0:	df000017 	ldw	fp,0(sp)
 10076c4:	dec00104 	addi	sp,sp,4
 10076c8:	f800283a 	ret

010076cc <alt_hostfs_write>:
* alt_hostfs_write
*
* Read the file
*/
int alt_hostfs_write(alt_fd* fd, const char * ptr, int len)
{
 10076cc:	defff404 	addi	sp,sp,-48
 10076d0:	df000b15 	stw	fp,44(sp)
 10076d4:	df000b04 	addi	fp,sp,44
 10076d8:	e13ffc15 	stw	r4,-16(fp)
 10076dc:	e17ffd15 	stw	r5,-12(fp)
 10076e0:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
 10076e4:	d0a01404 	addi	r2,gp,-32688
 10076e8:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
 10076ec:	e0bffc17 	ldw	r2,-16(fp)
 10076f0:	10800117 	ldw	r2,4(r2)
 10076f4:	e0bff715 	stw	r2,-36(fp)
  r5 = (int)ptr;
 10076f8:	e0bffd17 	ldw	r2,-12(fp)
 10076fc:	e0bff615 	stw	r2,-40(fp)
  r6 = len;
 1007700:	e0bffe17 	ldw	r2,-8(fp)
 1007704:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
 1007708:	e13ff717 	ldw	r4,-36(fp)
 100770c:	e17ff617 	ldw	r5,-40(fp)
 1007710:	e1bff517 	ldw	r6,-44(fp)
 1007714:	e0fff817 	ldw	r3,-32(fp)
 1007718:	003da07a 	break	1
 100771c:	e0bff915 	stw	r2,-28(fp)
 1007720:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
 1007724:	e0bff917 	ldw	r2,-28(fp)
 1007728:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
 100772c:	e0bff817 	ldw	r2,-32(fp)
 1007730:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
 1007734:	e0bffb17 	ldw	r2,-20(fp)
 1007738:	1005003a 	cmpeq	r2,r2,zero
 100773c:	1000041e 	bne	r2,zero,1007750 <alt_hostfs_write+0x84>
 1007740:	e0bffb17 	ldw	r2,-20(fp)
 1007744:	0085c83a 	sub	r2,zero,r2
 1007748:	e0bfff15 	stw	r2,-4(fp)
 100774c:	00000206 	br	1007758 <alt_hostfs_write+0x8c>
 1007750:	e0bffa17 	ldw	r2,-24(fp)
 1007754:	e0bfff15 	stw	r2,-4(fp)
 1007758:	e0bfff17 	ldw	r2,-4(fp)
}
 100775c:	e037883a 	mov	sp,fp
 1007760:	df000017 	ldw	fp,0(sp)
 1007764:	dec00104 	addi	sp,sp,4
 1007768:	f800283a 	ret

0100776c <alt_hostfs_seek>:
* Move around within a file
*
* returns -errno for an error or the offset within the file
*/
int alt_hostfs_seek(alt_fd* fd, int ptr, int dir)
{
 100776c:	defff404 	addi	sp,sp,-48
 1007770:	df000b15 	stw	fp,44(sp)
 1007774:	df000b04 	addi	fp,sp,44
 1007778:	e13ffc15 	stw	r4,-16(fp)
 100777c:	e17ffd15 	stw	r5,-12(fp)
 1007780:	e1bffe15 	stw	r6,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5, r6;

  r3 = (int)&hcinfo;
 1007784:	d0a01704 	addi	r2,gp,-32676
 1007788:	e0bff815 	stw	r2,-32(fp)
  r4 = (int)fd->priv;
 100778c:	e0bffc17 	ldw	r2,-16(fp)
 1007790:	10800117 	ldw	r2,4(r2)
 1007794:	e0bff715 	stw	r2,-36(fp)
  r5 = ptr;
 1007798:	e0bffd17 	ldw	r2,-12(fp)
 100779c:	e0bff615 	stw	r2,-40(fp)
  r6 = dir;
 10077a0:	e0bffe17 	ldw	r2,-8(fp)
 10077a4:	e0bff515 	stw	r2,-44(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5), "D06" (r6) : "memory" );
 10077a8:	e13ff717 	ldw	r4,-36(fp)
 10077ac:	e17ff617 	ldw	r5,-40(fp)
 10077b0:	e1bff517 	ldw	r6,-44(fp)
 10077b4:	e0fff817 	ldw	r3,-32(fp)
 10077b8:	003da07a 	break	1
 10077bc:	e0bff915 	stw	r2,-28(fp)
 10077c0:	e0fff815 	stw	r3,-32(fp)

  rc = r2;
 10077c4:	e0bff917 	ldw	r2,-28(fp)
 10077c8:	e0bffa15 	stw	r2,-24(fp)
  error = r3;
 10077cc:	e0bff817 	ldw	r2,-32(fp)
 10077d0:	e0bffb15 	stw	r2,-20(fp)

  return (error == 0) ? rc : -error;
 10077d4:	e0bffb17 	ldw	r2,-20(fp)
 10077d8:	1005003a 	cmpeq	r2,r2,zero
 10077dc:	1000041e 	bne	r2,zero,10077f0 <alt_hostfs_seek+0x84>
 10077e0:	e0bffb17 	ldw	r2,-20(fp)
 10077e4:	0085c83a 	sub	r2,zero,r2
 10077e8:	e0bfff15 	stw	r2,-4(fp)
 10077ec:	00000206 	br	10077f8 <alt_hostfs_seek+0x8c>
 10077f0:	e0bffa17 	ldw	r2,-24(fp)
 10077f4:	e0bfff15 	stw	r2,-4(fp)
 10077f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10077fc:	e037883a 	mov	sp,fp
 1007800:	df000017 	ldw	fp,0(sp)
 1007804:	dec00104 	addi	sp,sp,4
 1007808:	f800283a 	ret

0100780c <alt_hostfs_fstat>:
* at the lower address.
* We need to copy the structure and byte swap it to make it match our local
* layout of struct stat.
*/
int alt_hostfs_fstat(alt_fd* fd, struct stat* st)
{
 100780c:	deffe404 	addi	sp,sp,-112
 1007810:	df001b15 	stw	fp,108(sp)
 1007814:	df001b04 	addi	fp,sp,108
 1007818:	e13ffd15 	stw	r4,-12(fp)
 100781c:	e17ffe15 	stw	r5,-8(fp)
  int rc;

  /* Input and output parameters for the hostcall */
  int r2, r3, r4, r5;

  r3 = (int)&hcinfo;
 1007820:	d0a01a04 	addi	r2,gp,-32664
 1007824:	e0bfe915 	stw	r2,-92(fp)
  r4 = (int)fd->priv;
 1007828:	e0bffd17 	ldw	r2,-12(fp)
 100782c:	10800117 	ldw	r2,4(r2)
 1007830:	e0bfe815 	stw	r2,-96(fp)
  r5 = (int)&hoststat;
 1007834:	e0bfed04 	addi	r2,fp,-76
 1007838:	e0bfe715 	stw	r2,-100(fp)

  __asm__ volatile("break 1" : "=D02" (r2), "+D03" (r3) : "D04" (r4), "D05" (r5) : "memory" );
 100783c:	e13fe817 	ldw	r4,-96(fp)
 1007840:	e17fe717 	ldw	r5,-100(fp)
 1007844:	e0ffe917 	ldw	r3,-92(fp)
 1007848:	003da07a 	break	1
 100784c:	e0bfea15 	stw	r2,-88(fp)
 1007850:	e0ffe915 	stw	r3,-92(fp)

  rc = r2;
 1007854:	e0bfea17 	ldw	r2,-88(fp)
 1007858:	e0bfeb15 	stw	r2,-84(fp)
  error = r3;
 100785c:	e0bfe917 	ldw	r2,-92(fp)
 1007860:	e0bfec15 	stw	r2,-80(fp)

  if (error == 0)
 1007864:	e0bfec17 	ldw	r2,-80(fp)
 1007868:	1004c03a 	cmpne	r2,r2,zero
 100786c:	1000651e 	bne	r2,zero,1007a04 <alt_hostfs_fstat+0x1f8>
     * no change is required.  On a little-endian processor we need to swap
     * the bytes in each word.
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
 1007870:	e0bfed04 	addi	r2,fp,-76
 1007874:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
 1007878:	e0bfe617 	ldw	r2,-104(fp)
 100787c:	10801004 	addi	r2,r2,64
 1007880:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
 1007884:	00001806 	br	10078e8 <alt_hostfs_fstat+0xdc>
      *ptr = ((*ptr & 0xFF000000) >> 24) |
 1007888:	e0bfe617 	ldw	r2,-104(fp)
 100788c:	10800017 	ldw	r2,0(r2)
 1007890:	10bfc02c 	andhi	r2,r2,65280
 1007894:	1006d63a 	srli	r3,r2,24
 1007898:	e0bfe617 	ldw	r2,-104(fp)
 100789c:	10800017 	ldw	r2,0(r2)
 10078a0:	10803fec 	andhi	r2,r2,255
 10078a4:	1004d23a 	srli	r2,r2,8
 10078a8:	1886b03a 	or	r3,r3,r2
 10078ac:	e0bfe617 	ldw	r2,-104(fp)
 10078b0:	10800017 	ldw	r2,0(r2)
 10078b4:	10bfc00c 	andi	r2,r2,65280
 10078b8:	1004923a 	slli	r2,r2,8
 10078bc:	1886b03a 	or	r3,r3,r2
 10078c0:	e0bfe617 	ldw	r2,-104(fp)
 10078c4:	10800017 	ldw	r2,0(r2)
 10078c8:	10803fcc 	andi	r2,r2,255
 10078cc:	1004963a 	slli	r2,r2,24
 10078d0:	1886b03a 	or	r3,r3,r2
 10078d4:	e0bfe617 	ldw	r2,-104(fp)
 10078d8:	10c00015 	stw	r3,0(r2)
     */

#ifndef ALT_BIGENDIAN
    ptr = (alt_u32 *)&hoststat;
    end = (alt_u32 *)((char *)ptr + sizeof(struct fio_stat));
    for ( ; ptr < end ; ptr++)
 10078dc:	e0bfe617 	ldw	r2,-104(fp)
 10078e0:	10800104 	addi	r2,r2,4
 10078e4:	e0bfe615 	stw	r2,-104(fp)
 10078e8:	e0ffe617 	ldw	r3,-104(fp)
 10078ec:	e0bfe517 	ldw	r2,-108(fp)
 10078f0:	18bfe536 	bltu	r3,r2,1007888 <alt_hostfs_fstat+0x7c>
             ((*ptr & 0x0000FF00) << 8)  |
             ((*ptr & 0x000000FF) << 24);
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
 10078f4:	e0bffe17 	ldw	r2,-8(fp)
 10078f8:	e0bfe615 	stw	r2,-104(fp)
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
 10078fc:	e0bfe617 	ldw	r2,-104(fp)
 1007900:	10800f04 	addi	r2,r2,60
 1007904:	e0bfe515 	stw	r2,-108(fp)
    for ( ; ptr < end ; ptr++)
 1007908:	00000506 	br	1007920 <alt_hostfs_fstat+0x114>
      *ptr = 0;
 100790c:	e0bfe617 	ldw	r2,-104(fp)
 1007910:	10000015 	stw	zero,0(r2)
#endif

    /* Zero the unused parts of struct stat */
    ptr = (alt_u32 *)st;
    end = (alt_u32 *)((char *)ptr + sizeof(struct stat));
    for ( ; ptr < end ; ptr++)
 1007914:	e0bfe617 	ldw	r2,-104(fp)
 1007918:	10800104 	addi	r2,r2,4
 100791c:	e0bfe615 	stw	r2,-104(fp)
 1007920:	e0ffe617 	ldw	r3,-104(fp)
 1007924:	e0bfe517 	ldw	r2,-108(fp)
 1007928:	18bff836 	bltu	r3,r2,100790c <alt_hostfs_fstat+0x100>

    /* Copy the data provided by the host into our local copy, for data which
     * is provided as 64bit values by the host we just use the least
     * significant word.
     */
    st->st_dev     = hoststat.fst_dev;
 100792c:	e0bfed17 	ldw	r2,-76(fp)
 1007930:	1007883a 	mov	r3,r2
 1007934:	e0bffe17 	ldw	r2,-8(fp)
 1007938:	10c0000d 	sth	r3,0(r2)
    st->st_ino     = hoststat.fst_ino;
 100793c:	e0bfee17 	ldw	r2,-72(fp)
 1007940:	1007883a 	mov	r3,r2
 1007944:	e0bffe17 	ldw	r2,-8(fp)
 1007948:	10c0008d 	sth	r3,2(r2)
    st->st_mode    = hoststat.fst_mode;
 100794c:	e0ffef17 	ldw	r3,-68(fp)
 1007950:	e0bffe17 	ldw	r2,-8(fp)
 1007954:	10c00115 	stw	r3,4(r2)
    st->st_nlink   = hoststat.fst_nlink;
 1007958:	e0bff017 	ldw	r2,-64(fp)
 100795c:	1007883a 	mov	r3,r2
 1007960:	e0bffe17 	ldw	r2,-8(fp)
 1007964:	10c0020d 	sth	r3,8(r2)
    st->st_uid     = hoststat.fst_uid;
 1007968:	e0bff117 	ldw	r2,-60(fp)
 100796c:	1007883a 	mov	r3,r2
 1007970:	e0bffe17 	ldw	r2,-8(fp)
 1007974:	10c0028d 	sth	r3,10(r2)
    st->st_gid     = hoststat.fst_gid;
 1007978:	e0bff217 	ldw	r2,-56(fp)
 100797c:	1007883a 	mov	r3,r2
 1007980:	e0bffe17 	ldw	r2,-8(fp)
 1007984:	10c0030d 	sth	r3,12(r2)
    st->st_rdev    = hoststat.fst_rdev;
 1007988:	e0bff317 	ldw	r2,-52(fp)
 100798c:	1007883a 	mov	r3,r2
 1007990:	e0bffe17 	ldw	r2,-8(fp)
 1007994:	10c0038d 	sth	r3,14(r2)
    st->st_size    = hoststat.fst_size[1];
 1007998:	e0bff517 	ldw	r2,-44(fp)
 100799c:	1007883a 	mov	r3,r2
 10079a0:	e0bffe17 	ldw	r2,-8(fp)
 10079a4:	10c00415 	stw	r3,16(r2)

    st->st_atime   = hoststat.fst_atime;
 10079a8:	e0bffa17 	ldw	r2,-24(fp)
 10079ac:	1007883a 	mov	r3,r2
 10079b0:	e0bffe17 	ldw	r2,-8(fp)
 10079b4:	10c00515 	stw	r3,20(r2)
    st->st_mtime   = hoststat.fst_mtime;
 10079b8:	e0bffb17 	ldw	r2,-20(fp)
 10079bc:	1007883a 	mov	r3,r2
 10079c0:	e0bffe17 	ldw	r2,-8(fp)
 10079c4:	10c00715 	stw	r3,28(r2)
    st->st_ctime   = hoststat.fst_ctime;
 10079c8:	e0bffc17 	ldw	r2,-16(fp)
 10079cc:	1007883a 	mov	r3,r2
 10079d0:	e0bffe17 	ldw	r2,-8(fp)
 10079d4:	10c00915 	stw	r3,36(r2)

    st->st_blksize = hoststat.fst_blksize[1];
 10079d8:	e0bff717 	ldw	r2,-36(fp)
 10079dc:	1007883a 	mov	r3,r2
 10079e0:	e0bffe17 	ldw	r2,-8(fp)
 10079e4:	10c00b15 	stw	r3,44(r2)
    st->st_blocks  = hoststat.fst_blocks[1];
 10079e8:	e0bff917 	ldw	r2,-28(fp)
 10079ec:	1007883a 	mov	r3,r2
 10079f0:	e0bffe17 	ldw	r2,-8(fp)
 10079f4:	10c00c15 	stw	r3,48(r2)

    return rc;
 10079f8:	e0bfeb17 	ldw	r2,-84(fp)
 10079fc:	e0bfff15 	stw	r2,-4(fp)
 1007a00:	00000306 	br	1007a10 <alt_hostfs_fstat+0x204>
  }
  else
    return -error;
 1007a04:	e0bfec17 	ldw	r2,-80(fp)
 1007a08:	0085c83a 	sub	r2,zero,r2
 1007a0c:	e0bfff15 	stw	r2,-4(fp)
 1007a10:	e0bfff17 	ldw	r2,-4(fp)
}
 1007a14:	e037883a 	mov	sp,fp
 1007a18:	df000017 	ldw	fp,0(sp)
 1007a1c:	dec00104 	addi	sp,sp,4
 1007a20:	f800283a 	ret

01007a24 <get_DDRAM_addr>:
 * @sa the datasheet for the LCD Display Controller on the DE2 Board
 * @note the function requires that the input are in the valid range
 *
 **/
unsigned char get_DDRAM_addr(unsigned x_pos, unsigned y_pos)
{
 1007a24:	defffc04 	addi	sp,sp,-16
 1007a28:	df000315 	stw	fp,12(sp)
 1007a2c:	df000304 	addi	fp,sp,12
 1007a30:	e13ffe15 	stw	r4,-8(fp)
 1007a34:	e17fff15 	stw	r5,-4(fp)
	//assume valid inputs
	unsigned char addr = 0x00000000;
 1007a38:	e03ffd05 	stb	zero,-12(fp)
	if (y_pos == 0)
 1007a3c:	e0bfff17 	ldw	r2,-4(fp)
 1007a40:	1004c03a 	cmpne	r2,r2,zero
 1007a44:	1000061e 	bne	r2,zero,1007a60 <get_DDRAM_addr+0x3c>
	{
		addr |= x_pos;
 1007a48:	e0bffe17 	ldw	r2,-8(fp)
 1007a4c:	1007883a 	mov	r3,r2
 1007a50:	e0bffd03 	ldbu	r2,-12(fp)
 1007a54:	10c4b03a 	or	r2,r2,r3
 1007a58:	e0bffd05 	stb	r2,-12(fp)
 1007a5c:	00000806 	br	1007a80 <get_DDRAM_addr+0x5c>
	}
	else
	{
		addr |= x_pos;
 1007a60:	e0bffe17 	ldw	r2,-8(fp)
 1007a64:	1007883a 	mov	r3,r2
 1007a68:	e0bffd03 	ldbu	r2,-12(fp)
 1007a6c:	10c4b03a 	or	r2,r2,r3
 1007a70:	e0bffd05 	stb	r2,-12(fp)
		addr |= 0x00000040;
 1007a74:	e0bffd03 	ldbu	r2,-12(fp)
 1007a78:	10801014 	ori	r2,r2,64
 1007a7c:	e0bffd05 	stb	r2,-12(fp)
	}
	// b_7 is always 1 for DDRAM address, see datasheet
	return (addr | 0x00000080);
 1007a80:	e0fffd03 	ldbu	r3,-12(fp)
 1007a84:	00bfe004 	movi	r2,-128
 1007a88:	1884b03a 	or	r2,r3,r2
 1007a8c:	10803fcc 	andi	r2,r2,255
}
 1007a90:	e037883a 	mov	sp,fp
 1007a94:	df000017 	ldw	fp,0(sp)
 1007a98:	dec00104 	addi	sp,sp,4
 1007a9c:	f800283a 	ret

01007aa0 <alt_up_character_lcd_send_cmd>:
 * @param cmd -- the command bits 
 *
 * @return nothing
 **/
void alt_up_character_lcd_send_cmd(alt_up_character_lcd_dev *lcd, unsigned char cmd)
{
 1007aa0:	defffd04 	addi	sp,sp,-12
 1007aa4:	df000215 	stw	fp,8(sp)
 1007aa8:	df000204 	addi	fp,sp,8
 1007aac:	e13ffe15 	stw	r4,-8(fp)
 1007ab0:	e17fff05 	stb	r5,-4(fp)
 	// NOTE: We use the term Instruction Register and Control Register interchangeably
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, cmd);
 1007ab4:	e0bffe17 	ldw	r2,-8(fp)
 1007ab8:	10800a17 	ldw	r2,40(r2)
 1007abc:	e0ffff03 	ldbu	r3,-4(fp)
 1007ac0:	10c00025 	stbio	r3,0(r2)
}
 1007ac4:	e037883a 	mov	sp,fp
 1007ac8:	df000017 	ldw	fp,0(sp)
 1007acc:	dec00104 	addi	sp,sp,4
 1007ad0:	f800283a 	ret

01007ad4 <alt_up_character_lcd_init>:
 * file for a detailed description of each function
 */
////////////////////////////////////////////////////////////////////////////

void alt_up_character_lcd_init(alt_up_character_lcd_dev *lcd)
{
 1007ad4:	defffe04 	addi	sp,sp,-8
 1007ad8:	df000115 	stw	fp,4(sp)
 1007adc:	df000104 	addi	fp,sp,4
 1007ae0:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALT_UP_CHARACTER_LCD_COMMAND(lcd->base, ALT_UP_CHARACTER_LCD_COMM_CLEAR_DISPLAY);
 1007ae4:	e0bfff17 	ldw	r2,-4(fp)
 1007ae8:	10800a17 	ldw	r2,40(r2)
 1007aec:	1007883a 	mov	r3,r2
 1007af0:	00800044 	movi	r2,1
 1007af4:	18800025 	stbio	r2,0(r3)
	// register the device 
	// see "Developing Device Drivers for the HAL" in "Nios II Software Developer's Handbook"
}
 1007af8:	e037883a 	mov	sp,fp
 1007afc:	df000017 	ldw	fp,0(sp)
 1007b00:	dec00104 	addi	sp,sp,4
 1007b04:	f800283a 	ret

01007b08 <alt_up_character_lcd_open_dev>:

alt_up_character_lcd_dev* alt_up_character_lcd_open_dev(const char* name)
{
 1007b08:	defffc04 	addi	sp,sp,-16
 1007b0c:	dfc00315 	stw	ra,12(sp)
 1007b10:	df000215 	stw	fp,8(sp)
 1007b14:	df000204 	addi	fp,sp,8
 1007b18:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_character_lcd_dev *dev = (alt_up_character_lcd_dev*)alt_find_dev(name, &alt_dev_list);
 1007b1c:	e13fff17 	ldw	r4,-4(fp)
 1007b20:	01404074 	movhi	r5,257
 1007b24:	29570e04 	addi	r5,r5,23608
 1007b28:	10086380 	call	1008638 <alt_find_dev>
 1007b2c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 1007b30:	e0bffe17 	ldw	r2,-8(fp)
}
 1007b34:	e037883a 	mov	sp,fp
 1007b38:	dfc00117 	ldw	ra,4(sp)
 1007b3c:	df000017 	ldw	fp,0(sp)
 1007b40:	dec00204 	addi	sp,sp,8
 1007b44:	f800283a 	ret

01007b48 <alt_up_character_lcd_write>:

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
 1007b48:	defffb04 	addi	sp,sp,-20
 1007b4c:	df000415 	stw	fp,16(sp)
 1007b50:	df000404 	addi	fp,sp,16
 1007b54:	e13ffd15 	stw	r4,-12(fp)
 1007b58:	e17ffe15 	stw	r5,-8(fp)
 1007b5c:	e1bfff15 	stw	r6,-4(fp)
	unsigned int i;
	for (i = 0; i < len; i++)
 1007b60:	e03ffc15 	stw	zero,-16(fp)
 1007b64:	00000f06 	br	1007ba4 <alt_up_character_lcd_write+0x5c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
 1007b68:	e0bffd17 	ldw	r2,-12(fp)
 1007b6c:	10800a17 	ldw	r2,40(r2)
 1007b70:	11000044 	addi	r4,r2,1
 1007b74:	e0fffc17 	ldw	r3,-16(fp)
 1007b78:	e0bffe17 	ldw	r2,-8(fp)
 1007b7c:	1885883a 	add	r2,r3,r2
 1007b80:	10800003 	ldbu	r2,0(r2)
 1007b84:	10c03fcc 	andi	r3,r2,255
 1007b88:	18c0201c 	xori	r3,r3,128
 1007b8c:	18ffe004 	addi	r3,r3,-128
 1007b90:	2005883a 	mov	r2,r4
 1007b94:	10c00025 	stbio	r3,0(r2)
}

void alt_up_character_lcd_write(alt_up_character_lcd_dev *dev, const char *ptr, unsigned int len)
{
	unsigned int i;
	for (i = 0; i < len; i++)
 1007b98:	e0bffc17 	ldw	r2,-16(fp)
 1007b9c:	10800044 	addi	r2,r2,1
 1007ba0:	e0bffc15 	stw	r2,-16(fp)
 1007ba4:	e0fffc17 	ldw	r3,-16(fp)
 1007ba8:	e0bfff17 	ldw	r2,-4(fp)
 1007bac:	18bfee36 	bltu	r3,r2,1007b68 <alt_up_character_lcd_write+0x20>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr+i));
	}
}
 1007bb0:	e037883a 	mov	sp,fp
 1007bb4:	df000017 	ldw	fp,0(sp)
 1007bb8:	dec00104 	addi	sp,sp,4
 1007bbc:	f800283a 	ret

01007bc0 <alt_up_character_lcd_string>:

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
 1007bc0:	defffd04 	addi	sp,sp,-12
 1007bc4:	df000215 	stw	fp,8(sp)
 1007bc8:	df000204 	addi	fp,sp,8
 1007bcc:	e13ffe15 	stw	r4,-8(fp)
 1007bd0:	e17fff15 	stw	r5,-4(fp)
	while ( *ptr )
 1007bd4:	00000d06 	br	1007c0c <alt_up_character_lcd_string+0x4c>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
 1007bd8:	e0bffe17 	ldw	r2,-8(fp)
 1007bdc:	10800a17 	ldw	r2,40(r2)
 1007be0:	11000044 	addi	r4,r2,1
 1007be4:	e0bfff17 	ldw	r2,-4(fp)
 1007be8:	10800003 	ldbu	r2,0(r2)
 1007bec:	10c03fcc 	andi	r3,r2,255
 1007bf0:	18c0201c 	xori	r3,r3,128
 1007bf4:	18ffe004 	addi	r3,r3,-128
 1007bf8:	2005883a 	mov	r2,r4
 1007bfc:	10c00025 	stbio	r3,0(r2)
		++ptr;
 1007c00:	e0bfff17 	ldw	r2,-4(fp)
 1007c04:	10800044 	addi	r2,r2,1
 1007c08:	e0bfff15 	stw	r2,-4(fp)
	}
}

void alt_up_character_lcd_string(alt_up_character_lcd_dev *dev, const char *ptr)
{
	while ( *ptr )
 1007c0c:	e0bfff17 	ldw	r2,-4(fp)
 1007c10:	10800003 	ldbu	r2,0(r2)
 1007c14:	10803fcc 	andi	r2,r2,255
 1007c18:	1080201c 	xori	r2,r2,128
 1007c1c:	10bfe004 	addi	r2,r2,-128
 1007c20:	1004c03a 	cmpne	r2,r2,zero
 1007c24:	103fec1e 	bne	r2,zero,1007bd8 <alt_up_character_lcd_string+0x18>
	{
		IOWR_ALT_UP_CHARACTER_LCD_DATA(dev->base, *(ptr));
		++ptr;
	}
}
 1007c28:	e037883a 	mov	sp,fp
 1007c2c:	df000017 	ldw	fp,0(sp)
 1007c30:	dec00104 	addi	sp,sp,4
 1007c34:	f800283a 	ret

01007c38 <alt_up_character_lcd_write_fd>:

// this function isn't used, and is included for future upgrades
int alt_up_character_lcd_write_fd(alt_fd *fd, const char *ptr, int len)
{
 1007c38:	defffb04 	addi	sp,sp,-20
 1007c3c:	dfc00415 	stw	ra,16(sp)
 1007c40:	df000315 	stw	fp,12(sp)
 1007c44:	df000304 	addi	fp,sp,12
 1007c48:	e13ffd15 	stw	r4,-12(fp)
 1007c4c:	e17ffe15 	stw	r5,-8(fp)
 1007c50:	e1bfff15 	stw	r6,-4(fp)
	alt_up_character_lcd_write( (alt_up_character_lcd_dev *) fd->dev, ptr, (unsigned int) len);
 1007c54:	e0bffd17 	ldw	r2,-12(fp)
 1007c58:	10800017 	ldw	r2,0(r2)
 1007c5c:	1009883a 	mov	r4,r2
 1007c60:	e1bfff17 	ldw	r6,-4(fp)
 1007c64:	e17ffe17 	ldw	r5,-8(fp)
 1007c68:	1007b480 	call	1007b48 <alt_up_character_lcd_write>
	return 0;
 1007c6c:	0005883a 	mov	r2,zero
}
 1007c70:	e037883a 	mov	sp,fp
 1007c74:	dfc00117 	ldw	ra,4(sp)
 1007c78:	df000017 	ldw	fp,0(sp)
 1007c7c:	dec00204 	addi	sp,sp,8
 1007c80:	f800283a 	ret

01007c84 <alt_up_character_lcd_set_cursor_pos>:

int alt_up_character_lcd_set_cursor_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, 
	 unsigned y_pos)
{
 1007c84:	defff904 	addi	sp,sp,-28
 1007c88:	dfc00615 	stw	ra,24(sp)
 1007c8c:	df000515 	stw	fp,20(sp)
 1007c90:	df000504 	addi	fp,sp,20
 1007c94:	e13ffc15 	stw	r4,-16(fp)
 1007c98:	e17ffd15 	stw	r5,-12(fp)
 1007c9c:	e1bffe15 	stw	r6,-8(fp)
	//boundary check
	if (x_pos > 39 || y_pos > 1 )
 1007ca0:	e0bffd17 	ldw	r2,-12(fp)
 1007ca4:	10800a28 	cmpgeui	r2,r2,40
 1007ca8:	1000031e 	bne	r2,zero,1007cb8 <alt_up_character_lcd_set_cursor_pos+0x34>
 1007cac:	e0bffe17 	ldw	r2,-8(fp)
 1007cb0:	108000b0 	cmpltui	r2,r2,2
 1007cb4:	1000031e 	bne	r2,zero,1007cc4 <alt_up_character_lcd_set_cursor_pos+0x40>
		// invalid argument
		return -1;
 1007cb8:	00bfffc4 	movi	r2,-1
 1007cbc:	e0bfff15 	stw	r2,-4(fp)
 1007cc0:	00000806 	br	1007ce4 <alt_up_character_lcd_set_cursor_pos+0x60>
	// calculate address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1007cc4:	e13ffd17 	ldw	r4,-12(fp)
 1007cc8:	e17ffe17 	ldw	r5,-8(fp)
 1007ccc:	1007a240 	call	1007a24 <get_DDRAM_addr>
 1007cd0:	e0bffb05 	stb	r2,-20(fp)
	// set the cursor
	alt_up_character_lcd_send_cmd(lcd, addr);
 1007cd4:	e17ffb03 	ldbu	r5,-20(fp)
 1007cd8:	e13ffc17 	ldw	r4,-16(fp)
 1007cdc:	1007aa00 	call	1007aa0 <alt_up_character_lcd_send_cmd>
	return 0;
 1007ce0:	e03fff15 	stw	zero,-4(fp)
 1007ce4:	e0bfff17 	ldw	r2,-4(fp)
}
 1007ce8:	e037883a 	mov	sp,fp
 1007cec:	dfc00117 	ldw	ra,4(sp)
 1007cf0:	df000017 	ldw	fp,0(sp)
 1007cf4:	dec00204 	addi	sp,sp,8
 1007cf8:	f800283a 	ret

01007cfc <alt_up_character_lcd_shift_cursor>:

void alt_up_character_lcd_shift_cursor(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1007cfc:	defff904 	addi	sp,sp,-28
 1007d00:	dfc00615 	stw	ra,24(sp)
 1007d04:	df000515 	stw	fp,20(sp)
 1007d08:	df000504 	addi	fp,sp,20
 1007d0c:	e13ffc15 	stw	r4,-16(fp)
 1007d10:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1007d14:	e0bffd17 	ldw	r2,-12(fp)
 1007d18:	1005003a 	cmpeq	r2,r2,zero
 1007d1c:	10001e1e 	bne	r2,zero,1007d98 <alt_up_character_lcd_shift_cursor+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
 1007d20:	e0bffd17 	ldw	r2,-12(fp)
 1007d24:	10800050 	cmplti	r2,r2,1
 1007d28:	1000031e 	bne	r2,zero,1007d38 <alt_up_character_lcd_shift_cursor+0x3c>
 1007d2c:	00800504 	movi	r2,20
 1007d30:	e0bfff05 	stb	r2,-4(fp)
 1007d34:	00000206 	br	1007d40 <alt_up_character_lcd_shift_cursor+0x44>
 1007d38:	00c00404 	movi	r3,16
 1007d3c:	e0ffff05 	stb	r3,-4(fp)
 1007d40:	e0bfff03 	ldbu	r2,-4(fp)
 1007d44:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1007d48:	e0fffd17 	ldw	r3,-12(fp)
 1007d4c:	e0fffe15 	stw	r3,-8(fp)
 1007d50:	e0fffe17 	ldw	r3,-8(fp)
 1007d54:	1804403a 	cmpge	r2,r3,zero
 1007d58:	1000031e 	bne	r2,zero,1007d68 <alt_up_character_lcd_shift_cursor+0x6c>
 1007d5c:	e0bffe17 	ldw	r2,-8(fp)
 1007d60:	0085c83a 	sub	r2,zero,r2
 1007d64:	e0bffe15 	stw	r2,-8(fp)
 1007d68:	e0fffe17 	ldw	r3,-8(fp)
 1007d6c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1007d70:	00000306 	br	1007d80 <alt_up_character_lcd_shift_cursor+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1007d74:	e17ffb43 	ldbu	r5,-19(fp)
 1007d78:	e13ffc17 	ldw	r4,-16(fp)
 1007d7c:	1007aa00 	call	1007aa0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_CURSOR_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1007d80:	e0bffb03 	ldbu	r2,-20(fp)
 1007d84:	10bfffc4 	addi	r2,r2,-1
 1007d88:	e0bffb05 	stb	r2,-20(fp)
 1007d8c:	e0bffb03 	ldbu	r2,-20(fp)
 1007d90:	10803fd8 	cmpnei	r2,r2,255
 1007d94:	103ff71e 	bne	r2,zero,1007d74 <alt_up_character_lcd_shift_cursor+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1007d98:	e037883a 	mov	sp,fp
 1007d9c:	dfc00117 	ldw	ra,4(sp)
 1007da0:	df000017 	ldw	fp,0(sp)
 1007da4:	dec00204 	addi	sp,sp,8
 1007da8:	f800283a 	ret

01007dac <alt_up_character_lcd_shift_display>:

void alt_up_character_lcd_shift_display(alt_up_character_lcd_dev *lcd, int x_right_shift_offset)
{
 1007dac:	defff904 	addi	sp,sp,-28
 1007db0:	dfc00615 	stw	ra,24(sp)
 1007db4:	df000515 	stw	fp,20(sp)
 1007db8:	df000504 	addi	fp,sp,20
 1007dbc:	e13ffc15 	stw	r4,-16(fp)
 1007dc0:	e17ffd15 	stw	r5,-12(fp)
	if (x_right_shift_offset == 0) 
 1007dc4:	e0bffd17 	ldw	r2,-12(fp)
 1007dc8:	1005003a 	cmpeq	r2,r2,zero
 1007dcc:	10001e1e 	bne	r2,zero,1007e48 <alt_up_character_lcd_shift_display+0x9c>
		// don't ask me to do nothing 
		return;

	// see shift right or left
	unsigned char shift_cmd = (x_right_shift_offset > 0) ? 
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
 1007dd0:	e0bffd17 	ldw	r2,-12(fp)
 1007dd4:	10800050 	cmplti	r2,r2,1
 1007dd8:	1000031e 	bne	r2,zero,1007de8 <alt_up_character_lcd_shift_display+0x3c>
 1007ddc:	00800704 	movi	r2,28
 1007de0:	e0bfff05 	stb	r2,-4(fp)
 1007de4:	00000206 	br	1007df0 <alt_up_character_lcd_shift_display+0x44>
 1007de8:	00c00604 	movi	r3,24
 1007dec:	e0ffff05 	stb	r3,-4(fp)
 1007df0:	e0bfff03 	ldbu	r2,-4(fp)
 1007df4:	e0bffb45 	stb	r2,-19(fp)
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
 1007df8:	e0fffd17 	ldw	r3,-12(fp)
 1007dfc:	e0fffe15 	stw	r3,-8(fp)
 1007e00:	e0fffe17 	ldw	r3,-8(fp)
 1007e04:	1804403a 	cmpge	r2,r3,zero
 1007e08:	1000031e 	bne	r2,zero,1007e18 <alt_up_character_lcd_shift_display+0x6c>
 1007e0c:	e0bffe17 	ldw	r2,-8(fp)
 1007e10:	0085c83a 	sub	r2,zero,r2
 1007e14:	e0bffe15 	stw	r2,-8(fp)
 1007e18:	e0fffe17 	ldw	r3,-8(fp)
 1007e1c:	e0fffb05 	stb	r3,-20(fp)
	// do the shift
	while (num_offset-- > 0)
 1007e20:	00000306 	br	1007e30 <alt_up_character_lcd_shift_display+0x84>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
 1007e24:	e17ffb43 	ldbu	r5,-19(fp)
 1007e28:	e13ffc17 	ldw	r4,-16(fp)
 1007e2c:	1007aa00 	call	1007aa0 <alt_up_character_lcd_send_cmd>
		ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_RIGHT : ALT_UP_CHARACTER_LCD_COMM_DISPLAY_SHIFT_LEFT;
	// see how many to shift
	unsigned char num_offset = (x_right_shift_offset > 0) ? x_right_shift_offset : 
		-x_right_shift_offset;
	// do the shift
	while (num_offset-- > 0)
 1007e30:	e0bffb03 	ldbu	r2,-20(fp)
 1007e34:	10bfffc4 	addi	r2,r2,-1
 1007e38:	e0bffb05 	stb	r2,-20(fp)
 1007e3c:	e0bffb03 	ldbu	r2,-20(fp)
 1007e40:	10803fd8 	cmpnei	r2,r2,255
 1007e44:	103ff71e 	bne	r2,zero,1007e24 <alt_up_character_lcd_shift_display+0x78>
		alt_up_character_lcd_send_cmd(lcd, shift_cmd);
}
 1007e48:	e037883a 	mov	sp,fp
 1007e4c:	dfc00117 	ldw	ra,4(sp)
 1007e50:	df000017 	ldw	fp,0(sp)
 1007e54:	dec00204 	addi	sp,sp,8
 1007e58:	f800283a 	ret

01007e5c <alt_up_character_lcd_erase_pos>:

int alt_up_character_lcd_erase_pos(alt_up_character_lcd_dev *lcd, unsigned x_pos, unsigned y_pos)
{
 1007e5c:	defff904 	addi	sp,sp,-28
 1007e60:	dfc00615 	stw	ra,24(sp)
 1007e64:	df000515 	stw	fp,20(sp)
 1007e68:	df000504 	addi	fp,sp,20
 1007e6c:	e13ffc15 	stw	r4,-16(fp)
 1007e70:	e17ffd15 	stw	r5,-12(fp)
 1007e74:	e1bffe15 	stw	r6,-8(fp)
	// boundary check
	if (x_pos > 39 || y_pos > 1 )
 1007e78:	e0bffd17 	ldw	r2,-12(fp)
 1007e7c:	10800a28 	cmpgeui	r2,r2,40
 1007e80:	1000031e 	bne	r2,zero,1007e90 <alt_up_character_lcd_erase_pos+0x34>
 1007e84:	e0bffe17 	ldw	r2,-8(fp)
 1007e88:	108000b0 	cmpltui	r2,r2,2
 1007e8c:	1000031e 	bne	r2,zero,1007e9c <alt_up_character_lcd_erase_pos+0x40>
		return -1;
 1007e90:	00bfffc4 	movi	r2,-1
 1007e94:	e0bfff15 	stw	r2,-4(fp)
 1007e98:	00000e06 	br	1007ed4 <alt_up_character_lcd_erase_pos+0x78>

	// get address
	unsigned char addr = get_DDRAM_addr(x_pos, y_pos);
 1007e9c:	e13ffd17 	ldw	r4,-12(fp)
 1007ea0:	e17ffe17 	ldw	r5,-8(fp)
 1007ea4:	1007a240 	call	1007a24 <get_DDRAM_addr>
 1007ea8:	e0bffb05 	stb	r2,-20(fp)
	// set cursor to dest point
	alt_up_character_lcd_send_cmd(lcd, addr);
 1007eac:	e17ffb03 	ldbu	r5,-20(fp)
 1007eb0:	e13ffc17 	ldw	r4,-16(fp)
 1007eb4:	1007aa00 	call	1007aa0 <alt_up_character_lcd_send_cmd>
	//send an empty char as erase (refer to the Character Generator ROM part of the Datasheet)
	IOWR_ALT_UP_CHARACTER_LCD_DATA(lcd->base, (0x00000002) );
 1007eb8:	e0bffc17 	ldw	r2,-16(fp)
 1007ebc:	10800a17 	ldw	r2,40(r2)
 1007ec0:	10800044 	addi	r2,r2,1
 1007ec4:	1007883a 	mov	r3,r2
 1007ec8:	00800084 	movi	r2,2
 1007ecc:	18800025 	stbio	r2,0(r3)
	return 0;
 1007ed0:	e03fff15 	stw	zero,-4(fp)
 1007ed4:	e0bfff17 	ldw	r2,-4(fp)
}
 1007ed8:	e037883a 	mov	sp,fp
 1007edc:	dfc00117 	ldw	ra,4(sp)
 1007ee0:	df000017 	ldw	fp,0(sp)
 1007ee4:	dec00204 	addi	sp,sp,8
 1007ee8:	f800283a 	ret

01007eec <alt_up_character_lcd_cursor_off>:

void alt_up_character_lcd_cursor_off(alt_up_character_lcd_dev *lcd)
{
 1007eec:	defffd04 	addi	sp,sp,-12
 1007ef0:	dfc00215 	stw	ra,8(sp)
 1007ef4:	df000115 	stw	fp,4(sp)
 1007ef8:	df000104 	addi	fp,sp,4
 1007efc:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_OFF);
 1007f00:	e13fff17 	ldw	r4,-4(fp)
 1007f04:	01400304 	movi	r5,12
 1007f08:	1007aa00 	call	1007aa0 <alt_up_character_lcd_send_cmd>
}
 1007f0c:	e037883a 	mov	sp,fp
 1007f10:	dfc00117 	ldw	ra,4(sp)
 1007f14:	df000017 	ldw	fp,0(sp)
 1007f18:	dec00204 	addi	sp,sp,8
 1007f1c:	f800283a 	ret

01007f20 <alt_up_character_lcd_cursor_blink_on>:

void alt_up_character_lcd_cursor_blink_on(alt_up_character_lcd_dev *lcd)
{
 1007f20:	defffd04 	addi	sp,sp,-12
 1007f24:	dfc00215 	stw	ra,8(sp)
 1007f28:	df000115 	stw	fp,4(sp)
 1007f2c:	df000104 	addi	fp,sp,4
 1007f30:	e13fff15 	stw	r4,-4(fp)
	alt_up_character_lcd_send_cmd(lcd, ALT_UP_CHARACTER_LCD_COMM_CURSOR_BLINK_ON);
 1007f34:	e13fff17 	ldw	r4,-4(fp)
 1007f38:	014003c4 	movi	r5,15
 1007f3c:	1007aa00 	call	1007aa0 <alt_up_character_lcd_send_cmd>
}
 1007f40:	e037883a 	mov	sp,fp
 1007f44:	dfc00117 	ldw	ra,4(sp)
 1007f48:	df000017 	ldw	fp,0(sp)
 1007f4c:	dec00204 	addi	sp,sp,8
 1007f50:	f800283a 	ret

01007f54 <alt_up_rs232_enable_read_interrupt>:
#include "altera_up_avalon_rs232.h"
#include "altera_up_avalon_rs232_regs.h"


void alt_up_rs232_enable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1007f54:	defffd04 	addi	sp,sp,-12
 1007f58:	df000215 	stw	fp,8(sp)
 1007f5c:	df000204 	addi	fp,sp,8
 1007f60:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1007f64:	e0bfff17 	ldw	r2,-4(fp)
 1007f68:	10800a17 	ldw	r2,40(r2)
 1007f6c:	10800104 	addi	r2,r2,4
 1007f70:	10800037 	ldwio	r2,0(r2)
 1007f74:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 1 while maintaining other bits the same
	ctrl_reg |= ALT_UP_RS232_CONTROL_RE_MSK;
 1007f78:	e0bffe17 	ldw	r2,-8(fp)
 1007f7c:	10800054 	ori	r2,r2,1
 1007f80:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1007f84:	e0bfff17 	ldw	r2,-4(fp)
 1007f88:	10800a17 	ldw	r2,40(r2)
 1007f8c:	10800104 	addi	r2,r2,4
 1007f90:	e0fffe17 	ldw	r3,-8(fp)
 1007f94:	10c00035 	stwio	r3,0(r2)
}
 1007f98:	e037883a 	mov	sp,fp
 1007f9c:	df000017 	ldw	fp,0(sp)
 1007fa0:	dec00104 	addi	sp,sp,4
 1007fa4:	f800283a 	ret

01007fa8 <alt_up_rs232_disable_read_interrupt>:

void alt_up_rs232_disable_read_interrupt(alt_up_rs232_dev *rs232)
{
 1007fa8:	defffd04 	addi	sp,sp,-12
 1007fac:	df000215 	stw	fp,8(sp)
 1007fb0:	df000204 	addi	fp,sp,8
 1007fb4:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 1007fb8:	e0bfff17 	ldw	r2,-4(fp)
 1007fbc:	10800a17 	ldw	r2,40(r2)
 1007fc0:	10800104 	addi	r2,r2,4
 1007fc4:	10800037 	ldwio	r2,0(r2)
 1007fc8:	e0bffe15 	stw	r2,-8(fp)
	// set RE to 0 while maintaining other bits the same
	ctrl_reg &= ~ALT_UP_RS232_CONTROL_RE_MSK;
 1007fcc:	e0fffe17 	ldw	r3,-8(fp)
 1007fd0:	00bfff84 	movi	r2,-2
 1007fd4:	1884703a 	and	r2,r3,r2
 1007fd8:	e0bffe15 	stw	r2,-8(fp)
	IOWR_ALT_UP_RS232_CONTROL(rs232->base, ctrl_reg);
 1007fdc:	e0bfff17 	ldw	r2,-4(fp)
 1007fe0:	10800a17 	ldw	r2,40(r2)
 1007fe4:	10800104 	addi	r2,r2,4
 1007fe8:	e0fffe17 	ldw	r3,-8(fp)
 1007fec:	10c00035 	stwio	r3,0(r2)
}
 1007ff0:	e037883a 	mov	sp,fp
 1007ff4:	df000017 	ldw	fp,0(sp)
 1007ff8:	dec00104 	addi	sp,sp,4
 1007ffc:	f800283a 	ret

01008000 <alt_up_rs232_get_used_space_in_read_FIFO>:

unsigned alt_up_rs232_get_used_space_in_read_FIFO(alt_up_rs232_dev *rs232)
{
 1008000:	defffd04 	addi	sp,sp,-12
 1008004:	df000215 	stw	fp,8(sp)
 1008008:	df000204 	addi	fp,sp,8
 100800c:	e13fff15 	stw	r4,-4(fp)
	alt_u16 ravail = 0;
 1008010:	e03ffe0d 	sth	zero,-8(fp)
	// we can only read the 16 bits for RAVAIL --- a read of DATA will discard the data
//	ravail = IORD_16DIRECT(IOADDR_ALT_UP_RS232_DATA(rs232->base), 2); 
	ravail = IORD_ALT_UP_RS232_RAVAIL(rs232->base); 
 1008014:	e0bfff17 	ldw	r2,-4(fp)
 1008018:	10800a17 	ldw	r2,40(r2)
 100801c:	10800084 	addi	r2,r2,2
 1008020:	1080002b 	ldhuio	r2,0(r2)
 1008024:	e0bffe0d 	sth	r2,-8(fp)
//	return ravail;
	return (ravail & ALT_UP_RS232_RAVAIL_MSK) >> ALT_UP_RS232_RAVAIL_OFST;
 1008028:	e0bffe0b 	ldhu	r2,-8(fp)
}
 100802c:	e037883a 	mov	sp,fp
 1008030:	df000017 	ldw	fp,0(sp)
 1008034:	dec00104 	addi	sp,sp,4
 1008038:	f800283a 	ret

0100803c <alt_up_rs232_get_available_space_in_write_FIFO>:

unsigned alt_up_rs232_get_available_space_in_write_FIFO(alt_up_rs232_dev *rs232)
{
 100803c:	defffd04 	addi	sp,sp,-12
 1008040:	df000215 	stw	fp,8(sp)
 1008044:	df000204 	addi	fp,sp,8
 1008048:	e13fff15 	stw	r4,-4(fp)
	alt_u32 ctrl_reg;
	ctrl_reg = IORD_ALT_UP_RS232_CONTROL(rs232->base); 
 100804c:	e0bfff17 	ldw	r2,-4(fp)
 1008050:	10800a17 	ldw	r2,40(r2)
 1008054:	10800104 	addi	r2,r2,4
 1008058:	10800037 	ldwio	r2,0(r2)
 100805c:	e0bffe15 	stw	r2,-8(fp)
	return (ctrl_reg & ALT_UP_RS232_CONTROL_WSPACE_MSK) >> ALT_UP_RS232_CONTROL_WSPACE_OFST;
 1008060:	e0bffe17 	ldw	r2,-8(fp)
 1008064:	10bfffec 	andhi	r2,r2,65535
 1008068:	1004d43a 	srli	r2,r2,16
}
 100806c:	e037883a 	mov	sp,fp
 1008070:	df000017 	ldw	fp,0(sp)
 1008074:	dec00104 	addi	sp,sp,4
 1008078:	f800283a 	ret

0100807c <alt_up_rs232_check_parity>:

int alt_up_rs232_check_parity(alt_u32 data_reg)
{
 100807c:	defffc04 	addi	sp,sp,-16
 1008080:	df000315 	stw	fp,12(sp)
 1008084:	df000304 	addi	fp,sp,12
 1008088:	e13ffe15 	stw	r4,-8(fp)
	unsigned parity_error = (data_reg & ALT_UP_RS232_DATA_PE_MSK) >> ALT_UP_RS232_DATA_PE_OFST;
 100808c:	e0bffe17 	ldw	r2,-8(fp)
 1008090:	1080800c 	andi	r2,r2,512
 1008094:	1004d27a 	srli	r2,r2,9
 1008098:	e0bffd15 	stw	r2,-12(fp)
	return (parity_error ? -1 : 0);
 100809c:	e0bffd17 	ldw	r2,-12(fp)
 10080a0:	1005003a 	cmpeq	r2,r2,zero
 10080a4:	1000031e 	bne	r2,zero,10080b4 <alt_up_rs232_check_parity+0x38>
 10080a8:	00bfffc4 	movi	r2,-1
 10080ac:	e0bfff15 	stw	r2,-4(fp)
 10080b0:	00000106 	br	10080b8 <alt_up_rs232_check_parity+0x3c>
 10080b4:	e03fff15 	stw	zero,-4(fp)
 10080b8:	e0bfff17 	ldw	r2,-4(fp)
}
 10080bc:	e037883a 	mov	sp,fp
 10080c0:	df000017 	ldw	fp,0(sp)
 10080c4:	dec00104 	addi	sp,sp,4
 10080c8:	f800283a 	ret

010080cc <alt_up_rs232_write_data>:

int alt_up_rs232_write_data(alt_up_rs232_dev *rs232, alt_u8 data)
{
 10080cc:	defffc04 	addi	sp,sp,-16
 10080d0:	df000315 	stw	fp,12(sp)
 10080d4:	df000304 	addi	fp,sp,12
 10080d8:	e13ffe15 	stw	r4,-8(fp)
 10080dc:	e17fff05 	stb	r5,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 10080e0:	e0bffe17 	ldw	r2,-8(fp)
 10080e4:	10800a17 	ldw	r2,40(r2)
 10080e8:	10800037 	ldwio	r2,0(r2)
 10080ec:	e0bffd15 	stw	r2,-12(fp)

	// we can write directly without thinking about other bit fields for this
	// case ONLY, because only DATA field of the data register is writable
	IOWR_ALT_UP_RS232_DATA(rs232->base, (data>>ALT_UP_RS232_DATA_DATA_OFST) & ALT_UP_RS232_DATA_DATA_MSK);
 10080f0:	e0bffe17 	ldw	r2,-8(fp)
 10080f4:	10800a17 	ldw	r2,40(r2)
 10080f8:	e0ffff03 	ldbu	r3,-4(fp)
 10080fc:	10c00035 	stwio	r3,0(r2)
	return 0;
 1008100:	0005883a 	mov	r2,zero
}
 1008104:	e037883a 	mov	sp,fp
 1008108:	df000017 	ldw	fp,0(sp)
 100810c:	dec00104 	addi	sp,sp,4
 1008110:	f800283a 	ret

01008114 <alt_up_rs232_read_data>:

int alt_up_rs232_read_data(alt_up_rs232_dev *rs232, alt_u8 *data, alt_u8 *parity_error)
{
 1008114:	defffa04 	addi	sp,sp,-24
 1008118:	dfc00515 	stw	ra,20(sp)
 100811c:	df000415 	stw	fp,16(sp)
 1008120:	df000404 	addi	fp,sp,16
 1008124:	e13ffd15 	stw	r4,-12(fp)
 1008128:	e17ffe15 	stw	r5,-8(fp)
 100812c:	e1bfff15 	stw	r6,-4(fp)
	alt_u32 data_reg;
	data_reg = IORD_ALT_UP_RS232_DATA(rs232->base);
 1008130:	e0bffd17 	ldw	r2,-12(fp)
 1008134:	10800a17 	ldw	r2,40(r2)
 1008138:	10800037 	ldwio	r2,0(r2)
 100813c:	e0bffc15 	stw	r2,-16(fp)
	*data = (data_reg & ALT_UP_RS232_DATA_DATA_MSK) >> ALT_UP_RS232_DATA_DATA_OFST;
 1008140:	e0bffc17 	ldw	r2,-16(fp)
 1008144:	1007883a 	mov	r3,r2
 1008148:	e0bffe17 	ldw	r2,-8(fp)
 100814c:	10c00005 	stb	r3,0(r2)
	*parity_error = alt_up_rs232_check_parity(data_reg);
 1008150:	e13ffc17 	ldw	r4,-16(fp)
 1008154:	100807c0 	call	100807c <alt_up_rs232_check_parity>
 1008158:	1007883a 	mov	r3,r2
 100815c:	e0bfff17 	ldw	r2,-4(fp)
 1008160:	10c00005 	stb	r3,0(r2)
	return (((data_reg & ALT_UP_RS232_DATA_RVALID_MSK) >> ALT_UP_RS232_DATA_RVALID_OFST) - 1);
 1008164:	e0bffc17 	ldw	r2,-16(fp)
 1008168:	10a0000c 	andi	r2,r2,32768
 100816c:	1004d3fa 	srli	r2,r2,15
 1008170:	10bfffc4 	addi	r2,r2,-1
}
 1008174:	e037883a 	mov	sp,fp
 1008178:	dfc00117 	ldw	ra,4(sp)
 100817c:	df000017 	ldw	fp,0(sp)
 1008180:	dec00204 	addi	sp,sp,8
 1008184:	f800283a 	ret

01008188 <alt_up_rs232_read_fd>:

int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
 1008188:	defff804 	addi	sp,sp,-32
 100818c:	dfc00715 	stw	ra,28(sp)
 1008190:	df000615 	stw	fp,24(sp)
 1008194:	df000604 	addi	fp,sp,24
 1008198:	e13ffd15 	stw	r4,-12(fp)
 100819c:	e17ffe15 	stw	r5,-8(fp)
 10081a0:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 10081a4:	e0bffd17 	ldw	r2,-12(fp)
 10081a8:	10800017 	ldw	r2,0(r2)
 10081ac:	e0bffb15 	stw	r2,-20(fp)
	int count = 0;
 10081b0:	e03ffa15 	stw	zero,-24(fp)
	alt_u8 parity_error;
	while(len--)
 10081b4:	00000c06 	br	10081e8 <alt_up_rs232_read_fd+0x60>
	{
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
 10081b8:	e17ffe17 	ldw	r5,-8(fp)
 10081bc:	e0bffe17 	ldw	r2,-8(fp)
 10081c0:	10800044 	addi	r2,r2,1
 10081c4:	e0bffe15 	stw	r2,-8(fp)
 10081c8:	e1bffc04 	addi	r6,fp,-16
 10081cc:	e13ffb17 	ldw	r4,-20(fp)
 10081d0:	10081140 	call	1008114 <alt_up_rs232_read_data>
 10081d4:	1004c03a 	cmpne	r2,r2,zero
 10081d8:	1000091e 	bne	r2,zero,1008200 <alt_up_rs232_read_fd+0x78>
			count++;
 10081dc:	e0bffa17 	ldw	r2,-24(fp)
 10081e0:	10800044 	addi	r2,r2,1
 10081e4:	e0bffa15 	stw	r2,-24(fp)
int alt_up_rs232_read_fd (alt_fd* fd, char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	alt_u8 parity_error;
	while(len--)
 10081e8:	e0bfff17 	ldw	r2,-4(fp)
 10081ec:	10bfffc4 	addi	r2,r2,-1
 10081f0:	e0bfff15 	stw	r2,-4(fp)
 10081f4:	e0bfff17 	ldw	r2,-4(fp)
 10081f8:	10bfffd8 	cmpnei	r2,r2,-1
 10081fc:	103fee1e 	bne	r2,zero,10081b8 <alt_up_rs232_read_fd+0x30>
		if (alt_up_rs232_read_data(rs232, ptr++, &parity_error)==0)
			count++;
		else
			break;
	}
	return count;
 1008200:	e0bffa17 	ldw	r2,-24(fp)
}
 1008204:	e037883a 	mov	sp,fp
 1008208:	dfc00117 	ldw	ra,4(sp)
 100820c:	df000017 	ldw	fp,0(sp)
 1008210:	dec00204 	addi	sp,sp,8
 1008214:	f800283a 	ret

01008218 <alt_up_rs232_write_fd>:

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
 1008218:	defff904 	addi	sp,sp,-28
 100821c:	dfc00615 	stw	ra,24(sp)
 1008220:	df000515 	stw	fp,20(sp)
 1008224:	df000504 	addi	fp,sp,20
 1008228:	e13ffd15 	stw	r4,-12(fp)
 100822c:	e17ffe15 	stw	r5,-8(fp)
 1008230:	e1bfff15 	stw	r6,-4(fp)
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
 1008234:	e0bffd17 	ldw	r2,-12(fp)
 1008238:	10800017 	ldw	r2,0(r2)
 100823c:	e0bffc15 	stw	r2,-16(fp)
	int count = 0;
 1008240:	e03ffb15 	stw	zero,-20(fp)
	while(len--)
 1008244:	00000d06 	br	100827c <alt_up_rs232_write_fd+0x64>
	{
		if (alt_up_rs232_write_data(rs232, *ptr)==0)
 1008248:	e0bffe17 	ldw	r2,-8(fp)
 100824c:	10800003 	ldbu	r2,0(r2)
 1008250:	11403fcc 	andi	r5,r2,255
 1008254:	e13ffc17 	ldw	r4,-16(fp)
 1008258:	10080cc0 	call	10080cc <alt_up_rs232_write_data>
 100825c:	1004c03a 	cmpne	r2,r2,zero
 1008260:	10000c1e 	bne	r2,zero,1008294 <alt_up_rs232_write_fd+0x7c>
		{
			count++;
 1008264:	e0bffb17 	ldw	r2,-20(fp)
 1008268:	10800044 	addi	r2,r2,1
 100826c:	e0bffb15 	stw	r2,-20(fp)
			ptr++;
 1008270:	e0bffe17 	ldw	r2,-8(fp)
 1008274:	10800044 	addi	r2,r2,1
 1008278:	e0bffe15 	stw	r2,-8(fp)

int alt_up_rs232_write_fd (alt_fd* fd, const char* ptr, int len)
{
	alt_up_rs232_dev *rs232 = (alt_up_rs232_dev*)fd->dev;
	int count = 0;
	while(len--)
 100827c:	e0bfff17 	ldw	r2,-4(fp)
 1008280:	10bfffc4 	addi	r2,r2,-1
 1008284:	e0bfff15 	stw	r2,-4(fp)
 1008288:	e0bfff17 	ldw	r2,-4(fp)
 100828c:	10bfffd8 	cmpnei	r2,r2,-1
 1008290:	103fed1e 	bne	r2,zero,1008248 <alt_up_rs232_write_fd+0x30>
			ptr++;
		}
		else
			break;
	}
	return count;
 1008294:	e0bffb17 	ldw	r2,-20(fp)
}
 1008298:	e037883a 	mov	sp,fp
 100829c:	dfc00117 	ldw	ra,4(sp)
 10082a0:	df000017 	ldw	fp,0(sp)
 10082a4:	dec00204 	addi	sp,sp,8
 10082a8:	f800283a 	ret

010082ac <alt_up_rs232_open_dev>:

alt_up_rs232_dev* alt_up_rs232_open_dev(const char* name)
{
 10082ac:	defffc04 	addi	sp,sp,-16
 10082b0:	dfc00315 	stw	ra,12(sp)
 10082b4:	df000215 	stw	fp,8(sp)
 10082b8:	df000204 	addi	fp,sp,8
 10082bc:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_rs232_dev *dev = (alt_up_rs232_dev*)alt_find_dev(name, &alt_dev_list);
 10082c0:	e13fff17 	ldw	r4,-4(fp)
 10082c4:	01404074 	movhi	r5,257
 10082c8:	29570e04 	addi	r5,r5,23608
 10082cc:	10086380 	call	1008638 <alt_find_dev>
 10082d0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 10082d4:	e0bffe17 	ldw	r2,-8(fp)
}
 10082d8:	e037883a 	mov	sp,fp
 10082dc:	dfc00117 	ldw	ra,4(sp)
 10082e0:	df000017 	ldw	fp,0(sp)
 10082e4:	dec00204 	addi	sp,sp,8
 10082e8:	f800283a 	ret

010082ec <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 10082ec:	defff404 	addi	sp,sp,-48
 10082f0:	df000b15 	stw	fp,44(sp)
 10082f4:	df000b04 	addi	fp,sp,44
 10082f8:	e13ffb15 	stw	r4,-20(fp)
 10082fc:	e17ffc15 	stw	r5,-16(fp)
 1008300:	e1bffd15 	stw	r6,-12(fp)
 1008304:	e1fffe15 	stw	r7,-8(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 1008308:	e03ff915 	stw	zero,-28(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 100830c:	00804074 	movhi	r2,257
 1008310:	109df404 	addi	r2,r2,30672
 1008314:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 1008318:	1005003a 	cmpeq	r2,r2,zero
 100831c:	1000411e 	bne	r2,zero,1008424 <alt_alarm_start+0x138>
  {
    if (alarm)
 1008320:	e0bffb17 	ldw	r2,-20(fp)
 1008324:	1005003a 	cmpeq	r2,r2,zero
 1008328:	10003b1e 	bne	r2,zero,1008418 <alt_alarm_start+0x12c>
    {
      alarm->callback = callback;
 100832c:	e0fffb17 	ldw	r3,-20(fp)
 1008330:	e0bffd17 	ldw	r2,-12(fp)
 1008334:	18800315 	stw	r2,12(r3)
      alarm->context  = context;
 1008338:	e0fffb17 	ldw	r3,-20(fp)
 100833c:	e0bffe17 	ldw	r2,-8(fp)
 1008340:	18800515 	stw	r2,20(r3)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008344:	0005303a 	rdctl	r2,status
 1008348:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 100834c:	e0fff817 	ldw	r3,-32(fp)
 1008350:	00bfff84 	movi	r2,-2
 1008354:	1884703a 	and	r2,r3,r2
 1008358:	1001703a 	wrctl	status,r2
  
  return context;
 100835c:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 1008360:	e0bffa15 	stw	r2,-24(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 1008364:	00804074 	movhi	r2,257
 1008368:	109df504 	addi	r2,r2,30676
 100836c:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 1008370:	e0bff915 	stw	r2,-28(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 1008374:	e0fffc17 	ldw	r3,-16(fp)
 1008378:	e0bff917 	ldw	r2,-28(fp)
 100837c:	1885883a 	add	r2,r3,r2
 1008380:	10c00044 	addi	r3,r2,1
 1008384:	e0bffb17 	ldw	r2,-20(fp)
 1008388:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 100838c:	e0bffb17 	ldw	r2,-20(fp)
 1008390:	10c00217 	ldw	r3,8(r2)
 1008394:	e0bff917 	ldw	r2,-28(fp)
 1008398:	1880042e 	bgeu	r3,r2,10083ac <alt_alarm_start+0xc0>
      {
        alarm->rollover = 1;
 100839c:	e0fffb17 	ldw	r3,-20(fp)
 10083a0:	00800044 	movi	r2,1
 10083a4:	18800405 	stb	r2,16(r3)
 10083a8:	00000206 	br	10083b4 <alt_alarm_start+0xc8>
      }
      else
      {
        alarm->rollover = 0;
 10083ac:	e0bffb17 	ldw	r2,-20(fp)
 10083b0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 10083b4:	e0fffb17 	ldw	r3,-20(fp)
 10083b8:	00804074 	movhi	r2,257
 10083bc:	10972604 	addi	r2,r2,23704
 10083c0:	e0bff615 	stw	r2,-40(fp)
 10083c4:	e0fff715 	stw	r3,-36(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10083c8:	e0fff717 	ldw	r3,-36(fp)
 10083cc:	e0bff617 	ldw	r2,-40(fp)
 10083d0:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10083d4:	e0bff617 	ldw	r2,-40(fp)
 10083d8:	10c00017 	ldw	r3,0(r2)
 10083dc:	e0bff717 	ldw	r2,-36(fp)
 10083e0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10083e4:	e0bff617 	ldw	r2,-40(fp)
 10083e8:	10c00017 	ldw	r3,0(r2)
 10083ec:	e0bff717 	ldw	r2,-36(fp)
 10083f0:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10083f4:	e0fff617 	ldw	r3,-40(fp)
 10083f8:	e0bff717 	ldw	r2,-36(fp)
 10083fc:	18800015 	stw	r2,0(r3)
 1008400:	e0bffa17 	ldw	r2,-24(fp)
 1008404:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008408:	e0bff517 	ldw	r2,-44(fp)
 100840c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 1008410:	e03fff15 	stw	zero,-4(fp)
 1008414:	00000506 	br	100842c <alt_alarm_start+0x140>
    }
    else
    {
      return -EINVAL;
 1008418:	00bffa84 	movi	r2,-22
 100841c:	e0bfff15 	stw	r2,-4(fp)
 1008420:	00000206 	br	100842c <alt_alarm_start+0x140>
    }
  }
  else
  {
    return -ENOTSUP;
 1008424:	00bfde84 	movi	r2,-134
 1008428:	e0bfff15 	stw	r2,-4(fp)
 100842c:	e0bfff17 	ldw	r2,-4(fp)
  }
}
 1008430:	e037883a 	mov	sp,fp
 1008434:	df000017 	ldw	fp,0(sp)
 1008438:	dec00104 	addi	sp,sp,4
 100843c:	f800283a 	ret

01008440 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 1008440:	deffff04 	addi	sp,sp,-4
 1008444:	df000015 	stw	fp,0(sp)
 1008448:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 100844c:	e037883a 	mov	sp,fp
 1008450:	df000017 	ldw	fp,0(sp)
 1008454:	dec00104 	addi	sp,sp,4
 1008458:	f800283a 	ret

0100845c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 100845c:	defff904 	addi	sp,sp,-28
 1008460:	dfc00615 	stw	ra,24(sp)
 1008464:	df000515 	stw	fp,20(sp)
 1008468:	df000504 	addi	fp,sp,20
 100846c:	e13ffd15 	stw	r4,-12(fp)
 1008470:	e17ffe15 	stw	r5,-8(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 1008474:	e0bffd17 	ldw	r2,-12(fp)
 1008478:	1005003a 	cmpeq	r2,r2,zero
 100847c:	1000041e 	bne	r2,zero,1008490 <alt_dev_llist_insert+0x34>
 1008480:	e0bffd17 	ldw	r2,-12(fp)
 1008484:	10800217 	ldw	r2,8(r2)
 1008488:	1004c03a 	cmpne	r2,r2,zero
 100848c:	1000071e 	bne	r2,zero,10084ac <alt_dev_llist_insert+0x50>
  {
    ALT_ERRNO = EINVAL;
 1008490:	10085100 	call	1008510 <alt_get_errno>
 1008494:	1007883a 	mov	r3,r2
 1008498:	00800584 	movi	r2,22
 100849c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 10084a0:	00bffa84 	movi	r2,-22
 10084a4:	e0bfff15 	stw	r2,-4(fp)
 10084a8:	00001306 	br	10084f8 <alt_dev_llist_insert+0x9c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 10084ac:	e0fffd17 	ldw	r3,-12(fp)
 10084b0:	e0bffe17 	ldw	r2,-8(fp)
 10084b4:	e0bffb15 	stw	r2,-20(fp)
 10084b8:	e0fffc15 	stw	r3,-16(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 10084bc:	e0fffc17 	ldw	r3,-16(fp)
 10084c0:	e0bffb17 	ldw	r2,-20(fp)
 10084c4:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 10084c8:	e0bffb17 	ldw	r2,-20(fp)
 10084cc:	10c00017 	ldw	r3,0(r2)
 10084d0:	e0bffc17 	ldw	r2,-16(fp)
 10084d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 10084d8:	e0bffb17 	ldw	r2,-20(fp)
 10084dc:	10c00017 	ldw	r3,0(r2)
 10084e0:	e0bffc17 	ldw	r2,-16(fp)
 10084e4:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 10084e8:	e0fffb17 	ldw	r3,-20(fp)
 10084ec:	e0bffc17 	ldw	r2,-16(fp)
 10084f0:	18800015 	stw	r2,0(r3)

  return 0;  
 10084f4:	e03fff15 	stw	zero,-4(fp)
 10084f8:	e0bfff17 	ldw	r2,-4(fp)
}
 10084fc:	e037883a 	mov	sp,fp
 1008500:	dfc00117 	ldw	ra,4(sp)
 1008504:	df000017 	ldw	fp,0(sp)
 1008508:	dec00204 	addi	sp,sp,8
 100850c:	f800283a 	ret

01008510 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 1008510:	defffd04 	addi	sp,sp,-12
 1008514:	dfc00215 	stw	ra,8(sp)
 1008518:	df000115 	stw	fp,4(sp)
 100851c:	df000104 	addi	fp,sp,4
  return ((alt_errno) ? alt_errno() : &errno);
 1008520:	00804074 	movhi	r2,257
 1008524:	10971104 	addi	r2,r2,23620
 1008528:	10800017 	ldw	r2,0(r2)
 100852c:	1005003a 	cmpeq	r2,r2,zero
 1008530:	1000061e 	bne	r2,zero,100854c <alt_get_errno+0x3c>
 1008534:	00804074 	movhi	r2,257
 1008538:	10971104 	addi	r2,r2,23620
 100853c:	10800017 	ldw	r2,0(r2)
 1008540:	103ee83a 	callr	r2
 1008544:	e0bfff15 	stw	r2,-4(fp)
 1008548:	00000306 	br	1008558 <alt_get_errno+0x48>
 100854c:	00804074 	movhi	r2,257
 1008550:	109dec04 	addi	r2,r2,30640
 1008554:	e0bfff15 	stw	r2,-4(fp)
 1008558:	e0bfff17 	ldw	r2,-4(fp)
}
 100855c:	e037883a 	mov	sp,fp
 1008560:	dfc00117 	ldw	ra,4(sp)
 1008564:	df000017 	ldw	fp,0(sp)
 1008568:	dec00204 	addi	sp,sp,8
 100856c:	f800283a 	ret

01008570 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 1008570:	defffd04 	addi	sp,sp,-12
 1008574:	dfc00215 	stw	ra,8(sp)
 1008578:	df000115 	stw	fp,4(sp)
 100857c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 1008580:	00bfff04 	movi	r2,-4
 1008584:	00c04074 	movhi	r3,257
 1008588:	18e3ff04 	addi	r3,r3,-28676
 100858c:	1885883a 	add	r2,r3,r2
 1008590:	e0bfff15 	stw	r2,-4(fp)
 1008594:	00000606 	br	10085b0 <_do_ctors+0x40>
        (*ctor) (); 
 1008598:	e0bfff17 	ldw	r2,-4(fp)
 100859c:	10800017 	ldw	r2,0(r2)
 10085a0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 10085a4:	e0bfff17 	ldw	r2,-4(fp)
 10085a8:	10bfff04 	addi	r2,r2,-4
 10085ac:	e0bfff15 	stw	r2,-4(fp)
 10085b0:	e0ffff17 	ldw	r3,-4(fp)
 10085b4:	00804074 	movhi	r2,257
 10085b8:	10a3fe04 	addi	r2,r2,-28680
 10085bc:	18bff62e 	bgeu	r3,r2,1008598 <_do_ctors+0x28>
        (*ctor) (); 
}
 10085c0:	e037883a 	mov	sp,fp
 10085c4:	dfc00117 	ldw	ra,4(sp)
 10085c8:	df000017 	ldw	fp,0(sp)
 10085cc:	dec00204 	addi	sp,sp,8
 10085d0:	f800283a 	ret

010085d4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 10085d4:	defffd04 	addi	sp,sp,-12
 10085d8:	dfc00215 	stw	ra,8(sp)
 10085dc:	df000115 	stw	fp,4(sp)
 10085e0:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 10085e4:	00bfff04 	movi	r2,-4
 10085e8:	00c04074 	movhi	r3,257
 10085ec:	18e3ff04 	addi	r3,r3,-28676
 10085f0:	1885883a 	add	r2,r3,r2
 10085f4:	e0bfff15 	stw	r2,-4(fp)
 10085f8:	00000606 	br	1008614 <_do_dtors+0x40>
        (*dtor) (); 
 10085fc:	e0bfff17 	ldw	r2,-4(fp)
 1008600:	10800017 	ldw	r2,0(r2)
 1008604:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 1008608:	e0bfff17 	ldw	r2,-4(fp)
 100860c:	10bfff04 	addi	r2,r2,-4
 1008610:	e0bfff15 	stw	r2,-4(fp)
 1008614:	e0ffff17 	ldw	r3,-4(fp)
 1008618:	00804074 	movhi	r2,257
 100861c:	10a3ff04 	addi	r2,r2,-28676
 1008620:	18bff62e 	bgeu	r3,r2,10085fc <_do_dtors+0x28>
        (*dtor) (); 
}
 1008624:	e037883a 	mov	sp,fp
 1008628:	dfc00117 	ldw	ra,4(sp)
 100862c:	df000017 	ldw	fp,0(sp)
 1008630:	dec00204 	addi	sp,sp,8
 1008634:	f800283a 	ret

01008638 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 1008638:	defff904 	addi	sp,sp,-28
 100863c:	dfc00615 	stw	ra,24(sp)
 1008640:	df000515 	stw	fp,20(sp)
 1008644:	df000504 	addi	fp,sp,20
 1008648:	e13ffd15 	stw	r4,-12(fp)
 100864c:	e17ffe15 	stw	r5,-8(fp)
  alt_dev* next = (alt_dev*) llist->next;
 1008650:	e0bffe17 	ldw	r2,-8(fp)
 1008654:	10800017 	ldw	r2,0(r2)
 1008658:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 100865c:	e13ffd17 	ldw	r4,-12(fp)
 1008660:	100426c0 	call	100426c <strlen>
 1008664:	10800044 	addi	r2,r2,1
 1008668:	e0bffb15 	stw	r2,-20(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 100866c:	00000d06 	br	10086a4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 1008670:	e0bffc17 	ldw	r2,-16(fp)
 1008674:	11000217 	ldw	r4,8(r2)
 1008678:	e1bffb17 	ldw	r6,-20(fp)
 100867c:	e17ffd17 	ldw	r5,-12(fp)
 1008680:	1008e500 	call	1008e50 <memcmp>
 1008684:	1004c03a 	cmpne	r2,r2,zero
 1008688:	1000031e 	bne	r2,zero,1008698 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 100868c:	e0bffc17 	ldw	r2,-16(fp)
 1008690:	e0bfff15 	stw	r2,-4(fp)
 1008694:	00000706 	br	10086b4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 1008698:	e0bffc17 	ldw	r2,-16(fp)
 100869c:	10800017 	ldw	r2,0(r2)
 10086a0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 10086a4:	e0fffe17 	ldw	r3,-8(fp)
 10086a8:	e0bffc17 	ldw	r2,-16(fp)
 10086ac:	10fff01e 	bne	r2,r3,1008670 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 10086b0:	e03fff15 	stw	zero,-4(fp)
 10086b4:	e0bfff17 	ldw	r2,-4(fp)
}
 10086b8:	e037883a 	mov	sp,fp
 10086bc:	dfc00117 	ldw	ra,4(sp)
 10086c0:	df000017 	ldw	fp,0(sp)
 10086c4:	dec00204 	addi	sp,sp,8
 10086c8:	f800283a 	ret

010086cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 10086cc:	defffa04 	addi	sp,sp,-24
 10086d0:	dfc00515 	stw	ra,20(sp)
 10086d4:	df000415 	stw	fp,16(sp)
 10086d8:	df000404 	addi	fp,sp,16
 10086dc:	e13ffe15 	stw	r4,-8(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 10086e0:	00804074 	movhi	r2,257
 10086e4:	10970c04 	addi	r2,r2,23600
 10086e8:	10800017 	ldw	r2,0(r2)
 10086ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10086f0:	00003306 	br	10087c0 <alt_find_file+0xf4>
  {
    len = strlen(next->name);
 10086f4:	e0bffd17 	ldw	r2,-12(fp)
 10086f8:	11000217 	ldw	r4,8(r2)
 10086fc:	100426c0 	call	100426c <strlen>
 1008700:	e0bffc15 	stw	r2,-16(fp)
    
    if (next->name[len-1] == '/')
 1008704:	e0bffd17 	ldw	r2,-12(fp)
 1008708:	10c00217 	ldw	r3,8(r2)
 100870c:	e0bffc17 	ldw	r2,-16(fp)
 1008710:	1885883a 	add	r2,r3,r2
 1008714:	10bfffc4 	addi	r2,r2,-1
 1008718:	10800003 	ldbu	r2,0(r2)
 100871c:	10803fcc 	andi	r2,r2,255
 1008720:	1080201c 	xori	r2,r2,128
 1008724:	10bfe004 	addi	r2,r2,-128
 1008728:	10800bd8 	cmpnei	r2,r2,47
 100872c:	1000031e 	bne	r2,zero,100873c <alt_find_file+0x70>
    {
      len -= 1;
 1008730:	e0bffc17 	ldw	r2,-16(fp)
 1008734:	10bfffc4 	addi	r2,r2,-1
 1008738:	e0bffc15 	stw	r2,-16(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 100873c:	e0bffc17 	ldw	r2,-16(fp)
 1008740:	1007883a 	mov	r3,r2
 1008744:	e0bffe17 	ldw	r2,-8(fp)
 1008748:	1885883a 	add	r2,r3,r2
 100874c:	10800003 	ldbu	r2,0(r2)
 1008750:	10803fcc 	andi	r2,r2,255
 1008754:	1080201c 	xori	r2,r2,128
 1008758:	10bfe004 	addi	r2,r2,-128
 100875c:	10800be0 	cmpeqi	r2,r2,47
 1008760:	10000a1e 	bne	r2,zero,100878c <alt_find_file+0xc0>
 1008764:	e0bffc17 	ldw	r2,-16(fp)
 1008768:	1007883a 	mov	r3,r2
 100876c:	e0bffe17 	ldw	r2,-8(fp)
 1008770:	1885883a 	add	r2,r3,r2
 1008774:	10800003 	ldbu	r2,0(r2)
 1008778:	10803fcc 	andi	r2,r2,255
 100877c:	1080201c 	xori	r2,r2,128
 1008780:	10bfe004 	addi	r2,r2,-128
 1008784:	1004c03a 	cmpne	r2,r2,zero
 1008788:	10000a1e 	bne	r2,zero,10087b4 <alt_find_file+0xe8>
 100878c:	e0bffd17 	ldw	r2,-12(fp)
 1008790:	11000217 	ldw	r4,8(r2)
 1008794:	e1bffc17 	ldw	r6,-16(fp)
 1008798:	e17ffe17 	ldw	r5,-8(fp)
 100879c:	1008e500 	call	1008e50 <memcmp>
 10087a0:	1004c03a 	cmpne	r2,r2,zero
 10087a4:	1000031e 	bne	r2,zero,10087b4 <alt_find_file+0xe8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 10087a8:	e0bffd17 	ldw	r2,-12(fp)
 10087ac:	e0bfff15 	stw	r2,-4(fp)
 10087b0:	00000806 	br	10087d4 <alt_find_file+0x108>
    }
    next = (alt_dev*) next->llist.next;
 10087b4:	e0bffd17 	ldw	r2,-12(fp)
 10087b8:	10800017 	ldw	r2,0(r2)
 10087bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 10087c0:	00c04074 	movhi	r3,257
 10087c4:	18d70c04 	addi	r3,r3,23600
 10087c8:	e0bffd17 	ldw	r2,-12(fp)
 10087cc:	10ffc91e 	bne	r2,r3,10086f4 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 10087d0:	e03fff15 	stw	zero,-4(fp)
 10087d4:	e0bfff17 	ldw	r2,-4(fp)
}
 10087d8:	e037883a 	mov	sp,fp
 10087dc:	dfc00117 	ldw	ra,4(sp)
 10087e0:	df000017 	ldw	fp,0(sp)
 10087e4:	dec00204 	addi	sp,sp,8
 10087e8:	f800283a 	ret

010087ec <alt_fs_reg>:
 * A return value of zero indicates success. A negative return value indicates
 * failure. 
 */
 
int alt_fs_reg (alt_dev* dev)
{
 10087ec:	defffb04 	addi	sp,sp,-20
 10087f0:	df000415 	stw	fp,16(sp)
 10087f4:	df000404 	addi	fp,sp,16
 10087f8:	e13ffe15 	stw	r4,-8(fp)
  /*
   * check that the device has a name.
   */

  if (!dev->name)
 10087fc:	e0bffe17 	ldw	r2,-8(fp)
 1008800:	10800217 	ldw	r2,8(r2)
 1008804:	1004c03a 	cmpne	r2,r2,zero
 1008808:	1000031e 	bne	r2,zero,1008818 <alt_fs_reg+0x2c>
  {
    return -ENODEV;
 100880c:	00bffb44 	movi	r2,-19
 1008810:	e0bfff15 	stw	r2,-4(fp)
 1008814:	00001406 	br	1008868 <alt_fs_reg+0x7c>
  
  /*
   * register the file system.
   */

  alt_llist_insert(&alt_fs_list, &dev->llist);
 1008818:	e0fffe17 	ldw	r3,-8(fp)
 100881c:	00804074 	movhi	r2,257
 1008820:	10970c04 	addi	r2,r2,23600
 1008824:	e0bffc15 	stw	r2,-16(fp)
 1008828:	e0fffd15 	stw	r3,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 100882c:	e0fffd17 	ldw	r3,-12(fp)
 1008830:	e0bffc17 	ldw	r2,-16(fp)
 1008834:	18800115 	stw	r2,4(r3)
  entry->next     = list->next;
 1008838:	e0bffc17 	ldw	r2,-16(fp)
 100883c:	10c00017 	ldw	r3,0(r2)
 1008840:	e0bffd17 	ldw	r2,-12(fp)
 1008844:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 1008848:	e0bffc17 	ldw	r2,-16(fp)
 100884c:	10c00017 	ldw	r3,0(r2)
 1008850:	e0bffd17 	ldw	r2,-12(fp)
 1008854:	18800115 	stw	r2,4(r3)
  list->next           = entry;
 1008858:	e0fffc17 	ldw	r3,-16(fp)
 100885c:	e0bffd17 	ldw	r2,-12(fp)
 1008860:	18800015 	stw	r2,0(r3)

  return 0;
 1008864:	e03fff15 	stw	zero,-4(fp)
 1008868:	e0bfff17 	ldw	r2,-4(fp)
} 
 100886c:	e037883a 	mov	sp,fp
 1008870:	df000017 	ldw	fp,0(sp)
 1008874:	dec00104 	addi	sp,sp,4
 1008878:	f800283a 	ret

0100887c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 100887c:	defffa04 	addi	sp,sp,-24
 1008880:	dfc00515 	stw	ra,20(sp)
 1008884:	df000415 	stw	fp,16(sp)
 1008888:	dc000315 	stw	r16,12(sp)
 100888c:	df000304 	addi	fp,sp,12
 1008890:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 1008894:	00bffa04 	movi	r2,-24
 1008898:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 100889c:	e03ffe15 	stw	zero,-8(fp)
 10088a0:	00002006 	br	1008924 <alt_get_fd+0xa8>
  {
    if (!alt_fd_list[i].dev)
 10088a4:	e13ffe17 	ldw	r4,-8(fp)
 10088a8:	04004074 	movhi	r16,257
 10088ac:	84127004 	addi	r16,r16,18880
 10088b0:	01400304 	movi	r5,12
 10088b4:	100154c0 	call	100154c <__mulsi3>
 10088b8:	1405883a 	add	r2,r2,r16
 10088bc:	10800017 	ldw	r2,0(r2)
 10088c0:	1004c03a 	cmpne	r2,r2,zero
 10088c4:	1000141e 	bne	r2,zero,1008918 <alt_get_fd+0x9c>
    {
      alt_fd_list[i].dev = dev;
 10088c8:	e13ffe17 	ldw	r4,-8(fp)
 10088cc:	04004074 	movhi	r16,257
 10088d0:	84127004 	addi	r16,r16,18880
 10088d4:	01400304 	movi	r5,12
 10088d8:	100154c0 	call	100154c <__mulsi3>
 10088dc:	1407883a 	add	r3,r2,r16
 10088e0:	e0bfff17 	ldw	r2,-4(fp)
 10088e4:	18800015 	stw	r2,0(r3)
      if (i > alt_max_fd)
 10088e8:	00804074 	movhi	r2,257
 10088ec:	10971004 	addi	r2,r2,23616
 10088f0:	10c00017 	ldw	r3,0(r2)
 10088f4:	e0bffe17 	ldw	r2,-8(fp)
 10088f8:	1880040e 	bge	r3,r2,100890c <alt_get_fd+0x90>
      {
        alt_max_fd = i;
 10088fc:	00c04074 	movhi	r3,257
 1008900:	18d71004 	addi	r3,r3,23616
 1008904:	e0bffe17 	ldw	r2,-8(fp)
 1008908:	18800015 	stw	r2,0(r3)
      }
      rc = i;
 100890c:	e0bffe17 	ldw	r2,-8(fp)
 1008910:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 1008914:	00000606 	br	1008930 <alt_get_fd+0xb4>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 1008918:	e0bffe17 	ldw	r2,-8(fp)
 100891c:	10800044 	addi	r2,r2,1
 1008920:	e0bffe15 	stw	r2,-8(fp)
 1008924:	e0bffe17 	ldw	r2,-8(fp)
 1008928:	10800810 	cmplti	r2,r2,32
 100892c:	103fdd1e 	bne	r2,zero,10088a4 <alt_get_fd+0x28>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 1008930:	e0bffd17 	ldw	r2,-12(fp)
}
 1008934:	e037883a 	mov	sp,fp
 1008938:	dfc00217 	ldw	ra,8(sp)
 100893c:	df000117 	ldw	fp,4(sp)
 1008940:	dc000017 	ldw	r16,0(sp)
 1008944:	dec00304 	addi	sp,sp,12
 1008948:	f800283a 	ret

0100894c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 100894c:	deffff04 	addi	sp,sp,-4
 1008950:	df000015 	stw	fp,0(sp)
 1008954:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 1008958:	e037883a 	mov	sp,fp
 100895c:	df000017 	ldw	fp,0(sp)
 1008960:	dec00104 	addi	sp,sp,4
 1008964:	f800283a 	ret

01008968 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 1008968:	defff804 	addi	sp,sp,-32
 100896c:	dfc00715 	stw	ra,28(sp)
 1008970:	df000615 	stw	fp,24(sp)
 1008974:	dc000515 	stw	r16,20(sp)
 1008978:	df000504 	addi	fp,sp,20
 100897c:	e13ffc15 	stw	r4,-16(fp)
 1008980:	e17ffd15 	stw	r5,-12(fp)
 1008984:	e1bffe15 	stw	r6,-8(fp)
 1008988:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 100898c:	e13ffd17 	ldw	r4,-12(fp)
 1008990:	e17ffe17 	ldw	r5,-8(fp)
 1008994:	e1bfff17 	ldw	r6,-4(fp)
 1008998:	10061c40 	call	10061c4 <open>
 100899c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 10089a0:	e0bffb17 	ldw	r2,-20(fp)
 10089a4:	1004803a 	cmplt	r2,r2,zero
 10089a8:	10001f1e 	bne	r2,zero,1008a28 <alt_open_fd+0xc0>
  {
    fd->dev      = alt_fd_list[old].dev;
 10089ac:	e13ffb17 	ldw	r4,-20(fp)
 10089b0:	04004074 	movhi	r16,257
 10089b4:	84127004 	addi	r16,r16,18880
 10089b8:	01400304 	movi	r5,12
 10089bc:	100154c0 	call	100154c <__mulsi3>
 10089c0:	1405883a 	add	r2,r2,r16
 10089c4:	10c00017 	ldw	r3,0(r2)
 10089c8:	e0bffc17 	ldw	r2,-16(fp)
 10089cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 10089d0:	e13ffb17 	ldw	r4,-20(fp)
 10089d4:	04004074 	movhi	r16,257
 10089d8:	84127004 	addi	r16,r16,18880
 10089dc:	01400304 	movi	r5,12
 10089e0:	100154c0 	call	100154c <__mulsi3>
 10089e4:	1405883a 	add	r2,r2,r16
 10089e8:	10800104 	addi	r2,r2,4
 10089ec:	10c00017 	ldw	r3,0(r2)
 10089f0:	e0bffc17 	ldw	r2,-16(fp)
 10089f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 10089f8:	e13ffb17 	ldw	r4,-20(fp)
 10089fc:	04004074 	movhi	r16,257
 1008a00:	84127004 	addi	r16,r16,18880
 1008a04:	01400304 	movi	r5,12
 1008a08:	100154c0 	call	100154c <__mulsi3>
 1008a0c:	1405883a 	add	r2,r2,r16
 1008a10:	10800204 	addi	r2,r2,8
 1008a14:	10c00017 	ldw	r3,0(r2)
 1008a18:	e0bffc17 	ldw	r2,-16(fp)
 1008a1c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 1008a20:	e13ffb17 	ldw	r4,-20(fp)
 1008a24:	10065340 	call	1006534 <alt_release_fd>
  }
} 
 1008a28:	e037883a 	mov	sp,fp
 1008a2c:	dfc00217 	ldw	ra,8(sp)
 1008a30:	df000117 	ldw	fp,4(sp)
 1008a34:	dc000017 	ldw	r16,0(sp)
 1008a38:	dec00304 	addi	sp,sp,12
 1008a3c:	f800283a 	ret

01008a40 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 1008a40:	defffb04 	addi	sp,sp,-20
 1008a44:	dfc00415 	stw	ra,16(sp)
 1008a48:	df000315 	stw	fp,12(sp)
 1008a4c:	df000304 	addi	fp,sp,12
 1008a50:	e13ffd15 	stw	r4,-12(fp)
 1008a54:	e17ffe15 	stw	r5,-8(fp)
 1008a58:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 1008a5c:	01004074 	movhi	r4,257
 1008a60:	21127304 	addi	r4,r4,18892
 1008a64:	e17ffd17 	ldw	r5,-12(fp)
 1008a68:	01800044 	movi	r6,1
 1008a6c:	01c07fc4 	movi	r7,511
 1008a70:	10089680 	call	1008968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 1008a74:	01004074 	movhi	r4,257
 1008a78:	21127004 	addi	r4,r4,18880
 1008a7c:	e17ffe17 	ldw	r5,-8(fp)
 1008a80:	000d883a 	mov	r6,zero
 1008a84:	01c07fc4 	movi	r7,511
 1008a88:	10089680 	call	1008968 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 1008a8c:	01004074 	movhi	r4,257
 1008a90:	21127604 	addi	r4,r4,18904
 1008a94:	e17fff17 	ldw	r5,-4(fp)
 1008a98:	01800044 	movi	r6,1
 1008a9c:	01c07fc4 	movi	r7,511
 1008aa0:	10089680 	call	1008968 <alt_open_fd>
}  
 1008aa4:	e037883a 	mov	sp,fp
 1008aa8:	dfc00117 	ldw	ra,4(sp)
 1008aac:	df000017 	ldw	fp,0(sp)
 1008ab0:	dec00204 	addi	sp,sp,8
 1008ab4:	f800283a 	ret

01008ab8 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 1008ab8:	deffef04 	addi	sp,sp,-68
 1008abc:	df001015 	stw	fp,64(sp)
 1008ac0:	df001004 	addi	fp,sp,64
 1008ac4:	e13ffc15 	stw	r4,-16(fp)
 1008ac8:	e17ffd15 	stw	r5,-12(fp)
 1008acc:	e1bffe15 	stw	r6,-8(fp)
  int rc = -EINVAL;  
 1008ad0:	00bffa84 	movi	r2,-22
 1008ad4:	e0bffb15 	stw	r2,-20(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 1008ad8:	e0bffc17 	ldw	r2,-16(fp)
 1008adc:	10800828 	cmpgeui	r2,r2,32
 1008ae0:	1000601e 	bne	r2,zero,1008c64 <alt_irq_register+0x1ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008ae4:	0005303a 	rdctl	r2,status
 1008ae8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008aec:	e0fff917 	ldw	r3,-28(fp)
 1008af0:	00bfff84 	movi	r2,-2
 1008af4:	1884703a 	and	r2,r3,r2
 1008af8:	1001703a 	wrctl	status,r2
  
  return context;
 1008afc:	e0bff917 	ldw	r2,-28(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 1008b00:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = handler;
 1008b04:	e0bffc17 	ldw	r2,-16(fp)
 1008b08:	00c04074 	movhi	r3,257
 1008b0c:	18de0004 	addi	r3,r3,30720
 1008b10:	100490fa 	slli	r2,r2,3
 1008b14:	10c7883a 	add	r3,r2,r3
 1008b18:	e0bffe17 	ldw	r2,-8(fp)
 1008b1c:	18800015 	stw	r2,0(r3)
    alt_irq[id].context = context;
 1008b20:	e0bffc17 	ldw	r2,-16(fp)
 1008b24:	00c04074 	movhi	r3,257
 1008b28:	18de0004 	addi	r3,r3,30720
 1008b2c:	100490fa 	slli	r2,r2,3
 1008b30:	10c5883a 	add	r2,r2,r3
 1008b34:	10c00104 	addi	r3,r2,4
 1008b38:	e0bffd17 	ldw	r2,-12(fp)
 1008b3c:	18800015 	stw	r2,0(r3)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 1008b40:	e0bffe17 	ldw	r2,-8(fp)
 1008b44:	1005003a 	cmpeq	r2,r2,zero
 1008b48:	1000201e 	bne	r2,zero,1008bcc <alt_irq_register+0x114>
 1008b4c:	e0bffc17 	ldw	r2,-16(fp)
 1008b50:	e0bff715 	stw	r2,-36(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008b54:	0005303a 	rdctl	r2,status
 1008b58:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008b5c:	e0fff617 	ldw	r3,-40(fp)
 1008b60:	00bfff84 	movi	r2,-2
 1008b64:	1884703a 	and	r2,r3,r2
 1008b68:	1001703a 	wrctl	status,r2
  
  return context;
 1008b6c:	e0bff617 	ldw	r2,-40(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1008b70:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 1008b74:	e0fff717 	ldw	r3,-36(fp)
 1008b78:	00800044 	movi	r2,1
 1008b7c:	10c4983a 	sll	r2,r2,r3
 1008b80:	1007883a 	mov	r3,r2
 1008b84:	00804074 	movhi	r2,257
 1008b88:	109df304 	addi	r2,r2,30668
 1008b8c:	10800017 	ldw	r2,0(r2)
 1008b90:	1886b03a 	or	r3,r3,r2
 1008b94:	00804074 	movhi	r2,257
 1008b98:	109df304 	addi	r2,r2,30668
 1008b9c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1008ba0:	00804074 	movhi	r2,257
 1008ba4:	109df304 	addi	r2,r2,30668
 1008ba8:	10800017 	ldw	r2,0(r2)
 1008bac:	100170fa 	wrctl	ienable,r2
 1008bb0:	e0bff817 	ldw	r2,-32(fp)
 1008bb4:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008bb8:	e0bff517 	ldw	r2,-44(fp)
 1008bbc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1008bc0:	0005883a 	mov	r2,zero
 1008bc4:	e0bfff15 	stw	r2,-4(fp)
 1008bc8:	00002006 	br	1008c4c <alt_irq_register+0x194>
 1008bcc:	e0bffc17 	ldw	r2,-16(fp)
 1008bd0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008bd4:	0005303a 	rdctl	r2,status
 1008bd8:	e0bff215 	stw	r2,-56(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008bdc:	e0fff217 	ldw	r3,-56(fp)
 1008be0:	00bfff84 	movi	r2,-2
 1008be4:	1884703a 	and	r2,r3,r2
 1008be8:	1001703a 	wrctl	status,r2
  
  return context;
 1008bec:	e0bff217 	ldw	r2,-56(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 1008bf0:	e0bff415 	stw	r2,-48(fp)

  alt_irq_active &= ~(1 << id);
 1008bf4:	e0fff317 	ldw	r3,-52(fp)
 1008bf8:	00800044 	movi	r2,1
 1008bfc:	10c4983a 	sll	r2,r2,r3
 1008c00:	0084303a 	nor	r2,zero,r2
 1008c04:	1007883a 	mov	r3,r2
 1008c08:	00804074 	movhi	r2,257
 1008c0c:	109df304 	addi	r2,r2,30668
 1008c10:	10800017 	ldw	r2,0(r2)
 1008c14:	1886703a 	and	r3,r3,r2
 1008c18:	00804074 	movhi	r2,257
 1008c1c:	109df304 	addi	r2,r2,30668
 1008c20:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 1008c24:	00804074 	movhi	r2,257
 1008c28:	109df304 	addi	r2,r2,30668
 1008c2c:	10800017 	ldw	r2,0(r2)
 1008c30:	100170fa 	wrctl	ienable,r2
 1008c34:	e0bff417 	ldw	r2,-48(fp)
 1008c38:	e0bff115 	stw	r2,-60(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008c3c:	e0bff117 	ldw	r2,-60(fp)
 1008c40:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 1008c44:	0005883a 	mov	r2,zero
 1008c48:	e0bfff15 	stw	r2,-4(fp)
 1008c4c:	e0bfff17 	ldw	r2,-4(fp)
 1008c50:	e0bffb15 	stw	r2,-20(fp)
 1008c54:	e0bffa17 	ldw	r2,-24(fp)
 1008c58:	e0bff015 	stw	r2,-64(fp)
 1008c5c:	e0bff017 	ldw	r2,-64(fp)
 1008c60:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 1008c64:	e0bffb17 	ldw	r2,-20(fp)
}
 1008c68:	e037883a 	mov	sp,fp
 1008c6c:	df000017 	ldw	fp,0(sp)
 1008c70:	dec00104 	addi	sp,sp,4
 1008c74:	f800283a 	ret

01008c78 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 1008c78:	defffa04 	addi	sp,sp,-24
 1008c7c:	df000515 	stw	fp,20(sp)
 1008c80:	df000504 	addi	fp,sp,20
 1008c84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 1008c88:	0005303a 	rdctl	r2,status
 1008c8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 1008c90:	e0fffd17 	ldw	r3,-12(fp)
 1008c94:	00bfff84 	movi	r2,-2
 1008c98:	1884703a 	and	r2,r3,r2
 1008c9c:	1001703a 	wrctl	status,r2
  
  return context;
 1008ca0:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 1008ca4:	e0bffe15 	stw	r2,-8(fp)
  alt_llist_remove (&alarm->llist);
 1008ca8:	e0bfff17 	ldw	r2,-4(fp)
 1008cac:	e0bffc15 	stw	r2,-16(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 1008cb0:	e0bffc17 	ldw	r2,-16(fp)
 1008cb4:	10c00017 	ldw	r3,0(r2)
 1008cb8:	e0bffc17 	ldw	r2,-16(fp)
 1008cbc:	10800117 	ldw	r2,4(r2)
 1008cc0:	18800115 	stw	r2,4(r3)
  entry->previous->next = entry->next;
 1008cc4:	e0bffc17 	ldw	r2,-16(fp)
 1008cc8:	10c00117 	ldw	r3,4(r2)
 1008ccc:	e0bffc17 	ldw	r2,-16(fp)
 1008cd0:	10800017 	ldw	r2,0(r2)
 1008cd4:	18800015 	stw	r2,0(r3)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 1008cd8:	e0fffc17 	ldw	r3,-16(fp)
 1008cdc:	e0bffc17 	ldw	r2,-16(fp)
 1008ce0:	18800115 	stw	r2,4(r3)
  entry->next     = entry;
 1008ce4:	e0fffc17 	ldw	r3,-16(fp)
 1008ce8:	e0bffc17 	ldw	r2,-16(fp)
 1008cec:	18800015 	stw	r2,0(r3)
 1008cf0:	e0bffe17 	ldw	r2,-8(fp)
 1008cf4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 1008cf8:	e0bffb17 	ldw	r2,-20(fp)
 1008cfc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 1008d00:	e037883a 	mov	sp,fp
 1008d04:	df000017 	ldw	fp,0(sp)
 1008d08:	dec00104 	addi	sp,sp,4
 1008d0c:	f800283a 	ret

01008d10 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 1008d10:	defffb04 	addi	sp,sp,-20
 1008d14:	dfc00415 	stw	ra,16(sp)
 1008d18:	df000315 	stw	fp,12(sp)
 1008d1c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 1008d20:	d0a01e17 	ldw	r2,-32648(gp)
 1008d24:	e0bffe15 	stw	r2,-8(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 1008d28:	d0a6ed17 	ldw	r2,-25676(gp)
 1008d2c:	10800044 	addi	r2,r2,1
 1008d30:	d0a6ed15 	stw	r2,-25676(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1008d34:	00003106 	br	1008dfc <alt_tick+0xec>
  {
    next = (alt_alarm*) alarm->llist.next;
 1008d38:	e0bffe17 	ldw	r2,-8(fp)
 1008d3c:	10800017 	ldw	r2,0(r2)
 1008d40:	e0bfff15 	stw	r2,-4(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 1008d44:	e0bffe17 	ldw	r2,-8(fp)
 1008d48:	10800403 	ldbu	r2,16(r2)
 1008d4c:	10803fcc 	andi	r2,r2,255
 1008d50:	1005003a 	cmpeq	r2,r2,zero
 1008d54:	1000051e 	bne	r2,zero,1008d6c <alt_tick+0x5c>
 1008d58:	d0a6ed17 	ldw	r2,-25676(gp)
 1008d5c:	1004c03a 	cmpne	r2,r2,zero
 1008d60:	1000021e 	bne	r2,zero,1008d6c <alt_tick+0x5c>
    {
      alarm->rollover = 0;
 1008d64:	e0bffe17 	ldw	r2,-8(fp)
 1008d68:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 1008d6c:	e0bffe17 	ldw	r2,-8(fp)
 1008d70:	10c00217 	ldw	r3,8(r2)
 1008d74:	d0a6ed17 	ldw	r2,-25676(gp)
 1008d78:	10c01e36 	bltu	r2,r3,1008df4 <alt_tick+0xe4>
 1008d7c:	e0bffe17 	ldw	r2,-8(fp)
 1008d80:	10800403 	ldbu	r2,16(r2)
 1008d84:	10803fcc 	andi	r2,r2,255
 1008d88:	1004c03a 	cmpne	r2,r2,zero
 1008d8c:	1000191e 	bne	r2,zero,1008df4 <alt_tick+0xe4>
    {
      next_callback = alarm->callback (alarm->context);
 1008d90:	e0bffe17 	ldw	r2,-8(fp)
 1008d94:	10c00317 	ldw	r3,12(r2)
 1008d98:	e0bffe17 	ldw	r2,-8(fp)
 1008d9c:	11000517 	ldw	r4,20(r2)
 1008da0:	183ee83a 	callr	r3
 1008da4:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 1008da8:	e0bffd17 	ldw	r2,-12(fp)
 1008dac:	1004c03a 	cmpne	r2,r2,zero
 1008db0:	1000031e 	bne	r2,zero,1008dc0 <alt_tick+0xb0>
      {
        alt_alarm_stop (alarm);
 1008db4:	e13ffe17 	ldw	r4,-8(fp)
 1008db8:	1008c780 	call	1008c78 <alt_alarm_stop>
 1008dbc:	00000d06 	br	1008df4 <alt_tick+0xe4>
      }
      else
      {
        alarm->time += next_callback;
 1008dc0:	e0bffe17 	ldw	r2,-8(fp)
 1008dc4:	10c00217 	ldw	r3,8(r2)
 1008dc8:	e0bffd17 	ldw	r2,-12(fp)
 1008dcc:	1887883a 	add	r3,r3,r2
 1008dd0:	e0bffe17 	ldw	r2,-8(fp)
 1008dd4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 1008dd8:	e0bffe17 	ldw	r2,-8(fp)
 1008ddc:	10c00217 	ldw	r3,8(r2)
 1008de0:	d0a6ed17 	ldw	r2,-25676(gp)
 1008de4:	1880032e 	bgeu	r3,r2,1008df4 <alt_tick+0xe4>
        {
          alarm->rollover = 1;
 1008de8:	e0fffe17 	ldw	r3,-8(fp)
 1008dec:	00800044 	movi	r2,1
 1008df0:	18800405 	stb	r2,16(r3)
        }
      }
    }
    alarm = next;
 1008df4:	e0bfff17 	ldw	r2,-4(fp)
 1008df8:	e0bffe15 	stw	r2,-8(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 1008dfc:	d0e01e04 	addi	r3,gp,-32648
 1008e00:	e0bffe17 	ldw	r2,-8(fp)
 1008e04:	10ffcc1e 	bne	r2,r3,1008d38 <alt_tick+0x28>
  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
}
 1008e08:	e037883a 	mov	sp,fp
 1008e0c:	dfc00117 	ldw	ra,4(sp)
 1008e10:	df000017 	ldw	fp,0(sp)
 1008e14:	dec00204 	addi	sp,sp,8
 1008e18:	f800283a 	ret

01008e1c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 1008e1c:	deffff04 	addi	sp,sp,-4
 1008e20:	df000015 	stw	fp,0(sp)
 1008e24:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 1008e28:	000170fa 	wrctl	ienable,zero
}
 1008e2c:	e037883a 	mov	sp,fp
 1008e30:	df000017 	ldw	fp,0(sp)
 1008e34:	dec00104 	addi	sp,sp,4
 1008e38:	f800283a 	ret

01008e3c <atexit>:
 1008e3c:	200b883a 	mov	r5,r4
 1008e40:	000d883a 	mov	r6,zero
 1008e44:	0009883a 	mov	r4,zero
 1008e48:	000f883a 	mov	r7,zero
 1008e4c:	1008ec41 	jmpi	1008ec4 <__register_exitproc>

01008e50 <memcmp>:
 1008e50:	00c000c4 	movi	r3,3
 1008e54:	1980032e 	bgeu	r3,r6,1008e64 <memcmp+0x14>
 1008e58:	2144b03a 	or	r2,r4,r5
 1008e5c:	10c4703a 	and	r2,r2,r3
 1008e60:	10000f26 	beq	r2,zero,1008ea0 <memcmp+0x50>
 1008e64:	31ffffc4 	addi	r7,r6,-1
 1008e68:	3000061e 	bne	r6,zero,1008e84 <memcmp+0x34>
 1008e6c:	00000a06 	br	1008e98 <memcmp+0x48>
 1008e70:	39ffffc4 	addi	r7,r7,-1
 1008e74:	00bfffc4 	movi	r2,-1
 1008e78:	21000044 	addi	r4,r4,1
 1008e7c:	29400044 	addi	r5,r5,1
 1008e80:	38800526 	beq	r7,r2,1008e98 <memcmp+0x48>
 1008e84:	20c00003 	ldbu	r3,0(r4)
 1008e88:	28800003 	ldbu	r2,0(r5)
 1008e8c:	18bff826 	beq	r3,r2,1008e70 <memcmp+0x20>
 1008e90:	1885c83a 	sub	r2,r3,r2
 1008e94:	f800283a 	ret
 1008e98:	0005883a 	mov	r2,zero
 1008e9c:	f800283a 	ret
 1008ea0:	180f883a 	mov	r7,r3
 1008ea4:	20c00017 	ldw	r3,0(r4)
 1008ea8:	28800017 	ldw	r2,0(r5)
 1008eac:	18bfed1e 	bne	r3,r2,1008e64 <memcmp+0x14>
 1008eb0:	31bfff04 	addi	r6,r6,-4
 1008eb4:	21000104 	addi	r4,r4,4
 1008eb8:	29400104 	addi	r5,r5,4
 1008ebc:	39bff936 	bltu	r7,r6,1008ea4 <memcmp+0x54>
 1008ec0:	003fe806 	br	1008e64 <memcmp+0x14>

01008ec4 <__register_exitproc>:
 1008ec4:	defffa04 	addi	sp,sp,-24
 1008ec8:	00804074 	movhi	r2,257
 1008ecc:	10970904 	addi	r2,r2,23588
 1008ed0:	dc000015 	stw	r16,0(sp)
 1008ed4:	14000017 	ldw	r16,0(r2)
 1008ed8:	dd000415 	stw	r20,16(sp)
 1008edc:	2829883a 	mov	r20,r5
 1008ee0:	81405217 	ldw	r5,328(r16)
 1008ee4:	dcc00315 	stw	r19,12(sp)
 1008ee8:	dc800215 	stw	r18,8(sp)
 1008eec:	dc400115 	stw	r17,4(sp)
 1008ef0:	dfc00515 	stw	ra,20(sp)
 1008ef4:	2023883a 	mov	r17,r4
 1008ef8:	3027883a 	mov	r19,r6
 1008efc:	3825883a 	mov	r18,r7
 1008f00:	28002526 	beq	r5,zero,1008f98 <__register_exitproc+0xd4>
 1008f04:	29000117 	ldw	r4,4(r5)
 1008f08:	008007c4 	movi	r2,31
 1008f0c:	11002716 	blt	r2,r4,1008fac <__register_exitproc+0xe8>
 1008f10:	8800101e 	bne	r17,zero,1008f54 <__register_exitproc+0x90>
 1008f14:	2105883a 	add	r2,r4,r4
 1008f18:	1085883a 	add	r2,r2,r2
 1008f1c:	20c00044 	addi	r3,r4,1
 1008f20:	1145883a 	add	r2,r2,r5
 1008f24:	0009883a 	mov	r4,zero
 1008f28:	15000215 	stw	r20,8(r2)
 1008f2c:	28c00115 	stw	r3,4(r5)
 1008f30:	2005883a 	mov	r2,r4
 1008f34:	dfc00517 	ldw	ra,20(sp)
 1008f38:	dd000417 	ldw	r20,16(sp)
 1008f3c:	dcc00317 	ldw	r19,12(sp)
 1008f40:	dc800217 	ldw	r18,8(sp)
 1008f44:	dc400117 	ldw	r17,4(sp)
 1008f48:	dc000017 	ldw	r16,0(sp)
 1008f4c:	dec00604 	addi	sp,sp,24
 1008f50:	f800283a 	ret
 1008f54:	29802204 	addi	r6,r5,136
 1008f58:	00800044 	movi	r2,1
 1008f5c:	110e983a 	sll	r7,r2,r4
 1008f60:	30c04017 	ldw	r3,256(r6)
 1008f64:	2105883a 	add	r2,r4,r4
 1008f68:	1085883a 	add	r2,r2,r2
 1008f6c:	1185883a 	add	r2,r2,r6
 1008f70:	19c6b03a 	or	r3,r3,r7
 1008f74:	14802015 	stw	r18,128(r2)
 1008f78:	14c00015 	stw	r19,0(r2)
 1008f7c:	00800084 	movi	r2,2
 1008f80:	30c04015 	stw	r3,256(r6)
 1008f84:	88bfe31e 	bne	r17,r2,1008f14 <__register_exitproc+0x50>
 1008f88:	30804117 	ldw	r2,260(r6)
 1008f8c:	11c4b03a 	or	r2,r2,r7
 1008f90:	30804115 	stw	r2,260(r6)
 1008f94:	003fdf06 	br	1008f14 <__register_exitproc+0x50>
 1008f98:	00804074 	movhi	r2,257
 1008f9c:	109e4004 	addi	r2,r2,30976
 1008fa0:	100b883a 	mov	r5,r2
 1008fa4:	80805215 	stw	r2,328(r16)
 1008fa8:	003fd606 	br	1008f04 <__register_exitproc+0x40>
 1008fac:	00800034 	movhi	r2,0
 1008fb0:	10800004 	addi	r2,r2,0
 1008fb4:	1000021e 	bne	r2,zero,1008fc0 <__register_exitproc+0xfc>
 1008fb8:	013fffc4 	movi	r4,-1
 1008fbc:	003fdc06 	br	1008f30 <__register_exitproc+0x6c>
 1008fc0:	01006404 	movi	r4,400
 1008fc4:	103ee83a 	callr	r2
 1008fc8:	1007883a 	mov	r3,r2
 1008fcc:	103ffa26 	beq	r2,zero,1008fb8 <__register_exitproc+0xf4>
 1008fd0:	80805217 	ldw	r2,328(r16)
 1008fd4:	180b883a 	mov	r5,r3
 1008fd8:	18000115 	stw	zero,4(r3)
 1008fdc:	18800015 	stw	r2,0(r3)
 1008fe0:	80c05215 	stw	r3,328(r16)
 1008fe4:	18006215 	stw	zero,392(r3)
 1008fe8:	18006315 	stw	zero,396(r3)
 1008fec:	0009883a 	mov	r4,zero
 1008ff0:	883fc826 	beq	r17,zero,1008f14 <__register_exitproc+0x50>
 1008ff4:	003fd706 	br	1008f54 <__register_exitproc+0x90>
 1008ff8:	01004360 	cmpeqi	r4,zero,269
